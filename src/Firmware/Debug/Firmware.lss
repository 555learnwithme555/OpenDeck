
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00006156  000061ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e4  0080019a  0080019a  00006284  2**0
                  ALLOC
  3 .noinit       00000004  0080077e  0080077e  00006284  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000062b4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a90  00000000  00000000  000062f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001b41f  00000000  00000000  00006d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a94  00000000  00000000  000221a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009d72  00000000  00000000  00026c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000223c  00000000  00000000  000309ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006b90  00000000  00000000  00032be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fb67  00000000  00000000  00039778  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016b8  00000000  00000000  000492df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__ctors_end>
       4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      28:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__vector_10>
      2c:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__vector_11>
      30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      3c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      44:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      54:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_21>
      58:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      5c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      64:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__vector_25>
      68:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_26>
      6c:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__vector_27>
      70:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      74:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_29>
      78:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      7c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      80:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      84:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      8c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      90:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      94:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      98:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      9c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      ac:	90 11       	cpse	r25, r0
      ae:	aa 11       	cpse	r26, r10
      b0:	aa 11       	cpse	r26, r10
      b2:	aa 11       	cpse	r26, r10
      b4:	aa 11       	cpse	r26, r10
      b6:	aa 11       	cpse	r26, r10
      b8:	aa 11       	cpse	r26, r10
      ba:	aa 11       	cpse	r26, r10
      bc:	aa 11       	cpse	r26, r10
      be:	aa 11       	cpse	r26, r10
      c0:	aa 11       	cpse	r26, r10
      c2:	aa 11       	cpse	r26, r10
      c4:	aa 11       	cpse	r26, r10
      c6:	aa 11       	cpse	r26, r10
      c8:	aa 11       	cpse	r26, r10
      ca:	aa 11       	cpse	r26, r10
      cc:	90 11       	cpse	r25, r0
      ce:	aa 11       	cpse	r26, r10
      d0:	aa 11       	cpse	r26, r10
      d2:	aa 11       	cpse	r26, r10
      d4:	aa 11       	cpse	r26, r10
      d6:	aa 11       	cpse	r26, r10
      d8:	aa 11       	cpse	r26, r10
      da:	aa 11       	cpse	r26, r10
      dc:	aa 11       	cpse	r26, r10
      de:	aa 11       	cpse	r26, r10
      e0:	aa 11       	cpse	r26, r10
      e2:	aa 11       	cpse	r26, r10
      e4:	aa 11       	cpse	r26, r10
      e6:	aa 11       	cpse	r26, r10
      e8:	aa 11       	cpse	r26, r10
      ea:	aa 11       	cpse	r26, r10
      ec:	90 11       	cpse	r25, r0
      ee:	aa 11       	cpse	r26, r10
      f0:	aa 11       	cpse	r26, r10
      f2:	aa 11       	cpse	r26, r10
      f4:	aa 11       	cpse	r26, r10
      f6:	aa 11       	cpse	r26, r10
      f8:	aa 11       	cpse	r26, r10
      fa:	aa 11       	cpse	r26, r10
      fc:	aa 11       	cpse	r26, r10
      fe:	aa 11       	cpse	r26, r10
     100:	aa 11       	cpse	r26, r10
     102:	aa 11       	cpse	r26, r10
     104:	aa 11       	cpse	r26, r10
     106:	aa 11       	cpse	r26, r10
     108:	aa 11       	cpse	r26, r10
     10a:	aa 11       	cpse	r26, r10
     10c:	90 11       	cpse	r25, r0
     10e:	aa 11       	cpse	r26, r10
     110:	aa 11       	cpse	r26, r10
     112:	aa 11       	cpse	r26, r10
     114:	aa 11       	cpse	r26, r10
     116:	aa 11       	cpse	r26, r10
     118:	aa 11       	cpse	r26, r10
     11a:	aa 11       	cpse	r26, r10
     11c:	aa 11       	cpse	r26, r10
     11e:	aa 11       	cpse	r26, r10
     120:	aa 11       	cpse	r26, r10
     122:	aa 11       	cpse	r26, r10
     124:	aa 11       	cpse	r26, r10
     126:	aa 11       	cpse	r26, r10
     128:	aa 11       	cpse	r26, r10
     12a:	aa 11       	cpse	r26, r10
     12c:	84 11       	cpse	r24, r4
     12e:	aa 11       	cpse	r26, r10
     130:	aa 11       	cpse	r26, r10
     132:	aa 11       	cpse	r26, r10
     134:	aa 11       	cpse	r26, r10
     136:	aa 11       	cpse	r26, r10
     138:	aa 11       	cpse	r26, r10
     13a:	aa 11       	cpse	r26, r10
     13c:	aa 11       	cpse	r26, r10
     13e:	aa 11       	cpse	r26, r10
     140:	aa 11       	cpse	r26, r10
     142:	aa 11       	cpse	r26, r10
     144:	aa 11       	cpse	r26, r10
     146:	aa 11       	cpse	r26, r10
     148:	aa 11       	cpse	r26, r10
     14a:	aa 11       	cpse	r26, r10
     14c:	84 11       	cpse	r24, r4
     14e:	aa 11       	cpse	r26, r10
     150:	aa 11       	cpse	r26, r10
     152:	aa 11       	cpse	r26, r10
     154:	aa 11       	cpse	r26, r10
     156:	aa 11       	cpse	r26, r10
     158:	aa 11       	cpse	r26, r10
     15a:	aa 11       	cpse	r26, r10
     15c:	aa 11       	cpse	r26, r10
     15e:	aa 11       	cpse	r26, r10
     160:	aa 11       	cpse	r26, r10
     162:	aa 11       	cpse	r26, r10
     164:	aa 11       	cpse	r26, r10
     166:	aa 11       	cpse	r26, r10
     168:	aa 11       	cpse	r26, r10
     16a:	aa 11       	cpse	r26, r10
     16c:	90 11       	cpse	r25, r0
     16e:	aa 11       	cpse	r26, r10
     170:	aa 11       	cpse	r26, r10
     172:	aa 11       	cpse	r26, r10
     174:	aa 11       	cpse	r26, r10
     176:	aa 11       	cpse	r26, r10
     178:	aa 11       	cpse	r26, r10
     17a:	aa 11       	cpse	r26, r10
     17c:	aa 11       	cpse	r26, r10
     17e:	aa 11       	cpse	r26, r10
     180:	aa 11       	cpse	r26, r10
     182:	aa 11       	cpse	r26, r10
     184:	aa 11       	cpse	r26, r10
     186:	aa 11       	cpse	r26, r10
     188:	aa 11       	cpse	r26, r10
     18a:	aa 11       	cpse	r26, r10
     18c:	9c 11       	cpse	r25, r12
     18e:	84 11       	cpse	r24, r4
     190:	90 11       	cpse	r25, r0
     192:	84 11       	cpse	r24, r4
     194:	aa 11       	cpse	r26, r10
     196:	aa 11       	cpse	r26, r10
     198:	75 11       	cpse	r23, r5
     19a:	aa 11       	cpse	r26, r10
     19c:	75 11       	cpse	r23, r5
     19e:	aa 11       	cpse	r26, r10
     1a0:	75 11       	cpse	r23, r5
     1a2:	75 11       	cpse	r23, r5
     1a4:	75 11       	cpse	r23, r5
     1a6:	aa 11       	cpse	r26, r10
     1a8:	75 11       	cpse	r23, r5
     1aa:	75 11       	cpse	r23, r5
     1ac:	18 1a       	sub	r1, r24
     1ae:	41 1a       	sub	r4, r17
     1b0:	35 1b       	sub	r19, r21
     1b2:	41 1a       	sub	r4, r17
     1b4:	35 1b       	sub	r19, r21
     1b6:	82 1a       	sub	r8, r18
     1b8:	a6 1a       	sub	r10, r22
     1ba:	35 1b       	sub	r19, r21
     1bc:	00 1b       	sub	r16, r16
     1be:	11 1b       	sub	r17, r17
     1c0:	78 28       	or	r7, r8
     1c2:	81 28       	or	r8, r1
     1c4:	8a 28       	or	r8, r10
     1c6:	93 28       	or	r9, r3
     1c8:	9c 28       	or	r9, r12
     1ca:	a5 28       	or	r10, r5
     1cc:	ae 28       	or	r10, r14
     1ce:	b7 28       	or	r11, r7
     1d0:	c0 28       	or	r12, r0
     1d2:	c9 28       	or	r12, r9
     1d4:	d2 28       	or	r13, r2
     1d6:	db 28       	or	r13, r11
     1d8:	e4 28       	or	r14, r4
     1da:	ed 28       	or	r14, r13
     1dc:	f6 28       	or	r15, r6

000001de <ProductString>:
     1de:	12 03 4f 00 70 00 65 00 6e 00 44 00 65 00 63 00     ..O.p.e.n.D.e.c.
     1ee:	6b 00 00 00                                         k...

000001f2 <ManufacturerString>:
     1f2:	22 03 53 00 68 00 61 00 6e 00 74 00 65 00 61 00     ".S.h.a.n.t.e.a.
     202:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
     212:	73 00 00 00                                         s...

00000216 <LanguageString>:
     216:	04 03 09 04                                         ....

0000021a <ConfigurationDescriptor>:
     21a:	09 02 65 00 02 01 00 c0 fa 09 04 00 00 00 01 01     ..e.............
     22a:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
     23a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
     24a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
     25a:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
     26a:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
     27a:	05 25 01 01 03                                      .%...

0000027f <DeviceDescriptor>:
     27f:	12 01 00 02 00 00 00 08 09 12 72 84 01 00 01 02     ..........r.....
     28f:	00 01 00                                            ...

00000292 <__ctors_start>:
     292:	e4 13       	cpse	r30, r20
     294:	03 30       	cpi	r16, 0x03	; 3

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	da e0       	ldi	r29, 0x0A	; 10
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61

000002a2 <_Z21Bootloader_Jump_Checkv>:
#define BOOTLOADER_START_ADDRESS  0x7000

void Bootloader_Jump_Check(void)    {

    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))  {
     2a2:	04 b6       	in	r0, 0x34	; 52
     2a4:	03 fe       	sbrs	r0, 3
     2a6:	18 c0       	rjmp	.+48     	; 0x2d8 <__do_copy_data>
     2a8:	80 91 7e 07 	lds	r24, 0x077E
     2ac:	90 91 7f 07 	lds	r25, 0x077F
     2b0:	a0 91 80 07 	lds	r26, 0x0780
     2b4:	b0 91 81 07 	lds	r27, 0x0781
     2b8:	8a 3c       	cpi	r24, 0xCA	; 202
     2ba:	9c 4a       	sbci	r25, 0xAC	; 172
     2bc:	a2 44       	sbci	r26, 0x42	; 66
     2be:	bc 4d       	sbci	r27, 0xDC	; 220
     2c0:	59 f4       	brne	.+22     	; 0x2d8 <__do_copy_data>
        Boot_Key = 0;
     2c2:	10 92 7e 07 	sts	0x077E, r1
     2c6:	10 92 7f 07 	sts	0x077F, r1
     2ca:	10 92 80 07 	sts	0x0780, r1
     2ce:	10 92 81 07 	sts	0x0781, r1
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     2d2:	e0 e0       	ldi	r30, 0x00	; 0
     2d4:	f0 e7       	ldi	r31, 0x70	; 112
     2d6:	09 95       	icall

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e6 e5       	ldi	r30, 0x56	; 86
     2e0:	f1 e6       	ldi	r31, 0x61	; 97
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x10>
     2e4:	05 90       	lpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	aa 39       	cpi	r26, 0x9A	; 154
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0xc>

000002ee <__do_clear_bss>:
     2ee:	27 e0       	ldi	r18, 0x07	; 7
     2f0:	aa e9       	ldi	r26, 0x9A	; 154
     2f2:	b1 e0       	ldi	r27, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	ae 37       	cpi	r26, 0x7E	; 126
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	cb e4       	ldi	r28, 0x4B	; 75
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 3e 30 	call	0x607c	; 0x607c <__tablejump2__>
     30e:	c9 34       	cpi	r28, 0x49	; 73
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 8e 2c 	call	0x591c	; 0x591c <main>
     318:	0c 94 a9 30 	jmp	0x6152	; 0x6152 <_exit>

0000031c <__bad_interrupt>:
     31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000320 <_ZN13Configuration11clearEEPROMEv>:
    clearEEPROM();
    writeConfiguration();

}

void Configuration::clearEEPROM()    {
     320:	cf 93       	push	r28
     322:	df 93       	push	r29

    for (int i=0; i<1024; i++) eeprom_update_byte((uint8_t*)i, 0xFF);
     324:	c0 e0       	ldi	r28, 0x00	; 0
     326:	d0 e0       	ldi	r29, 0x00	; 0
     328:	6f ef       	ldi	r22, 0xFF	; 255
     32a:	ce 01       	movw	r24, r28
     32c:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
     330:	21 96       	adiw	r28, 0x01	; 1
     332:	c1 15       	cp	r28, r1
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	d8 07       	cpc	r29, r24
     338:	b9 f7       	brne	.-18     	; 0x328 <_ZN13Configuration11clearEEPROMEv+0x8>

}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <_ZN13Configuration14writeParameterEhhhh>:

bool Configuration::writeParameter(uint8_t blockID, uint8_t sectionID, uint8_t parameterID, uint8_t newValue)    {
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	7c 01       	movw	r14, r24
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     356:	c4 2f       	mov	r28, r20
     358:	d0 e0       	ldi	r29, 0x00	; 0
     35a:	de 01       	movw	r26, r28
     35c:	aa 0f       	add	r26, r26
     35e:	bb 1f       	adc	r27, r27
     360:	c6 2e       	mov	r12, r22
     362:	d1 2c       	mov	r13, r1
     364:	81 e2       	ldi	r24, 0x21	; 33
     366:	68 9f       	mul	r22, r24
     368:	f0 01       	movw	r30, r0
     36a:	11 24       	eor	r1, r1
     36c:	ae 0f       	add	r26, r30
     36e:	bf 1f       	adc	r27, r31
     370:	ae 0d       	add	r26, r14
     372:	bf 1d       	adc	r27, r15
     374:	ee 0d       	add	r30, r14
     376:	ff 1d       	adc	r31, r15
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	4d 91       	ld	r20, X+
     37c:	5c 91       	ld	r21, X
     37e:	14 97       	sbiw	r26, 0x04	; 4
     380:	81 81       	ldd	r24, Z+1	; 0x01
     382:	92 81       	ldd	r25, Z+2	; 0x02
     384:	84 0f       	add	r24, r20
     386:	95 1f       	adc	r25, r21

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     388:	ec 0f       	add	r30, r28
     38a:	fd 1f       	adc	r31, r29

    uint8_t arrayIndex;
    uint8_t arrayValue;
    uint8_t parameterIndex;

    switch(parameterType)   {
     38c:	35 89       	ldd	r19, Z+21	; 0x15
     38e:	33 23       	and	r19, r19
     390:	09 f4       	brne	.+2      	; 0x394 <_ZN13Configuration14writeParameterEhhhh+0x54>
     392:	65 c0       	rjmp	.+202    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     394:	31 30       	cpi	r19, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <_ZN13Configuration14writeParameterEhhhh+0x5a>
     398:	8d c0       	rjmp	.+282    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>

        case BIT_PARAMETER:
        arrayIndex = parameterID/8;
        parameterIndex = parameterID - 8*arrayIndex;
     39a:	32 2f       	mov	r19, r18
     39c:	36 95       	lsr	r19
     39e:	36 95       	lsr	r19
     3a0:	36 95       	lsr	r19
     3a2:	12 2f       	mov	r17, r18
     3a4:	17 70       	andi	r17, 0x07	; 7
        arrayValue = eeprom_read_byte((uint8_t*)startAddress+arrayIndex);
     3a6:	5c 01       	movw	r10, r24
     3a8:	a3 0e       	add	r10, r19
     3aa:	b1 1c       	adc	r11, r1
     3ac:	c5 01       	movw	r24, r10
     3ae:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
        if (newValue == DEFAULT_VALUE)
     3b2:	00 38       	cpi	r16, 0x80	; 128
     3b4:	51 f5       	brne	.+84     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            bitWrite(arrayValue, parameterIndex, (blocks[blockID].defaultValue[sectionID] & 0x01));
     3b6:	91 e2       	ldi	r25, 0x21	; 33
     3b8:	9c 9d       	mul	r25, r12
     3ba:	a0 01       	movw	r20, r0
     3bc:	9d 9d       	mul	r25, r13
     3be:	50 0d       	add	r21, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	e4 0e       	add	r14, r20
     3c4:	f5 1e       	adc	r15, r21
     3c6:	ce 0d       	add	r28, r14
     3c8:	df 1d       	adc	r29, r15
     3ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3cc:	90 ff       	sbrs	r25, 0
     3ce:	0e c0       	rjmp	.+28     	; 0x3ec <_ZN13Configuration14writeParameterEhhhh+0xac>
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <_ZN13Configuration14writeParameterEhhhh+0xa2>
     3da:	44 0f       	add	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	66 1f       	adc	r22, r22
     3e0:	77 1f       	adc	r23, r23
     3e2:	1a 95       	dec	r17
     3e4:	d2 f7       	brpl	.-12     	; 0x3da <_ZN13Configuration14writeParameterEhhhh+0x9a>
     3e6:	c8 2f       	mov	r28, r24
     3e8:	c4 2b       	or	r28, r20
     3ea:	2d c0       	rjmp	.+90     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <_ZN13Configuration14writeParameterEhhhh+0xbe>
     3f6:	44 0f       	add	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	66 1f       	adc	r22, r22
     3fc:	77 1f       	adc	r23, r23
     3fe:	1a 95       	dec	r17
     400:	d2 f7       	brpl	.-12     	; 0x3f6 <_ZN13Configuration14writeParameterEhhhh+0xb6>
     402:	c4 2f       	mov	r28, r20
     404:	c0 95       	com	r28
     406:	c8 23       	and	r28, r24
     408:	1e c0       	rjmp	.+60     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
        else bitWrite(arrayValue, parameterIndex, newValue);
     40a:	00 23       	and	r16, r16
     40c:	71 f0       	breq	.+28     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	66 1f       	adc	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	1a 95       	dec	r17
     422:	d2 f7       	brpl	.-12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     424:	c8 2f       	mov	r28, r24
     426:	c4 2b       	or	r28, r20
     428:	0e c0       	rjmp	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	66 1f       	adc	r22, r22
     43a:	77 1f       	adc	r23, r23
     43c:	1a 95       	dec	r17
     43e:	d2 f7       	brpl	.-12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     440:	c4 2f       	mov	r28, r20
     442:	c0 95       	com	r28
     444:	c8 23       	and	r28, r24
        eeprom_update_byte((uint8_t*)startAddress+arrayIndex, arrayValue);
     446:	6c 2f       	mov	r22, r28
     448:	c5 01       	movw	r24, r10
     44a:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
        return (arrayValue == eeprom_read_byte((uint8_t*)startAddress+arrayIndex));
     44e:	c5 01       	movw	r24, r10
     450:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	8c 17       	cp	r24, r28
     458:	71 f1       	breq	.+92     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	2c c0       	rjmp	.+88     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
        break;

        case BYTE_PARAMETER:
        if (newValue == DEFAULT_VALUE)    {
     45e:	00 38       	cpi	r16, 0x80	; 128
     460:	d1 f4       	brne	.+52     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>

            eeprom_update_byte((uint8_t*)startAddress+parameterID, blocks[blockID].defaultValue[sectionID]);
     462:	5c 01       	movw	r10, r24
     464:	a2 0e       	add	r10, r18
     466:	b1 1c       	adc	r11, r1
     468:	81 e2       	ldi	r24, 0x21	; 33
     46a:	8c 9d       	mul	r24, r12
     46c:	a0 01       	movw	r20, r0
     46e:	8d 9d       	mul	r24, r13
     470:	50 0d       	add	r21, r0
     472:	11 24       	eor	r1, r1
     474:	e4 0e       	add	r14, r20
     476:	f5 1e       	adc	r15, r21
     478:	ce 0d       	add	r28, r14
     47a:	df 1d       	adc	r29, r15
     47c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     47e:	c5 01       	movw	r24, r10
     480:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
            return (blocks[blockID].defaultValue[sectionID] == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     484:	cb 8d       	ldd	r28, Y+27	; 0x1b
     486:	c5 01       	movw	r24, r10
     488:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	c8 17       	cp	r28, r24
     490:	91 f0       	breq	.+36     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	10 c0       	rjmp	.+32     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>

        }   else {

            eeprom_update_byte((uint8_t*)startAddress+parameterID, newValue);
     496:	ec 01       	movw	r28, r24
     498:	c2 0f       	add	r28, r18
     49a:	d1 1d       	adc	r29, r1
     49c:	60 2f       	mov	r22, r16
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
            return (newValue == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	80 17       	cp	r24, r16
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>

        }
        break;

    }   return 0;
     4b4:	90 e0       	ldi	r25, 0x00	; 0

}
     4b6:	89 2f       	mov	r24, r25
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	08 95       	ret

000004ce <_ZN13Configuration22createSectionAddressesEv>:

void Configuration::createSectionAddresses()   {
     4ce:	2f 92       	push	r2
     4d0:	3f 92       	push	r3
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <_ZN13Configuration22createSectionAddressesEv+0x26>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <_ZN13Configuration22createSectionAddressesEv+0x28>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <_ZN13Configuration22createSectionAddressesEv+0x2a>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	7c 01       	movw	r14, r24
     4fe:	4c 01       	movw	r8, r24
     500:	24 e1       	ldi	r18, 0x14	; 20
     502:	82 0e       	add	r8, r18
     504:	91 1c       	adc	r9, r1

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	10 e0       	ldi	r17, 0x00	; 0

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     50a:	61 2c       	mov	r6, r1
     50c:	51 2c       	mov	r5, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     50e:	aa 24       	eor	r10, r10
     510:	a3 94       	inc	r10
     512:	71 2c       	mov	r7, r1
     514:	46 2c       	mov	r4, r6
     516:	35 2c       	mov	r3, r5

        }

        uint8_t lastSection = blocks[i].sections-1;

        switch(blocks[i].subsectionType[lastSection]) {
     518:	0f 2e       	mov	r0, r31
     51a:	f1 e2       	ldi	r31, 0x21	; 33
     51c:	bf 2e       	mov	r11, r31
     51e:	f0 2d       	mov	r31, r0
     520:	6c 01       	movw	r12, r24
     522:	c0 c0       	rjmp	.+384    	; 0x6a4 <_ZN13Configuration22createSectionAddressesEv+0x1d6>

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     524:	86 2d       	mov	r24, r6
     526:	95 2d       	mov	r25, r5
     528:	9c 82       	std	Y+4, r9	; 0x04
     52a:	8b 82       	std	Y+3, r8	; 0x03
     52c:	fe 82       	std	Y+6, r15	; 0x06
     52e:	ed 82       	std	Y+5, r14	; 0x05
     530:	db 01       	movw	r26, r22

            if (!j) {
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	29 f4       	brne	.+10     	; 0x540 <_ZN13Configuration22createSectionAddressesEv+0x72>

                //first section address is always 0
                blocks[i].subsectionAddress[0] = 0;
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	1c 92       	st	X, r1
     53a:	1e 92       	st	-X, r1
     53c:	13 97       	sbiw	r26, 0x03	; 3
     53e:	36 c0       	rjmp	.+108    	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     540:	2b 81       	ldd	r18, Y+3	; 0x03
     542:	3c 81       	ldd	r19, Y+4	; 0x04

                }   else {

                switch(blocks[i].subsectionType[j-1])   {
     544:	f9 01       	movw	r30, r18
     546:	40 81       	ld	r20, Z
     548:	44 23       	and	r20, r20
     54a:	11 f1       	breq	.+68     	; 0x590 <_ZN13Configuration22createSectionAddressesEv+0xc2>
     54c:	41 30       	cpi	r20, 0x01	; 1
     54e:	71 f5       	brne	.+92     	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     550:	4d 81       	ldd	r20, Y+5	; 0x05
     552:	5e 81       	ldd	r21, Y+6	; 0x06
     554:	b9 01       	movw	r22, r18
     556:	65 50       	subi	r22, 0x05	; 5
     558:	71 09       	sbc	r23, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     55a:	fb 01       	movw	r30, r22
     55c:	60 81       	ld	r22, Z
     55e:	67 70       	andi	r22, 0x07	; 7
     560:	26 2e       	mov	r2, r22
     562:	6a 2d       	mov	r22, r10
     564:	77 2d       	mov	r23, r7
     566:	21 10       	cpse	r2, r1
     568:	02 c0       	rjmp	.+4      	; 0x56e <_ZN13Configuration22createSectionAddressesEv+0xa0>
     56a:	64 2d       	mov	r22, r4
     56c:	73 2d       	mov	r23, r3
     56e:	26 50       	subi	r18, 0x06	; 6
     570:	31 09       	sbc	r19, r1
     572:	f9 01       	movw	r30, r18
     574:	20 81       	ld	r18, Z
     576:	26 95       	lsr	r18
     578:	26 95       	lsr	r18
     57a:	26 95       	lsr	r18
     57c:	62 0f       	add	r22, r18
     57e:	71 1d       	adc	r23, r1
     580:	fa 01       	movw	r30, r20
     582:	21 81       	ldd	r18, Z+1	; 0x01
     584:	32 81       	ldd	r19, Z+2	; 0x02
     586:	26 0f       	add	r18, r22
     588:	37 1f       	adc	r19, r23
     58a:	34 83       	std	Z+4, r19	; 0x04
     58c:	23 83       	std	Z+3, r18	; 0x03
                    break;
     58e:	0e c0       	rjmp	.+28     	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     590:	2b 81       	ldd	r18, Y+3	; 0x03
     592:	3c 81       	ldd	r19, Y+4	; 0x04
     594:	26 50       	subi	r18, 0x06	; 6
     596:	31 09       	sbc	r19, r1

                    case BYTE_PARAMETER:
                    blocks[i].subsectionAddress[j] = blocks[i].sectionParameters[j-1] + blocks[i].subsectionAddress[j-1];
     598:	f9 01       	movw	r30, r18
     59a:	40 81       	ld	r20, Z
     59c:	ed 81       	ldd	r30, Y+5	; 0x05
     59e:	fe 81       	ldd	r31, Y+6	; 0x06
     5a0:	21 81       	ldd	r18, Z+1	; 0x01
     5a2:	32 81       	ldd	r19, Z+2	; 0x02
     5a4:	24 0f       	add	r18, r20
     5a6:	31 1d       	adc	r19, r1
     5a8:	34 83       	std	Z+4, r19	; 0x04
     5aa:	23 83       	std	Z+3, r18	; 0x03

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	4c 91       	ld	r20, X
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	3c 83       	std	Y+4, r19	; 0x04
     5ba:	2b 83       	std	Y+3, r18	; 0x03
     5bc:	ed 81       	ldd	r30, Y+5	; 0x05
     5be:	fe 81       	ldd	r31, Y+6	; 0x06
     5c0:	32 96       	adiw	r30, 0x02	; 2
     5c2:	fe 83       	std	Y+6, r31	; 0x06
     5c4:	ed 83       	std	Y+5, r30	; 0x05
     5c6:	24 2f       	mov	r18, r20
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	0c f4       	brge	.+2      	; 0x5d2 <_ZN13Configuration22createSectionAddressesEv+0x104>
     5d0:	b0 cf       	rjmp	.-160    	; 0x532 <_ZN13Configuration22createSectionAddressesEv+0x64>
     5d2:	bd 01       	movw	r22, r26

            }

        }

        uint8_t lastSection = blocks[i].sections-1;
     5d4:	41 50       	subi	r20, 0x01	; 1

        switch(blocks[i].subsectionType[lastSection]) {
     5d6:	84 2f       	mov	r24, r20
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	b0 9e       	mul	r11, r16
     5dc:	f0 01       	movw	r30, r0
     5de:	b1 9e       	mul	r11, r17
     5e0:	f0 0d       	add	r31, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	ec 0d       	add	r30, r12
     5e6:	fd 1d       	adc	r31, r13
     5e8:	e8 0f       	add	r30, r24
     5ea:	f9 1f       	adc	r31, r25
     5ec:	25 89       	ldd	r18, Z+21	; 0x15
     5ee:	22 23       	and	r18, r18
     5f0:	41 f1       	breq	.+80     	; 0x642 <_ZN13Configuration22createSectionAddressesEv+0x174>
     5f2:	21 30       	cpi	r18, 0x01	; 1
     5f4:	e9 f5       	brne	.+122    	; 0x670 <_ZN13Configuration22createSectionAddressesEv+0x1a2>

            case BIT_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+((blocks[i].sectionParameters[lastSection]%8 != 0)+blocks[i].sectionParameters[lastSection]/8);
     5f6:	b0 9e       	mul	r11, r16
     5f8:	f0 01       	movw	r30, r0
     5fa:	b1 9e       	mul	r11, r17
     5fc:	f0 0d       	add	r31, r0
     5fe:	11 24       	eor	r1, r1
     600:	ec 0d       	add	r30, r12
     602:	fd 1d       	adc	r31, r13
     604:	e8 0f       	add	r30, r24
     606:	f9 1f       	adc	r31, r25
     608:	47 85       	ldd	r20, Z+15	; 0x0f
     60a:	54 2f       	mov	r21, r20
     60c:	57 70       	andi	r21, 0x07	; 7
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 f4       	brne	.+4      	; 0x616 <_ZN13Configuration22createSectionAddressesEv+0x148>
     612:	26 2d       	mov	r18, r6
     614:	35 2d       	mov	r19, r5
     616:	46 95       	lsr	r20
     618:	46 95       	lsr	r20
     61a:	46 95       	lsr	r20
     61c:	24 0f       	add	r18, r20
     61e:	31 1d       	adc	r19, r1
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	b0 9e       	mul	r11, r16
     626:	a0 01       	movw	r20, r0
     628:	b1 9e       	mul	r11, r17
     62a:	50 0d       	add	r21, r0
     62c:	11 24       	eor	r1, r1
     62e:	84 0f       	add	r24, r20
     630:	95 1f       	adc	r25, r21
     632:	f6 01       	movw	r30, r12
     634:	e8 0f       	add	r30, r24
     636:	f9 1f       	adc	r31, r25
     638:	83 81       	ldd	r24, Z+3	; 0x03
     63a:	94 81       	ldd	r25, Z+4	; 0x04
     63c:	28 0f       	add	r18, r24
     63e:	39 1f       	adc	r19, r25
            break;
     640:	19 c0       	rjmp	.+50     	; 0x674 <_ZN13Configuration22createSectionAddressesEv+0x1a6>

            case BYTE_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
     642:	b0 9e       	mul	r11, r16
     644:	90 01       	movw	r18, r0
     646:	b1 9e       	mul	r11, r17
     648:	30 0d       	add	r19, r0
     64a:	11 24       	eor	r1, r1
     64c:	f6 01       	movw	r30, r12
     64e:	e2 0f       	add	r30, r18
     650:	f3 1f       	adc	r31, r19
     652:	e8 0f       	add	r30, r24
     654:	f9 1f       	adc	r31, r25
     656:	47 85       	ldd	r20, Z+15	; 0x0f
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	82 0f       	add	r24, r18
     65e:	93 1f       	adc	r25, r19
     660:	f6 01       	movw	r30, r12
     662:	e8 0f       	add	r30, r24
     664:	f9 1f       	adc	r31, r25
     666:	23 81       	ldd	r18, Z+3	; 0x03
     668:	34 81       	ldd	r19, Z+4	; 0x04
     66a:	24 0f       	add	r18, r20
     66c:	31 1d       	adc	r19, r1
            break;
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN13Configuration22createSectionAddressesEv+0x1a6>

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;
     670:	26 2d       	mov	r18, r6
     672:	35 2d       	mov	r19, r5
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
            break;

        }

        if (i < NUMBER_OF_BLOCKS-1) {
     674:	04 30       	cpi	r16, 0x04	; 4
     676:	11 05       	cpc	r17, r1
     678:	54 f4       	brge	.+20     	; 0x68e <_ZN13Configuration22createSectionAddressesEv+0x1c0>

            blocks[i+1].blockStartAddress = blocks[i].blockStartAddress + memory_usage;
     67a:	db 01       	movw	r26, r22
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	8d 91       	ld	r24, X+
     680:	9c 91       	ld	r25, X
     682:	12 97       	sbiw	r26, 0x02	; 2
     684:	28 0f       	add	r18, r24
     686:	39 1f       	adc	r19, r25
     688:	f4 01       	movw	r30, r8
     68a:	37 87       	std	Z+15, r19	; 0x0f
     68c:	26 87       	std	Z+14, r18	; 0x0e

}

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     68e:	0f 5f       	subi	r16, 0xFF	; 255
     690:	1f 4f       	sbci	r17, 0xFF	; 255
     692:	f1 e2       	ldi	r31, 0x21	; 33
     694:	ef 0e       	add	r14, r31
     696:	f1 1c       	adc	r15, r1
     698:	21 e2       	ldi	r18, 0x21	; 33
     69a:	82 0e       	add	r8, r18
     69c:	91 1c       	adc	r9, r1
     69e:	05 30       	cpi	r16, 0x05	; 5
     6a0:	11 05       	cpc	r17, r1
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <_ZN13Configuration22createSectionAddressesEv+0x1e2>
     6a4:	b7 01       	movw	r22, r14

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     6a6:	d7 01       	movw	r26, r14
     6a8:	4c 91       	ld	r20, X
     6aa:	41 11       	cpse	r20, r1
     6ac:	3b cf       	rjmp	.-394    	; 0x524 <_ZN13Configuration22createSectionAddressesEv+0x56>
     6ae:	92 cf       	rjmp	.-220    	; 0x5d4 <_ZN13Configuration22createSectionAddressesEv+0x106>

        }

    }

}
     6b0:	26 96       	adiw	r28, 0x06	; 6
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	7f 90       	pop	r7
     6d6:	6f 90       	pop	r6
     6d8:	5f 90       	pop	r5
     6da:	4f 90       	pop	r4
     6dc:	3f 90       	pop	r3
     6de:	2f 90       	pop	r2
     6e0:	08 95       	ret

000006e2 <_ZN13Configuration18writeConfigurationEv>:

void Configuration::writeConfiguration()   {
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	2c 97       	sbiw	r28, 0x0c	; 12
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	1c 01       	movw	r2, r24
     718:	98 87       	std	Y+8, r25	; 0x08
     71a:	8f 83       	std	Y+7, r24	; 0x07

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     71c:	1a 86       	std	Y+10, r1	; 0x0a
     71e:	19 86       	std	Y+9, r1	; 0x09

        for (int j=0; j<blocks[i].sections; j++) {
     720:	71 2c       	mov	r7, r1
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     722:	0f 2e       	mov	r0, r31
     724:	f1 e2       	ldi	r31, 0x21	; 33
     726:	6f 2e       	mov	r6, r31
     728:	f0 2d       	mov	r31, r0
     72a:	73 c0       	rjmp	.+230    	; 0x812 <_ZN13Configuration18writeConfigurationEv+0x130>
     72c:	c8 01       	movw	r24, r16
     72e:	99 27       	eor	r25, r25
     730:	fc 01       	movw	r30, r24
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	2d 81       	ldd	r18, Y+5	; 0x05
     738:	3e 81       	ldd	r19, Y+6	; 0x06
     73a:	e2 0f       	add	r30, r18
     73c:	f3 1f       	adc	r31, r19
     73e:	e2 0d       	add	r30, r2
     740:	f3 1d       	adc	r31, r3
     742:	43 81       	ldd	r20, Z+3	; 0x03
     744:	54 81       	ldd	r21, Z+4	; 0x04
     746:	ab 81       	ldd	r26, Y+3	; 0x03
     748:	bc 81       	ldd	r27, Y+4	; 0x04
     74a:	2d 91       	ld	r18, X+
     74c:	3c 91       	ld	r19, X
     74e:	fa 01       	movw	r30, r20
     750:	e2 0f       	add	r30, r18
     752:	f3 1f       	adc	r31, r19
     754:	fc 87       	std	Y+12, r31	; 0x0c
     756:	eb 87       	std	Y+11, r30	; 0x0b

            uint16_t startAddress = getSectionAddress(i, j);
            uint8_t parameterType = getParameterType(i, j);
            uint8_t defaultValue = blocks[i].defaultValue[j];
     758:	d6 01       	movw	r26, r12
     75a:	9d 90       	ld	r9, X+
     75c:	6d 01       	movw	r12, r26
     75e:	fd 01       	movw	r30, r26
     760:	3d 97       	sbiw	r30, 0x0d	; 13
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];
     762:	20 81       	ld	r18, Z

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     764:	f2 01       	movw	r30, r4
     766:	e8 0f       	add	r30, r24
     768:	f9 1f       	adc	r31, r25

            switch(parameterType)   {
     76a:	85 89       	ldd	r24, Z+21	; 0x15
     76c:	88 23       	and	r24, r24
     76e:	79 f0       	breq	.+30     	; 0x78e <_ZN13Configuration18writeConfigurationEv+0xac>
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	c1 f5       	brne	.+112    	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     774:	26 95       	lsr	r18
     776:	26 95       	lsr	r18
     778:	26 95       	lsr	r18
     77a:	eb 84       	ldd	r14, Y+11	; 0x0b
     77c:	fc 84       	ldd	r15, Y+12	; 0x0c
     77e:	bf ef       	ldi	r27, 0xFF	; 255
     780:	eb 1a       	sub	r14, r27
     782:	fb 0a       	sbc	r15, r27
     784:	e2 0e       	add	r14, r18
     786:	f1 1c       	adc	r15, r1
     788:	ab 84       	ldd	r10, Y+11	; 0x0b
     78a:	bc 84       	ldd	r11, Y+12	; 0x0c
     78c:	03 c0       	rjmp	.+6      	; 0x794 <_ZN13Configuration18writeConfigurationEv+0xb2>
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     78e:	21 11       	cpse	r18, r1
     790:	0c c0       	rjmp	.+24     	; 0x7aa <_ZN13Configuration18writeConfigurationEv+0xc8>
     792:	28 c0       	rjmp	.+80     	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     794:	69 2d       	mov	r22, r9
     796:	c5 01       	movw	r24, r10
     798:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
     79c:	ef ef       	ldi	r30, 0xFF	; 255
     79e:	ae 1a       	sub	r10, r30
     7a0:	be 0a       	sbc	r11, r30
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     7a2:	ae 14       	cp	r10, r14
     7a4:	bf 04       	cpc	r11, r15
     7a6:	b1 f7       	brne	.-20     	; 0x794 <_ZN13Configuration18writeConfigurationEv+0xb2>
     7a8:	1d c0       	rjmp	.+58     	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>
     7aa:	eb 84       	ldd	r14, Y+11	; 0x0b
     7ac:	fc 84       	ldd	r15, Y+12	; 0x0c
     7ae:	e2 0e       	add	r14, r18
     7b0:	f1 1c       	adc	r15, r1
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7b2:	ab 84       	ldd	r10, Y+11	; 0x0b
     7b4:	bc 84       	ldd	r11, Y+12	; 0x0c
     7b6:	c8 01       	movw	r24, r16
     7b8:	19 2d       	mov	r17, r9
     7ba:	4c 01       	movw	r8, r24

                    if (defaultValue == AUTO_INCREMENT)
     7bc:	1f 3f       	cpi	r17, 0xFF	; 255
     7be:	39 f4       	brne	.+14     	; 0x7ce <_ZN13Configuration18writeConfigurationEv+0xec>
     7c0:	6a 2d       	mov	r22, r10
     7c2:	3b 85       	ldd	r19, Y+11	; 0x0b
     7c4:	63 1b       	sub	r22, r19
                        eeprom_update_byte((uint8_t*)startAddress+i, i);
     7c6:	c5 01       	movw	r24, r10
     7c8:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <_ZN13Configuration18writeConfigurationEv+0xf4>
                    else eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     7ce:	61 2f       	mov	r22, r17
     7d0:	c5 01       	movw	r24, r10
     7d2:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
     7d6:	6f ef       	ldi	r22, 0xFF	; 255
     7d8:	a6 1a       	sub	r10, r22
     7da:	b6 0a       	sbc	r11, r22
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7dc:	ae 14       	cp	r10, r14
     7de:	bf 04       	cpc	r11, r15
     7e0:	69 f7       	brne	.-38     	; 0x7bc <_ZN13Configuration18writeConfigurationEv+0xda>
     7e2:	84 01       	movw	r16, r8

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        for (int j=0; j<blocks[i].sections; j++) {
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	a9 81       	ldd	r26, Y+1	; 0x01
     7ea:	ba 81       	ldd	r27, Y+2	; 0x02
     7ec:	8c 91       	ld	r24, X
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	08 17       	cp	r16, r24
     7f2:	19 07       	cpc	r17, r25
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <_ZN13Configuration18writeConfigurationEv+0x116>
     7f6:	9a cf       	rjmp	.-204    	; 0x72c <_ZN13Configuration18writeConfigurationEv+0x4a>

}

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     7f8:	e9 85       	ldd	r30, Y+9	; 0x09
     7fa:	fa 85       	ldd	r31, Y+10	; 0x0a
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	fa 87       	std	Y+10, r31	; 0x0a
     800:	e9 87       	std	Y+9, r30	; 0x09
     802:	2f 81       	ldd	r18, Y+7	; 0x07
     804:	38 85       	ldd	r19, Y+8	; 0x08
     806:	2f 5d       	subi	r18, 0xDF	; 223
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	38 87       	std	Y+8, r19	; 0x08
     80c:	2f 83       	std	Y+7, r18	; 0x07
     80e:	35 97       	sbiw	r30, 0x05	; 5
     810:	e9 f0       	breq	.+58     	; 0x84c <_ZN13Configuration18writeConfigurationEv+0x16a>
     812:	6f 81       	ldd	r22, Y+7	; 0x07
     814:	78 85       	ldd	r23, Y+8	; 0x08
     816:	7a 83       	std	Y+2, r23	; 0x02
     818:	69 83       	std	Y+1, r22	; 0x01

        for (int j=0; j<blocks[i].sections; j++) {
     81a:	db 01       	movw	r26, r22
     81c:	8c 91       	ld	r24, X
     81e:	88 23       	and	r24, r24
     820:	59 f3       	breq	.-42     	; 0x7f8 <_ZN13Configuration18writeConfigurationEv+0x116>
     822:	6b 01       	movw	r12, r22
     824:	bb e1       	ldi	r27, 0x1B	; 27
     826:	cb 0e       	add	r12, r27
     828:	d1 1c       	adc	r13, r1
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	17 2d       	mov	r17, r7
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     82e:	e9 85       	ldd	r30, Y+9	; 0x09
     830:	e6 9d       	mul	r30, r6
     832:	50 01       	movw	r10, r0
     834:	11 24       	eor	r1, r1
     836:	21 01       	movw	r4, r2
     838:	4a 0c       	add	r4, r10
     83a:	5b 1c       	adc	r5, r11
     83c:	92 01       	movw	r18, r4
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	3c 83       	std	Y+4, r19	; 0x04
     844:	2b 83       	std	Y+3, r18	; 0x03
     846:	be 82       	std	Y+6, r11	; 0x06
     848:	ad 82       	std	Y+5, r10	; 0x05
     84a:	70 cf       	rjmp	.-288    	; 0x72c <_ZN13Configuration18writeConfigurationEv+0x4a>

        }

    }

    eeprom_update_byte((uint8_t*)ID_LOCATION_0, UNIQUE_ID);
     84c:	6f e2       	ldi	r22, 0x2F	; 47
     84e:	8d ef       	ldi	r24, 0xFD	; 253
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_1, UNIQUE_ID);
     856:	6f e2       	ldi	r22, 0x2F	; 47
     858:	8e ef       	ldi	r24, 0xFE	; 254
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_2, UNIQUE_ID);
     860:	6f e2       	ldi	r22, 0x2F	; 47
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	0e 94 97 30 	call	0x612e	; 0x612e <eeprom_update_byte>

}
     86a:	2c 96       	adiw	r28, 0x0c	; 12
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	3f 90       	pop	r3
     898:	2f 90       	pop	r2
     89a:	08 95       	ret

0000089c <_ZN13Configuration12factoryResetEv>:

    ))  factoryReset();

}

void Configuration::factoryReset()  {
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24

    clearEEPROM();
     8a2:	0e 94 90 01 	call	0x320	; 0x320 <_ZN13Configuration11clearEEPROMEv>
    writeConfiguration();
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN13Configuration18writeConfigurationEv>

}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <_ZN13Configuration4initEv>:

    //def const

}

void Configuration::init() {
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24

    createMemoryLayout();
     8b8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN13Configuration18createMemoryLayoutEv>
    createSectionAddresses();
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN13Configuration22createSectionAddressesEv>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     8c2:	8d ef       	ldi	r24, 0xFD	; 253
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    createMemoryLayout();
    createSectionAddresses();

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(
     8ca:	8f 32       	cpi	r24, 0x2F	; 47
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <_ZN13Configuration4initEv+0x34>

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
     8ce:	8e ef       	ldi	r24, 0xFE	; 254
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     8d6:	8f 32       	cpi	r24, 0x2F	; 47
     8d8:	31 f4       	brne	.+12     	; 0x8e6 <_ZN13Configuration4initEv+0x34>
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_2) == UNIQUE_ID)
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>

    ))  factoryReset();
     8e2:	8f 32       	cpi	r24, 0x2F	; 47
     8e4:	19 f0       	breq	.+6      	; 0x8ec <_ZN13Configuration4initEv+0x3a>
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN13Configuration12factoryResetEv>

}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <_ZN13Configuration18createMemoryLayoutEv>:
#include "Configuration.h"
#include "../hardware/board/Board.h"
#include "../interface/settings/MIDIsettings.h"
#include "../interface/settings/LEDsettings.h"

void Configuration::createMemoryLayout()   {
     8f2:	fc 01       	movw	r30, r24
        defaultValue        any value 0-127 or AUTO_INCREMENT (next value gets increased by 1)
        sectionParameters   number of parameters in section
    */

    {
        blocks[CONF_MIDI_BLOCK].sections = MIDI_SECTIONS;
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	80 83       	st	Z, r24

        blocks[CONF_MIDI_BLOCK].subsectionType[midiFeatureSection] = BIT_PARAMETER;
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	95 8b       	std	Z+21, r25	; 0x15
        blocks[CONF_MIDI_BLOCK].defaultValue[midiFeatureSection] = 0;
     8fc:	13 8e       	std	Z+27, r1	; 0x1b
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiFeatureSection] = MIDI_FEATURES;
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	87 87       	std	Z+15, r24	; 0x0f

        blocks[CONF_MIDI_BLOCK].subsectionType[midiChannelSection] = BYTE_PARAMETER;
     902:	16 8a       	std	Z+22, r1	; 0x16
        blocks[CONF_MIDI_BLOCK].defaultValue[midiChannelSection] = 0x01;
     904:	94 8f       	std	Z+28, r25	; 0x1c
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiChannelSection] = MIDI_CHANNELS;
     906:	34 e0       	ldi	r19, 0x04	; 4
     908:	30 8b       	std	Z+16, r19	; 0x10
    }

    {
        blocks[CONF_BUTTON_BLOCK].sections = BUTTON_SECTIONS;
     90a:	81 a3       	std	Z+33, r24	; 0x21

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonTypeSection] = BIT_PARAMETER;
     90c:	96 ab       	std	Z+54, r25	; 0x36
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonTypeSection] = 0;
     90e:	14 ae       	std	Z+60, r1	; 0x3c
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonTypeSection] = MAX_NUMBER_OF_BUTTONS;
     910:	80 e4       	ldi	r24, 0x40	; 64
     912:	80 ab       	std	Z+48, r24	; 0x30

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonProgramChangeEnabledSection] = BIT_PARAMETER;
     914:	97 ab       	std	Z+55, r25	; 0x37
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonProgramChangeEnabledSection] = 0;
     916:	15 ae       	std	Z+61, r1	; 0x3d
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonProgramChangeEnabledSection] = MAX_NUMBER_OF_BUTTONS;
     918:	81 ab       	std	Z+49, r24	; 0x31

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonMIDIidSection] = BYTE_PARAMETER;
     91a:	10 ae       	std	Z+56, r1	; 0x38
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonMIDIidSection] = AUTO_INCREMENT;
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	26 af       	std	Z+62, r18	; 0x3e
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonMIDIidSection] = MAX_NUMBER_OF_BUTTONS;
     920:	82 ab       	std	Z+50, r24	; 0x32
    }

    {
        blocks[CONF_ENCODER_BLOCK].sections = ENCODER_SECTIONS;
     922:	df 01       	movw	r26, r30
     924:	ae 5b       	subi	r26, 0xBE	; 190
     926:	bf 4f       	sbci	r27, 0xFF	; 255
     928:	3c 93       	st	X, r19

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEnabledSection] = BIT_PARAMETER;
     92a:	55 96       	adiw	r26, 0x15	; 21
     92c:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEnabledSection] = 0;
     92e:	16 96       	adiw	r26, 0x06	; 6
     930:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEnabledSection] = MAX_NUMBER_OF_ENCODERS;
     932:	1c 97       	sbiw	r26, 0x0c	; 12
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderInvertedSection] = BIT_PARAMETER;
     938:	17 96       	adiw	r26, 0x07	; 7
     93a:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderInvertedSection] = 0;
     93c:	16 96       	adiw	r26, 0x06	; 6
     93e:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderInvertedSection] = MAX_NUMBER_OF_ENCODERS;
     940:	1c 97       	sbiw	r26, 0x0c	; 12
     942:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEncodingModeSection] = BYTE_PARAMETER;
     944:	17 96       	adiw	r26, 0x07	; 7
     946:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEncodingModeSection] = enc7Fh01h;
     948:	16 96       	adiw	r26, 0x06	; 6
     94a:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEncodingModeSection] = MAX_NUMBER_OF_ENCODERS;
     94c:	1c 97       	sbiw	r26, 0x0c	; 12
     94e:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderMIDIidSection] = BYTE_PARAMETER;
     950:	17 96       	adiw	r26, 0x07	; 7
     952:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderMIDIidSection] = AUTO_INCREMENT;
     954:	16 96       	adiw	r26, 0x06	; 6
     956:	2c 93       	st	X, r18
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderMIDIidSection] = MAX_NUMBER_OF_ENCODERS;
     958:	1c 97       	sbiw	r26, 0x0c	; 12
     95a:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_ANALOG_BLOCK].sections = ANALOG_SECTIONS;
     95c:	1f 96       	adiw	r26, 0x0f	; 15
     95e:	46 e0       	ldi	r20, 0x06	; 6
     960:	4c 93       	st	X, r20

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogEnabledSection] = BIT_PARAMETER;
     962:	55 96       	adiw	r26, 0x15	; 21
     964:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogEnabledSection] = 0;
     966:	16 96       	adiw	r26, 0x06	; 6
     968:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogEnabledSection] = MAX_NUMBER_OF_ANALOG;
     96a:	1c 97       	sbiw	r26, 0x0c	; 12
     96c:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogInvertedSection] = BIT_PARAMETER;
     96e:	18 96       	adiw	r26, 0x08	; 8
     970:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogInvertedSection] = 0;
     972:	16 96       	adiw	r26, 0x06	; 6
     974:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogInvertedSection] = MAX_NUMBER_OF_ANALOG;
     976:	1c 97       	sbiw	r26, 0x0c	; 12
     978:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogTypeSection] = BYTE_PARAMETER;
     97a:	15 96       	adiw	r26, 0x05	; 5
     97c:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogTypeSection] = 0;
     97e:	16 96       	adiw	r26, 0x06	; 6
     980:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogTypeSection] = MAX_NUMBER_OF_ANALOG;
     982:	1c 97       	sbiw	r26, 0x0c	; 12
     984:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogMIDIidSection] = BYTE_PARAMETER;
     986:	18 96       	adiw	r26, 0x08	; 8
     988:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogMIDIidSection] = AUTO_INCREMENT;
     98a:	16 96       	adiw	r26, 0x06	; 6
     98c:	2c 93       	st	X, r18
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogMIDIidSection] = MAX_NUMBER_OF_ANALOG;
     98e:	1c 97       	sbiw	r26, 0x0c	; 12
     990:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCClowerLimitSection] = BYTE_PARAMETER;
     992:	17 96       	adiw	r26, 0x07	; 7
     994:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCClowerLimitSection] = 0;
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCClowerLimitSection] = MAX_NUMBER_OF_ANALOG;
     99a:	1c 97       	sbiw	r26, 0x0c	; 12
     99c:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCCupperLimitSection] = BYTE_PARAMETER;
     99e:	17 96       	adiw	r26, 0x07	; 7
     9a0:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCCupperLimitSection] = 127;
     9a2:	16 96       	adiw	r26, 0x06	; 6
     9a4:	4f e7       	ldi	r20, 0x7F	; 127
     9a6:	4c 93       	st	X, r20
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCCupperLimitSection] = MAX_NUMBER_OF_ANALOG;
     9a8:	1c 97       	sbiw	r26, 0x0c	; 12
     9aa:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_LED_BLOCK].sections = LED_SECTIONS;
     9ac:	1d 96       	adiw	r26, 0x0d	; 13
     9ae:	3c 93       	st	X, r19

        blocks[CONF_LED_BLOCK].subsectionType[ledHardwareParameterSection] = BYTE_PARAMETER;
     9b0:	55 96       	adiw	r26, 0x15	; 21
     9b2:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledHardwareParameterSection] = 0;
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledHardwareParameterSection] = LED_HARDWARE_PARAMETERS;
     9b8:	1c 97       	sbiw	r26, 0x0c	; 12
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledActivationNoteSection] = BYTE_PARAMETER;
     9be:	17 96       	adiw	r26, 0x07	; 7
     9c0:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledActivationNoteSection] = AUTO_INCREMENT;
     9c2:	16 96       	adiw	r26, 0x06	; 6
     9c4:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledActivationNoteSection] = MAX_NUMBER_OF_LEDS;
     9c6:	1c 97       	sbiw	r26, 0x0c	; 12
     9c8:	80 e3       	ldi	r24, 0x30	; 48
     9ca:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledStartUpNumberSection] = BYTE_PARAMETER;
     9cc:	17 96       	adiw	r26, 0x07	; 7
     9ce:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledStartUpNumberSection] = AUTO_INCREMENT;
     9d0:	16 96       	adiw	r26, 0x06	; 6
     9d2:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledStartUpNumberSection] = MAX_NUMBER_OF_LEDS;
     9d4:	1c 97       	sbiw	r26, 0x0c	; 12
     9d6:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledRGBenabledSection] = BIT_PARAMETER;
     9d8:	17 96       	adiw	r26, 0x07	; 7
     9da:	9c 93       	st	X, r25
        blocks[CONF_LED_BLOCK].defaultValue[ledRGBenabledSection] = 0;
     9dc:	16 96       	adiw	r26, 0x06	; 6
     9de:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledRGBenabledSection] = MAX_NUMBER_OF_LEDS;
     9e0:	ea 56       	subi	r30, 0x6A	; 106
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <_Z8setUpADCv>:
#include "ADC.h"
#include <avr/cpufunc.h>

void setUpADC() {

    ADMUX = 0x00;
     9e8:	10 92 7c 00 	sts	0x007C, r1
    ADCSRA = 0x0;
     9ec:	ea e7       	ldi	r30, 0x7A	; 122
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	10 82       	st	Z, r1

    //default ADC voltage is set to AREF

    //set prescaler to 128 and enable ADC
    ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
     9f2:	80 81       	ld	r24, Z
     9f4:	87 68       	ori	r24, 0x87	; 135
     9f6:	80 83       	st	Z, r24

    //enable high-speed mode if available
    #ifdef ADHSM
        ADCSRB |= (1<<ADHSM);
     9f8:	eb e7       	ldi	r30, 0x7B	; 123
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
     a02:	08 95       	ret

00000a04 <_Z15setADCprescalerh>:
}

void setADCprescaler(uint8_t prescaler) {

    //disable ADC before setting new prescaler
    ADCSRA &= ~(1<<ADEN);
     a04:	ea e7       	ldi	r30, 0x7A	; 122
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	90 81       	ld	r25, Z
     a0a:	9f 77       	andi	r25, 0x7F	; 127
     a0c:	90 83       	st	Z, r25

    switch(prescaler)   {
     a0e:	80 32       	cpi	r24, 0x20	; 32
     a10:	79 f0       	breq	.+30     	; 0xa30 <_Z15setADCprescalerh+0x2c>
     a12:	18 f4       	brcc	.+6      	; 0xa1a <_Z15setADCprescalerh+0x16>
     a14:	80 31       	cpi	r24, 0x10	; 16
     a16:	31 f0       	breq	.+12     	; 0xa24 <_Z15setADCprescalerh+0x20>
     a18:	08 95       	ret
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	79 f0       	breq	.+30     	; 0xa3c <_Z15setADCprescalerh+0x38>
     a1e:	80 38       	cpi	r24, 0x80	; 128
     a20:	99 f0       	breq	.+38     	; 0xa48 <_Z15setADCprescalerh+0x44>
     a22:	08 95       	ret

        case 16:
        ADCSRA |= (1<<ADPS2);
     a24:	ea e7       	ldi	r30, 0x7A	; 122
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	84 60       	ori	r24, 0x04	; 4
     a2c:	80 83       	st	Z, r24
        break;
     a2e:	11 c0       	rjmp	.+34     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 32:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS0);
     a30:	ea e7       	ldi	r30, 0x7A	; 122
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	85 60       	ori	r24, 0x05	; 5
     a38:	80 83       	st	Z, r24
        break;
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 64:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1);
     a3c:	ea e7       	ldi	r30, 0x7A	; 122
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	86 60       	ori	r24, 0x06	; 6
     a44:	80 83       	st	Z, r24
        break;
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 128:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     a48:	ea e7       	ldi	r30, 0x7A	; 122
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	87 60       	ori	r24, 0x07	; 7
     a50:	80 83       	st	Z, r24

        default:
        return;
        break;

    }   ADCSRA |= (1<<ADEN);
     a52:	ea e7       	ldi	r30, 0x7A	; 122
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <_Z13setADCchannelh>:
}

void setADCchannel(uint8_t adcChannel)  {

    //check for valid channel
    if ((adcChannel < 0) || (adcChannel > 7))   return;
     a5e:	88 30       	cpi	r24, 0x08	; 8
     a60:	40 f4       	brcc	.+16     	; 0xa72 <_Z13setADCchannelh+0x14>

    //select ADC channel with safety mask
    ADMUX = (ADMUX & 0xF0) | (adcChannel & 0x0F);
     a62:	ec e7       	ldi	r30, 0x7C	; 124
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	90 81       	ld	r25, Z
     a68:	8f 70       	andi	r24, 0x0F	; 15
     a6a:	90 7f       	andi	r25, 0xF0	; 240
     a6c:	89 2b       	or	r24, r25
     a6e:	80 83       	st	Z, r24

    _NOP();
     a70:	00 00       	nop
     a72:	08 95       	ret

00000a74 <_Z11getADCvaluev>:
}

int16_t getADCvalue()   {

    //single conversion mode
    ADCSRA |= (1<<ADSC);
     a74:	ea e7       	ldi	r30, 0x7A	; 122
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	80 83       	st	Z, r24

    //wait until ADC conversion is complete
    while (ADCSRA & (1<<ADSC));
     a7e:	80 81       	ld	r24, Z
     a80:	86 fd       	sbrc	r24, 6
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_Z11getADCvaluev+0xa>

    return ADC;
     a84:	80 91 78 00 	lds	r24, 0x0078
     a88:	90 91 79 00 	lds	r25, 0x0079

}
     a8c:	08 95       	ret

00000a8e <_Z22disconnectDigitalInADCh>:

void disconnectDigitalInADC(uint8_t adcChannel) {

    if (adcChannel < 6)
     a8e:	86 30       	cpi	r24, 0x06	; 6
     a90:	70 f4       	brcc	.+28     	; 0xaae <_Z22disconnectDigitalInADCh+0x20>
        DIDR0 |= (1<<adcChannel);
     a92:	ee e7       	ldi	r30, 0x7E	; 126
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	40 81       	ld	r20, Z
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	b9 01       	movw	r22, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <_Z22disconnectDigitalInADCh+0x16>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	8a 95       	dec	r24
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <_Z22disconnectDigitalInADCh+0x12>
     aa8:	cb 01       	movw	r24, r22
     aaa:	84 2b       	or	r24, r20
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret

00000ab0 <_Z15disableWatchDogv>:

    bool state;
    state = blinkEnabled;
    return state;

}
     ab0:	84 b7       	in	r24, 0x34	; 52
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	84 bf       	out	0x34, r24	; 52
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	a8 95       	wdr
     abc:	80 91 60 00 	lds	r24, 0x0060
     ac0:	88 61       	ori	r24, 0x18	; 24
     ac2:	80 93 60 00 	sts	0x0060, r24
     ac6:	10 92 60 00 	sts	0x0060, r1
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	08 95       	ret

00000ace <_Z11rTimeMillisv>:
     ace:	2f b7       	in	r18, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	60 91 42 02 	lds	r22, 0x0242
     ad6:	70 91 43 02 	lds	r23, 0x0243
     ada:	80 91 44 02 	lds	r24, 0x0244
     ade:	90 91 45 02 	lds	r25, 0x0245
     ae2:	2f bf       	out	0x3f, r18	; 63
     ae4:	08 95       	ret

00000ae6 <_Z4waitm>:
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
     af6:	c6 0e       	add	r12, r22
     af8:	d7 1e       	adc	r13, r23
     afa:	e8 1e       	adc	r14, r24
     afc:	f9 1e       	adc	r15, r25
     afe:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
     b02:	6c 15       	cp	r22, r12
     b04:	7d 05       	cpc	r23, r13
     b06:	8e 05       	cpc	r24, r14
     b08:	9f 05       	cpc	r25, r15
     b0a:	c8 f3       	brcs	.-14     	; 0xafe <_Z4waitm+0x18>
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <_Z24getInputMatrixBufferSizev>:
     b16:	80 91 77 03 	lds	r24, 0x0377
     b1a:	90 91 76 03 	lds	r25, 0x0376
     b1e:	89 17       	cp	r24, r25
     b20:	10 f0       	brcs	.+4      	; 0xb26 <_Z24getInputMatrixBufferSizev+0x10>
     b22:	89 1b       	sub	r24, r25
     b24:	08 95       	ret
     b26:	8e 5f       	subi	r24, 0xFE	; 254
     b28:	89 1b       	sub	r24, r25
     b2a:	08 95       	ret

00000b2c <_Z21copyInputMatrixBufferv>:
     b2c:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z24getInputMatrixBufferSizev>
     b30:	18 16       	cp	r1, r24
     b32:	dc f5       	brge	.+118    	; 0xbaa <_Z21copyInputMatrixBufferv+0x7e>
     b34:	90 91 77 03 	lds	r25, 0x0377
     b38:	80 91 76 03 	lds	r24, 0x0376
     b3c:	98 17       	cp	r25, r24
     b3e:	b9 f1       	breq	.+110    	; 0xbae <_Z21copyInputMatrixBufferv+0x82>
     b40:	80 91 76 03 	lds	r24, 0x0376
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	08 f0       	brcs	.+2      	; 0xb4c <_Z21copyInputMatrixBufferv+0x20>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	f8 94       	cli
     b4e:	e8 2f       	mov	r30, r24
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	e8 58       	subi	r30, 0x88	; 136
     b60:	fc 4f       	sbci	r31, 0xFC	; 252
     b62:	a0 81       	ld	r26, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	62 81       	ldd	r22, Z+2	; 0x02
     b68:	53 81       	ldd	r21, Z+3	; 0x03
     b6a:	44 81       	ldd	r20, Z+4	; 0x04
     b6c:	35 81       	ldd	r19, Z+5	; 0x05
     b6e:	26 81       	ldd	r18, Z+6	; 0x06
     b70:	97 81       	ldd	r25, Z+7	; 0x07
     b72:	a0 93 88 03 	sts	0x0388, r26
     b76:	70 93 89 03 	sts	0x0389, r23
     b7a:	60 93 8a 03 	sts	0x038A, r22
     b7e:	50 93 8b 03 	sts	0x038B, r21
     b82:	40 93 8c 03 	sts	0x038C, r20
     b86:	30 93 8d 03 	sts	0x038D, r19
     b8a:	20 93 8e 03 	sts	0x038E, r18
     b8e:	90 93 8f 03 	sts	0x038F, r25
     b92:	78 94       	sei
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	90 93 33 03 	sts	0x0333, r25
     b9a:	10 92 35 03 	sts	0x0335, r1
     b9e:	10 92 34 03 	sts	0x0334, r1
     ba2:	80 93 76 03 	sts	0x0376, r24
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret

00000bb2 <__vector_21>:
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <__vector_21+0x48>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	80 91 40 02 	lds	r24, 0x0240
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <__vector_21+0x56>
     c06:	41 c1       	rjmp	.+642    	; 0xe8a <__vector_21+0x2d8>
     c08:	e0 e8       	ldi	r30, 0x80	; 128
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	87 7f       	andi	r24, 0xF7	; 247
     c10:	80 83       	st	Z, r24
     c12:	a2 ec       	ldi	r26, 0xC2	; 194
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	8c 91       	ld	r24, X
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	8c 93       	st	X, r24
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 77       	andi	r24, 0x7F	; 127
     c20:	80 83       	st	Z, r24
     c22:	a0 ec       	ldi	r26, 0xC0	; 192
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	8c 91       	ld	r24, X
     c28:	8f 77       	andi	r24, 0x7F	; 127
     c2a:	8c 93       	st	X, r24
     c2c:	a0 e9       	ldi	r26, 0x90	; 144
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	8c 91       	ld	r24, X
     c32:	8f 77       	andi	r24, 0x7F	; 127
     c34:	8c 93       	st	X, r24
     c36:	80 81       	ld	r24, Z
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	80 83       	st	Z, r24
     c3c:	2f 9a       	sbi	0x05, 7	; 5
     c3e:	5f 9a       	sbi	0x0b, 7	; 11
     c40:	2d 9a       	sbi	0x05, 5	; 5
     c42:	47 9a       	sbi	0x08, 7	; 8
     c44:	46 9a       	sbi	0x08, 6	; 8
     c46:	2e 9a       	sbi	0x05, 6	; 5
     c48:	80 91 90 03 	lds	r24, 0x0390
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__vector_21+0xa2>
     c50:	10 92 90 03 	sts	0x0390, r1
     c54:	80 91 90 03 	lds	r24, 0x0390
     c58:	80 ff       	sbrs	r24, 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <__vector_21+0xae>
     c5c:	29 9a       	sbi	0x05, 1	; 5
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <__vector_21+0xb0>
     c60:	29 98       	cbi	0x05, 1	; 5
     c62:	81 ff       	sbrs	r24, 1
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <__vector_21+0xb8>
     c66:	2a 9a       	sbi	0x05, 2	; 5
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <__vector_21+0xba>
     c6a:	2a 98       	cbi	0x05, 2	; 5
     c6c:	82 ff       	sbrs	r24, 2
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <__vector_21+0xc2>
     c70:	2b 9a       	sbi	0x05, 3	; 5
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <__vector_21+0xc4>
     c74:	2b 98       	cbi	0x05, 3	; 5
     c76:	00 00       	nop
     c78:	80 91 32 03 	lds	r24, 0x0332
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_21+0xd0>
     c80:	34 c2       	rjmp	.+1128   	; 0x10ea <__vector_21+0x538>
     c82:	80 91 cb 02 	lds	r24, 0x02CB
     c86:	90 91 cc 02 	lds	r25, 0x02CC
     c8a:	a0 91 cd 02 	lds	r26, 0x02CD
     c8e:	b0 91 ce 02 	lds	r27, 0x02CE
     c92:	89 2b       	or	r24, r25
     c94:	8a 2b       	or	r24, r26
     c96:	8b 2b       	or	r24, r27
     c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_21+0xea>
     c9a:	27 c2       	rjmp	.+1102   	; 0x10ea <__vector_21+0x538>
     c9c:	30 91 00 01 	lds	r19, 0x0100
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	fc 01       	movw	r30, r24
     ca6:	ef 5f       	subi	r30, 0xFF	; 255
     ca8:	fc 4f       	sbci	r31, 0xFC	; 252
     caa:	20 81       	ld	r18, Z
     cac:	21 ff       	sbrs	r18, 1
     cae:	0f c0       	rjmp	.+30     	; 0xcce <__vector_21+0x11c>
     cb0:	33 23       	and	r19, r19
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <__vector_21+0x110>
     cb4:	fc 01       	movw	r30, r24
     cb6:	ef 5f       	subi	r30, 0xFF	; 255
     cb8:	fc 4f       	sbci	r31, 0xFC	; 252
     cba:	20 81       	ld	r18, Z
     cbc:	28 60       	ori	r18, 0x08	; 8
     cbe:	20 83       	st	Z, r18
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <__vector_21+0x11c>
     cc2:	fc 01       	movw	r30, r24
     cc4:	ef 5f       	subi	r30, 0xFF	; 255
     cc6:	fc 4f       	sbci	r31, 0xFC	; 252
     cc8:	20 81       	ld	r18, Z
     cca:	27 7f       	andi	r18, 0xF7	; 247
     ccc:	20 83       	st	Z, r18
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	80 33       	cpi	r24, 0x30	; 48
     cd2:	91 05       	cpc	r25, r1
     cd4:	39 f7       	brne	.-50     	; 0xca4 <__vector_21+0xf2>
     cd6:	90 91 00 01 	lds	r25, 0x0100
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	89 27       	eor	r24, r25
     cde:	80 93 00 01 	sts	0x0100, r24
     ce2:	03 c2       	rjmp	.+1030   	; 0x10ea <__vector_21+0x538>
     ce4:	80 91 90 03 	lds	r24, 0x0390
     ce8:	86 0f       	add	r24, r22
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	ef 5f       	subi	r30, 0xFF	; 255
     cf0:	fc 4f       	sbci	r31, 0xFC	; 252
     cf2:	e0 81       	ld	r30, Z
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e7 59       	subi	r30, 0x97	; 151
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	f0 81       	ld	r31, Z
     cfc:	e0 91 31 03 	lds	r30, 0x0331
     d00:	e1 11       	cpse	r30, r1
     d02:	30 c2       	rjmp	.+1120   	; 0x1164 <__vector_21+0x5b2>
     d04:	f1 11       	cpse	r31, r1
     d06:	1a c2       	rjmp	.+1076   	; 0x113c <__vector_21+0x58a>
     d08:	33 c0       	rjmp	.+102    	; 0xd70 <__vector_21+0x1be>
     d0a:	f4 01       	movw	r30, r8
     d0c:	11 82       	std	Z+1, r1	; 0x01
     d0e:	10 82       	st	Z, r1
     d10:	8c 91       	ld	r24, X
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	8c 93       	st	X, r24
     d16:	ad c0       	rjmp	.+346    	; 0xe72 <__vector_21+0x2c0>
     d18:	f3 01       	movw	r30, r6
     d1a:	10 82       	st	Z, r1
     d1c:	f1 01       	movw	r30, r2
     d1e:	80 81       	ld	r24, Z
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	80 83       	st	Z, r24
     d24:	a6 c0       	rjmp	.+332    	; 0xe72 <__vector_21+0x2c0>
     d26:	f7 01       	movw	r30, r14
     d28:	11 82       	std	Z+1, r1	; 0x01
     d2a:	10 82       	st	Z, r1
     d2c:	8c 91       	ld	r24, X
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24
     d32:	9f c0       	rjmp	.+318    	; 0xe72 <__vector_21+0x2c0>
     d34:	f6 01       	movw	r30, r12
     d36:	10 82       	st	Z, r1
     d38:	f9 01       	movw	r30, r18
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	80 83       	st	Z, r24
     d40:	98 c0       	rjmp	.+304    	; 0xe72 <__vector_21+0x2c0>
     d42:	f8 01       	movw	r30, r16
     d44:	11 82       	std	Z+1, r1	; 0x01
     d46:	10 82       	st	Z, r1
     d48:	fa 01       	movw	r30, r20
     d4a:	80 81       	ld	r24, Z
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	80 83       	st	Z, r24
     d50:	90 c0       	rjmp	.+288    	; 0xe72 <__vector_21+0x2c0>
     d52:	f5 01       	movw	r30, r10
     d54:	11 82       	std	Z+1, r1	; 0x01
     d56:	10 82       	st	Z, r1
     d58:	8c 91       	ld	r24, X
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8c 93       	st	X, r24
     d5e:	89 c0       	rjmp	.+274    	; 0xe72 <__vector_21+0x2c0>
     d60:	fc 01       	movw	r30, r24
     d62:	e1 53       	subi	r30, 0x31	; 49
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	50 80       	ld	r5, Z
     d68:	ff e3       	ldi	r31, 0x3F	; 63
     d6a:	5f 12       	cpse	r5, r31
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <__vector_21+0x1cc>
     d6e:	06 c2       	rjmp	.+1036   	; 0x117c <__vector_21+0x5ca>
     d70:	fc 01       	movw	r30, r24
     d72:	e1 53       	subi	r30, 0x31	; 49
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	40 80       	ld	r4, Z
     d78:	41 10       	cpse	r4, r1
     d7a:	0f c0       	rjmp	.+30     	; 0xd9a <__vector_21+0x1e8>
     d7c:	7a c0       	rjmp	.+244    	; 0xe72 <__vector_21+0x2c0>
     d7e:	40 90 31 03 	lds	r4, 0x0331
     d82:	e4 2d       	mov	r30, r4
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	e5 0d       	add	r30, r5
     d88:	f1 1d       	adc	r31, r1
     d8a:	57 fc       	sbrc	r5, 7
     d8c:	fa 95       	dec	r31
     d8e:	2f 01       	movw	r4, r30
     d90:	fc 01       	movw	r30, r24
     d92:	e1 53       	subi	r30, 0x31	; 49
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	40 82       	st	Z, r4
     d98:	0c c0       	rjmp	.+24     	; 0xdb2 <__vector_21+0x200>
     d9a:	50 90 31 03 	lds	r5, 0x0331
     d9e:	e4 2d       	mov	r30, r4
     da0:	44 0c       	add	r4, r4
     da2:	ff 0b       	sbc	r31, r31
     da4:	e5 19       	sub	r30, r5
     da6:	f1 09       	sbc	r31, r1
     da8:	2f 01       	movw	r4, r30
     daa:	fc 01       	movw	r30, r24
     dac:	e1 53       	subi	r30, 0x31	; 49
     dae:	fd 4f       	sbci	r31, 0xFD	; 253
     db0:	40 82       	st	Z, r4
     db2:	fc 01       	movw	r30, r24
     db4:	e1 53       	subi	r30, 0x31	; 49
     db6:	fd 4f       	sbci	r31, 0xFD	; 253
     db8:	e0 81       	ld	r30, Z
     dba:	e0 34       	cpi	r30, 0x40	; 64
     dbc:	4c f0       	brlt	.+18     	; 0xdd0 <__vector_21+0x21e>
     dbe:	fc 01       	movw	r30, r24
     dc0:	e1 53       	subi	r30, 0x31	; 49
     dc2:	fd 4f       	sbci	r31, 0xFD	; 253
     dc4:	0f 2e       	mov	r0, r31
     dc6:	ff e3       	ldi	r31, 0x3F	; 63
     dc8:	5f 2e       	mov	r5, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	50 82       	st	Z, r5
     dce:	d6 c1       	rjmp	.+940    	; 0x117c <__vector_21+0x5ca>
     dd0:	ee 23       	and	r30, r30
     dd2:	2c f4       	brge	.+10     	; 0xdde <__vector_21+0x22c>
     dd4:	fc 01       	movw	r30, r24
     dd6:	e1 53       	subi	r30, 0x31	; 49
     dd8:	fd 4f       	sbci	r31, 0xFD	; 253
     dda:	10 82       	st	Z, r1
     ddc:	4a c0       	rjmp	.+148    	; 0xe72 <__vector_21+0x2c0>
     dde:	fc 01       	movw	r30, r24
     de0:	e1 53       	subi	r30, 0x31	; 49
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	e0 81       	ld	r30, Z
     de6:	ee 23       	and	r30, r30
     de8:	09 f4       	brne	.+2      	; 0xdec <__vector_21+0x23a>
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <__vector_21+0x2c0>
     dec:	0e 2e       	mov	r0, r30
     dee:	00 0c       	add	r0, r0
     df0:	ff 0b       	sbc	r31, r31
     df2:	e7 5d       	subi	r30, 0xD7	; 215
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	80 95       	com	r24
     dfa:	72 30       	cpi	r23, 0x02	; 2
     dfc:	d9 f0       	breq	.+54     	; 0xe34 <__vector_21+0x282>
     dfe:	28 f4       	brcc	.+10     	; 0xe0a <__vector_21+0x258>
     e00:	77 23       	and	r23, r23
     e02:	49 f0       	breq	.+18     	; 0xe16 <__vector_21+0x264>
     e04:	71 30       	cpi	r23, 0x01	; 1
     e06:	79 f0       	breq	.+30     	; 0xe26 <__vector_21+0x274>
     e08:	34 c0       	rjmp	.+104    	; 0xe72 <__vector_21+0x2c0>
     e0a:	74 30       	cpi	r23, 0x04	; 4
     e0c:	11 f1       	breq	.+68     	; 0xe52 <__vector_21+0x2a0>
     e0e:	d0 f0       	brcs	.+52     	; 0xe44 <__vector_21+0x292>
     e10:	75 30       	cpi	r23, 0x05	; 5
     e12:	41 f1       	breq	.+80     	; 0xe64 <__vector_21+0x2b2>
     e14:	2e c0       	rjmp	.+92     	; 0xe72 <__vector_21+0x2c0>
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	f4 01       	movw	r30, r8
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
     e1e:	8c 91       	ld	r24, X
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	8c 93       	st	X, r24
     e24:	26 c0       	rjmp	.+76     	; 0xe72 <__vector_21+0x2c0>
     e26:	f3 01       	movw	r30, r6
     e28:	80 83       	st	Z, r24
     e2a:	f1 01       	movw	r30, r2
     e2c:	80 81       	ld	r24, Z
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 83       	st	Z, r24
     e32:	1f c0       	rjmp	.+62     	; 0xe72 <__vector_21+0x2c0>
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	f7 01       	movw	r30, r14
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
     e3c:	8c 91       	ld	r24, X
     e3e:	80 68       	ori	r24, 0x80	; 128
     e40:	8c 93       	st	X, r24
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <__vector_21+0x2c0>
     e44:	f6 01       	movw	r30, r12
     e46:	80 83       	st	Z, r24
     e48:	f9 01       	movw	r30, r18
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	80 83       	st	Z, r24
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <__vector_21+0x2c0>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	f8 01       	movw	r30, r16
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	80 83       	st	Z, r24
     e5a:	fa 01       	movw	r30, r20
     e5c:	80 81       	ld	r24, Z
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	80 83       	st	Z, r24
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <__vector_21+0x2c0>
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	f5 01       	movw	r30, r10
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	8c 91       	ld	r24, X
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	8c 93       	st	X, r24
     e72:	68 5f       	subi	r22, 0xF8	; 248
     e74:	7f 5f       	subi	r23, 0xFF	; 255
     e76:	60 33       	cpi	r22, 0x30	; 48
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_21+0x2ca>
     e7a:	34 cf       	rjmp	.-408    	; 0xce4 <__vector_21+0x132>
     e7c:	80 91 90 03 	lds	r24, 0x0390
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 90 03 	sts	0x0390, r24
     e86:	10 92 40 02 	sts	0x0240, r1
     e8a:	90 91 3f 02 	lds	r25, 0x023F
     e8e:	99 23       	and	r25, r25
     e90:	d1 f0       	breq	.+52     	; 0xec6 <__vector_21+0x314>
     e92:	40 91 42 02 	lds	r20, 0x0242
     e96:	50 91 43 02 	lds	r21, 0x0243
     e9a:	60 91 44 02 	lds	r22, 0x0244
     e9e:	70 91 45 02 	lds	r23, 0x0245
     ea2:	4f 5f       	subi	r20, 0xFF	; 255
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	6f 4f       	sbci	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	40 93 42 02 	sts	0x0242, r20
     eae:	50 93 43 02 	sts	0x0243, r21
     eb2:	60 93 44 02 	sts	0x0244, r22
     eb6:	70 93 45 02 	sts	0x0245, r23
     eba:	80 91 40 02 	lds	r24, 0x0240
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 40 02 	sts	0x0240, r24
     ec4:	33 c0       	rjmp	.+102    	; 0xf2c <__vector_21+0x37a>
     ec6:	80 91 32 03 	lds	r24, 0x0332
     eca:	88 23       	and	r24, r24
     ecc:	79 f1       	breq	.+94     	; 0xf2c <__vector_21+0x37a>
     ece:	40 91 cb 02 	lds	r20, 0x02CB
     ed2:	50 91 cc 02 	lds	r21, 0x02CC
     ed6:	60 91 cd 02 	lds	r22, 0x02CD
     eda:	70 91 ce 02 	lds	r23, 0x02CE
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	6f 4f       	sbci	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	40 93 cb 02 	sts	0x02CB, r20
     eea:	50 93 cc 02 	sts	0x02CC, r21
     eee:	60 93 cd 02 	sts	0x02CD, r22
     ef2:	70 93 ce 02 	sts	0x02CE, r23
     ef6:	00 91 cb 02 	lds	r16, 0x02CB
     efa:	10 91 cc 02 	lds	r17, 0x02CC
     efe:	20 91 cd 02 	lds	r18, 0x02CD
     f02:	30 91 ce 02 	lds	r19, 0x02CE
     f06:	40 91 ff 02 	lds	r20, 0x02FF
     f0a:	50 91 00 03 	lds	r21, 0x0300
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	04 17       	cp	r16, r20
     f14:	15 07       	cpc	r17, r21
     f16:	26 07       	cpc	r18, r22
     f18:	37 07       	cpc	r19, r23
     f1a:	40 f0       	brcs	.+16     	; 0xf2c <__vector_21+0x37a>
     f1c:	10 92 cb 02 	sts	0x02CB, r1
     f20:	10 92 cc 02 	sts	0x02CC, r1
     f24:	10 92 cd 02 	sts	0x02CD, r1
     f28:	10 92 ce 02 	sts	0x02CE, r1
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 27       	eor	r24, r25
     f30:	80 93 3f 02 	sts	0x023F, r24
     f34:	80 91 77 03 	lds	r24, 0x0377
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__vector_21+0x38e>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 91 76 03 	lds	r25, 0x0376
     f44:	89 17       	cp	r24, r25
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_21+0x398>
     f48:	1e c1       	rjmp	.+572    	; 0x1186 <__vector_21+0x5d4>
     f4a:	e8 2f       	mov	r30, r24
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	df 01       	movw	r26, r30
     f50:	aa 0f       	add	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	aa 0f       	add	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	aa 0f       	add	r26, r26
     f5a:	bb 1f       	adc	r27, r27
     f5c:	a8 58       	subi	r26, 0x88	; 136
     f5e:	bc 4f       	sbci	r27, 0xFC	; 252
     f60:	1c 92       	st	X, r1
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	1c 92       	st	X, r1
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	1c 92       	st	X, r1
     f6c:	12 97       	sbiw	r26, 0x02	; 2
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	1c 92       	st	X, r1
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	14 96       	adiw	r26, 0x04	; 4
     f76:	1c 92       	st	X, r1
     f78:	14 97       	sbiw	r26, 0x04	; 4
     f7a:	15 96       	adiw	r26, 0x05	; 5
     f7c:	1c 92       	st	X, r1
     f7e:	15 97       	sbiw	r26, 0x05	; 5
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	1c 92       	st	X, r1
     f84:	16 97       	sbiw	r26, 0x06	; 6
     f86:	17 96       	adiw	r26, 0x07	; 7
     f88:	1c 92       	st	X, r1
     f8a:	17 97       	sbiw	r26, 0x07	; 7
     f8c:	80 93 77 03 	sts	0x0377, r24
     f90:	1a 82       	std	Y+2, r1	; 0x02
     f92:	19 82       	std	Y+1, r1	; 0x01
     f94:	fd 01       	movw	r30, r26
     f96:	68 94       	set
     f98:	cc 24       	eor	r12, r12
     f9a:	c3 f8       	bld	r12, 3
     f9c:	d1 2c       	mov	r13, r1
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	0f 2e       	mov	r0, r31
     fa2:	f1 e9       	ldi	r31, 0x91	; 145
     fa4:	ef 2e       	mov	r14, r31
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	ff 2e       	mov	r15, r31
     faa:	f0 2d       	mov	r31, r0
     fac:	31 2c       	mov	r3, r1
     fae:	81 2c       	mov	r8, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	54 01       	movw	r10, r8
     fb4:	83 94       	inc	r8
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	99 27       	eor	r25, r25
     fbc:	dc 01       	movw	r26, r24
     fbe:	a7 57       	subi	r26, 0x77	; 119
     fc0:	be 4f       	sbci	r27, 0xFE	; 254
     fc2:	2c 91       	ld	r18, X
     fc4:	20 ff       	sbrs	r18, 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <__vector_21+0x41a>
     fc8:	2c 9a       	sbi	0x05, 4	; 5
     fca:	01 c0       	rjmp	.+2      	; 0xfce <__vector_21+0x41c>
     fcc:	2c 98       	cbi	0x05, 4	; 5
     fce:	dc 01       	movw	r26, r24
     fd0:	a7 57       	subi	r26, 0x77	; 119
     fd2:	be 4f       	sbci	r27, 0xFE	; 254
     fd4:	2c 91       	ld	r18, X
     fd6:	21 ff       	sbrs	r18, 1
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__vector_21+0x42c>
     fda:	5e 9a       	sbi	0x0b, 6	; 11
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__vector_21+0x42e>
     fde:	5e 98       	cbi	0x0b, 6	; 11
     fe0:	dc 01       	movw	r26, r24
     fe2:	a7 57       	subi	r26, 0x77	; 119
     fe4:	be 4f       	sbci	r27, 0xFE	; 254
     fe6:	8c 91       	ld	r24, X
     fe8:	82 ff       	sbrs	r24, 2
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <__vector_21+0x43e>
     fec:	5c 9a       	sbi	0x0b, 4	; 11
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <__vector_21+0x440>
     ff0:	5c 98       	cbi	0x0b, 4	; 11
     ff2:	00 00       	nop
     ff4:	20 81       	ld	r18, Z
     ff6:	31 81       	ldd	r19, Z+1	; 0x01
     ff8:	42 81       	ldd	r20, Z+2	; 0x02
     ffa:	53 81       	ldd	r21, Z+3	; 0x03
     ffc:	64 81       	ldd	r22, Z+4	; 0x04
     ffe:	75 81       	ldd	r23, Z+5	; 0x05
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	97 81       	ldd	r25, Z+7	; 0x07
    1004:	08 e0       	ldi	r16, 0x08	; 8
    1006:	0e 94 44 30 	call	0x6088	; 0x6088 <__ashldi3>
    100a:	20 83       	st	Z, r18
    100c:	31 83       	std	Z+1, r19	; 0x01
    100e:	42 83       	std	Z+2, r20	; 0x02
    1010:	53 83       	std	Z+3, r21	; 0x03
    1012:	64 83       	std	Z+4, r22	; 0x04
    1014:	75 83       	std	Z+5, r23	; 0x05
    1016:	86 83       	std	Z+6, r24	; 0x06
    1018:	97 83       	std	Z+7, r25	; 0x07
    101a:	59 98       	cbi	0x0b, 1	; 11
    101c:	00 00       	nop
    101e:	59 9a       	sbi	0x0b, 1	; 11
    1020:	2c 2d       	mov	r18, r12
    1022:	3d 2d       	mov	r19, r13
    1024:	81 2f       	mov	r24, r17
    1026:	99 b1       	in	r25, 0x09	; 9
    1028:	95 fb       	bst	r25, 5
    102a:	99 27       	eor	r25, r25
    102c:	90 f9       	bld	r25, 0
    102e:	88 0f       	add	r24, r24
    1030:	89 2b       	or	r24, r25
    1032:	58 9a       	sbi	0x0b, 0	; 11
    1034:	00 00       	nop
    1036:	58 98       	cbi	0x0b, 0	; 11
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	31 09       	sbc	r19, r1
    103c:	a1 f7       	brne	.-24     	; 0x1026 <__vector_21+0x474>
    103e:	d7 01       	movw	r26, r14
    1040:	61 2f       	mov	r22, r17
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	33 2d       	mov	r19, r3
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	ac 01       	movw	r20, r24
    104a:	0d 90       	ld	r0, X+
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <__vector_21+0x4a0>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <__vector_21+0x49c>
    1056:	40 ff       	sbrs	r20, 0
    1058:	0c c0       	rjmp	.+24     	; 0x1072 <__vector_21+0x4c0>
    105a:	24 01       	movw	r4, r8
    105c:	35 01       	movw	r6, r10
    105e:	02 2e       	mov	r0, r18
    1060:	04 c0       	rjmp	.+8      	; 0x106a <__vector_21+0x4b8>
    1062:	44 0c       	add	r4, r4
    1064:	55 1c       	adc	r5, r5
    1066:	66 1c       	adc	r6, r6
    1068:	77 1c       	adc	r7, r7
    106a:	0a 94       	dec	r0
    106c:	d2 f7       	brpl	.-12     	; 0x1062 <__vector_21+0x4b0>
    106e:	64 29       	or	r22, r4
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__vector_21+0x4da>
    1072:	24 01       	movw	r4, r8
    1074:	35 01       	movw	r6, r10
    1076:	02 2e       	mov	r0, r18
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <__vector_21+0x4d0>
    107a:	44 0c       	add	r4, r4
    107c:	55 1c       	adc	r5, r5
    107e:	66 1c       	adc	r6, r6
    1080:	77 1c       	adc	r7, r7
    1082:	0a 94       	dec	r0
    1084:	d2 f7       	brpl	.-12     	; 0x107a <__vector_21+0x4c8>
    1086:	24 2c       	mov	r2, r4
    1088:	20 94       	com	r2
    108a:	62 21       	and	r22, r2
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	28 30       	cpi	r18, 0x08	; 8
    1092:	31 05       	cpc	r19, r1
    1094:	c9 f6       	brne	.-78     	; 0x1048 <__vector_21+0x496>
    1096:	80 81       	ld	r24, Z
    1098:	a1 81       	ldd	r26, Z+1	; 0x01
    109a:	72 81       	ldd	r23, Z+2	; 0x02
    109c:	53 81       	ldd	r21, Z+3	; 0x03
    109e:	44 81       	ldd	r20, Z+4	; 0x04
    10a0:	35 81       	ldd	r19, Z+5	; 0x05
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	68 2b       	or	r22, r24
    10a8:	60 83       	st	Z, r22
    10aa:	a1 83       	std	Z+1, r26	; 0x01
    10ac:	72 83       	std	Z+2, r23	; 0x02
    10ae:	53 83       	std	Z+3, r21	; 0x03
    10b0:	44 83       	std	Z+4, r20	; 0x04
    10b2:	35 83       	std	Z+5, r19	; 0x05
    10b4:	26 83       	std	Z+6, r18	; 0x06
    10b6:	97 83       	std	Z+7, r25	; 0x07
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	08 97       	sbiw	r24, 0x08	; 8
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_21+0x516>
    10c6:	77 cf       	rjmp	.-274    	; 0xfb6 <__vector_21+0x404>
    10c8:	80 91 ca 02 	lds	r24, 0x02CA
    10cc:	81 11       	cpse	r24, r1
    10ce:	5b c0       	rjmp	.+182    	; 0x1186 <__vector_21+0x5d4>
    10d0:	80 91 7a 00 	lds	r24, 0x007A
    10d4:	86 ff       	sbrs	r24, 6
    10d6:	49 c0       	rjmp	.+146    	; 0x116a <__vector_21+0x5b8>
    10d8:	56 c0       	rjmp	.+172    	; 0x1186 <__vector_21+0x5d4>
    10da:	10 92 46 02 	sts	0x0246, r1
    10de:	ea e7       	ldi	r30, 0x7A	; 122
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 83       	st	Z, r24
    10e8:	4e c0       	rjmp	.+156    	; 0x1186 <__vector_21+0x5d4>
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0f 2e       	mov	r0, r31
    10f0:	f8 e8       	ldi	r31, 0x88	; 136
    10f2:	ef 2e       	mov	r14, r31
    10f4:	f1 2c       	mov	r15, r1
    10f6:	f0 2d       	mov	r31, r0
    10f8:	a0 e8       	ldi	r26, 0x80	; 128
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	08 e9       	ldi	r16, 0x98	; 152
    10fe:	10 e0       	ldi	r17, 0x00	; 0
    1100:	40 e9       	ldi	r20, 0x90	; 144
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0f 2e       	mov	r0, r31
    1106:	ff ec       	ldi	r31, 0xCF	; 207
    1108:	cf 2e       	mov	r12, r31
    110a:	d1 2c       	mov	r13, r1
    110c:	f0 2d       	mov	r31, r0
    110e:	20 ec       	ldi	r18, 0xC0	; 192
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	0f 2e       	mov	r0, r31
    1114:	fa e8       	ldi	r31, 0x8A	; 138
    1116:	af 2e       	mov	r10, r31
    1118:	b1 2c       	mov	r11, r1
    111a:	f0 2d       	mov	r31, r0
    111c:	0f 2e       	mov	r0, r31
    111e:	fc e8       	ldi	r31, 0x8C	; 140
    1120:	8f 2e       	mov	r8, r31
    1122:	91 2c       	mov	r9, r1
    1124:	f0 2d       	mov	r31, r0
    1126:	0f 2e       	mov	r0, r31
    1128:	f2 ed       	ldi	r31, 0xD2	; 210
    112a:	6f 2e       	mov	r6, r31
    112c:	71 2c       	mov	r7, r1
    112e:	f0 2d       	mov	r31, r0
    1130:	0f 2e       	mov	r0, r31
    1132:	f2 ec       	ldi	r31, 0xC2	; 194
    1134:	2f 2e       	mov	r2, r31
    1136:	31 2c       	mov	r3, r1
    1138:	f0 2d       	mov	r31, r0
    113a:	d4 cd       	rjmp	.-1112   	; 0xce4 <__vector_21+0x132>
    113c:	72 30       	cpi	r23, 0x02	; 2
    113e:	09 f4       	brne	.+2      	; 0x1142 <__vector_21+0x590>
    1140:	f2 cd       	rjmp	.-1052   	; 0xd26 <__vector_21+0x174>
    1142:	38 f4       	brcc	.+14     	; 0x1152 <__vector_21+0x5a0>
    1144:	77 23       	and	r23, r23
    1146:	09 f4       	brne	.+2      	; 0x114a <__vector_21+0x598>
    1148:	e0 cd       	rjmp	.-1088   	; 0xd0a <__vector_21+0x158>
    114a:	71 30       	cpi	r23, 0x01	; 1
    114c:	09 f4       	brne	.+2      	; 0x1150 <__vector_21+0x59e>
    114e:	e4 cd       	rjmp	.-1080   	; 0xd18 <__vector_21+0x166>
    1150:	90 ce       	rjmp	.-736    	; 0xe72 <__vector_21+0x2c0>
    1152:	74 30       	cpi	r23, 0x04	; 4
    1154:	09 f4       	brne	.+2      	; 0x1158 <__vector_21+0x5a6>
    1156:	f5 cd       	rjmp	.-1046   	; 0xd42 <__vector_21+0x190>
    1158:	08 f4       	brcc	.+2      	; 0x115c <__vector_21+0x5aa>
    115a:	ec cd       	rjmp	.-1064   	; 0xd34 <__vector_21+0x182>
    115c:	75 30       	cpi	r23, 0x05	; 5
    115e:	09 f4       	brne	.+2      	; 0x1162 <__vector_21+0x5b0>
    1160:	f8 cd       	rjmp	.-1040   	; 0xd52 <__vector_21+0x1a0>
    1162:	87 ce       	rjmp	.-754    	; 0xe72 <__vector_21+0x2c0>
    1164:	f1 11       	cpse	r31, r1
    1166:	fc cd       	rjmp	.-1032   	; 0xd60 <__vector_21+0x1ae>
    1168:	03 ce       	rjmp	.-1018   	; 0xd70 <__vector_21+0x1be>
    116a:	80 91 46 02 	lds	r24, 0x0246
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	09 f4       	brne	.+2      	; 0x1176 <__vector_21+0x5c4>
    1174:	b2 cf       	rjmp	.-156    	; 0x10da <__vector_21+0x528>
    1176:	80 93 46 02 	sts	0x0246, r24
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <__vector_21+0x5d4>
    117c:	fc 01       	movw	r30, r24
    117e:	e1 53       	subi	r30, 0x31	; 49
    1180:	fd 4f       	sbci	r31, 0xFD	; 253
    1182:	e0 81       	ld	r30, Z
    1184:	33 ce       	rjmp	.-922    	; 0xdec <__vector_21+0x23a>
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	3f 90       	pop	r3
    11c4:	2f 90       	pop	r2
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_29>:
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	80 91 c7 02 	lds	r24, 0x02C7
    11ea:	e8 2f       	mov	r30, r24
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	20 91 78 00 	lds	r18, 0x0078
    11f2:	30 91 79 00 	lds	r19, 0x0079
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e9 57       	subi	r30, 0x79	; 121
    11fc:	fd 4f       	sbci	r31, 0xFD	; 253
    11fe:	31 83       	std	Z+1, r19	; 0x01
    1200:	20 83       	st	Z, r18
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 c7 02 	sts	0x02C7, r24
    1208:	90 91 c8 02 	lds	r25, 0x02C8
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	80 32       	cpi	r24, 0x20	; 32
    1212:	09 f0       	breq	.+2      	; 0x1216 <__vector_29+0x46>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	90 31       	cpi	r25, 0x10	; 16
    1218:	19 f0       	breq	.+6      	; 0x1220 <__vector_29+0x50>
    121a:	90 93 c8 02 	sts	0x02C8, r25
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <__vector_29+0x84>
    1220:	10 92 c8 02 	sts	0x02C8, r1
    1224:	80 91 c9 02 	lds	r24, 0x02C9
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 c9 02 	sts	0x02C9, r24
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	21 f4       	brne	.+8      	; 0x123a <__vector_29+0x6a>
    1232:	10 92 c9 02 	sts	0x02C9, r1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <__vector_29+0x78>
    123a:	88 23       	and	r24, r24
    123c:	21 f0       	breq	.+8      	; 0x1246 <__vector_29+0x76>
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	49 f4       	brne	.+18     	; 0x1254 <__vector_29+0x84>
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <__vector_29+0x78>
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	ec e7       	ldi	r30, 0x7C	; 124
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	89 2b       	or	r24, r25
    1252:	80 83       	st	Z, r24
    1254:	22 23       	and	r18, r18
    1256:	29 f0       	breq	.+10     	; 0x1262 <__vector_29+0x92>
    1258:	10 92 c7 02 	sts	0x02C7, r1
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 ca 02 	sts	0x02CA, r24
    1262:	80 91 c8 02 	lds	r24, 0x02C8
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	e7 58       	subi	r30, 0x87	; 135
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	30 81       	ld	r19, Z
    1270:	30 ff       	sbrs	r19, 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_29+0xa8>
    1274:	8d 9a       	sbi	0x11, 5	; 17
    1276:	01 c0       	rjmp	.+2      	; 0x127a <__vector_29+0xaa>
    1278:	8d 98       	cbi	0x11, 5	; 17
    127a:	fc 01       	movw	r30, r24
    127c:	e7 58       	subi	r30, 0x87	; 135
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	30 81       	ld	r19, Z
    1282:	31 ff       	sbrs	r19, 1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <__vector_29+0xba>
    1286:	8f 9a       	sbi	0x11, 7	; 17
    1288:	01 c0       	rjmp	.+2      	; 0x128c <__vector_29+0xbc>
    128a:	8f 98       	cbi	0x11, 7	; 17
    128c:	fc 01       	movw	r30, r24
    128e:	e7 58       	subi	r30, 0x87	; 135
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	30 81       	ld	r19, Z
    1294:	32 ff       	sbrs	r19, 2
    1296:	02 c0       	rjmp	.+4      	; 0x129c <__vector_29+0xcc>
    1298:	8c 9a       	sbi	0x11, 4	; 17
    129a:	01 c0       	rjmp	.+2      	; 0x129e <__vector_29+0xce>
    129c:	8c 98       	cbi	0x11, 4	; 17
    129e:	fc 01       	movw	r30, r24
    12a0:	e7 58       	subi	r30, 0x87	; 135
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	80 81       	ld	r24, Z
    12a6:	83 ff       	sbrs	r24, 3
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <__vector_29+0xde>
    12aa:	8e 9a       	sbi	0x11, 6	; 17
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <__vector_29+0xe0>
    12ae:	8e 98       	cbi	0x11, 6	; 17
    12b0:	00 00       	nop
    12b2:	00 00       	nop
    12b4:	00 00       	nop
    12b6:	21 11       	cpse	r18, r1
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__vector_29+0xf4>
    12ba:	ea e7       	ldi	r30, 0x7A	; 122
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	80 83       	st	Z, r24
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <_ZN5Board8initPinsEv>:
    12da:	55 98       	cbi	0x0a, 5	; 10
    12dc:	50 9a       	sbi	0x0a, 0	; 10
    12de:	51 9a       	sbi	0x0a, 1	; 10
    12e0:	24 9a       	sbi	0x04, 4	; 4
    12e2:	56 9a       	sbi	0x0a, 6	; 10
    12e4:	54 9a       	sbi	0x0a, 4	; 10
    12e6:	2f 9a       	sbi	0x05, 7	; 5
    12e8:	5f 9a       	sbi	0x0b, 7	; 11
    12ea:	2d 9a       	sbi	0x05, 5	; 5
    12ec:	47 9a       	sbi	0x08, 7	; 8
    12ee:	46 9a       	sbi	0x08, 6	; 8
    12f0:	2e 9a       	sbi	0x05, 6	; 5
    12f2:	27 9a       	sbi	0x04, 7	; 4
    12f4:	57 9a       	sbi	0x0a, 7	; 10
    12f6:	25 9a       	sbi	0x04, 5	; 4
    12f8:	3f 9a       	sbi	0x07, 7	; 7
    12fa:	3e 9a       	sbi	0x07, 6	; 7
    12fc:	26 9a       	sbi	0x04, 6	; 4
    12fe:	21 9a       	sbi	0x04, 1	; 4
    1300:	22 9a       	sbi	0x04, 2	; 4
    1302:	23 9a       	sbi	0x04, 3	; 4
    1304:	85 9a       	sbi	0x10, 5	; 16
    1306:	87 9a       	sbi	0x10, 7	; 16
    1308:	84 9a       	sbi	0x10, 4	; 16
    130a:	86 9a       	sbi	0x10, 6	; 16
    130c:	80 98       	cbi	0x10, 0	; 16
    130e:	81 98       	cbi	0x10, 1	; 16
    1310:	6e 9a       	sbi	0x0d, 6	; 13
    1312:	08 95       	ret

00001314 <_ZN5Board10initAnalogEv>:
    1314:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_Z8setUpADCv>
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z15setADCprescalerh>
    131e:	80 91 c8 02 	lds	r24, 0x02C8
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	e7 58       	subi	r30, 0x87	; 135
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	20 81       	ld	r18, Z
    132c:	20 ff       	sbrs	r18, 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <_ZN5Board10initAnalogEv+0x20>
    1330:	8d 9a       	sbi	0x11, 5	; 17
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <_ZN5Board10initAnalogEv+0x22>
    1334:	8d 98       	cbi	0x11, 5	; 17
    1336:	fc 01       	movw	r30, r24
    1338:	e7 58       	subi	r30, 0x87	; 135
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	20 81       	ld	r18, Z
    133e:	21 ff       	sbrs	r18, 1
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <_ZN5Board10initAnalogEv+0x32>
    1342:	8f 9a       	sbi	0x11, 7	; 17
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <_ZN5Board10initAnalogEv+0x34>
    1346:	8f 98       	cbi	0x11, 7	; 17
    1348:	fc 01       	movw	r30, r24
    134a:	e7 58       	subi	r30, 0x87	; 135
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	20 81       	ld	r18, Z
    1350:	22 ff       	sbrs	r18, 2
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <_ZN5Board10initAnalogEv+0x44>
    1354:	8c 9a       	sbi	0x11, 4	; 17
    1356:	01 c0       	rjmp	.+2      	; 0x135a <_ZN5Board10initAnalogEv+0x46>
    1358:	8c 98       	cbi	0x11, 4	; 17
    135a:	fc 01       	movw	r30, r24
    135c:	e7 58       	subi	r30, 0x87	; 135
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
    1360:	80 81       	ld	r24, Z
    1362:	83 ff       	sbrs	r24, 3
    1364:	02 c0       	rjmp	.+4      	; 0x136a <_ZN5Board10initAnalogEv+0x56>
    1366:	8e 9a       	sbi	0x11, 6	; 17
    1368:	01 c0       	rjmp	.+2      	; 0x136c <_ZN5Board10initAnalogEv+0x58>
    136a:	8e 98       	cbi	0x11, 6	; 17
    136c:	00 00       	nop
    136e:	00 00       	nop
    1370:	00 00       	nop
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z13setADCchannelh>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 47 05 	call	0xa8e	; 0xa8e <_Z22disconnectDigitalInADCh>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 47 05 	call	0xa8e	; 0xa8e <_Z22disconnectDigitalInADCh>
    1384:	8f e3       	ldi	r24, 0x3F	; 63
    1386:	9f e1       	ldi	r25, 0x1F	; 31
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <_ZN5Board10initAnalogEv+0x74>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <_ZN5Board10initAnalogEv+0x7a>
    138e:	00 00       	nop
    1390:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    1394:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    1398:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    139c:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    13a0:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    13a4:	ea e7       	ldi	r30, 0x7A	; 122
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 60       	ori	r24, 0x08	; 8
    13ac:	80 83       	st	Z, r24
    13ae:	80 81       	ld	r24, Z
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 83       	st	Z, r24
    13b4:	08 95       	ret

000013b6 <_ZN5Board15configureTimersEv>:
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	14 bc       	out	0x24, r1	; 36
    13ca:	15 bc       	out	0x25, r1	; 37
    13cc:	0f 2e       	mov	r0, r31
    13ce:	fe e6       	ldi	r31, 0x6E	; 110
    13d0:	af 2e       	mov	r10, r31
    13d2:	b1 2c       	mov	r11, r1
    13d4:	f0 2d       	mov	r31, r0
    13d6:	d5 01       	movw	r26, r10
    13d8:	1c 92       	st	X, r1
    13da:	68 94       	set
    13dc:	ee 24       	eor	r14, r14
    13de:	e7 f8       	bld	r14, 7
    13e0:	f1 2c       	mov	r15, r1
    13e2:	f7 01       	movw	r30, r14
    13e4:	10 82       	st	Z, r1
    13e6:	01 e8       	ldi	r16, 0x81	; 129
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	d8 01       	movw	r26, r16
    13ec:	1c 92       	st	X, r1
    13ee:	60 e9       	ldi	r22, 0x90	; 144
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	fb 01       	movw	r30, r22
    13f4:	10 82       	st	Z, r1
    13f6:	41 e9       	ldi	r20, 0x91	; 145
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	da 01       	movw	r26, r20
    13fc:	1c 92       	st	X, r1
    13fe:	20 ec       	ldi	r18, 0xC0	; 192
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	10 82       	st	Z, r1
    1406:	81 ec       	ldi	r24, 0xC1	; 193
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	dc 01       	movw	r26, r24
    140c:	1c 92       	st	X, r1
    140e:	c2 ec       	ldi	r28, 0xC2	; 194
    1410:	d0 e0       	ldi	r29, 0x00	; 0
    1412:	18 82       	st	Y, r1
    1414:	a3 ec       	ldi	r26, 0xC3	; 195
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	1c 92       	st	X, r1
    141a:	10 92 c4 00 	sts	0x00C4, r1
    141e:	f7 01       	movw	r30, r14
    1420:	d0 80       	ld	r13, Z
    1422:	fd 2d       	mov	r31, r13
    1424:	f1 60       	ori	r31, 0x01	; 1
    1426:	df 2e       	mov	r13, r31
    1428:	f7 01       	movw	r30, r14
    142a:	d0 82       	st	Z, r13
    142c:	f8 01       	movw	r30, r16
    142e:	f0 80       	ld	r15, Z
    1430:	ff 2d       	mov	r31, r15
    1432:	f1 60       	ori	r31, 0x01	; 1
    1434:	ff 2e       	mov	r15, r31
    1436:	f8 01       	movw	r30, r16
    1438:	f0 82       	st	Z, r15
    143a:	fb 01       	movw	r30, r22
    143c:	10 81       	ld	r17, Z
    143e:	11 60       	ori	r17, 0x01	; 1
    1440:	10 83       	st	Z, r17
    1442:	fa 01       	movw	r30, r20
    1444:	60 81       	ld	r22, Z
    1446:	61 60       	ori	r22, 0x01	; 1
    1448:	60 83       	st	Z, r22
    144a:	f9 01       	movw	r30, r18
    144c:	40 81       	ld	r20, Z
    144e:	42 60       	ori	r20, 0x02	; 2
    1450:	40 83       	st	Z, r20
    1452:	fc 01       	movw	r30, r24
    1454:	20 81       	ld	r18, Z
    1456:	21 60       	ori	r18, 0x01	; 1
    1458:	20 83       	st	Z, r18
    145a:	88 81       	ld	r24, Y
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	88 83       	st	Y, r24
    1460:	8c 91       	ld	r24, X
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	8c 93       	st	X, r24
    1466:	84 b5       	in	r24, 0x24	; 36
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	84 bd       	out	0x24, r24	; 36
    146c:	85 b5       	in	r24, 0x25	; 37
    146e:	83 60       	ori	r24, 0x03	; 3
    1470:	85 bd       	out	0x25, r24	; 37
    1472:	8c e7       	ldi	r24, 0x7C	; 124
    1474:	87 bd       	out	0x27, r24	; 39
    1476:	d5 01       	movw	r26, r10
    1478:	8c 91       	ld	r24, X
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	8c 93       	st	X, r24
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	08 95       	ret

00001492 <_ZN5Board4initEv>:
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
    1498:	f8 94       	cli
    149a:	0e 94 58 05 	call	0xab0	; 0xab0 <_Z15disableWatchDogv>
    149e:	ce 01       	movw	r24, r28
    14a0:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN5Board8initPinsEv>
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN5Board10initAnalogEv>
    14aa:	e6 e3       	ldi	r30, 0x36	; 54
    14ac:	f3 e0       	ldi	r31, 0x03	; 3
    14ae:	46 e7       	ldi	r20, 0x76	; 118
    14b0:	53 e0       	ldi	r21, 0x03	; 3
    14b2:	20 81       	ld	r18, Z
    14b4:	31 81       	ldd	r19, Z+1	; 0x01
    14b6:	20 68       	ori	r18, 0x80	; 128
    14b8:	21 93       	st	Z+, r18
    14ba:	31 93       	st	Z+, r19
    14bc:	e4 17       	cp	r30, r20
    14be:	f5 07       	cpc	r31, r21
    14c0:	c1 f7       	brne	.-16     	; 0x14b2 <_ZN5Board4initEv+0x20>
    14c2:	8f e1       	ldi	r24, 0x1F	; 31
    14c4:	9e e4       	ldi	r25, 0x4E	; 78
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <_ZN5Board4initEv+0x34>
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <_ZN5Board4initEv+0x3a>
    14cc:	00 00       	nop
    14ce:	ce 01       	movw	r24, r28
    14d0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN5Board15configureTimersEv>
    14d4:	78 94       	sei
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <_ZN5Board11getLEDstateEh>:
    14dc:	e6 2f       	mov	r30, r22
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	ef 5f       	subi	r30, 0xFF	; 255
    14e2:	fc 4f       	sbci	r31, 0xFC	; 252
    14e4:	80 81       	ld	r24, Z
    14e6:	08 95       	ret

000014e8 <_ZN5Board15setLEDblinkTimeEj>:
    14e8:	f8 94       	cli
    14ea:	24 e6       	ldi	r18, 0x64	; 100
    14ec:	26 9f       	mul	r18, r22
    14ee:	c0 01       	movw	r24, r0
    14f0:	27 9f       	mul	r18, r23
    14f2:	90 0d       	add	r25, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	90 93 00 03 	sts	0x0300, r25
    14fa:	80 93 ff 02 	sts	0x02FF, r24
    14fe:	10 92 cb 02 	sts	0x02CB, r1
    1502:	10 92 cc 02 	sts	0x02CC, r1
    1506:	10 92 cd 02 	sts	0x02CD, r1
    150a:	10 92 ce 02 	sts	0x02CE, r1
    150e:	78 94       	sei
    1510:	08 95       	ret

00001512 <_ZN5Board21setLEDTransitionSpeedEh>:
    1512:	f8 94       	cli
    1514:	ef ec       	ldi	r30, 0xCF	; 207
    1516:	f2 e0       	ldi	r31, 0x02	; 2
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	11 92       	st	Z+, r1
    151e:	e8 17       	cp	r30, r24
    1520:	f9 07       	cpc	r31, r25
    1522:	e1 f7       	brne	.-8      	; 0x151c <_ZN5Board21setLEDTransitionSpeedEh+0xa>
    1524:	78 94       	sei
    1526:	60 93 31 03 	sts	0x0331, r22
    152a:	08 95       	ret

0000152c <_ZN5Board16ledBlinkingStartEv>:
    152c:	80 91 32 03 	lds	r24, 0x0332
    1530:	81 11       	cpse	r24, r1
    1532:	0d c0       	rjmp	.+26     	; 0x154e <_ZN5Board16ledBlinkingStartEv+0x22>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 32 03 	sts	0x0332, r24
    153a:	80 93 00 01 	sts	0x0100, r24
    153e:	10 92 cb 02 	sts	0x02CB, r1
    1542:	10 92 cc 02 	sts	0x02CC, r1
    1546:	10 92 cd 02 	sts	0x02CD, r1
    154a:	10 92 ce 02 	sts	0x02CE, r1
    154e:	08 95       	ret

00001550 <_ZN5Board15ledBlinkingStopEv>:
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 00 01 	sts	0x0100, r24
    1556:	f8 94       	cli
    1558:	10 92 cb 02 	sts	0x02CB, r1
    155c:	10 92 cc 02 	sts	0x02CC, r1
    1560:	10 92 cd 02 	sts	0x02CD, r1
    1564:	10 92 ce 02 	sts	0x02CE, r1
    1568:	78 94       	sei
    156a:	10 92 32 03 	sts	0x0332, r1
    156e:	08 95       	ret

00001570 <_ZN5Board14checkBlinkLEDsEv>:

void Board::checkBlinkLEDs() {
    1570:	ac 01       	movw	r20, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1572:	90 91 01 03 	lds	r25, 0x0301
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    1576:	91 fd       	sbrc	r25, 1
    1578:	13 c0       	rjmp	.+38     	; 0x15a0 <_ZN5Board14checkBlinkLEDsEv+0x30>
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	30 e0       	ldi	r19, 0x00	; 0
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    157e:	f9 01       	movw	r30, r18
    1580:	ff 27       	eor	r31, r31
    1582:	ef 5f       	subi	r30, 0xFF	; 255
    1584:	fc 4f       	sbci	r31, 0xFC	; 252
    1586:	90 81       	ld	r25, Z
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    1588:	91 fd       	sbrc	r25, 1
    158a:	0a c0       	rjmp	.+20     	; 0x15a0 <_ZN5Board14checkBlinkLEDsEv+0x30>

    bool _blinkEnabled = false;
    uint8_t ledState;

    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	20 33       	cpi	r18, 0x30	; 48
    1592:	31 05       	cpc	r19, r1
    1594:	a1 f7       	brne	.-24     	; 0x157e <_ZN5Board14checkBlinkLEDsEv+0xe>
    }

    if (_blinkEnabled)  ledBlinkingStart();

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {
    1596:	80 91 32 03 	lds	r24, 0x0332
    159a:	81 11       	cpse	r24, r1
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <_ZN5Board14checkBlinkLEDsEv+0x38>
    159e:	08 95       	ret

        }

    }

    if (_blinkEnabled)  ledBlinkingStart();
    15a0:	ca 01       	movw	r24, r20
    15a2:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN5Board16ledBlinkingStartEv>
    15a6:	08 95       	ret

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {

        //reset blinkState to default value
        ledBlinkingStop();
    15a8:	ca 01       	movw	r24, r20
    15aa:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Board15ledBlinkingStopEv>
    15ae:	08 95       	ret

000015b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>:
    return column + NUMBER_OF_LED_COLUMNS*row;

}


void Board::handleLED(uint8_t ledNumber, ledColor_t color, bool blinkMode, ledType_t type) {
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	00 d0       	rcall	.+0      	; 0x15be <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xe>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x10>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x12>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62

    uint8_t currentState[3];
    bool newLEDstate[3];
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
    15c6:	48 30       	cpi	r20, 0x08	; 8
    15c8:	09 f0       	breq	.+2      	; 0x15cc <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x1c>
    15ca:	8f c0       	rjmp	.+286    	; 0x16ea <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x13a>
    15cc:	01 30       	cpi	r16, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x22>
    15d0:	8c c0       	rjmp	.+280    	; 0x16ea <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x13a>
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    15d2:	e6 2f       	mov	r30, r22
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	ef 5f       	subi	r30, 0xFF	; 255
    15d8:	fc 4f       	sbci	r31, 0xFC	; 252
    15da:	80 81       	ld	r24, Z

    switch(type)    {

        case singleLED:
        loops = 1;
        currentState[0] = getLEDstate(ledNumber);
    15dc:	8c 83       	std	Y+4, r24	; 0x04
        newLEDstate[0] = (color != colorOff);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	41 11       	cpse	r20, r1
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x36>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	89 83       	std	Y+1, r24	; 0x01
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {

        case singleLED:
        loops = 1;
    15e8:	01 e0       	ldi	r16, 0x01	; 1
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;
    15ea:	86 c0       	rjmp	.+268    	; 0x16f8 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x148>
}

inline uint8_t getRGBfirstID(uint8_t rgbID)    {

    //get first RGB LED address (out of three)
    uint8_t column = rgbID % NUMBER_OF_LED_COLUMNS;
    15ec:	86 2f       	mov	r24, r22
    15ee:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (rgbID/NUMBER_OF_BUTTON_COLUMNS)*3;
    15f0:	66 95       	lsr	r22
    15f2:	66 95       	lsr	r22
    15f4:	66 95       	lsr	r22

    return column + NUMBER_OF_LED_COLUMNS*row;
    15f6:	98 e1       	ldi	r25, 0x18	; 24
    15f8:	69 9f       	mul	r22, r25
    15fa:	80 0d       	add	r24, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	68 2f       	mov	r22, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1600:	e8 2f       	mov	r30, r24
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	ef 5f       	subi	r30, 0xFF	; 255
    1606:	fc 4f       	sbci	r31, 0xFC	; 252
    1608:	80 81       	ld	r24, Z
        break;

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
    160a:	8c 83       	std	Y+4, r24	; 0x04
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    160c:	e8 e0       	ldi	r30, 0x08	; 8
    160e:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	ef 5f       	subi	r30, 0xFF	; 255
    1614:	fc 4f       	sbci	r31, 0xFC	; 252
    1616:	80 81       	ld	r24, Z

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    1618:	8d 83       	std	Y+5, r24	; 0x05
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    161a:	e0 e1       	ldi	r30, 0x10	; 16
    161c:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	ef 5f       	subi	r30, 0xFF	; 255
    1622:	fc 4f       	sbci	r31, 0xFC	; 252
    1624:	80 81       	ld	r24, Z
        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    1626:	8e 83       	std	Y+6, r24	; 0x06

        newLEDstate[0] = rgbColors[color][0];
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	fa 01       	movw	r30, r20
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e4 0f       	add	r30, r20
    1632:	f5 1f       	adc	r31, r21
    1634:	ef 5e       	subi	r30, 0xEF	; 239
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 81       	ld	r25, Z
    163c:	91 11       	cpse	r25, r1
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x92>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	89 83       	std	Y+1, r24	; 0x01
        newLEDstate[1] = rgbColors[color][1];
    1644:	fa 01       	movw	r30, r20
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	e4 0f       	add	r30, r20
    164c:	f5 1f       	adc	r31, r21
    164e:	ef 5e       	subi	r30, 0xEF	; 239
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	91 11       	cpse	r25, r1
    1658:	01 c0       	rjmp	.+2      	; 0x165c <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xac>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	8a 83       	std	Y+2, r24	; 0x02
        newLEDstate[2] = rgbColors[color][2];
    165e:	fa 01       	movw	r30, r20
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	4e 0f       	add	r20, r30
    1666:	5f 1f       	adc	r21, r31
    1668:	fa 01       	movw	r30, r20
    166a:	ef 5e       	subi	r30, 0xEF	; 239
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	92 81       	ldd	r25, Z+2	; 0x02
    1672:	91 11       	cpse	r25, r1
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xc8>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	8b 83       	std	Y+3, r24	; 0x03
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;

        case rgbLED:
        loops = 3;
    167a:	03 e0       	ldi	r16, 0x03	; 3
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);

        newLEDstate[0] = rgbColors[color][0];
        newLEDstate[1] = rgbColors[color][1];
        newLEDstate[2] = rgbColors[color][2];
        break;
    167c:	3d c0       	rjmp	.+122    	; 0x16f8 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x148>

    }

    for (int i=0; i<loops; i++) {
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	de 01       	movw	r26, r28
    1684:	14 96       	adiw	r26, 0x04	; 4
    1686:	ae 01       	movw	r20, r28
    1688:	4f 5f       	subi	r20, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255

        ledNumber += 8*(bool)i;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	68 94       	set
    1694:	ff 24       	eor	r15, r15
    1696:	f3 f8       	bld	r15, 3
    1698:	e1 2c       	mov	r14, r1
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf6>
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	11 f4       	brne	.+4      	; 0x16a4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf4>
    16a0:	3e 2d       	mov	r19, r14
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf6>
    16a4:	3f 2d       	mov	r19, r15
    16a6:	63 0f       	add	r22, r19

        switch (newLEDstate[i]) {
    16a8:	fa 01       	movw	r30, r20
    16aa:	31 91       	ld	r19, Z+
    16ac:	af 01       	movw	r20, r30
    16ae:	31 30       	cpi	r19, 0x01	; 1
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x106>

            case false:
            //turn off the led
            currentState[i] = 0;
    16b2:	1c 92       	st	X, r1
            break;
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x124>
    16b6:	fd 01       	movw	r30, r26

            case true:
            //turn on the led
            //if led was already active, clear the on bits before setting new state
            if (bitRead(currentState[i], LED_ACTIVE_BIT))
    16b8:	3c 91       	ld	r19, X
    16ba:	32 fd       	sbrc	r19, 2
                currentState[i] = 0;
    16bc:	1c 92       	st	X, r1

            bitWrite(currentState[i], LED_ACTIVE_BIT, 1);
    16be:	30 81       	ld	r19, Z
    16c0:	73 2f       	mov	r23, r19
    16c2:	74 60       	ori	r23, 0x04	; 4
    16c4:	70 83       	st	Z, r23
            if (blinkMode)  {
    16c6:	22 23       	and	r18, r18
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x120>

                bitWrite(currentState[i], LED_BLINK_ON_BIT, 1);
                //this will turn the led immediately no matter how little time it's
                //going to blink first time
                bitWrite(currentState[i], LED_BLINK_STATE_BIT, 1);
    16ca:	3e 60       	ori	r19, 0x0E	; 14
    16cc:	30 83       	st	Z, r19
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x124>

            }   else bitWrite(currentState[i], LED_CONSTANT_ON_BIT, 1);
    16d0:	35 60       	ori	r19, 0x05	; 5
    16d2:	30 83       	st	Z, r19
            break;

        }   ledState[ledNumber] = currentState[i];
    16d4:	e6 2f       	mov	r30, r22
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	3d 91       	ld	r19, X+
    16da:	ef 5f       	subi	r30, 0xFF	; 255
    16dc:	fc 4f       	sbci	r31, 0xFC	; 252
    16de:	30 83       	st	Z, r19
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	80 17       	cp	r24, r16
    16e4:	91 07       	cpc	r25, r17
    16e6:	d4 f2       	brlt	.-76     	; 0x169c <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xec>
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x14c>
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {
    16ea:	00 23       	and	r16, r16
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x140>
    16ee:	71 cf       	rjmp	.-286    	; 0x15d2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x22>
    16f0:	01 30       	cpi	r16, 0x01	; 1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x146>
    16f4:	7b cf       	rjmp	.-266    	; 0x15ec <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x3c>
    16f6:	c3 cf       	rjmp	.-122    	; 0x167e <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xce>
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	c3 cf       	rjmp	.-122    	; 0x1682 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xd2>

        }   ledState[ledNumber] = currentState[i];

    }

}
    16fc:	26 96       	adiw	r28, 0x06	; 6
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	08 95       	ret

00001716 <_ZN5Board11setLEDstateEh10ledColor_tb>:

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;

}

void Board::setLEDstate(uint8_t ledNumber, ledColor_t color, bool blinkMode)   {
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	e6 2e       	mov	r14, r22
    1728:	f4 2e       	mov	r15, r20
    172a:	d2 2e       	mov	r13, r18

//LEDs

inline uint8_t getRGBIDFromLEDID(uint8_t ledID) {

    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;
    172c:	96 2f       	mov	r25, r22
    172e:	96 95       	lsr	r25
    1730:	96 95       	lsr	r25
    1732:	96 95       	lsr	r25

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    1734:	eb ea       	ldi	r30, 0xAB	; 171
    1736:	9e 9f       	mul	r25, r30
    1738:	e1 2d       	mov	r30, r1
    173a:	11 24       	eor	r1, r1
    173c:	e6 95       	lsr	r30
    173e:	8e 2f       	mov	r24, r30
    1740:	88 0f       	add	r24, r24
    row -= mod;
    1742:	e8 0f       	add	r30, r24

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	cf 01       	movw	r24, r30
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	0e 94 08 30 	call	0x6010	; 0x6010 <__divmodhi4>
    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    row -= mod;

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;
    175c:	1e 2d       	mov	r17, r14
    175e:	17 70       	andi	r17, 0x07	; 7

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    1760:	16 0f       	add	r17, r22
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    1762:	20 91 27 02 	lds	r18, 0x0227
    1766:	30 91 28 02 	lds	r19, 0x0228
    176a:	80 91 1f 02 	lds	r24, 0x021F
    176e:	90 91 20 02 	lds	r25, 0x0220
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    1776:	20 91 36 02 	lds	r18, 0x0236
    177a:	22 23       	and	r18, r18
    177c:	a1 f0       	breq	.+40     	; 0x17a6 <_ZN5Board11setLEDstateEh10ledColor_tb+0x90>
    177e:	21 30       	cpi	r18, 0x01	; 1
    1780:	b9 f4       	brne	.+46     	; 0x17b0 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    1782:	21 2f       	mov	r18, r17
    1784:	26 95       	lsr	r18
    1786:	26 95       	lsr	r18
    1788:	26 95       	lsr	r18
    178a:	82 0f       	add	r24, r18
    178c:	91 1d       	adc	r25, r1
    178e:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	21 2f       	mov	r18, r17
    1796:	27 70       	andi	r18, 0x07	; 7
    1798:	02 c0       	rjmp	.+4      	; 0x179e <_ZN5Board11setLEDstateEh10ledColor_tb+0x88>
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	2a 95       	dec	r18
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <_ZN5Board11setLEDstateEh10ledColor_tb+0x84>
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    17a6:	81 0f       	add	r24, r17
    17a8:	91 1d       	adc	r25, r1
    17aa:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9c>
            break;

        }   return 0;
    17b0:	80 e0       	ldi	r24, 0x00	; 0
void Board::setLEDstate(uint8_t ledNumber, ledColor_t color, bool blinkMode)   {

    uint8_t rgbID = getRGBIDFromLEDID(ledNumber);
    bool rgbEnabled = configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, rgbID);

    if (!rgbEnabled)    {
    17b2:	81 11       	cpse	r24, r1
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <_ZN5Board11setLEDstateEh10ledColor_tb+0xba>

        if (color != colorOff)
    17b6:	ff 20       	and	r15, r15
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <_ZN5Board11setLEDstateEh10ledColor_tb+0xaa>
            color = colorOnDefault;
    17ba:	68 94       	set
    17bc:	ff 24       	eor	r15, r15
    17be:	f3 f8       	bld	r15, 3
        handleLED(ledNumber, color, blinkMode, singleLED);
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	2d 2d       	mov	r18, r13
    17c4:	4f 2d       	mov	r20, r15
    17c6:	6e 2d       	mov	r22, r14
    17c8:	ce 01       	movw	r24, r28
    17ca:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <_ZN5Board11setLEDstateEh10ledColor_tb+0xc8>

    }   else handleLED(rgbID, color, blinkMode, rgbLED);
    17d0:	01 e0       	ldi	r16, 0x01	; 1
    17d2:	2d 2d       	mov	r18, r13
    17d4:	4f 2d       	mov	r20, r15
    17d6:	61 2f       	mov	r22, r17
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>

    if (blinkMode && (color != colorOff)) ledBlinkingStart();
    17de:	dd 20       	and	r13, r13
    17e0:	31 f0       	breq	.+12     	; 0x17ee <_ZN5Board11setLEDstateEh10ledColor_tb+0xd8>
    17e2:	ff 20       	and	r15, r15
    17e4:	21 f0       	breq	.+8      	; 0x17ee <_ZN5Board11setLEDstateEh10ledColor_tb+0xd8>
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN5Board16ledBlinkingStartEv>
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <_ZN5Board11setLEDstateEh10ledColor_tb+0xde>
    else    checkBlinkLEDs();
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN5Board14checkBlinkLEDsEv>

}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	08 95       	ret

00001804 <_ZN5Board19analogDataAvailableEv>:
//analog

bool Board::analogDataAvailable() {

    bool state;
    state = _analogDataAvailable;
    1804:	80 91 ca 02 	lds	r24, 0x02CA
    if (state) {
    1808:	88 23       	and	r24, r24
    180a:	b9 f0       	breq	.+46     	; 0x183a <_ZN5Board19analogDataAvailableEv+0x36>
    180c:	a7 e4       	ldi	r26, 0x47	; 71
    180e:	b2 e0       	ldi	r27, 0x02	; 2
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
            analogBufferCopy[i] = analogBuffer[i];
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	e9 57       	subi	r30, 0x79	; 121
    181c:	fd 4f       	sbci	r31, 0xFD	; 253
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	2d 93       	st	X+, r18
    1824:	3d 93       	st	X+, r19
    bool state;
    state = _analogDataAvailable;
    if (state) {

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	80 32       	cpi	r24, 0x20	; 32
    182a:	91 05       	cpc	r25, r1
    182c:	99 f7       	brne	.-26     	; 0x1814 <_ZN5Board19analogDataAvailableEv+0x10>
            analogBufferCopy[i] = analogBuffer[i];

        _analogDataAvailable = false;
    182e:	10 92 ca 02 	sts	0x02CA, r1
        adcDelayCounter = 0;
    1832:	10 92 46 02 	sts	0x0246, r1
        return true;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret

    } return false;
    183a:	80 e0       	ldi	r24, 0x00	; 0

}
    183c:	08 95       	ret

0000183e <_ZN5Board14getAnalogValueEh>:

int16_t Board::getAnalogValue(uint8_t analogID) {

    return analogBufferCopy[analogID];
    183e:	e6 2f       	mov	r30, r22
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	e9 5b       	subi	r30, 0xB9	; 185
    1848:	fd 4f       	sbci	r31, 0xFD	; 253

}
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	08 95       	ret

00001850 <_ZN5Board15getEncoderStateEh>:
}


//encoders

encoderPosition_t Board::getEncoderState(uint8_t encoderNumber)  {
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	e6 2f       	mov	r30, r22

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    1856:	86 2f       	mov	r24, r22
    1858:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    185a:	07 e0       	ldi	r16, 0x07	; 7
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	08 1b       	sub	r16, r24
    1860:	11 09       	sbc	r17, r1
    1862:	00 0f       	add	r16, r16
    1864:	00 0f       	add	r16, r16
    1866:	00 0f       	add	r16, r16
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    1868:	20 91 88 03 	lds	r18, 0x0388
    186c:	30 91 89 03 	lds	r19, 0x0389
    1870:	40 91 8a 03 	lds	r20, 0x038A
    1874:	50 91 8b 03 	lds	r21, 0x038B
    1878:	60 91 8c 03 	lds	r22, 0x038C
    187c:	70 91 8d 03 	lds	r23, 0x038D
    1880:	80 91 8e 03 	lds	r24, 0x038E
    1884:	90 91 8f 03 	lds	r25, 0x038F
    1888:	0e 94 5f 30 	call	0x60be	; 0x60be <__lshrdi3>
    pairState = ((pairState >> row) & 0x03);
    188c:	30 e0       	ldi	r19, 0x00	; 0
//encoders

encoderPosition_t Board::getEncoderState(uint8_t encoderNumber)  {

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    188e:	8e 2f       	mov	r24, r30
    1890:	86 95       	lsr	r24
    1892:	86 95       	lsr	r24
    1894:	86 95       	lsr	r24
    1896:	88 0f       	add	r24, r24
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    1898:	02 c0       	rjmp	.+4      	; 0x189e <_ZN5Board15getEncoderStateEh+0x4e>
    189a:	35 95       	asr	r19
    189c:	27 95       	ror	r18
    189e:	8a 95       	dec	r24
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <_ZN5Board15getEncoderStateEh+0x4a>

inline encoderPosition_t readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    18a2:	6e 2f       	mov	r22, r30
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	fb 01       	movw	r30, r22
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	ea 5c       	subi	r30, 0xCA	; 202
    18ae:	fc 4f       	sbci	r31, 0xFC	; 252
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    18b4:	23 70       	andi	r18, 0x03	; 3

inline encoderPosition_t readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    18b6:	38 2f       	mov	r19, r24
    18b8:	33 0f       	add	r19, r19
    18ba:	33 0f       	add	r19, r19
    18bc:	3f 70       	andi	r19, 0x0F	; 15
    18be:	23 2b       	or	r18, r19

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;
    18c2:	80 7f       	andi	r24, 0xF0	; 240

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    18c4:	82 2b       	or	r24, r18
    18c6:	93 2b       	or	r25, r19
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24

    int8_t encRead = encoderLookUpTable[newPairData];
    18cc:	f9 01       	movw	r30, r18
    18ce:	ef 5f       	subi	r30, 0xFF	; 255
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	20 81       	ld	r18, Z

    if (!encRead) return encStopped;
    18d4:	22 23       	and	r18, r18
    18d6:	09 f4       	brne	.+2      	; 0x18da <_ZN5Board15getEncoderStateEh+0x8a>
    18d8:	45 c0       	rjmp	.+138    	; 0x1964 <_ZN5Board15getEncoderStateEh+0x114>

    bool newEncoderDirection = encRead > 0;
    18da:	31 e0       	ldi	r19, 0x01	; 1
    18dc:	12 16       	cp	r1, r18
    18de:	0c f0       	brlt	.+2      	; 0x18e2 <_ZN5Board15getEncoderStateEh+0x92>
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    18e2:	ac 01       	movw	r20, r24
    18e4:	52 95       	swap	r21
    18e6:	42 95       	swap	r20
    18e8:	4f 70       	andi	r20, 0x0F	; 15
    18ea:	45 27       	eor	r20, r21
    18ec:	5f 70       	andi	r21, 0x0F	; 15
    18ee:	45 27       	eor	r20, r21
    18f0:	4f 70       	andi	r20, 0x0F	; 15
    currentPulses += encRead;
    18f2:	24 0f       	add	r18, r20
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    18f4:	e0 e1       	ldi	r30, 0x10	; 16
    18f6:	2e 02       	muls	r18, r30
    18f8:	a0 01       	movw	r20, r0
    18fa:	11 24       	eor	r1, r1
    bool newEncoderDirection = encRead > 0;
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    currentPulses += encRead;
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    18fc:	8f 70       	andi	r24, 0x0F	; 15
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    18fe:	84 2b       	or	r24, r20
    1900:	95 2b       	or	r25, r21
    1902:	fb 01       	movw	r30, r22
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	ea 5c       	subi	r30, 0xCA	; 202
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    1910:	49 2f       	mov	r20, r25
    1912:	44 1f       	adc	r20, r20
    1914:	44 27       	eor	r20, r20
    1916:	44 1f       	adc	r20, r20
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);
    1918:	33 23       	and	r19, r19
    191a:	49 f0       	breq	.+18     	; 0x192e <_ZN5Board15getEncoderStateEh+0xde>
    191c:	fb 01       	movw	r30, r22
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	ea 5c       	subi	r30, 0xCA	; 202
    1924:	fc 4f       	sbci	r31, 0xFC	; 252
    1926:	90 68       	ori	r25, 0x80	; 128
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	08 c0       	rjmp	.+16     	; 0x193e <_ZN5Board15getEncoderStateEh+0xee>
    192e:	fb 01       	movw	r30, r22
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ea 5c       	subi	r30, 0xCA	; 202
    1936:	fc 4f       	sbci	r31, 0xFC	; 252
    1938:	9f 77       	andi	r25, 0x7F	; 127
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    193e:	34 13       	cpse	r19, r20
    1940:	13 c0       	rjmp	.+38     	; 0x1968 <_ZN5Board15getEncoderStateEh+0x118>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    1942:	23 70       	andi	r18, 0x03	; 3
    1944:	99 f4       	brne	.+38     	; 0x196c <_ZN5Board15getEncoderStateEh+0x11c>

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	fb 01       	movw	r30, r22
    194c:	ea 5c       	subi	r30, 0xCA	; 202
    194e:	fc 4f       	sbci	r31, 0xFC	; 252

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    if (currentPulses % PULSES_PER_STEP) return encStopped;

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	8f 70       	andi	r24, 0x0F	; 15

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    1956:	80 68       	ori	r24, 0x80	; 128
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    195c:	31 11       	cpse	r19, r1
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <_ZN5Board15getEncoderStateEh+0x120>
    else return encMoveLeft;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;

    int8_t encRead = encoderLookUpTable[newPairData];

    if (!encRead) return encStopped;
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    1970:	82 e0       	ldi	r24, 0x02	; 2
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);

    return readEncoder(encoderNumber, pairState);

}
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <_ZN5Board20encoderDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    1978:	80 91 35 03 	lds	r24, 0x0335
    197c:	88 23       	and	r24, r24
    197e:	71 f0       	breq	.+28     	; 0x199c <_ZN5Board20encoderDataAvailableEv+0x24>
    1980:	80 91 34 03 	lds	r24, 0x0334
    1984:	88 23       	and	r24, r24
    1986:	51 f0       	breq	.+20     	; 0x199c <_ZN5Board20encoderDataAvailableEv+0x24>
    1988:	80 91 33 03 	lds	r24, 0x0333
    198c:	88 23       	and	r24, r24
    198e:	51 f0       	breq	.+20     	; 0x19a4 <_ZN5Board20encoderDataAvailableEv+0x2c>

        dmBufferCopied = false;
    1990:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    1994:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    1998:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    199c:	80 91 33 03 	lds	r24, 0x0333
    19a0:	81 11       	cpse	r24, r1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <_ZN5Board20encoderDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    19a4:	0e 94 96 05 	call	0xb2c	; 0xb2c <_Z21copyInputMatrixBufferv>
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <_ZN5Board20encoderDataAvailableEv+0x34>

bool Board::encoderDataAvailable()  {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    19aa:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    encodersProcessed = true;
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	90 93 34 03 	sts	0x0334, r25
    return returnValue;

}
    19b2:	08 95       	ret

000019b4 <_ZN5Board19buttonDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    19b4:	80 91 35 03 	lds	r24, 0x0335
    19b8:	88 23       	and	r24, r24
    19ba:	71 f0       	breq	.+28     	; 0x19d8 <_ZN5Board19buttonDataAvailableEv+0x24>
    19bc:	80 91 34 03 	lds	r24, 0x0334
    19c0:	88 23       	and	r24, r24
    19c2:	51 f0       	breq	.+20     	; 0x19d8 <_ZN5Board19buttonDataAvailableEv+0x24>
    19c4:	80 91 33 03 	lds	r24, 0x0333
    19c8:	88 23       	and	r24, r24
    19ca:	51 f0       	breq	.+20     	; 0x19e0 <_ZN5Board19buttonDataAvailableEv+0x2c>

        dmBufferCopied = false;
    19cc:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    19d0:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    19d4:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    19d8:	80 91 33 03 	lds	r24, 0x0333
    19dc:	81 11       	cpse	r24, r1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <_ZN5Board19buttonDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    19e0:	0e 94 96 05 	call	0xb2c	; 0xb2c <_Z21copyInputMatrixBufferv>
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <_ZN5Board19buttonDataAvailableEv+0x34>

bool Board::buttonDataAvailable()   {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    19e6:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    buttonsProcessed = true;
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	90 93 35 03 	sts	0x0335, r25
    return returnValue;

}
    19ee:	08 95       	ret

000019f0 <_ZN5Board14getButtonStateEh>:

bool Board::getButtonState(uint8_t buttonIndex) {
    19f0:	0f 93       	push	r16
    19f2:	cf 93       	push	r28
    19f4:	c6 2f       	mov	r28, r22

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    19f6:	06 2f       	mov	r16, r22
    19f8:	06 95       	lsr	r16
    19fa:	06 95       	lsr	r16
    19fc:	06 95       	lsr	r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    19fe:	00 ff       	sbrs	r16, 0
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <_ZN5Board14getButtonStateEh+0x18>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	80 0f       	add	r24, r16
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <_ZN5Board14getButtonStateEh+0x1a>

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    1a08:	80 2f       	mov	r24, r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a0a:	28 e0       	ldi	r18, 0x08	; 8
    1a0c:	82 9f       	mul	r24, r18
    1a0e:	c0 01       	movw	r24, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    1a16:	6c 2f       	mov	r22, r28
    1a18:	67 70       	andi	r22, 0x07	; 7
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a1a:	68 0f       	add	r22, r24
}

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
    1a1c:	8b e8       	ldi	r24, 0x8B	; 139
    1a1e:	96 e0       	ldi	r25, 0x06	; 6
    1a20:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <_ZN8Encoders17getEncoderEnabledEh>
    1a24:	81 11       	cpse	r24, r1
    1a26:	1c c0       	rjmp	.+56     	; 0x1a60 <_ZN5Board14getButtonStateEh+0x70>
        return false;   //button is member of encoder pair, return "not pressed" state

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    1a28:	c0 95       	com	r28
    1a2a:	c7 70       	andi	r28, 0x07	; 7
    buttonIndex = column*8 + row;
    1a2c:	cc 0f       	add	r28, r28
    1a2e:	cc 0f       	add	r28, r28
    1a30:	cc 0f       	add	r28, r28
    1a32:	0c 0f       	add	r16, r28

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);
    1a34:	20 91 88 03 	lds	r18, 0x0388
    1a38:	30 91 89 03 	lds	r19, 0x0389
    1a3c:	40 91 8a 03 	lds	r20, 0x038A
    1a40:	50 91 8b 03 	lds	r21, 0x038B
    1a44:	60 91 8c 03 	lds	r22, 0x038C
    1a48:	70 91 8d 03 	lds	r23, 0x038D
    1a4c:	80 91 8e 03 	lds	r24, 0x038E
    1a50:	90 91 8f 03 	lds	r25, 0x038F
    1a54:	0e 94 5f 30 	call	0x60be	; 0x60be <__lshrdi3>
    1a58:	82 2f       	mov	r24, r18
    1a5a:	80 95       	com	r24
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <_ZN5Board14getButtonStateEh+0x72>

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
        return false;   //button is member of encoder pair, return "not pressed" state
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    buttonIndex = column*8 + row;

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);

}
    1a62:	cf 91       	pop	r28
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <_ZN6HWmidiC1Ev>:

        }

    }

}
    1a68:	fc 01       	movw	r30, r24
    1a6a:	15 82       	std	Z+5, r1	; 0x05
    1a6c:	14 82       	std	Z+4, r1	; 0x04
    1a6e:	15 86       	std	Z+13, r1	; 0x0d
    1a70:	14 86       	std	Z+12, r1	; 0x0c
    1a72:	13 86       	std	Z+11, r1	; 0x0b
    1a74:	12 86       	std	Z+10, r1	; 0x0a
    1a76:	dc 01       	movw	r26, r24
    1a78:	a1 5a       	subi	r26, 0xA1	; 161
    1a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7c:	1c 92       	st	X, r1
    1a7e:	11 8a       	std	Z+17, r1	; 0x11
    1a80:	10 8a       	std	Z+16, r1	; 0x10
    1a82:	12 8a       	std	Z+18, r1	; 0x12
    1a84:	13 8a       	std	Z+19, r1	; 0x13
    1a86:	a0 5b       	subi	r26, 0xB0	; 176
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	1c 92       	st	X, r1
    1a8c:	ae 54       	subi	r26, 0x4E	; 78
    1a8e:	b1 09       	sbc	r27, r1
    1a90:	1c 92       	st	X, r1
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	1c 92       	st	X, r1
    1a96:	12 96       	adiw	r26, 0x02	; 2
    1a98:	1c 92       	st	X, r1
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	1c 92       	st	X, r1
    1a9e:	11 82       	std	Z+1, r1	; 0x01
    1aa0:	10 82       	st	Z, r1
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	83 83       	std	Z+3, r24	; 0x03
    1aa8:	e1 e4       	ldi	r30, 0x41	; 65
    1aaa:	f4 e0       	ldi	r31, 0x04	; 4
    1aac:	80 83       	st	Z, r24
    1aae:	91 e8       	ldi	r25, 0x81	; 129
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	20 e4       	ldi	r18, 0x40	; 64
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	33 83       	std	Z+3, r19	; 0x03
    1ab8:	22 83       	std	Z+2, r18	; 0x02
    1aba:	85 83       	std	Z+5, r24	; 0x05
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	96 83       	std	Z+6, r25	; 0x06
    1ac0:	30 87       	std	Z+8, r19	; 0x08
    1ac2:	27 83       	std	Z+7, r18	; 0x07
    1ac4:	82 87       	std	Z+10, r24	; 0x0a
    1ac6:	08 95       	ret

00001ac8 <_ZN6HWmidi4initEbb19midiInterfaceType_t>:
    1ac8:	0f 93       	push	r16
    1aca:	22 23       	and	r18, r18
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0xc>
    1ace:	21 30       	cpi	r18, 0x01	; 1
    1ad0:	69 f0       	breq	.+26     	; 0x1aec <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x24>
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2c>
    1ad4:	04 2f       	mov	r16, r20
    1ad6:	26 2f       	mov	r18, r22
    1ad8:	42 e1       	ldi	r20, 0x12	; 18
    1ada:	5a e7       	ldi	r21, 0x7A	; 122
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	8d e4       	ldi	r24, 0x4D	; 77
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN4UART5beginEmbb>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2e>
    1aec:	0e 94 b0 18 	call	0x3160	; 0x3160 <USB_Init>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2e>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>:
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1c>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1e>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	5c 01       	movw	r10, r24
    1b1e:	6b 01       	movw	r12, r22
    1b20:	7a 01       	movw	r14, r20
    1b22:	92 2e       	mov	r9, r18
    1b24:	00 23       	and	r16, r16
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x34>
    1b28:	01 30       	cpi	r16, 0x01	; 1
    1b2a:	39 f1       	breq	.+78     	; 0x1b7a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x80>
    1b2c:	db c1       	rjmp	.+950    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1b2e:	21 11       	cpse	r18, r1
    1b30:	cb c1       	rjmp	.+918    	; 0x1ec8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ce>
    1b32:	60 ef       	ldi	r22, 0xF0	; 240
    1b34:	8d e4       	ldi	r24, 0x4D	; 77
    1b36:	94 e0       	ldi	r25, 0x04	; 4
    1b38:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1b3c:	c1 14       	cp	r12, r1
    1b3e:	d1 04       	cpc	r13, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x68>
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	10 e0       	ldi	r17, 0x00	; 0
    1b46:	f7 01       	movw	r30, r14
    1b48:	61 91       	ld	r22, Z+
    1b4a:	7f 01       	movw	r14, r30
    1b4c:	8d e4       	ldi	r24, 0x4D	; 77
    1b4e:	94 e0       	ldi	r25, 0x04	; 4
    1b50:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1b54:	0f 5f       	subi	r16, 0xFF	; 255
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	0c 15       	cp	r16, r12
    1b5a:	1d 05       	cpc	r17, r13
    1b5c:	a0 f3       	brcs	.-24     	; 0x1b46 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x4c>
    1b5e:	91 10       	cpse	r9, r1
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>
    1b62:	67 ef       	ldi	r22, 0xF7	; 247
    1b64:	8d e4       	ldi	r24, 0x4D	; 77
    1b66:	94 e0       	ldi	r25, 0x04	; 4
    1b68:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1b6c:	f5 01       	movw	r30, r10
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x7c>
    1b74:	b7 c1       	rjmp	.+878    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1b76:	15 82       	std	Z+5, r1	; 0x05
    1b78:	b5 c1       	rjmp	.+874    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1b7a:	22 23       	and	r18, r18
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x8e>
    1b7e:	64 30       	cpi	r22, 0x04	; 4
    1b80:	71 05       	cpc	r23, r1
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x8c>
    1b84:	26 c1       	rjmp	.+588    	; 0x1dd2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2d8>
    1b86:	53 c1       	rjmp	.+678    	; 0x1e2e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x334>
    1b88:	64 30       	cpi	r22, 0x04	; 4
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x96>
    1b8e:	a0 c1       	rjmp	.+832    	; 0x1ed0 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3d6>
    1b90:	91 2c       	mov	r9, r1
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	68 94       	set
    1b96:	aa 24       	eor	r10, r10
    1b98:	a2 f8       	bld	r10, 2
    1b9a:	08 ee       	ldi	r16, 0xE8	; 232
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	0f 2e       	mov	r0, r31
    1ba0:	f0 ef       	ldi	r31, 0xF0	; 240
    1ba2:	7f 2e       	mov	r7, r31
    1ba4:	f0 2d       	mov	r31, r0
    1ba6:	88 24       	eor	r8, r8
    1ba8:	83 94       	inc	r8
    1baa:	b1 2c       	mov	r11, r1
    1bac:	88 23       	and	r24, r24
    1bae:	d1 f0       	breq	.+52     	; 0x1be4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xea>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	90 81       	ld	r25, Z
    1bb4:	81 81       	ldd	r24, Z+1	; 0x01
    1bb6:	a9 82       	std	Y+1, r10	; 0x01
    1bb8:	7a 82       	std	Y+2, r7	; 0x02
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	8c 83       	std	Y+4, r24	; 0x04
    1bbe:	be 01       	movw	r22, r28
    1bc0:	6f 5f       	subi	r22, 0xFF	; 255
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	81 e4       	ldi	r24, 0x41	; 65
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <MIDI_Device_SendEventPacket>
    1bcc:	81 e4       	ldi	r24, 0x41	; 65
    1bce:	94 e0       	ldi	r25, 0x04	; 4
    1bd0:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <MIDI_Device_Flush>
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
    1bd6:	ef 0e       	add	r14, r31
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	c8 1a       	sub	r12, r24
    1bde:	d1 08       	sbc	r13, r1
    1be0:	98 2c       	mov	r9, r8
    1be2:	1a c0       	rjmp	.+52     	; 0x1c18 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x11e>
    1be4:	f7 01       	movw	r30, r14
    1be6:	20 81       	ld	r18, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	a9 82       	std	Y+1, r10	; 0x01
    1bee:	2a 83       	std	Y+2, r18	; 0x02
    1bf0:	9b 83       	std	Y+3, r25	; 0x03
    1bf2:	8c 83       	std	Y+4, r24	; 0x04
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	64 e0       	ldi	r22, 0x04	; 4
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1c04:	f8 01       	movw	r30, r16
    1c06:	80 81       	ld	r24, Z
    1c08:	8e 77       	andi	r24, 0x7E	; 126
    1c0a:	80 83       	st	Z, r24
    1c0c:	f3 e0       	ldi	r31, 0x03	; 3
    1c0e:	ef 0e       	add	r14, r31
    1c10:	f1 1c       	adc	r15, r1
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	c8 1a       	sub	r12, r24
    1c16:	d1 08       	sbc	r13, r1
    1c18:	8b 2d       	mov	r24, r11
    1c1a:	94 e0       	ldi	r25, 0x04	; 4
    1c1c:	c9 16       	cp	r12, r25
    1c1e:	d1 04       	cpc	r13, r1
    1c20:	28 f6       	brcc	.-118    	; 0x1bac <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xb2>
    1c22:	f7 01       	movw	r30, r14
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	c9 16       	cp	r12, r25
    1c28:	d1 04       	cpc	r13, r1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x134>
    1c2c:	57 c0       	rjmp	.+174    	; 0x1cdc <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1e2>
    1c2e:	99 20       	and	r9, r9
    1c30:	49 f1       	breq	.+82     	; 0x1c84 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x18a>
    1c32:	20 81       	ld	r18, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	34 e0       	ldi	r19, 0x04	; 4
    1c3a:	39 83       	std	Y+1, r19	; 0x01
    1c3c:	2a 83       	std	Y+2, r18	; 0x02
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8c 83       	std	Y+4, r24	; 0x04
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	64 e0       	ldi	r22, 0x04	; 4
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1c52:	08 ee       	ldi	r16, 0xE8	; 232
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 81       	ld	r24, Z
    1c5a:	8e 77       	andi	r24, 0x7E	; 126
    1c5c:	80 83       	st	Z, r24
    1c5e:	85 e0       	ldi	r24, 0x05	; 5
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	87 ef       	ldi	r24, 0xF7	; 247
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	1b 82       	std	Y+3, r1	; 0x03
    1c68:	1c 82       	std	Y+4, r1	; 0x04
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	ce 01       	movw	r24, r28
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8e 77       	andi	r24, 0x7E	; 126
    1c80:	80 83       	st	Z, r24
    1c82:	30 c1       	rjmp	.+608    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1c84:	f7 01       	movw	r30, r14
    1c86:	90 81       	ld	r25, Z
    1c88:	81 81       	ldd	r24, Z+1	; 0x01
    1c8a:	24 e0       	ldi	r18, 0x04	; 4
    1c8c:	29 83       	std	Y+1, r18	; 0x01
    1c8e:	20 ef       	ldi	r18, 0xF0	; 240
    1c90:	2a 83       	std	Y+2, r18	; 0x02
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8c 83       	std	Y+4, r24	; 0x04
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	64 e0       	ldi	r22, 0x04	; 4
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1ca6:	08 ee       	ldi	r16, 0xE8	; 232
    1ca8:	10 e0       	ldi	r17, 0x00	; 0
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 81       	ld	r24, Z
    1cae:	8e 77       	andi	r24, 0x7E	; 126
    1cb0:	80 83       	st	Z, r24
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	96 e0       	ldi	r25, 0x06	; 6
    1cb8:	99 83       	std	Y+1, r25	; 0x01
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	87 ef       	ldi	r24, 0xF7	; 247
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	1c 82       	std	Y+4, r1	; 0x04
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8e 77       	andi	r24, 0x7E	; 126
    1cd8:	80 83       	st	Z, r24
    1cda:	04 c1       	rjmp	.+520    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1cdc:	f2 e0       	ldi	r31, 0x02	; 2
    1cde:	cf 16       	cp	r12, r31
    1ce0:	d1 04       	cpc	r13, r1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1ec>
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x272>
    1ce6:	99 20       	and	r9, r9
    1ce8:	b9 f0       	breq	.+46     	; 0x1d18 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x21e>
    1cea:	f7 01       	movw	r30, r14
    1cec:	90 81       	ld	r25, Z
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	27 e0       	ldi	r18, 0x07	; 7
    1cf2:	29 83       	std	Y+1, r18	; 0x01
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	87 ef       	ldi	r24, 0xF7	; 247
    1cfa:	8c 83       	std	Y+4, r24	; 0x04
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	64 e0       	ldi	r22, 0x04	; 4
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1d0c:	e8 ee       	ldi	r30, 0xE8	; 232
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8e 77       	andi	r24, 0x7E	; 126
    1d14:	80 83       	st	Z, r24
    1d16:	e6 c0       	rjmp	.+460    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1d18:	f7 01       	movw	r30, r14
    1d1a:	90 81       	ld	r25, Z
    1d1c:	81 81       	ldd	r24, Z+1	; 0x01
    1d1e:	24 e0       	ldi	r18, 0x04	; 4
    1d20:	29 83       	std	Y+1, r18	; 0x01
    1d22:	20 ef       	ldi	r18, 0xF0	; 240
    1d24:	2a 83       	std	Y+2, r18	; 0x02
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	8c 83       	std	Y+4, r24	; 0x04
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1d3a:	08 ee       	ldi	r16, 0xE8	; 232
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 81       	ld	r24, Z
    1d42:	8e 77       	andi	r24, 0x7E	; 126
    1d44:	80 83       	st	Z, r24
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	87 ef       	ldi	r24, 0xF7	; 247
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	1b 82       	std	Y+3, r1	; 0x03
    1d50:	1c 82       	std	Y+4, r1	; 0x04
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	64 e0       	ldi	r22, 0x04	; 4
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1d62:	f8 01       	movw	r30, r16
    1d64:	80 81       	ld	r24, Z
    1d66:	8e 77       	andi	r24, 0x7E	; 126
    1d68:	80 83       	st	Z, r24
    1d6a:	bc c0       	rjmp	.+376    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1d6c:	ca 94       	dec	r12
    1d6e:	cd 28       	or	r12, r13
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x27a>
    1d72:	b8 c0       	rjmp	.+368    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1d74:	99 20       	and	r9, r9
    1d76:	b1 f0       	breq	.+44     	; 0x1da4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2aa>
    1d78:	f7 01       	movw	r30, r14
    1d7a:	80 81       	ld	r24, Z
    1d7c:	96 e0       	ldi	r25, 0x06	; 6
    1d7e:	99 83       	std	Y+1, r25	; 0x01
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	87 ef       	ldi	r24, 0xF7	; 247
    1d84:	8b 83       	std	Y+3, r24	; 0x03
    1d86:	1c 82       	std	Y+4, r1	; 0x04
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	64 e0       	ldi	r22, 0x04	; 4
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1d98:	e8 ee       	ldi	r30, 0xE8	; 232
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8e 77       	andi	r24, 0x7E	; 126
    1da0:	80 83       	st	Z, r24
    1da2:	a0 c0       	rjmp	.+320    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1da4:	f7 01       	movw	r30, r14
    1da6:	80 81       	ld	r24, Z
    1da8:	97 e0       	ldi	r25, 0x07	; 7
    1daa:	99 83       	std	Y+1, r25	; 0x01
    1dac:	90 ef       	ldi	r25, 0xF0	; 240
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	87 ef       	ldi	r24, 0xF7	; 247
    1db4:	8c 83       	std	Y+4, r24	; 0x04
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	64 e0       	ldi	r22, 0x04	; 4
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1dc6:	e8 ee       	ldi	r30, 0xE8	; 232
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8e 77       	andi	r24, 0x7E	; 126
    1dce:	80 83       	st	Z, r24
    1dd0:	89 c0       	rjmp	.+274    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1dd2:	8a 01       	movw	r16, r20
    1dd4:	0e 5f       	subi	r16, 0xFE	; 254
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	68 94       	set
    1dda:	99 24       	eor	r9, r9
    1ddc:	92 f8       	bld	r9, 2
    1dde:	0f 2e       	mov	r0, r31
    1de0:	f8 ee       	ldi	r31, 0xE8	; 232
    1de2:	af 2e       	mov	r10, r31
    1de4:	b1 2c       	mov	r11, r1
    1de6:	f0 2d       	mov	r31, r0
    1de8:	f7 01       	movw	r30, r14
    1dea:	20 81       	ld	r18, Z
    1dec:	f8 01       	movw	r30, r16
    1dee:	31 97       	sbiw	r30, 0x01	; 1
    1df0:	90 81       	ld	r25, Z
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 81       	ld	r24, Z
    1df6:	99 82       	std	Y+1, r9	; 0x01
    1df8:	2a 83       	std	Y+2, r18	; 0x02
    1dfa:	9b 83       	std	Y+3, r25	; 0x03
    1dfc:	8c 83       	std	Y+4, r24	; 0x04
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	ce 01       	movw	r24, r28
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1e0e:	f5 01       	movw	r30, r10
    1e10:	80 81       	ld	r24, Z
    1e12:	8e 77       	andi	r24, 0x7E	; 126
    1e14:	80 83       	st	Z, r24
    1e16:	f3 e0       	ldi	r31, 0x03	; 3
    1e18:	ef 0e       	add	r14, r31
    1e1a:	f1 1c       	adc	r15, r1
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	c8 1a       	sub	r12, r24
    1e20:	d1 08       	sbc	r13, r1
    1e22:	0d 5f       	subi	r16, 0xFD	; 253
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	94 e0       	ldi	r25, 0x04	; 4
    1e28:	c9 16       	cp	r12, r25
    1e2a:	d1 04       	cpc	r13, r1
    1e2c:	e8 f6       	brcc	.-70     	; 0x1de8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2ee>
    1e2e:	e3 e0       	ldi	r30, 0x03	; 3
    1e30:	ce 16       	cp	r12, r30
    1e32:	d1 04       	cpc	r13, r1
    1e34:	b9 f4       	brne	.+46     	; 0x1e64 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x36a>
    1e36:	f7 01       	movw	r30, r14
    1e38:	20 81       	ld	r18, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	37 e0       	ldi	r19, 0x07	; 7
    1e40:	39 83       	std	Y+1, r19	; 0x01
    1e42:	2a 83       	std	Y+2, r18	; 0x02
    1e44:	9b 83       	std	Y+3, r25	; 0x03
    1e46:	8c 83       	std	Y+4, r24	; 0x04
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	64 e0       	ldi	r22, 0x04	; 4
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1e58:	e8 ee       	ldi	r30, 0xE8	; 232
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e 77       	andi	r24, 0x7E	; 126
    1e60:	80 83       	st	Z, r24
    1e62:	40 c0       	rjmp	.+128    	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1e64:	f2 e0       	ldi	r31, 0x02	; 2
    1e66:	cf 16       	cp	r12, r31
    1e68:	d1 04       	cpc	r13, r1
    1e6a:	b1 f4       	brne	.+44     	; 0x1e98 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x39e>
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	90 81       	ld	r25, Z
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	26 e0       	ldi	r18, 0x06	; 6
    1e74:	29 83       	std	Y+1, r18	; 0x01
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	1c 82       	std	Y+4, r1	; 0x04
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	64 e0       	ldi	r22, 0x04	; 4
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	ce 01       	movw	r24, r28
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1e8c:	e8 ee       	ldi	r30, 0xE8	; 232
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8e 77       	andi	r24, 0x7E	; 126
    1e94:	80 83       	st	Z, r24
    1e96:	26 c0       	rjmp	.+76     	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1e98:	ca 94       	dec	r12
    1e9a:	cd 28       	or	r12, r13
    1e9c:	19 f5       	brne	.+70     	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	80 81       	ld	r24, Z
    1ea2:	95 e0       	ldi	r25, 0x05	; 5
    1ea4:	99 83       	std	Y+1, r25	; 0x01
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	1b 82       	std	Y+3, r1	; 0x03
    1eaa:	1c 82       	std	Y+4, r1	; 0x04
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	64 e0       	ldi	r22, 0x04	; 4
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    1ebc:	e8 ee       	ldi	r30, 0xE8	; 232
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8e 77       	andi	r24, 0x7E	; 126
    1ec4:	80 83       	st	Z, r24
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ea>
    1ec8:	67 2b       	or	r22, r23
    1eca:	09 f0       	breq	.+2      	; 0x1ece <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3d4>
    1ecc:	3a ce       	rjmp	.-908    	; 0x1b42 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x48>
    1ece:	4e ce       	rjmp	.-868    	; 0x1b6c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>
    1ed0:	63 30       	cpi	r22, 0x03	; 3
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3de>
    1ed6:	d6 ce       	rjmp	.-596    	; 0x1c84 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x18a>
    1ed8:	62 30       	cpi	r22, 0x02	; 2
    1eda:	71 05       	cpc	r23, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3e6>
    1ede:	1c cf       	rjmp	.-456    	; 0x1d18 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x21e>
    1ee0:	91 2c       	mov	r9, r1
    1ee2:	44 cf       	rjmp	.-376    	; 0x1d6c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x272>
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	7f 90       	pop	r7
    1f06:	08 95       	ret

00001f08 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>:
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	8c 01       	movw	r16, r24
    1f10:	c6 2f       	mov	r28, r22
    1f12:	6d 3f       	cpi	r22, 0xFD	; 253
    1f14:	38 f4       	brcc	.+14     	; 0x1f24 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x1c>
    1f16:	6a 3f       	cpi	r22, 0xFA	; 250
    1f18:	38 f4       	brcc	.+14     	; 0x1f28 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f1a:	66 3f       	cpi	r22, 0xF6	; 246
    1f1c:	29 f0       	breq	.+10     	; 0x1f28 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f1e:	68 3f       	cpi	r22, 0xF8	; 248
    1f20:	41 f4       	brne	.+16     	; 0x1f32 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f24:	6e 3f       	cpi	r22, 0xFE	; 254
    1f26:	28 f0       	brcs	.+10     	; 0x1f32 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
    1f28:	6c 2f       	mov	r22, r28
    1f2a:	8d e4       	ldi	r24, 0x4D	; 77
    1f2c:	94 e0       	ldi	r25, 0x04	; 4
    1f2e:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1f32:	f8 01       	movw	r30, r16
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	88 23       	and	r24, r24
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
    1f3a:	c6 3f       	cpi	r28, 0xF6	; 246
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
    1f3e:	15 82       	std	Z+5, r1	; 0x05
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	08 95       	ret

00001f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>:
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x10>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x12>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	01 50       	subi	r16, 0x01	; 1
    1f60:	00 31       	cpi	r16, 0x10	; 16
    1f62:	10 f4       	brcc	.+4      	; 0x1f68 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x20>
    1f64:	66 23       	and	r22, r22
    1f66:	4c f0       	brlt	.+18     	; 0x1f7a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x32>
    1f68:	fc 01       	movw	r30, r24
    1f6a:	22 81       	ldd	r18, Z+2	; 0x02
    1f6c:	22 23       	and	r18, r18
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x2a>
    1f70:	5e c0       	rjmp	.+188    	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1f72:	e1 10       	cpse	r14, r1
    1f74:	5c c0       	rjmp	.+184    	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1f76:	15 82       	std	Z+5, r1	; 0x05
    1f78:	5a c0       	rjmp	.+180    	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1f7a:	16 2f       	mov	r17, r22
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	61 3e       	cpi	r22, 0xE1	; 225
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x3c>
    1f82:	50 c0       	rjmp	.+160    	; 0x2024 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xdc>
    1f84:	4f 77       	andi	r20, 0x7F	; 127
    1f86:	f4 2e       	mov	r15, r20
    1f88:	2f 77       	andi	r18, 0x7F	; 127
    1f8a:	d2 2e       	mov	r13, r18
    1f8c:	0f 70       	andi	r16, 0x0F	; 15
    1f8e:	06 2b       	or	r16, r22
    1f90:	22 81       	ldd	r18, Z+2	; 0x02
    1f92:	22 23       	and	r18, r18
    1f94:	61 f0       	breq	.+24     	; 0x1fae <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>
    1f96:	e1 10       	cpse	r14, r1
    1f98:	0a c0       	rjmp	.+20     	; 0x1fae <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>
    1f9a:	25 81       	ldd	r18, Z+5	; 0x05
    1f9c:	20 17       	cp	r18, r16
    1f9e:	89 f0       	breq	.+34     	; 0x1fc2 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    1fa0:	05 83       	std	Z+5, r16	; 0x05
    1fa2:	60 2f       	mov	r22, r16
    1fa4:	8d e4       	ldi	r24, 0x4D	; 77
    1fa6:	94 e0       	ldi	r25, 0x04	; 4
    1fa8:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1fac:	0a c0       	rjmp	.+20     	; 0x1fc2 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    1fae:	e1 10       	cpse	r14, r1
    1fb0:	06 c0       	rjmp	.+12     	; 0x1fbe <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x76>
    1fb2:	60 2f       	mov	r22, r16
    1fb4:	8d e4       	ldi	r24, 0x4D	; 77
    1fb6:	94 e0       	ldi	r25, 0x04	; 4
    1fb8:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    1fbe:	e1 10       	cpse	r14, r1
    1fc0:	08 c0       	rjmp	.+16     	; 0x1fd2 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8a>
    1fc2:	6f 2d       	mov	r22, r15
    1fc4:	8d e4       	ldi	r24, 0x4D	; 77
    1fc6:	94 e0       	ldi	r25, 0x04	; 4
    1fc8:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1fcc:	10 3c       	cpi	r17, 0xC0	; 192
    1fce:	19 f4       	brne	.+6      	; 0x1fd6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8e>
    1fd0:	2e c0       	rjmp	.+92     	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1fd2:	10 3c       	cpi	r17, 0xC0	; 192
    1fd4:	51 f0       	breq	.+20     	; 0x1fea <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    1fd6:	10 3d       	cpi	r17, 0xD0	; 208
    1fd8:	41 f0       	breq	.+16     	; 0x1fea <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    1fda:	e1 10       	cpse	r14, r1
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    1fde:	6d 2d       	mov	r22, r13
    1fe0:	8d e4       	ldi	r24, 0x4D	; 77
    1fe2:	94 e0       	ldi	r25, 0x04	; 4
    1fe4:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN4UART5writeEh>
    1fe8:	22 c0       	rjmp	.+68     	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1fea:	f1 e0       	ldi	r31, 0x01	; 1
    1fec:	ef 12       	cpse	r14, r31
    1fee:	1f c0       	rjmp	.+62     	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    1ff0:	81 2f       	mov	r24, r17
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	0a 83       	std	Y+2, r16	; 0x02
    2008:	fb 82       	std	Y+3, r15	; 0x03
    200a:	dc 82       	std	Y+4, r13	; 0x04
    200c:	be 01       	movw	r22, r28
    200e:	6f 5f       	subi	r22, 0xFF	; 255
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	81 e4       	ldi	r24, 0x41	; 65
    2014:	94 e0       	ldi	r25, 0x04	; 4
    2016:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <MIDI_Device_SendEventPacket>
    201a:	81 e4       	ldi	r24, 0x41	; 65
    201c:	94 e0       	ldi	r25, 0x04	; 4
    201e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <MIDI_Device_Flush>
    2022:	05 c0       	rjmp	.+10     	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    2024:	66 3f       	cpi	r22, 0xF6	; 246
    2026:	18 f0       	brcs	.+6      	; 0x202e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe6>
    2028:	4e 2d       	mov	r20, r14
    202a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	df 90       	pop	r13
    2044:	08 95       	ret

00002046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>:
    2046:	ef 92       	push	r14
    2048:	0f 93       	push	r16
    204a:	e0 2e       	mov	r14, r16
    204c:	02 2f       	mov	r16, r18
    204e:	24 2f       	mov	r18, r20
    2050:	46 2f       	mov	r20, r22
    2052:	60 e9       	ldi	r22, 0x90	; 144
    2054:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2058:	0f 91       	pop	r16
    205a:	ef 90       	pop	r14
    205c:	08 95       	ret

0000205e <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>:
    205e:	ef 92       	push	r14
    2060:	0f 93       	push	r16
    2062:	e0 2e       	mov	r14, r16
    2064:	02 2f       	mov	r16, r18
    2066:	24 2f       	mov	r18, r20
    2068:	46 2f       	mov	r20, r22
    206a:	60 e8       	ldi	r22, 0x80	; 128
    206c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2070:	0f 91       	pop	r16
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>:
    2076:	ef 92       	push	r14
    2078:	0f 93       	push	r16
    207a:	e2 2e       	mov	r14, r18
    207c:	04 2f       	mov	r16, r20
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	46 2f       	mov	r20, r22
    2082:	60 ec       	ldi	r22, 0xC0	; 192
    2084:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2088:	0f 91       	pop	r16
    208a:	ef 90       	pop	r14
    208c:	08 95       	ret

0000208e <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>:
    208e:	ef 92       	push	r14
    2090:	0f 93       	push	r16
    2092:	e0 2e       	mov	r14, r16
    2094:	02 2f       	mov	r16, r18
    2096:	24 2f       	mov	r18, r20
    2098:	46 2f       	mov	r20, r22
    209a:	60 eb       	ldi	r22, 0xB0	; 176
    209c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    20a0:	0f 91       	pop	r16
    20a2:	ef 90       	pop	r14
    20a4:	08 95       	ret

000020a6 <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>:
    20a6:	ef 92       	push	r14
    20a8:	0f 93       	push	r16
    20aa:	e0 2e       	mov	r14, r16
    20ac:	02 2f       	mov	r16, r18
    20ae:	24 2f       	mov	r18, r20
    20b0:	46 2f       	mov	r20, r22
    20b2:	60 ea       	ldi	r22, 0xA0	; 160
    20b4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    20b8:	0f 91       	pop	r16
    20ba:	ef 90       	pop	r14
    20bc:	08 95       	ret

000020be <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>:
    20be:	ef 92       	push	r14
    20c0:	0f 93       	push	r16
    20c2:	e2 2e       	mov	r14, r18
    20c4:	04 2f       	mov	r16, r20
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	46 2f       	mov	r20, r22
    20ca:	60 ed       	ldi	r22, 0xD0	; 208
    20cc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    20d0:	0f 91       	pop	r16
    20d2:	ef 90       	pop	r14
    20d4:	08 95       	ret

000020d6 <_ZN6HWmidi19enableRunningStatusEv>:
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	fc 01       	movw	r30, r24
    20da:	22 83       	std	Z+2, r18	; 0x02
    20dc:	08 95       	ret

000020de <_ZN6HWmidi20disableRunningStatusEv>:
    20de:	fc 01       	movw	r30, r24
    20e0:	12 82       	std	Z+2, r1	; 0x02
    20e2:	08 95       	ret

000020e4 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>:
    20e4:	44 23       	and	r20, r20
    20e6:	19 f0       	breq	.+6      	; 0x20ee <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0xa>
    20e8:	41 30       	cpi	r20, 0x01	; 1
    20ea:	81 f0       	breq	.+32     	; 0x210c <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x28>
    20ec:	21 c0       	rjmp	.+66     	; 0x2130 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x4c>
    20ee:	fc 01       	movw	r30, r24
    20f0:	21 89       	ldd	r18, Z+17	; 0x11
    20f2:	22 23       	and	r18, r18
    20f4:	f9 f0       	breq	.+62     	; 0x2134 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x50>
    20f6:	20 58       	subi	r18, 0x80	; 128
    20f8:	21 36       	cpi	r18, 0x61	; 97
    20fa:	f0 f4       	brcc	.+60     	; 0x2138 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x54>
    20fc:	80 89       	ldd	r24, Z+16	; 0x10
    20fe:	86 17       	cp	r24, r22
    2100:	e9 f0       	breq	.+58     	; 0x213c <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x58>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	66 23       	and	r22, r22
    2106:	09 f1       	breq	.+66     	; 0x214a <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x66>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret
    210c:	fc 01       	movw	r30, r24
    210e:	ef 59       	subi	r30, 0x9F	; 159
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	20 81       	ld	r18, Z
    2114:	22 23       	and	r18, r18
    2116:	a1 f0       	breq	.+40     	; 0x2140 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x5c>
    2118:	20 58       	subi	r18, 0x80	; 128
    211a:	21 36       	cpi	r18, 0x61	; 97
    211c:	98 f4       	brcc	.+38     	; 0x2144 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x60>
    211e:	31 97       	sbiw	r30, 0x01	; 1
    2120:	80 81       	ld	r24, Z
    2122:	86 17       	cp	r24, r22
    2124:	89 f0       	breq	.+34     	; 0x2148 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x64>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	66 23       	and	r22, r22
    212a:	79 f0       	breq	.+30     	; 0x214a <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x66>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	08 95       	ret
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	08 95       	ret
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	08 95       	ret
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	08 95       	ret
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	08 95       	ret
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	08 95       	ret
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	08 95       	ret
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	08 95       	ret

0000214c <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>:
    214c:	66 23       	and	r22, r22
    214e:	19 f0       	breq	.+6      	; 0x2156 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0xa>
    2150:	61 30       	cpi	r22, 0x01	; 1
    2152:	21 f0       	breq	.+8      	; 0x215c <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x10>
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x1a>
    2156:	fc 01       	movw	r30, r24
    2158:	81 89       	ldd	r24, Z+17	; 0x11
    215a:	08 95       	ret
    215c:	fc 01       	movw	r30, r24
    215e:	ef 59       	subi	r30, 0x9F	; 159
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	08 95       	ret
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	08 95       	ret

0000216a <_ZNK6HWmidi8getData1E19midiInterfaceType_t>:
    216a:	66 23       	and	r22, r22
    216c:	19 f0       	breq	.+6      	; 0x2174 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0xa>
    216e:	61 30       	cpi	r22, 0x01	; 1
    2170:	21 f0       	breq	.+8      	; 0x217a <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x10>
    2172:	08 c0       	rjmp	.+16     	; 0x2184 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x1a>
    2174:	fc 01       	movw	r30, r24
    2176:	82 89       	ldd	r24, Z+18	; 0x12
    2178:	08 95       	ret
    217a:	fc 01       	movw	r30, r24
    217c:	ee 59       	subi	r30, 0x9E	; 158
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	08 95       	ret
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	08 95       	ret

00002188 <_ZNK6HWmidi8getData2E19midiInterfaceType_t>:
    2188:	66 23       	and	r22, r22
    218a:	19 f0       	breq	.+6      	; 0x2192 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0xa>
    218c:	61 30       	cpi	r22, 0x01	; 1
    218e:	21 f0       	breq	.+8      	; 0x2198 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x10>
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x1a>
    2192:	fc 01       	movw	r30, r24
    2194:	83 89       	ldd	r24, Z+19	; 0x13
    2196:	08 95       	ret
    2198:	fc 01       	movw	r30, r24
    219a:	ed 59       	subi	r30, 0x9D	; 157
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	08 95       	ret
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	08 95       	ret

000021a6 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>:
    21a6:	66 23       	and	r22, r22
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xa>
    21aa:	61 30       	cpi	r22, 0x01	; 1
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xe>
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0x14>
    21b0:	44 96       	adiw	r24, 0x14	; 20
    21b2:	08 95       	ret
    21b4:	8c 59       	subi	r24, 0x9C	; 156
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	08 95       	ret
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	08 95       	ret

000021c0 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>:
    21c0:	66 23       	and	r22, r22
    21c2:	19 f0       	breq	.+6      	; 0x21ca <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0xa>
    21c4:	61 30       	cpi	r22, 0x01	; 1
    21c6:	59 f0       	breq	.+22     	; 0x21de <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x1e>
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x26>
    21ca:	fc 01       	movw	r30, r24
    21cc:	23 89       	ldd	r18, Z+19	; 0x13
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	32 2f       	mov	r19, r18
    21d2:	22 27       	eor	r18, r18
    21d4:	82 89       	ldd	r24, Z+18	; 0x12
    21d6:	a9 01       	movw	r20, r18
    21d8:	48 2b       	or	r20, r24
    21da:	ca 01       	movw	r24, r20
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x2a>
    21de:	fc 01       	movw	r30, r24
    21e0:	86 85       	ldd	r24, Z+14	; 0x0e
    21e2:	97 85       	ldd	r25, Z+15	; 0x0f
    21e4:	08 95       	ret
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	8c 34       	cpi	r24, 0x4C	; 76
    21ec:	91 05       	cpc	r25, r1
    21ee:	10 f0       	brcs	.+4      	; 0x21f4 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x34>
    21f0:	8b e4       	ldi	r24, 0x4B	; 75
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	08 95       	ret

000021f6 <_ZN6HWmidi15setInputChannelEh>:
    21f6:	fc 01       	movw	r30, r24
    21f8:	66 83       	std	Z+6, r22	; 0x06
    21fa:	08 95       	ret

000021fc <_ZN6HWmidi21getTypeFromStatusByteEh>:
    21fc:	66 23       	and	r22, r22
    21fe:	6c f4       	brge	.+26     	; 0x221a <_ZN6HWmidi21getTypeFromStatusByteEh+0x1e>
    2200:	8c e0       	ldi	r24, 0x0C	; 12
    2202:	86 0f       	add	r24, r22
    2204:	82 30       	cpi	r24, 0x02	; 2
    2206:	58 f0       	brcs	.+22     	; 0x221e <_ZN6HWmidi21getTypeFromStatusByteEh+0x22>
    2208:	86 2f       	mov	r24, r22
    220a:	8b 7f       	andi	r24, 0xFB	; 251
    220c:	89 3f       	cpi	r24, 0xF9	; 249
    220e:	49 f0       	breq	.+18     	; 0x2222 <_ZN6HWmidi21getTypeFromStatusByteEh+0x26>
    2210:	60 3f       	cpi	r22, 0xF0	; 240
    2212:	48 f4       	brcc	.+18     	; 0x2226 <_ZN6HWmidi21getTypeFromStatusByteEh+0x2a>
    2214:	86 2f       	mov	r24, r22
    2216:	80 7f       	andi	r24, 0xF0	; 240
    2218:	08 95       	ret
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	08 95       	ret
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	08 95       	ret
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	08 95       	ret
    2226:	86 2f       	mov	r24, r22
    2228:	08 95       	ret

0000222a <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>:
    222a:	86 2f       	mov	r24, r22
    222c:	8f 7e       	andi	r24, 0xEF	; 239
    222e:	80 38       	cpi	r24, 0x80	; 128
    2230:	59 f0       	breq	.+22     	; 0x2248 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x1e>
    2232:	80 3a       	cpi	r24, 0xA0	; 160
    2234:	59 f0       	breq	.+22     	; 0x224c <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x22>
    2236:	60 3d       	cpi	r22, 0xD0	; 208
    2238:	59 f0       	breq	.+22     	; 0x2250 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x26>
    223a:	60 3e       	cpi	r22, 0xE0	; 224
    223c:	59 f0       	breq	.+22     	; 0x2254 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2a>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	60 3c       	cpi	r22, 0xC0	; 192
    2242:	49 f0       	breq	.+18     	; 0x2256 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2c>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	08 95       	ret
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	08 95       	ret
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	08 95       	ret
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	08 95       	ret

00002258 <_ZN6HWmidi5parseE19midiInterfaceType_t>:
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	00 d0       	rcall	.+0      	; 0x226a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x12>
    226a:	00 d0       	rcall	.+0      	; 0x226c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	8c 01       	movw	r16, r24
    2272:	61 11       	cpse	r22, r1
    2274:	57 c1       	rjmp	.+686    	; 0x2524 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2cc>
    2276:	8d e4       	ldi	r24, 0x4D	; 77
    2278:	94 e0       	ldi	r25, 0x04	; 4
    227a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN4UART9availableEv>
    227e:	88 23       	and	r24, r24
    2280:	09 f4       	brne	.+2      	; 0x2284 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2c>
    2282:	50 c2       	rjmp	.+1184   	; 0x2724 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4cc>
    2284:	8d e4       	ldi	r24, 0x4D	; 77
    2286:	94 e0       	ldi	r25, 0x04	; 4
    2288:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN4UART4readEv>
    228c:	f8 2e       	mov	r15, r24
    228e:	28 2f       	mov	r18, r24
    2290:	f8 01       	movw	r30, r16
    2292:	84 85       	ldd	r24, Z+12	; 0x0c
    2294:	95 85       	ldd	r25, Z+13	; 0x0d
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	09 f0       	breq	.+2      	; 0x229c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x44>
    229a:	90 c0       	rjmp	.+288    	; 0x23bc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x164>
    229c:	f7 82       	std	Z+7, r15	; 0x07
    229e:	e4 80       	ldd	r14, Z+4	; 0x04
    22a0:	6e 2d       	mov	r22, r14
    22a2:	c8 01       	movw	r24, r16
    22a4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN6HWmidi21getTypeFromStatusByteEh>
    22a8:	68 2f       	mov	r22, r24
    22aa:	c8 01       	movw	r24, r16
    22ac:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    22b0:	88 23       	and	r24, r24
    22b2:	49 f0       	breq	.+18     	; 0x22c6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x6e>
    22b4:	ff 20       	and	r15, r15
    22b6:	3c f0       	brlt	.+14     	; 0x22c6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x6e>
    22b8:	f8 01       	movw	r30, r16
    22ba:	e7 82       	std	Z+7, r14	; 0x07
    22bc:	f0 86       	std	Z+8, r15	; 0x08
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	95 87       	std	Z+13, r25	; 0x0d
    22c4:	84 87       	std	Z+12, r24	; 0x0c
    22c6:	f8 01       	movw	r30, r16
    22c8:	f7 80       	ldd	r15, Z+7	; 0x07
    22ca:	6f 2d       	mov	r22, r15
    22cc:	c8 01       	movw	r24, r16
    22ce:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN6HWmidi21getTypeFromStatusByteEh>
    22d2:	48 2f       	mov	r20, r24
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	fa 01       	movw	r30, r20
    22d8:	e0 58       	subi	r30, 0x80	; 128
    22da:	f1 09       	sbc	r31, r1
    22dc:	e0 38       	cpi	r30, 0x80	; 128
    22de:	f1 05       	cpc	r31, r1
    22e0:	c8 f5       	brcc	.+114    	; 0x2354 <_ZN6HWmidi5parseE19midiInterfaceType_t+0xfc>
    22e2:	ea 5a       	subi	r30, 0xAA	; 170
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	0c 94 3e 30 	jmp	0x607c	; 0x607c <__tablejump2__>
    22ea:	f8 01       	movw	r30, r16
    22ec:	81 8b       	std	Z+17, r24	; 0x11
    22ee:	10 8a       	std	Z+16, r1	; 0x10
    22f0:	12 8a       	std	Z+18, r1	; 0x12
    22f2:	13 8a       	std	Z+19, r1	; 0x13
    22f4:	e1 5a       	subi	r30, 0xA1	; 161
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	80 83       	st	Z, r24
    22fc:	f8 01       	movw	r30, r16
    22fe:	15 86       	std	Z+13, r1	; 0x0d
    2300:	14 86       	std	Z+12, r1	; 0x0c
    2302:	13 86       	std	Z+11, r1	; 0x0b
    2304:	12 86       	std	Z+10, r1	; 0x0a
    2306:	28 c2       	rjmp	.+1104   	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2308:	22 e0       	ldi	r18, 0x02	; 2
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	f8 01       	movw	r30, r16
    230e:	33 87       	std	Z+11, r19	; 0x0b
    2310:	22 87       	std	Z+10, r18	; 0x0a
    2312:	24 85       	ldd	r18, Z+12	; 0x0c
    2314:	35 85       	ldd	r19, Z+13	; 0x0d
    2316:	21 15       	cp	r18, r1
    2318:	31 05       	cpc	r19, r1
    231a:	09 f0       	breq	.+2      	; 0x231e <_ZN6HWmidi5parseE19midiInterfaceType_t+0xc6>
    231c:	14 c2       	rjmp	.+1064   	; 0x2746 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4ee>
    231e:	41 c0       	rjmp	.+130    	; 0x23a2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>
    2320:	23 e0       	ldi	r18, 0x03	; 3
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	f8 01       	movw	r30, r16
    2326:	33 87       	std	Z+11, r19	; 0x0b
    2328:	22 87       	std	Z+10, r18	; 0x0a
    232a:	24 85       	ldd	r18, Z+12	; 0x0c
    232c:	35 85       	ldd	r19, Z+13	; 0x0d
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	08 f0       	brcs	.+2      	; 0x2336 <_ZN6HWmidi5parseE19midiInterfaceType_t+0xde>
    2334:	ff c1       	rjmp	.+1022   	; 0x2734 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4dc>
    2336:	35 c0       	rjmp	.+106    	; 0x23a2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>
    2338:	8b e4       	ldi	r24, 0x4B	; 75
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	f8 01       	movw	r30, r16
    233e:	93 87       	std	Z+11, r25	; 0x0b
    2340:	82 87       	std	Z+10, r24	; 0x0a
    2342:	14 82       	std	Z+4, r1	; 0x04
    2344:	80 ef       	ldi	r24, 0xF0	; 240
    2346:	84 8b       	std	Z+20, r24	; 0x14
    2348:	24 85       	ldd	r18, Z+12	; 0x0c
    234a:	35 85       	ldd	r19, Z+13	; 0x0d
    234c:	2a 34       	cpi	r18, 0x4A	; 74
    234e:	31 05       	cpc	r19, r1
    2350:	48 f4       	brcc	.+18     	; 0x2364 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x10c>
    2352:	27 c0       	rjmp	.+78     	; 0x23a2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>
    2354:	f8 01       	movw	r30, r16
    2356:	15 86       	std	Z+13, r1	; 0x0d
    2358:	14 86       	std	Z+12, r1	; 0x0c
    235a:	13 86       	std	Z+11, r1	; 0x0b
    235c:	12 86       	std	Z+10, r1	; 0x0a
    235e:	14 82       	std	Z+4, r1	; 0x04
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	fa c1       	rjmp	.+1012   	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2364:	80 ef       	ldi	r24, 0xF0	; 240
    2366:	f8 01       	movw	r30, r16
    2368:	81 8b       	std	Z+17, r24	; 0x11
    236a:	8f 2d       	mov	r24, r15
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	ff 24       	eor	r15, r15
    2370:	f3 94       	inc	r15
    2372:	f8 0e       	add	r15, r24
    2374:	f0 8a       	std	Z+16, r15	; 0x10
    2376:	80 85       	ldd	r24, Z+8	; 0x08
    2378:	82 8b       	std	Z+18, r24	; 0x12
    237a:	8b e4       	ldi	r24, 0x4B	; 75
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	03 97       	sbiw	r24, 0x03	; 3
    2380:	21 f4       	brne	.+8      	; 0x238a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x132>
    2382:	f8 01       	movw	r30, r16
    2384:	81 85       	ldd	r24, Z+9	; 0x09
    2386:	83 8b       	std	Z+19, r24	; 0x13
    2388:	02 c0       	rjmp	.+4      	; 0x238e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x136>
    238a:	f8 01       	movw	r30, r16
    238c:	13 8a       	std	Z+19, r1	; 0x13
    238e:	f8 01       	movw	r30, r16
    2390:	15 86       	std	Z+13, r1	; 0x0d
    2392:	14 86       	std	Z+12, r1	; 0x0c
    2394:	13 86       	std	Z+11, r1	; 0x0b
    2396:	12 86       	std	Z+10, r1	; 0x0a
    2398:	e1 5a       	subi	r30, 0xA1	; 161
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 83       	st	Z, r24
    23a0:	db c1       	rjmp	.+950    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    23a2:	2f 5f       	subi	r18, 0xFF	; 255
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	f8 01       	movw	r30, r16
    23a8:	35 87       	std	Z+13, r19	; 0x0d
    23aa:	24 87       	std	Z+12, r18	; 0x0c
    23ac:	83 81       	ldd	r24, Z+3	; 0x03
    23ae:	81 11       	cpse	r24, r1
    23b0:	bb c1       	rjmp	.+886    	; 0x2728 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d0>
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	c8 01       	movw	r24, r16
    23b6:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    23ba:	ce c1       	rjmp	.+924    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    23bc:	ff 20       	and	r15, r15
    23be:	cc f5       	brge	.+114    	; 0x2432 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>
    23c0:	2d 3f       	cpi	r18, 0xFD	; 253
    23c2:	38 f4       	brcc	.+14     	; 0x23d2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17a>
    23c4:	2a 3f       	cpi	r18, 0xFA	; 250
    23c6:	38 f4       	brcc	.+14     	; 0x23d6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17e>
    23c8:	27 3f       	cpi	r18, 0xF7	; 247
    23ca:	79 f0       	breq	.+30     	; 0x23ea <_ZN6HWmidi5parseE19midiInterfaceType_t+0x192>
    23cc:	28 3f       	cpi	r18, 0xF8	; 248
    23ce:	89 f5       	brne	.+98     	; 0x2432 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17e>
    23d2:	2e 3f       	cpi	r18, 0xFE	; 254
    23d4:	70 f1       	brcs	.+92     	; 0x2432 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>
    23d6:	f8 01       	movw	r30, r16
    23d8:	f1 8a       	std	Z+17, r15	; 0x11
    23da:	12 8a       	std	Z+18, r1	; 0x12
    23dc:	13 8a       	std	Z+19, r1	; 0x13
    23de:	10 8a       	std	Z+16, r1	; 0x10
    23e0:	e1 5a       	subi	r30, 0xA1	; 161
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	80 83       	st	Z, r24
    23e8:	b7 c1       	rjmp	.+878    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    23ea:	f8 01       	movw	r30, r16
    23ec:	24 89       	ldd	r18, Z+20	; 0x14
    23ee:	20 3f       	cpi	r18, 0xF0	; 240
    23f0:	c1 f4       	brne	.+48     	; 0x2422 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ca>
    23f2:	9c 01       	movw	r18, r24
    23f4:	2f 5f       	subi	r18, 0xFF	; 255
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	e8 0f       	add	r30, r24
    23fa:	f9 1f       	adc	r31, r25
    23fc:	47 ef       	ldi	r20, 0xF7	; 247
    23fe:	44 8b       	std	Z+20, r20	; 0x14
    2400:	80 ef       	ldi	r24, 0xF0	; 240
    2402:	f8 01       	movw	r30, r16
    2404:	81 8b       	std	Z+17, r24	; 0x11
    2406:	22 8b       	std	Z+18, r18	; 0x12
    2408:	33 8b       	std	Z+19, r19	; 0x13
    240a:	10 8a       	std	Z+16, r1	; 0x10
    240c:	e1 5a       	subi	r30, 0xA1	; 161
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 83       	st	Z, r24
    2414:	f8 01       	movw	r30, r16
    2416:	15 86       	std	Z+13, r1	; 0x0d
    2418:	14 86       	std	Z+12, r1	; 0x0c
    241a:	13 86       	std	Z+11, r1	; 0x0b
    241c:	12 86       	std	Z+10, r1	; 0x0a
    241e:	14 82       	std	Z+4, r1	; 0x04
    2420:	9b c1       	rjmp	.+822    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2422:	f8 01       	movw	r30, r16
    2424:	15 86       	std	Z+13, r1	; 0x0d
    2426:	14 86       	std	Z+12, r1	; 0x0c
    2428:	13 86       	std	Z+11, r1	; 0x0b
    242a:	12 86       	std	Z+10, r1	; 0x0a
    242c:	14 82       	std	Z+4, r1	; 0x04
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	93 c1       	rjmp	.+806    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2432:	f8 01       	movw	r30, r16
    2434:	27 81       	ldd	r18, Z+7	; 0x07
    2436:	20 3f       	cpi	r18, 0xF0	; 240
    2438:	21 f4       	brne	.+8      	; 0x2442 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ea>
    243a:	e8 0f       	add	r30, r24
    243c:	f9 1f       	adc	r31, r25
    243e:	f4 8a       	std	Z+20, r15	; 0x14
    2440:	04 c0       	rjmp	.+8      	; 0x244a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1f2>
    2442:	f8 01       	movw	r30, r16
    2444:	e8 0f       	add	r30, r24
    2446:	f9 1f       	adc	r31, r25
    2448:	f7 82       	std	Z+7, r15	; 0x07
    244a:	f8 01       	movw	r30, r16
    244c:	c2 84       	ldd	r12, Z+10	; 0x0a
    244e:	d3 84       	ldd	r13, Z+11	; 0x0b
    2450:	96 01       	movw	r18, r12
    2452:	21 50       	subi	r18, 0x01	; 1
    2454:	31 09       	sbc	r19, r1
    2456:	82 17       	cp	r24, r18
    2458:	93 07       	cpc	r25, r19
    245a:	08 f4       	brcc	.+2      	; 0x245e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x206>
    245c:	57 c0       	rjmp	.+174    	; 0x250c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2b4>
    245e:	e7 80       	ldd	r14, Z+7	; 0x07
    2460:	f0 ef       	ldi	r31, 0xF0	; 240
    2462:	ef 12       	cpse	r14, r31
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x21e>
    2466:	f8 01       	movw	r30, r16
    2468:	15 86       	std	Z+13, r1	; 0x0d
    246a:	14 86       	std	Z+12, r1	; 0x0c
    246c:	13 86       	std	Z+11, r1	; 0x0b
    246e:	12 86       	std	Z+10, r1	; 0x0a
    2470:	14 82       	std	Z+4, r1	; 0x04
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	71 c1       	rjmp	.+738    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2476:	6e 2d       	mov	r22, r14
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN6HWmidi21getTypeFromStatusByteEh>
    247e:	f8 2e       	mov	r15, r24
    2480:	f8 01       	movw	r30, r16
    2482:	81 8b       	std	Z+17, r24	; 0x11
    2484:	68 2f       	mov	r22, r24
    2486:	c8 01       	movw	r24, r16
    2488:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    248c:	88 23       	and	r24, r24
    248e:	31 f0       	breq	.+12     	; 0x249c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x244>
    2490:	8e 2d       	mov	r24, r14
    2492:	8f 70       	andi	r24, 0x0F	; 15
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	f8 01       	movw	r30, r16
    2498:	80 8b       	std	Z+16, r24	; 0x10
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x248>
    249c:	f8 01       	movw	r30, r16
    249e:	10 8a       	std	Z+16, r1	; 0x10
    24a0:	f8 01       	movw	r30, r16
    24a2:	80 85       	ldd	r24, Z+8	; 0x08
    24a4:	82 8b       	std	Z+18, r24	; 0x12
    24a6:	f3 e0       	ldi	r31, 0x03	; 3
    24a8:	cf 16       	cp	r12, r31
    24aa:	d1 04       	cpc	r13, r1
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x25e>
    24ae:	f8 01       	movw	r30, r16
    24b0:	81 85       	ldd	r24, Z+9	; 0x09
    24b2:	83 8b       	std	Z+19, r24	; 0x13
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <_ZN6HWmidi5parseE19midiInterfaceType_t+0x262>
    24b6:	f8 01       	movw	r30, r16
    24b8:	13 8a       	std	Z+19, r1	; 0x13
    24ba:	f8 01       	movw	r30, r16
    24bc:	15 86       	std	Z+13, r1	; 0x0d
    24be:	14 86       	std	Z+12, r1	; 0x0c
    24c0:	13 86       	std	Z+11, r1	; 0x0b
    24c2:	12 86       	std	Z+10, r1	; 0x0a
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	e1 5a       	subi	r30, 0xA1	; 161
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 83       	st	Z, r24
    24cc:	f0 eb       	ldi	r31, 0xB0	; 176
    24ce:	ff 16       	cp	r15, r31
    24d0:	a9 f0       	breq	.+42     	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24d2:	ff 15       	cp	r31, r15
    24d4:	50 f0       	brcs	.+20     	; 0x24ea <_ZN6HWmidi5parseE19midiInterfaceType_t+0x292>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	f8 16       	cp	r15, r24
    24da:	81 f0       	breq	.+32     	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24dc:	e0 ea       	ldi	r30, 0xA0	; 160
    24de:	fe 16       	cp	r15, r30
    24e0:	69 f0       	breq	.+26     	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24e2:	f0 e8       	ldi	r31, 0x80	; 128
    24e4:	ff 12       	cpse	r15, r31
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2ac>
    24e8:	09 c0       	rjmp	.+18     	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24ea:	80 ed       	ldi	r24, 0xD0	; 208
    24ec:	f8 16       	cp	r15, r24
    24ee:	31 f0       	breq	.+12     	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24f0:	e0 ee       	ldi	r30, 0xE0	; 224
    24f2:	fe 16       	cp	r15, r30
    24f4:	19 f0       	breq	.+6      	; 0x24fc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24f6:	f0 ec       	ldi	r31, 0xC0	; 192
    24f8:	ff 12       	cpse	r15, r31
    24fa:	04 c0       	rjmp	.+8      	; 0x2504 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2ac>
    24fc:	f8 01       	movw	r30, r16
    24fe:	e4 82       	std	Z+4, r14	; 0x04
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	2a c1       	rjmp	.+596    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2504:	f8 01       	movw	r30, r16
    2506:	14 82       	std	Z+4, r1	; 0x04
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	26 c1       	rjmp	.+588    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	f8 01       	movw	r30, r16
    2510:	95 87       	std	Z+13, r25	; 0x0d
    2512:	84 87       	std	Z+12, r24	; 0x0c
    2514:	83 81       	ldd	r24, Z+3	; 0x03
    2516:	81 11       	cpse	r24, r1
    2518:	09 c1       	rjmp	.+530    	; 0x272c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d4>
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	c8 01       	movw	r24, r16
    251e:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    2522:	1a c1       	rjmp	.+564    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2524:	61 30       	cpi	r22, 0x01	; 1
    2526:	09 f0       	breq	.+2      	; 0x252a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2d2>
    2528:	03 c1       	rjmp	.+518    	; 0x2730 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d8>
    252a:	80 91 75 07 	lds	r24, 0x0775
    252e:	84 30       	cpi	r24, 0x04	; 4
    2530:	09 f0       	breq	.+2      	; 0x2534 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2dc>
    2532:	f2 c0       	rjmp	.+484    	; 0x2718 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c0>
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	80 93 e9 00 	sts	0x00E9, r24
    253a:	80 91 e8 00 	lds	r24, 0x00E8
    253e:	82 ff       	sbrs	r24, 2
    2540:	ed c0       	rjmp	.+474    	; 0x271c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c4>
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	ce 01       	movw	r24, r28
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <Endpoint_Read_Stream_LE>
    2552:	20 91 f3 00 	lds	r18, 0x00F3
    2556:	80 91 f2 00 	lds	r24, 0x00F2
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	92 2b       	or	r25, r18
    255e:	89 2b       	or	r24, r25
    2560:	29 f4       	brne	.+10     	; 0x256c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x314>
    2562:	e8 ee       	ldi	r30, 0xE8	; 232
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8b 77       	andi	r24, 0x7B	; 123
    256a:	80 83       	st	Z, r24
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	82 95       	swap	r24
    2570:	80 7f       	andi	r24, 0xF0	; 240
    2572:	80 38       	cpi	r24, 0x80	; 128
    2574:	09 f4       	brne	.+2      	; 0x2578 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x320>
    2576:	61 c0       	rjmp	.+194    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    2578:	88 f4       	brcc	.+34     	; 0x259c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x344>
    257a:	80 35       	cpi	r24, 0x50	; 80
    257c:	09 f1       	breq	.+66     	; 0x25c0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x368>
    257e:	38 f4       	brcc	.+14     	; 0x258e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x336>
    2580:	80 32       	cpi	r24, 0x20	; 32
    2582:	09 f4       	brne	.+2      	; 0x2586 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x32e>
    2584:	47 c0       	rjmp	.+142    	; 0x2614 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3bc>
    2586:	80 34       	cpi	r24, 0x40	; 64
    2588:	09 f4       	brne	.+2      	; 0x258c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x334>
    258a:	6b c0       	rjmp	.+214    	; 0x2662 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x40a>
    258c:	c9 c0       	rjmp	.+402    	; 0x2720 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    258e:	80 36       	cpi	r24, 0x60	; 96
    2590:	09 f4       	brne	.+2      	; 0x2594 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x33c>
    2592:	84 c0       	rjmp	.+264    	; 0x269c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x444>
    2594:	80 37       	cpi	r24, 0x70	; 112
    2596:	09 f4       	brne	.+2      	; 0x259a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x342>
    2598:	9e c0       	rjmp	.+316    	; 0x26d6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x47e>
    259a:	c2 c0       	rjmp	.+388    	; 0x2720 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    259c:	80 3b       	cpi	r24, 0xB0	; 176
    259e:	09 f4       	brne	.+2      	; 0x25a2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x34a>
    25a0:	4c c0       	rjmp	.+152    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25a2:	38 f4       	brcc	.+14     	; 0x25b2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x35a>
    25a4:	80 39       	cpi	r24, 0x90	; 144
    25a6:	09 f4       	brne	.+2      	; 0x25aa <_ZN6HWmidi5parseE19midiInterfaceType_t+0x352>
    25a8:	48 c0       	rjmp	.+144    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25aa:	80 3a       	cpi	r24, 0xA0	; 160
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x358>
    25ae:	b8 c0       	rjmp	.+368    	; 0x2720 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    25b0:	44 c0       	rjmp	.+136    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25b2:	80 3e       	cpi	r24, 0xE0	; 224
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x360>
    25b6:	41 c0       	rjmp	.+130    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25b8:	82 3f       	cpi	r24, 0xF2	; 242
    25ba:	09 f0       	breq	.+2      	; 0x25be <_ZN6HWmidi5parseE19midiInterfaceType_t+0x366>
    25bc:	b1 c0       	rjmp	.+354    	; 0x2720 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    25be:	3d c0       	rjmp	.+122    	; 0x263a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	87 3f       	cpi	r24, 0xF7	; 247
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x38c>
    25c6:	f8 01       	movw	r30, r16
    25c8:	ef 59       	subi	r30, 0x9F	; 159
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 83       	st	Z, r24
    25ce:	31 97       	sbiw	r30, 0x01	; 1
    25d0:	10 82       	st	Z, r1
    25d2:	32 96       	adiw	r30, 0x02	; 2
    25d4:	10 82       	st	Z, r1
    25d6:	31 96       	adiw	r30, 0x01	; 1
    25d8:	10 82       	st	Z, r1
    25da:	e4 5b       	subi	r30, 0xB4	; 180
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	80 83       	st	Z, r24
    25e2:	ba c0       	rjmp	.+372    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    25e4:	f8 01       	movw	r30, r16
    25e6:	86 85       	ldd	r24, Z+14	; 0x0e
    25e8:	97 85       	ldd	r25, Z+15	; 0x0f
    25ea:	e8 0f       	add	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	ec 59       	subi	r30, 0x9C	; 156
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	27 ef       	ldi	r18, 0xF7	; 247
    25f4:	20 83       	st	Z, r18
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	f8 01       	movw	r30, r16
    25fa:	97 87       	std	Z+15, r25	; 0x0f
    25fc:	86 87       	std	Z+14, r24	; 0x0e
    25fe:	ef 59       	subi	r30, 0x9F	; 159
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 ef       	ldi	r24, 0xF0	; 240
    2604:	80 83       	st	Z, r24
    2606:	31 97       	sbiw	r30, 0x01	; 1
    2608:	10 82       	st	Z, r1
    260a:	e1 5b       	subi	r30, 0xB1	; 177
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 83       	st	Z, r24
    2612:	a2 c0       	rjmp	.+324    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	f8 01       	movw	r30, r16
    2618:	ef 59       	subi	r30, 0x9F	; 159
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 83       	st	Z, r24
    261e:	31 97       	sbiw	r30, 0x01	; 1
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	80 83       	st	Z, r24
    2626:	32 96       	adiw	r30, 0x02	; 2
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	80 83       	st	Z, r24
    262c:	31 96       	adiw	r30, 0x01	; 1
    262e:	10 82       	st	Z, r1
    2630:	e4 5b       	subi	r30, 0xB4	; 180
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	80 83       	st	Z, r24
    2638:	8f c0       	rjmp	.+286    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    263a:	f8 01       	movw	r30, r16
    263c:	ef 59       	subi	r30, 0x9F	; 159
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 83       	st	Z, r24
    2642:	31 97       	sbiw	r30, 0x01	; 1
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	8f 70       	andi	r24, 0x0F	; 15
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	80 83       	st	Z, r24
    264c:	32 96       	adiw	r30, 0x02	; 2
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	80 83       	st	Z, r24
    2652:	31 96       	adiw	r30, 0x01	; 1
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	80 83       	st	Z, r24
    2658:	e4 5b       	subi	r30, 0xB4	; 180
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	80 83       	st	Z, r24
    2660:	7b c0       	rjmp	.+246    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2662:	4a 81       	ldd	r20, Y+2	; 0x02
    2664:	40 3f       	cpi	r20, 0xF0	; 240
    2666:	19 f4       	brne	.+6      	; 0x266e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x416>
    2668:	f8 01       	movw	r30, r16
    266a:	17 86       	std	Z+15, r1	; 0x0f
    266c:	16 86       	std	Z+14, r1	; 0x0e
    266e:	f8 01       	movw	r30, r16
    2670:	26 85       	ldd	r18, Z+14	; 0x0e
    2672:	37 85       	ldd	r19, Z+15	; 0x0f
    2674:	c8 01       	movw	r24, r16
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	fc 01       	movw	r30, r24
    267c:	ec 59       	subi	r30, 0x9C	; 156
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	40 83       	st	Z, r20
    2682:	31 96       	adiw	r30, 0x01	; 1
    2684:	4b 81       	ldd	r20, Y+3	; 0x03
    2686:	40 83       	st	Z, r20
    2688:	31 96       	adiw	r30, 0x01	; 1
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	80 83       	st	Z, r24
    268e:	2d 5f       	subi	r18, 0xFD	; 253
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	f8 01       	movw	r30, r16
    2694:	37 87       	std	Z+15, r19	; 0x0f
    2696:	26 87       	std	Z+14, r18	; 0x0e
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	5e c0       	rjmp	.+188    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    269c:	f8 01       	movw	r30, r16
    269e:	86 85       	ldd	r24, Z+14	; 0x0e
    26a0:	97 85       	ldd	r25, Z+15	; 0x0f
    26a2:	98 01       	movw	r18, r16
    26a4:	28 0f       	add	r18, r24
    26a6:	39 1f       	adc	r19, r25
    26a8:	f9 01       	movw	r30, r18
    26aa:	ec 59       	subi	r30, 0x9C	; 156
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	4a 81       	ldd	r20, Y+2	; 0x02
    26b0:	40 83       	st	Z, r20
    26b2:	31 96       	adiw	r30, 0x01	; 1
    26b4:	2b 81       	ldd	r18, Y+3	; 0x03
    26b6:	20 83       	st	Z, r18
    26b8:	02 96       	adiw	r24, 0x02	; 2
    26ba:	f8 01       	movw	r30, r16
    26bc:	97 87       	std	Z+15, r25	; 0x0f
    26be:	86 87       	std	Z+14, r24	; 0x0e
    26c0:	ef 59       	subi	r30, 0x9F	; 159
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 ef       	ldi	r24, 0xF0	; 240
    26c6:	80 83       	st	Z, r24
    26c8:	31 97       	sbiw	r30, 0x01	; 1
    26ca:	10 82       	st	Z, r1
    26cc:	e1 5b       	subi	r30, 0xB1	; 177
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	80 83       	st	Z, r24
    26d4:	41 c0       	rjmp	.+130    	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    26d6:	f8 01       	movw	r30, r16
    26d8:	26 85       	ldd	r18, Z+14	; 0x0e
    26da:	37 85       	ldd	r19, Z+15	; 0x0f
    26dc:	c8 01       	movw	r24, r16
    26de:	82 0f       	add	r24, r18
    26e0:	93 1f       	adc	r25, r19
    26e2:	fc 01       	movw	r30, r24
    26e4:	ec 59       	subi	r30, 0x9C	; 156
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	4a 81       	ldd	r20, Y+2	; 0x02
    26ea:	40 83       	st	Z, r20
    26ec:	31 96       	adiw	r30, 0x01	; 1
    26ee:	4b 81       	ldd	r20, Y+3	; 0x03
    26f0:	40 83       	st	Z, r20
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	8c 81       	ldd	r24, Y+4	; 0x04
    26f6:	80 83       	st	Z, r24
    26f8:	2d 5f       	subi	r18, 0xFD	; 253
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	f8 01       	movw	r30, r16
    26fe:	37 87       	std	Z+15, r19	; 0x0f
    2700:	26 87       	std	Z+14, r18	; 0x0e
    2702:	ef 59       	subi	r30, 0x9F	; 159
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 ef       	ldi	r24, 0xF0	; 240
    2708:	80 83       	st	Z, r24
    270a:	31 97       	sbiw	r30, 0x01	; 1
    270c:	10 82       	st	Z, r1
    270e:	e1 5b       	subi	r30, 0xB1	; 177
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 83       	st	Z, r24
    2716:	20 c0       	rjmp	.+64     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	1e c0       	rjmp	.+60     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	1c c0       	rjmp	.+56     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	1a c0       	rjmp	.+52     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	18 c0       	rjmp	.+48     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	16 c0       	rjmp	.+44     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	12 c0       	rjmp	.+36     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    2734:	f8 01       	movw	r30, r16
    2736:	81 8b       	std	Z+17, r24	; 0x11
    2738:	8f 2d       	mov	r24, r15
    273a:	8f 70       	andi	r24, 0x0F	; 15
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	80 8b       	std	Z+16, r24	; 0x10
    2740:	80 85       	ldd	r24, Z+8	; 0x08
    2742:	82 8b       	std	Z+18, r24	; 0x12
    2744:	1e ce       	rjmp	.-964    	; 0x2382 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x12a>
    2746:	f8 01       	movw	r30, r16
    2748:	81 8b       	std	Z+17, r24	; 0x11
    274a:	8f 2d       	mov	r24, r15
    274c:	8f 70       	andi	r24, 0x0F	; 15
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	80 8b       	std	Z+16, r24	; 0x10
    2752:	80 85       	ldd	r24, Z+8	; 0x08
    2754:	82 8b       	std	Z+18, r24	; 0x12
    2756:	19 ce       	rjmp	.-974    	; 0x238a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x132>
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	08 95       	ret

00002772 <_ZN6HWmidi4readEh19midiInterfaceType_t>:
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	61 31       	cpi	r22, 0x11	; 17
    277c:	70 f4       	brcc	.+28     	; 0x279a <_ZN6HWmidi4readEh19midiInterfaceType_t+0x28>
    277e:	d4 2f       	mov	r29, r20
    2780:	c6 2f       	mov	r28, r22
    2782:	8c 01       	movw	r16, r24
    2784:	64 2f       	mov	r22, r20
    2786:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    278a:	88 23       	and	r24, r24
    278c:	39 f0       	breq	.+14     	; 0x279c <_ZN6HWmidi4readEh19midiInterfaceType_t+0x2a>
    278e:	4d 2f       	mov	r20, r29
    2790:	6c 2f       	mov	r22, r28
    2792:	c8 01       	movw	r24, r16
    2794:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>
    2798:	01 c0       	rjmp	.+2      	; 0x279c <_ZN6HWmidi4readEh19midiInterfaceType_t+0x2a>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <_ZN6HWmidi4readE19midiInterfaceType_t>:
    27a6:	46 2f       	mov	r20, r22
    27a8:	fc 01       	movw	r30, r24
    27aa:	66 81       	ldd	r22, Z+6	; 0x06
    27ac:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN6HWmidi4readEh19midiInterfaceType_t>
    27b0:	08 95       	ret

000027b2 <EVENT_USB_Device_ConfigurationChanged>:
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
    27b2:	42 e3       	ldi	r20, 0x32	; 50
    27b4:	61 e8       	ldi	r22, 0x81	; 129
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Endpoint_ConfigureEndpoint_Prv>
    27bc:	42 e3       	ldi	r20, 0x32	; 50
    27be:	60 e8       	ldi	r22, 0x80	; 128
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Endpoint_ConfigureEndpoint_Prv>
    27c6:	08 95       	ret

000027c8 <_GLOBAL__sub_I_MIDI_Interface>:
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);

}

HWmidi hwMIDI;
    27c8:	81 e9       	ldi	r24, 0x91	; 145
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_ZN6HWmidiC1Ev>
    27d0:	08 95       	ret

000027d2 <_Z18disablePeripheralsv>:
}

void disablePeripherals(void)   {

    //disable eeprom
    EECR = 0;
    27d2:	1f ba       	out	0x1f, r1	; 31

    //disable analog comparator
    ACSR = 0;
    27d4:	10 be       	out	0x30, r1	; 48

    //disable SPI
    SPCR = 0;
    27d6:	1c bc       	out	0x2c, r1	; 44

    //disable external interrupts
    EIMSK = 0;
    27d8:	1d ba       	out	0x1d, r1	; 29

    //disable pin change interrupts
    PCICR = 0;
    27da:	10 92 68 00 	sts	0x0068, r1

    //disable ADC
    ADCSRA = 0;
    27de:	10 92 7a 00 	sts	0x007A, r1

    //disable timers
    TIMSK0 = 0;
    27e2:	10 92 6e 00 	sts	0x006E, r1
    TIMSK1 = 0;
    27e6:	10 92 6f 00 	sts	0x006F, r1
    TIMSK3 = 0;
    27ea:	10 92 71 00 	sts	0x0071, r1
    TIMSK4 = 0;
    27ee:	10 92 72 00 	sts	0x0072, r1

    //disable USART
    UCSR1B = 0;
    27f2:	10 92 c9 00 	sts	0x00C9, r1

    //disable I2C
    TWCR = 0;
    27f6:	10 92 bc 00 	sts	0x00BC, r1

    //write low to all pins
    PORTB = 0;
    27fa:	15 b8       	out	0x05, r1	; 5
    PORTC = 0;
    27fc:	18 b8       	out	0x08, r1	; 8
    PORTD = 0;
    27fe:	1b b8       	out	0x0b, r1	; 11
    PORTE = 0;
    2800:	1e b8       	out	0x0e, r1	; 14
    PORTF = 0;
    2802:	11 ba       	out	0x11, r1	; 17

    //set all pins to inputs
    DDRB = 0;
    2804:	14 b8       	out	0x04, r1	; 4
    DDRC = 0;
    2806:	17 b8       	out	0x07, r1	; 7
    DDRD = 0;
    2808:	1a b8       	out	0x0a, r1	; 10
    DDRE = 0;
    280a:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0;
    280c:	10 ba       	out	0x10, r1	; 16
    280e:	08 95       	ret

00002810 <_Z6rebooth>:

}

void reboot(uint8_t mode)    {
    2810:	cf 93       	push	r28
    2812:	c8 2f       	mov	r28, r24

    cli();
    2814:	f8 94       	cli
    //stop watchdog timer, if running
    MCUSR &= ~(1<<WDFR);
    2816:	94 b7       	in	r25, 0x34	; 52
    2818:	97 7f       	andi	r25, 0xF7	; 247
    281a:	94 bf       	out	0x34, r25	; 52
    WDTCSR |= (1<<WDCE);
    281c:	e0 e6       	ldi	r30, 0x60	; 96
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	90 81       	ld	r25, Z
    2822:	90 61       	ori	r25, 0x10	; 16
    2824:	90 83       	st	Z, r25
    WDTCSR = 0;
    2826:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2828:	8f e1       	ldi	r24, 0x1F	; 31
    282a:	9e e4       	ldi	r25, 0x4E	; 78
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <_Z6rebooth+0x1c>
    2830:	00 c0       	rjmp	.+0      	; 0x2832 <_Z6rebooth+0x22>
    2832:	00 00       	nop
    _delay_ms(5);
    UDCON = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 e0 00 	sts	0x00E0, r24
    USBCON = (1<<FRZCLK);
    283a:	80 e2       	ldi	r24, 0x20	; 32
    283c:	80 93 d8 00 	sts	0x00D8, r24
    2840:	9f ef       	ldi	r25, 0xFF	; 255
    2842:	27 ea       	ldi	r18, 0xA7	; 167
    2844:	81 e6       	ldi	r24, 0x61	; 97
    2846:	91 50       	subi	r25, 0x01	; 1
    2848:	20 40       	sbci	r18, 0x00	; 0
    284a:	80 40       	sbci	r24, 0x00	; 0
    284c:	e1 f7       	brne	.-8      	; 0x2846 <_Z6rebooth+0x36>
    284e:	00 c0       	rjmp	.+0      	; 0x2850 <_Z6rebooth+0x40>
    2850:	00 00       	nop
    _delay_ms(2000);
    disablePeripherals();
    2852:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_Z18disablePeripheralsv>

    switch(mode)    {
    2856:	cc 23       	and	r28, r28
    2858:	19 f0       	breq	.+6      	; 0x2860 <_Z6rebooth+0x50>
    285a:	c1 30       	cpi	r28, 0x01	; 1
    285c:	61 f0       	breq	.+24     	; 0x2876 <_Z6rebooth+0x66>
    285e:	22 c0       	rjmp	.+68     	; 0x28a4 <_Z6rebooth+0x94>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    2860:	9c e0       	ldi	r25, 0x0C	; 12
    2862:	88 e1       	ldi	r24, 0x18	; 24
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	a8 95       	wdr
    286a:	80 93 60 00 	sts	0x0060, r24
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	90 93 60 00 	sts	0x0060, r25
    2874:	ff cf       	rjmp	.-2      	; 0x2874 <_Z6rebooth+0x64>
        for (;;);
        break;

        case BTLDR_REBOOT:
        //set the bootloader key to the magic value and force a reset
        Boot_Key = MAGIC_BOOT_KEY;
    2876:	8a ec       	ldi	r24, 0xCA	; 202
    2878:	9c ea       	ldi	r25, 0xAC	; 172
    287a:	a2 e4       	ldi	r26, 0x42	; 66
    287c:	bc ed       	ldi	r27, 0xDC	; 220
    287e:	80 93 7e 07 	sts	0x077E, r24
    2882:	90 93 7f 07 	sts	0x077F, r25
    2886:	a0 93 80 07 	sts	0x0780, r26
    288a:	b0 93 81 07 	sts	0x0781, r27
    288e:	9c e0       	ldi	r25, 0x0C	; 12
    2890:	88 e1       	ldi	r24, 0x18	; 24
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	a8 95       	wdr
    2898:	80 93 60 00 	sts	0x0060, r24
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	90 93 60 00 	sts	0x0060, r25
    UDCON = 1;
    USBCON = (1<<FRZCLK);
    _delay_ms(2000);
    disablePeripherals();

    switch(mode)    {
    28a2:	ff cf       	rjmp	.-2      	; 0x28a2 <_Z6rebooth+0x92>
        for (;;);
        break;

    }

    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <__vector_25>:

}

ISR(USART1_TX_vect) {}

UART::UART()  {
    28a8:	1f 92       	push	r1
    28aa:	0f 92       	push	r0
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	0f 92       	push	r0
    28b0:	11 24       	eor	r1, r1
    28b2:	2f 93       	push	r18
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	20 91 ce 00 	lds	r18, 0x00CE
    28c0:	80 91 53 04 	lds	r24, 0x0453
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 32       	cpi	r24, 0x20	; 32
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <__vector_25+0x24>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 91 52 04 	lds	r25, 0x0452
    28d0:	89 17       	cp	r24, r25
    28d2:	39 f0       	breq	.+14     	; 0x28e2 <__vector_25+0x3a>
    28d4:	e8 2f       	mov	r30, r24
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	ec 5a       	subi	r30, 0xAC	; 172
    28da:	fb 4f       	sbci	r31, 0xFB	; 251
    28dc:	20 83       	st	Z, r18
    28de:	80 93 53 04 	sts	0x0453, r24
    28e2:	ff 91       	pop	r31
    28e4:	ef 91       	pop	r30
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	2f 91       	pop	r18
    28ec:	0f 90       	pop	r0
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	0f 90       	pop	r0
    28f2:	1f 90       	pop	r1
    28f4:	18 95       	reti

000028f6 <__vector_26>:
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	8f 93       	push	r24
    2902:	9f 93       	push	r25
    2904:	ef 93       	push	r30
    2906:	ff 93       	push	r31
    2908:	90 91 51 04 	lds	r25, 0x0451
    290c:	80 91 50 04 	lds	r24, 0x0450
    2910:	98 13       	cpse	r25, r24
    2912:	0c c0       	rjmp	.+24     	; 0x292c <__vector_26+0x36>
    2914:	80 91 4f 04 	lds	r24, 0x044F
    2918:	81 11       	cpse	r24, r1
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <__vector_26+0x2e>
    291c:	88 e4       	ldi	r24, 0x48	; 72
    291e:	80 93 c9 00 	sts	0x00C9, r24
    2922:	13 c0       	rjmp	.+38     	; 0x294a <__vector_26+0x54>
    2924:	88 ed       	ldi	r24, 0xD8	; 216
    2926:	80 93 c9 00 	sts	0x00C9, r24
    292a:	0f c0       	rjmp	.+30     	; 0x294a <__vector_26+0x54>
    292c:	80 91 50 04 	lds	r24, 0x0450
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	80 32       	cpi	r24, 0x20	; 32
    2934:	08 f0       	brcs	.+2      	; 0x2938 <__vector_26+0x42>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	e8 2f       	mov	r30, r24
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	ec 58       	subi	r30, 0x8C	; 140
    293e:	fb 4f       	sbci	r31, 0xFB	; 251
    2940:	90 81       	ld	r25, Z
    2942:	90 93 ce 00 	sts	0x00CE, r25
    2946:	80 93 50 04 	sts	0x0450, r24
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	0f 90       	pop	r0
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	0f 90       	pop	r0
    2958:	1f 90       	pop	r1
    295a:	18 95       	reti

0000295c <__vector_27>:
    295c:	1f 92       	push	r1
    295e:	0f 92       	push	r0
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	0f 92       	push	r0
    2964:	11 24       	eor	r1, r1
    2966:	0f 90       	pop	r0
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	0f 90       	pop	r0
    296c:	1f 90       	pop	r1
    296e:	18 95       	reti

00002970 <_ZN4UART4readEv>:

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    2970:	90 91 53 04 	lds	r25, 0x0453
    2974:	80 91 52 04 	lds	r24, 0x0452
    2978:	98 17       	cp	r25, r24
    297a:	71 f0       	breq	.+28     	; 0x2998 <_ZN4UART4readEv+0x28>
    bufferIndex = rx_buffer_tail + 1;
    297c:	90 91 52 04 	lds	r25, 0x0452
    2980:	9f 5f       	subi	r25, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    2982:	90 32       	cpi	r25, 0x20	; 32
    2984:	08 f0       	brcs	.+2      	; 0x2988 <_ZN4UART4readEv+0x18>
    2986:	90 e0       	ldi	r25, 0x00	; 0
    data = rx_buffer[bufferIndex];
    2988:	e9 2f       	mov	r30, r25
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ec 5a       	subi	r30, 0xAC	; 172
    298e:	fb 4f       	sbci	r31, 0xFB	; 251
    2990:	80 81       	ld	r24, Z
    rx_buffer_tail = bufferIndex;
    2992:	90 93 52 04 	sts	0x0452, r25
    return data;
    2996:	08 95       	ret

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    data = rx_buffer[bufferIndex];
    rx_buffer_tail = bufferIndex;
    return data;

}
    299a:	08 95       	ret

0000299c <_ZN4UART5writeEh>:

void UART::write(uint8_t data)  {

    if (!txEnabled) return;
    299c:	80 91 4e 04 	lds	r24, 0x044E
    29a0:	88 23       	and	r24, r24
    29a2:	01 f1       	breq	.+64     	; 0x29e4 <_ZN4UART5writeEh+0x48>

    uint8_t bufferIndex;

    if (!(UCSR1B & (1<<TXEN1))) return;
    29a4:	80 91 c9 00 	lds	r24, 0x00C9
    29a8:	83 ff       	sbrs	r24, 3
    29aa:	1c c0       	rjmp	.+56     	; 0x29e4 <_ZN4UART5writeEh+0x48>

    bufferIndex = tx_buffer_head + 1;
    29ac:	90 91 51 04 	lds	r25, 0x0451
    29b0:	9f 5f       	subi	r25, 0xFF	; 255

    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    29b2:	90 32       	cpi	r25, 0x20	; 32
    29b4:	08 f0       	brcs	.+2      	; 0x29b8 <_ZN4UART5writeEh+0x1c>
    29b6:	90 e0       	ldi	r25, 0x00	; 0

    while (tx_buffer_tail == bufferIndex); // wait until space in buffer
    29b8:	80 91 50 04 	lds	r24, 0x0450
    29bc:	98 17       	cp	r25, r24
    29be:	e1 f3       	breq	.-8      	; 0x29b8 <_ZN4UART5writeEh+0x1c>

    tx_buffer[bufferIndex] = data;
    29c0:	e9 2f       	mov	r30, r25
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	ec 58       	subi	r30, 0x8C	; 140
    29c6:	fb 4f       	sbci	r31, 0xFB	; 251
    29c8:	60 83       	st	Z, r22

    tx_buffer_head = bufferIndex;
    29ca:	90 93 51 04 	sts	0x0451, r25

    if (!rxEnabled)
    29ce:	80 91 4f 04 	lds	r24, 0x044F
    29d2:	81 11       	cpse	r24, r1
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <_ZN4UART5writeEh+0x42>
        UCSR1B = (1<<TXCIE1) | (1<<TXEN1) | (1<<UDRIE1);
    29d6:	88 e6       	ldi	r24, 0x68	; 104
    29d8:	80 93 c9 00 	sts	0x00C9, r24
    29dc:	08 95       	ret
    else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
    29de:	88 ef       	ldi	r24, 0xF8	; 248
    29e0:	80 93 c9 00 	sts	0x00C9, r24
    29e4:	08 95       	ret

000029e6 <_ZN4UART5beginEmbb>:

}

void UART::begin(uint32_t baudRate, bool enableRX, bool enableTX)   {
    29e6:	cf 92       	push	r12
    29e8:	df 92       	push	r13
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	cf 93       	push	r28
    29f2:	6a 01       	movw	r12, r20
    29f4:	7b 01       	movw	r14, r22
    29f6:	c2 2f       	mov	r28, r18

    rxEnabled = enableRX;
    29f8:	20 93 4f 04 	sts	0x044F, r18
    txEnabled = enableTX;
    29fc:	00 93 4e 04 	sts	0x044E, r16

    int16_t baud_count = ((F_CPU / 8) + (baudRate / 2)) / baudRate;
    2a00:	db 01       	movw	r26, r22
    2a02:	ca 01       	movw	r24, r20
    2a04:	b6 95       	lsr	r27
    2a06:	a7 95       	ror	r26
    2a08:	97 95       	ror	r25
    2a0a:	87 95       	ror	r24
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	60 58       	subi	r22, 0x80	; 128
    2a12:	7b 47       	sbci	r23, 0x7B	; 123
    2a14:	81 4e       	sbci	r24, 0xE1	; 225
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	a7 01       	movw	r20, r14
    2a1a:	96 01       	movw	r18, r12
    2a1c:	0e 94 1c 30 	call	0x6038	; 0x6038 <__udivmodsi4>

    if ((baud_count & 1) && baud_count <= 4096) {
    2a20:	c9 01       	movw	r24, r18
    2a22:	81 70       	andi	r24, 0x01	; 1
    2a24:	99 27       	eor	r25, r25
    2a26:	89 2b       	or	r24, r25
    2a28:	71 f0       	breq	.+28     	; 0x2a46 <_ZN4UART5beginEmbb+0x60>
    2a2a:	21 30       	cpi	r18, 0x01	; 1
    2a2c:	80 e1       	ldi	r24, 0x10	; 16
    2a2e:	38 07       	cpc	r19, r24
    2a30:	54 f4       	brge	.+20     	; 0x2a46 <_ZN4UART5beginEmbb+0x60>

        UCSR1A = (1<<U2X1); //double speed uart
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	80 93 c8 00 	sts	0x00C8, r24
        UBRR1 = baud_count - 1;
    2a38:	21 50       	subi	r18, 0x01	; 1
    2a3a:	31 09       	sbc	r19, r1
    2a3c:	30 93 cd 00 	sts	0x00CD, r19
    2a40:	20 93 cc 00 	sts	0x00CC, r18
    2a44:	0a c0       	rjmp	.+20     	; 0x2a5a <_ZN4UART5beginEmbb+0x74>

    }   else {

        UCSR1A = 0;
    2a46:	10 92 c8 00 	sts	0x00C8, r1
        UBRR1 = (baud_count >> 1) - 1;
    2a4a:	35 95       	asr	r19
    2a4c:	27 95       	ror	r18
    2a4e:	21 50       	subi	r18, 0x01	; 1
    2a50:	31 09       	sbc	r19, r1
    2a52:	30 93 cd 00 	sts	0x00CD, r19
    2a56:	20 93 cc 00 	sts	0x00CC, r18

    }

    if (!(UCSR1B & (1<<TXEN1))) {
    2a5a:	80 91 c9 00 	lds	r24, 0x00C9
    2a5e:	83 fd       	sbrc	r24, 3
    2a60:	1c c0       	rjmp	.+56     	; 0x2a9a <_ZN4UART5beginEmbb+0xb4>

        rx_buffer_head = 0;
    2a62:	10 92 53 04 	sts	0x0453, r1
        rx_buffer_tail = 0;
    2a66:	10 92 52 04 	sts	0x0452, r1
        tx_buffer_head = 0;
    2a6a:	10 92 51 04 	sts	0x0451, r1
        tx_buffer_tail = 0;
    2a6e:	10 92 50 04 	sts	0x0450, r1

        UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); //8 bit, no parity, 1 stop bit
    2a72:	86 e0       	ldi	r24, 0x06	; 6
    2a74:	80 93 ca 00 	sts	0x00CA, r24

        if (enableRX && enableTX)   //enable both rx and tx
    2a78:	cc 23       	and	r28, r28
    2a7a:	51 f0       	breq	.+20     	; 0x2a90 <_ZN4UART5beginEmbb+0xaa>
    2a7c:	00 23       	and	r16, r16
    2a7e:	21 f0       	breq	.+8      	; 0x2a88 <_ZN4UART5beginEmbb+0xa2>
            UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    2a80:	88 ed       	ldi	r24, 0xD8	; 216
    2a82:	80 93 c9 00 	sts	0x00C9, r24
    2a86:	09 c0       	rjmp	.+18     	; 0x2a9a <_ZN4UART5beginEmbb+0xb4>
        else if (enableRX && !enableTX) //enable only receive
            UCSR1B = (1<<RXEN1) | (1<<RXCIE1);
    2a88:	80 e9       	ldi	r24, 0x90	; 144
    2a8a:	80 93 c9 00 	sts	0x00C9, r24
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <_ZN4UART5beginEmbb+0xb4>
        else if (enableTX & !enableRX)  //enable only transmit
    2a90:	00 23       	and	r16, r16
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <_ZN4UART5beginEmbb+0xb4>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    2a94:	88 e4       	ldi	r24, 0x48	; 72
    2a96:	80 93 c9 00 	sts	0x00C9, r24

    }

}
    2a9a:	cf 91       	pop	r28
    2a9c:	0f 91       	pop	r16
    2a9e:	ff 90       	pop	r15
    2aa0:	ef 90       	pop	r14
    2aa2:	df 90       	pop	r13
    2aa4:	cf 90       	pop	r12
    2aa6:	08 95       	ret

00002aa8 <_ZN4UART9availableEv>:

    //return available number of bytes in incoming buffer

    uint8_t head, tail;

    head = rx_buffer_head;
    2aa8:	80 91 53 04 	lds	r24, 0x0453
    tail = rx_buffer_tail;
    2aac:	90 91 52 04 	lds	r25, 0x0452

    if (head >= tail) return head - tail;
    2ab0:	89 17       	cp	r24, r25
    2ab2:	10 f0       	brcs	.+4      	; 0x2ab8 <_ZN4UART9availableEv+0x10>
    2ab4:	89 1b       	sub	r24, r25
    2ab6:	08 95       	ret
    2ab8:	80 5e       	subi	r24, 0xE0	; 224
    return SERIAL_BUFFER_SIZE + head - tail;
    2aba:	89 1b       	sub	r24, r25

}
    2abc:	08 95       	ret

00002abe <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    2abe:	29 2f       	mov	r18, r25
    2ac0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	59 f0       	breq	.+22     	; 0x2ade <CALLBACK_USB_GetDescriptor+0x20>
    2ac8:	23 30       	cpi	r18, 0x03	; 3
    2aca:	31 05       	cpc	r19, r1
    2acc:	69 f0       	breq	.+26     	; 0x2ae8 <CALLBACK_USB_GetDescriptor+0x2a>
    2ace:	21 30       	cpi	r18, 0x01	; 1
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	29 f5       	brne	.+74     	; 0x2b1e <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    2ad4:	82 e1       	ldi	r24, 0x12	; 18
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    2ad8:	2f e7       	ldi	r18, 0x7F	; 127
    2ada:	32 e0       	ldi	r19, 0x02	; 2
    2adc:	29 c0       	rjmp	.+82     	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    2ade:	85 e6       	ldi	r24, 0x65	; 101
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    2ae2:	2a e1       	ldi	r18, 0x1A	; 26
    2ae4:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    2ae6:	24 c0       	rjmp	.+72     	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
    2ae8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    2aea:	81 30       	cpi	r24, 0x01	; 1
    2aec:	91 05       	cpc	r25, r1
    2aee:	59 f0       	breq	.+22     	; 0x2b06 <CALLBACK_USB_GetDescriptor+0x48>
    2af0:	82 30       	cpi	r24, 0x02	; 2
    2af2:	91 05       	cpc	r25, r1
    2af4:	71 f0       	breq	.+28     	; 0x2b12 <CALLBACK_USB_GetDescriptor+0x54>
    2af6:	89 2b       	or	r24, r25
    2af8:	b9 f4       	brne	.+46     	; 0x2b28 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    2afa:	e6 e1       	ldi	r30, 0x16	; 22
    2afc:	f2 e0       	ldi	r31, 0x02	; 2
    2afe:	84 91       	lpm	r24, Z
    2b00:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    2b02:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    2b04:	15 c0       	rjmp	.+42     	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2b06:	e2 ef       	ldi	r30, 0xF2	; 242
    2b08:	f1 e0       	ldi	r31, 0x01	; 1
    2b0a:	84 91       	lpm	r24, Z
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    2b0e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2b12:	ee ed       	ldi	r30, 0xDE	; 222
    2b14:	f1 e0       	ldi	r31, 0x01	; 1
    2b16:	84 91       	lpm	r24, Z
    2b18:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    2b1a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    2b1c:	09 c0       	rjmp	.+18     	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	04 c0       	rjmp	.+8      	; 0x2b30 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    2b30:	fa 01       	movw	r30, r20
    2b32:	31 83       	std	Z+1, r19	; 0x01
    2b34:	20 83       	st	Z, r18
	return Size;
}
    2b36:	08 95       	ret

00002b38 <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
    2b38:	ac 01       	movw	r20, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2b3a:	90 91 75 07 	lds	r25, 0x0775
    2b3e:	94 30       	cpi	r25, 0x04	; 4
    2b40:	d9 f4       	brne	.+54     	; 0x2b78 <MIDI_Device_SendEventPacket+0x40>
    2b42:	9b 01       	movw	r18, r22
    2b44:	fa 01       	movw	r30, r20
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b46:	81 81       	ldd	r24, Z+1	; 0x01
    2b48:	8f 70       	andi	r24, 0x0F	; 15
    2b4a:	80 93 e9 00 	sts	0x00E9, r24

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	c9 01       	movw	r24, r18
    2b58:	0e 94 dd 15 	call	0x2bba	; 0x2bba <Endpoint_Write_Stream_LE>
    2b5c:	81 11       	cpse	r24, r1
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <MIDI_Device_SendEventPacket+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2b60:	90 91 e8 00 	lds	r25, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
    2b64:	89 2f       	mov	r24, r25
    2b66:	80 72       	andi	r24, 0x20	; 32
    2b68:	95 fd       	sbrc	r25, 5
    2b6a:	08 c0       	rjmp	.+16     	; 0x2b7c <MIDI_Device_SendEventPacket+0x44>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b6c:	e8 ee       	ldi	r30, 0xE8	; 232
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	90 81       	ld	r25, Z
    2b72:	9e 77       	andi	r25, 0x7E	; 126
    2b74:	90 83       	st	Z, r25
    2b76:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	08 95       	ret
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b7e:	08 95       	ret

00002b80 <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
    2b80:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2b82:	90 91 75 07 	lds	r25, 0x0775
    2b86:	94 30       	cpi	r25, 0x04	; 4
    2b88:	a1 f4       	brne	.+40     	; 0x2bb2 <MIDI_Device_Flush+0x32>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b8a:	81 81       	ldd	r24, Z+1	; 0x01
    2b8c:	8f 70       	andi	r24, 0x0F	; 15
    2b8e:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2b92:	20 91 f3 00 	lds	r18, 0x00F3
    2b96:	80 91 f2 00 	lds	r24, 0x00F2
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	92 2b       	or	r25, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
    2b9e:	89 2b       	or	r24, r25
    2ba0:	51 f0       	breq	.+20     	; 0x2bb6 <MIDI_Device_Flush+0x36>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ba2:	e8 ee       	ldi	r30, 0xE8	; 232
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8e 77       	andi	r24, 0x7E	; 126
    2baa:	80 83       	st	Z, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2bac:	0e 94 2c 18 	call	0x3058	; 0x3058 <Endpoint_WaitUntilReady>
    2bb0:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
}
    2bb8:	08 95       	ret

00002bba <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2bba:	8f 92       	push	r8
    2bbc:	9f 92       	push	r9
    2bbe:	af 92       	push	r10
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	8c 01       	movw	r16, r24
    2bd4:	eb 01       	movw	r28, r22
    2bd6:	6a 01       	movw	r12, r20
    2bd8:	0e 94 2c 18 	call	0x3058	; 0x3058 <Endpoint_WaitUntilReady>
    2bdc:	81 11       	cpse	r24, r1
    2bde:	3e c0       	rjmp	.+124    	; 0x2c5c <Endpoint_Write_Stream_LE+0xa2>
    2be0:	c1 14       	cp	r12, r1
    2be2:	d1 04       	cpc	r13, r1
    2be4:	39 f0       	breq	.+14     	; 0x2bf4 <Endpoint_Write_Stream_LE+0x3a>
    2be6:	f6 01       	movw	r30, r12
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	c8 1b       	sub	r28, r24
    2bee:	d9 0b       	sbc	r29, r25
    2bf0:	08 0f       	add	r16, r24
    2bf2:	19 1f       	adc	r17, r25
    2bf4:	20 97       	sbiw	r28, 0x00	; 0
    2bf6:	89 f1       	breq	.+98     	; 0x2c5a <Endpoint_Write_Stream_LE+0xa0>
    2bf8:	e1 2c       	mov	r14, r1
    2bfa:	f1 2c       	mov	r15, r1
    2bfc:	0f 2e       	mov	r0, r31
    2bfe:	f8 ee       	ldi	r31, 0xE8	; 232
    2c00:	8f 2e       	mov	r8, r31
    2c02:	91 2c       	mov	r9, r1
    2c04:	f0 2d       	mov	r31, r0
    2c06:	0f 2e       	mov	r0, r31
    2c08:	f1 ef       	ldi	r31, 0xF1	; 241
    2c0a:	af 2e       	mov	r10, r31
    2c0c:	b1 2c       	mov	r11, r1
    2c0e:	f0 2d       	mov	r31, r0
    2c10:	f4 01       	movw	r30, r8
    2c12:	80 81       	ld	r24, Z
    2c14:	85 fd       	sbrc	r24, 5
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <Endpoint_Write_Stream_LE+0x86>
    2c18:	80 81       	ld	r24, Z
    2c1a:	8e 77       	andi	r24, 0x7E	; 126
    2c1c:	80 83       	st	Z, r24
    2c1e:	c1 14       	cp	r12, r1
    2c20:	d1 04       	cpc	r13, r1
    2c22:	49 f0       	breq	.+18     	; 0x2c36 <Endpoint_Write_Stream_LE+0x7c>
    2c24:	f6 01       	movw	r30, r12
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	e8 0e       	add	r14, r24
    2c2c:	f9 1e       	adc	r15, r25
    2c2e:	f1 82       	std	Z+1, r15	; 0x01
    2c30:	e0 82       	st	Z, r14
    2c32:	85 e0       	ldi	r24, 0x05	; 5
    2c34:	13 c0       	rjmp	.+38     	; 0x2c5c <Endpoint_Write_Stream_LE+0xa2>
    2c36:	0e 94 2c 18 	call	0x3058	; 0x3058 <Endpoint_WaitUntilReady>
    2c3a:	88 23       	and	r24, r24
    2c3c:	51 f0       	breq	.+20     	; 0x2c52 <Endpoint_Write_Stream_LE+0x98>
    2c3e:	0e c0       	rjmp	.+28     	; 0x2c5c <Endpoint_Write_Stream_LE+0xa2>
    2c40:	f8 01       	movw	r30, r16
    2c42:	81 91       	ld	r24, Z+
    2c44:	8f 01       	movw	r16, r30
    2c46:	f5 01       	movw	r30, r10
    2c48:	80 83       	st	Z, r24
    2c4a:	21 97       	sbiw	r28, 0x01	; 1
    2c4c:	ff ef       	ldi	r31, 0xFF	; 255
    2c4e:	ef 1a       	sub	r14, r31
    2c50:	ff 0a       	sbc	r15, r31
    2c52:	20 97       	sbiw	r28, 0x00	; 0
    2c54:	e9 f6       	brne	.-70     	; 0x2c10 <Endpoint_Write_Stream_LE+0x56>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	01 c0       	rjmp	.+2      	; 0x2c5c <Endpoint_Write_Stream_LE+0xa2>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
    2c6c:	bf 90       	pop	r11
    2c6e:	af 90       	pop	r10
    2c70:	9f 90       	pop	r9
    2c72:	8f 90       	pop	r8
    2c74:	08 95       	ret

00002c76 <Endpoint_Read_Stream_LE>:
    2c76:	8f 92       	push	r8
    2c78:	9f 92       	push	r9
    2c7a:	af 92       	push	r10
    2c7c:	bf 92       	push	r11
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	ff 92       	push	r15
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	8c 01       	movw	r16, r24
    2c90:	eb 01       	movw	r28, r22
    2c92:	6a 01       	movw	r12, r20
    2c94:	0e 94 2c 18 	call	0x3058	; 0x3058 <Endpoint_WaitUntilReady>
    2c98:	81 11       	cpse	r24, r1
    2c9a:	3e c0       	rjmp	.+124    	; 0x2d18 <Endpoint_Read_Stream_LE+0xa2>
    2c9c:	c1 14       	cp	r12, r1
    2c9e:	d1 04       	cpc	r13, r1
    2ca0:	39 f0       	breq	.+14     	; 0x2cb0 <Endpoint_Read_Stream_LE+0x3a>
    2ca2:	f6 01       	movw	r30, r12
    2ca4:	80 81       	ld	r24, Z
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	c8 1b       	sub	r28, r24
    2caa:	d9 0b       	sbc	r29, r25
    2cac:	08 0f       	add	r16, r24
    2cae:	19 1f       	adc	r17, r25
    2cb0:	20 97       	sbiw	r28, 0x00	; 0
    2cb2:	89 f1       	breq	.+98     	; 0x2d16 <Endpoint_Read_Stream_LE+0xa0>
    2cb4:	e1 2c       	mov	r14, r1
    2cb6:	f1 2c       	mov	r15, r1
    2cb8:	0f 2e       	mov	r0, r31
    2cba:	f8 ee       	ldi	r31, 0xE8	; 232
    2cbc:	8f 2e       	mov	r8, r31
    2cbe:	91 2c       	mov	r9, r1
    2cc0:	f0 2d       	mov	r31, r0
    2cc2:	0f 2e       	mov	r0, r31
    2cc4:	f1 ef       	ldi	r31, 0xF1	; 241
    2cc6:	af 2e       	mov	r10, r31
    2cc8:	b1 2c       	mov	r11, r1
    2cca:	f0 2d       	mov	r31, r0
    2ccc:	f4 01       	movw	r30, r8
    2cce:	80 81       	ld	r24, Z
    2cd0:	85 fd       	sbrc	r24, 5
    2cd2:	14 c0       	rjmp	.+40     	; 0x2cfc <Endpoint_Read_Stream_LE+0x86>
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8b 77       	andi	r24, 0x7B	; 123
    2cd8:	80 83       	st	Z, r24
    2cda:	c1 14       	cp	r12, r1
    2cdc:	d1 04       	cpc	r13, r1
    2cde:	49 f0       	breq	.+18     	; 0x2cf2 <Endpoint_Read_Stream_LE+0x7c>
    2ce0:	f6 01       	movw	r30, r12
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	e8 0e       	add	r14, r24
    2ce8:	f9 1e       	adc	r15, r25
    2cea:	f1 82       	std	Z+1, r15	; 0x01
    2cec:	e0 82       	st	Z, r14
    2cee:	85 e0       	ldi	r24, 0x05	; 5
    2cf0:	13 c0       	rjmp	.+38     	; 0x2d18 <Endpoint_Read_Stream_LE+0xa2>
    2cf2:	0e 94 2c 18 	call	0x3058	; 0x3058 <Endpoint_WaitUntilReady>
    2cf6:	88 23       	and	r24, r24
    2cf8:	51 f0       	breq	.+20     	; 0x2d0e <Endpoint_Read_Stream_LE+0x98>
    2cfa:	0e c0       	rjmp	.+28     	; 0x2d18 <Endpoint_Read_Stream_LE+0xa2>
    2cfc:	f5 01       	movw	r30, r10
    2cfe:	80 81       	ld	r24, Z
    2d00:	f8 01       	movw	r30, r16
    2d02:	81 93       	st	Z+, r24
    2d04:	8f 01       	movw	r16, r30
    2d06:	21 97       	sbiw	r28, 0x01	; 1
    2d08:	ff ef       	ldi	r31, 0xFF	; 255
    2d0a:	ef 1a       	sub	r14, r31
    2d0c:	ff 0a       	sbc	r15, r31
    2d0e:	20 97       	sbiw	r28, 0x00	; 0
    2d10:	e9 f6       	brne	.-70     	; 0x2ccc <Endpoint_Read_Stream_LE+0x56>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <Endpoint_Read_Stream_LE+0xa2>
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	08 95       	ret

00002d32 <Endpoint_Write_Control_Stream_LE>:
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	20 91 7c 07 	lds	r18, 0x077C
    2d44:	30 91 7d 07 	lds	r19, 0x077D
    2d48:	26 17       	cp	r18, r22
    2d4a:	37 07       	cpc	r19, r23
    2d4c:	58 f0       	brcs	.+22     	; 0x2d64 <Endpoint_Write_Control_Stream_LE+0x32>
    2d4e:	61 15       	cp	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	39 f4       	brne	.+14     	; 0x2d62 <Endpoint_Write_Control_Stream_LE+0x30>
    2d54:	e8 ee       	ldi	r30, 0xE8	; 232
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	20 81       	ld	r18, Z
    2d5a:	2e 77       	andi	r18, 0x7E	; 126
    2d5c:	20 83       	st	Z, r18
    2d5e:	9b 01       	movw	r18, r22
    2d60:	01 c0       	rjmp	.+2      	; 0x2d64 <Endpoint_Write_Control_Stream_LE+0x32>
    2d62:	9b 01       	movw	r18, r22
    2d64:	a8 2f       	mov	r26, r24
    2d66:	b9 2f       	mov	r27, r25
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	e8 ee       	ldi	r30, 0xE8	; 232
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	63 ef       	ldi	r22, 0xF3	; 243
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	42 ef       	ldi	r20, 0xF2	; 242
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	0f 2e       	mov	r0, r31
    2d78:	f1 ef       	ldi	r31, 0xF1	; 241
    2d7a:	cf 2e       	mov	r12, r31
    2d7c:	d1 2c       	mov	r13, r1
    2d7e:	f0 2d       	mov	r31, r0
    2d80:	01 e0       	ldi	r16, 0x01	; 1
    2d82:	f1 2c       	mov	r15, r1
    2d84:	30 c0       	rjmp	.+96     	; 0x2de6 <Endpoint_Write_Control_Stream_LE+0xb4>
    2d86:	80 91 75 07 	lds	r24, 0x0775
    2d8a:	88 23       	and	r24, r24
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <Endpoint_Write_Control_Stream_LE+0x5e>
    2d8e:	42 c0       	rjmp	.+132    	; 0x2e14 <Endpoint_Write_Control_Stream_LE+0xe2>
    2d90:	85 30       	cpi	r24, 0x05	; 5
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <Endpoint_Write_Control_Stream_LE+0x64>
    2d94:	41 c0       	rjmp	.+130    	; 0x2e18 <Endpoint_Write_Control_Stream_LE+0xe6>
    2d96:	80 81       	ld	r24, Z
    2d98:	83 fd       	sbrc	r24, 3
    2d9a:	40 c0       	rjmp	.+128    	; 0x2e1c <Endpoint_Write_Control_Stream_LE+0xea>
    2d9c:	80 81       	ld	r24, Z
    2d9e:	82 fd       	sbrc	r24, 2
    2da0:	32 c0       	rjmp	.+100    	; 0x2e06 <Endpoint_Write_Control_Stream_LE+0xd4>
    2da2:	80 81       	ld	r24, Z
    2da4:	80 ff       	sbrs	r24, 0
    2da6:	1f c0       	rjmp	.+62     	; 0x2de6 <Endpoint_Write_Control_Stream_LE+0xb4>
    2da8:	eb 01       	movw	r28, r22
    2daa:	18 81       	ld	r17, Y
    2dac:	ea 01       	movw	r28, r20
    2dae:	88 81       	ld	r24, Y
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	91 2b       	or	r25, r17
    2db4:	21 15       	cp	r18, r1
    2db6:	31 05       	cpc	r19, r1
    2db8:	79 f0       	breq	.+30     	; 0x2dd8 <Endpoint_Write_Control_Stream_LE+0xa6>
    2dba:	88 30       	cpi	r24, 0x08	; 8
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	60 f4       	brcc	.+24     	; 0x2dd8 <Endpoint_Write_Control_Stream_LE+0xa6>
    2dc0:	1d 91       	ld	r17, X+
    2dc2:	e6 01       	movw	r28, r12
    2dc4:	18 83       	st	Y, r17
    2dc6:	21 50       	subi	r18, 0x01	; 1
    2dc8:	31 09       	sbc	r19, r1
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	21 15       	cp	r18, r1
    2dce:	31 05       	cpc	r19, r1
    2dd0:	19 f0       	breq	.+6      	; 0x2dd8 <Endpoint_Write_Control_Stream_LE+0xa6>
    2dd2:	88 30       	cpi	r24, 0x08	; 8
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	a1 f7       	brne	.-24     	; 0x2dc0 <Endpoint_Write_Control_Stream_LE+0x8e>
    2dd8:	10 2f       	mov	r17, r16
    2dda:	08 97       	sbiw	r24, 0x08	; 8
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <Endpoint_Write_Control_Stream_LE+0xae>
    2dde:	1f 2d       	mov	r17, r15
    2de0:	80 81       	ld	r24, Z
    2de2:	8e 77       	andi	r24, 0x7E	; 126
    2de4:	80 83       	st	Z, r24
    2de6:	21 15       	cp	r18, r1
    2de8:	31 05       	cpc	r19, r1
    2dea:	69 f6       	brne	.-102    	; 0x2d86 <Endpoint_Write_Control_Stream_LE+0x54>
    2dec:	11 11       	cpse	r17, r1
    2dee:	cb cf       	rjmp	.-106    	; 0x2d86 <Endpoint_Write_Control_Stream_LE+0x54>
    2df0:	0a c0       	rjmp	.+20     	; 0x2e06 <Endpoint_Write_Control_Stream_LE+0xd4>
    2df2:	80 91 75 07 	lds	r24, 0x0775
    2df6:	88 23       	and	r24, r24
    2df8:	99 f0       	breq	.+38     	; 0x2e20 <Endpoint_Write_Control_Stream_LE+0xee>
    2dfa:	85 30       	cpi	r24, 0x05	; 5
    2dfc:	99 f0       	breq	.+38     	; 0x2e24 <Endpoint_Write_Control_Stream_LE+0xf2>
    2dfe:	80 81       	ld	r24, Z
    2e00:	83 ff       	sbrs	r24, 3
    2e02:	03 c0       	rjmp	.+6      	; 0x2e0a <Endpoint_Write_Control_Stream_LE+0xd8>
    2e04:	11 c0       	rjmp	.+34     	; 0x2e28 <Endpoint_Write_Control_Stream_LE+0xf6>
    2e06:	e8 ee       	ldi	r30, 0xE8	; 232
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	82 ff       	sbrs	r24, 2
    2e0e:	f1 cf       	rjmp	.-30     	; 0x2df2 <Endpoint_Write_Control_Stream_LE+0xc0>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	0b c0       	rjmp	.+22     	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	09 c0       	rjmp	.+18     	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0xf8>
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	df 90       	pop	r13
    2e36:	cf 90       	pop	r12
    2e38:	08 95       	ret

00002e3a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2e48:	20 91 7c 07 	lds	r18, 0x077C
    2e4c:	30 91 7d 07 	lds	r19, 0x077D
    2e50:	26 17       	cp	r18, r22
    2e52:	37 07       	cpc	r19, r23
    2e54:	58 f0       	brcs	.+22     	; 0x2e6c <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2e56:	61 15       	cp	r22, r1
    2e58:	71 05       	cpc	r23, r1
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e5c:	e8 ee       	ldi	r30, 0xE8	; 232
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	20 81       	ld	r18, Z
    2e62:	2e 77       	andi	r18, 0x7E	; 126
    2e64:	20 83       	st	Z, r18
    2e66:	9b 01       	movw	r18, r22
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <Endpoint_Write_Control_PStream_LE+0x32>
    2e6a:	9b 01       	movw	r18, r22
    2e6c:	e8 2f       	mov	r30, r24
    2e6e:	f9 2f       	mov	r31, r25
    2e70:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e72:	a8 ee       	ldi	r26, 0xE8	; 232
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2e76:	63 ef       	ldi	r22, 0xF3	; 243
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	42 ef       	ldi	r20, 0xF2	; 242
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e7e:	0f 2e       	mov	r0, r31
    2e80:	f1 ef       	ldi	r31, 0xF1	; 241
    2e82:	cf 2e       	mov	r12, r31
    2e84:	d1 2c       	mov	r13, r1
    2e86:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2e88:	01 e0       	ldi	r16, 0x01	; 1
    2e8a:	f1 2c       	mov	r15, r1
    2e8c:	31 c0       	rjmp	.+98     	; 0x2ef0 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e8e:	80 91 75 07 	lds	r24, 0x0775

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e92:	88 23       	and	r24, r24
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <Endpoint_Write_Control_PStream_LE+0x5e>
    2e96:	43 c0       	rjmp	.+134    	; 0x2f1e <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e98:	85 30       	cpi	r24, 0x05	; 5
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <Endpoint_Write_Control_PStream_LE+0x64>
    2e9c:	42 c0       	rjmp	.+132    	; 0x2f22 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e9e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2ea0:	83 fd       	sbrc	r24, 3
    2ea2:	41 c0       	rjmp	.+130    	; 0x2f26 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ea4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2ea6:	82 fd       	sbrc	r24, 2
    2ea8:	33 c0       	rjmp	.+102    	; 0x2f10 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2eaa:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    2eac:	80 ff       	sbrs	r24, 0
    2eae:	20 c0       	rjmp	.+64     	; 0x2ef0 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2eb0:	eb 01       	movw	r28, r22
    2eb2:	18 81       	ld	r17, Y
    2eb4:	ea 01       	movw	r28, r20
    2eb6:	88 81       	ld	r24, Y
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2ebc:	21 15       	cp	r18, r1
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	81 f0       	breq	.+32     	; 0x2ee2 <Endpoint_Write_Control_PStream_LE+0xa8>
    2ec2:	88 30       	cpi	r24, 0x08	; 8
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	68 f4       	brcc	.+26     	; 0x2ee2 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2ec8:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2eca:	e6 01       	movw	r28, r12
    2ecc:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2ece:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2ed0:	21 50       	subi	r18, 0x01	; 1
    2ed2:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    2ed4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2ed6:	21 15       	cp	r18, r1
    2ed8:	31 05       	cpc	r19, r1
    2eda:	19 f0       	breq	.+6      	; 0x2ee2 <Endpoint_Write_Control_PStream_LE+0xa8>
    2edc:	88 30       	cpi	r24, 0x08	; 8
    2ede:	91 05       	cpc	r25, r1
    2ee0:	99 f7       	brne	.-26     	; 0x2ec8 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2ee2:	10 2f       	mov	r17, r16
    2ee4:	08 97       	sbiw	r24, 0x08	; 8
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <Endpoint_Write_Control_PStream_LE+0xb0>
    2ee8:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2eea:	8c 91       	ld	r24, X
    2eec:	8e 77       	andi	r24, 0x7E	; 126
    2eee:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2ef0:	21 15       	cp	r18, r1
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	61 f6       	brne	.-104    	; 0x2e8e <Endpoint_Write_Control_PStream_LE+0x54>
    2ef6:	11 11       	cpse	r17, r1
    2ef8:	ca cf       	rjmp	.-108    	; 0x2e8e <Endpoint_Write_Control_PStream_LE+0x54>
    2efa:	0a c0       	rjmp	.+20     	; 0x2f10 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2efc:	80 91 75 07 	lds	r24, 0x0775

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2f00:	88 23       	and	r24, r24
    2f02:	99 f0       	breq	.+38     	; 0x2f2a <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2f04:	85 30       	cpi	r24, 0x05	; 5
    2f06:	99 f0       	breq	.+38     	; 0x2f2e <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2f08:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2f0a:	83 ff       	sbrs	r24, 3
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <Endpoint_Write_Control_PStream_LE+0xda>
    2f0e:	11 c0       	rjmp	.+34     	; 0x2f32 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f10:	e8 ee       	ldi	r30, 0xE8	; 232
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2f16:	82 ff       	sbrs	r24, 2
    2f18:	f1 cf       	rjmp	.-30     	; 0x2efc <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0b c0       	rjmp	.+22     	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	09 c0       	rjmp	.+18     	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2f22:	83 e0       	ldi	r24, 0x03	; 3
    2f24:	07 c0       	rjmp	.+14     	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	05 c0       	rjmp	.+10     	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	df 90       	pop	r13
    2f40:	cf 90       	pop	r12
    2f42:	08 95       	ret

00002f44 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2f44:	8f 92       	push	r8
    2f46:	9f 92       	push	r9
    2f48:	bf 92       	push	r11
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	87 30       	cpi	r24, 0x07	; 7
    2f5c:	70 f1       	brcs	.+92     	; 0x2fba <Endpoint_ConfigureEndpoint_Prv+0x76>
    2f5e:	26 c0       	rjmp	.+76     	; 0x2fac <Endpoint_ConfigureEndpoint_Prv+0x68>
    2f60:	29 2f       	mov	r18, r25
    2f62:	2f 70       	andi	r18, 0x0F	; 15
    2f64:	e7 01       	movw	r28, r14
    2f66:	28 83       	st	Y, r18
    2f68:	89 17       	cp	r24, r25
    2f6a:	31 f0       	breq	.+12     	; 0x2f78 <Endpoint_ConfigureEndpoint_Prv+0x34>
    2f6c:	e8 01       	movw	r28, r16
    2f6e:	78 81       	ld	r23, Y
    2f70:	20 81       	ld	r18, Z
    2f72:	e4 01       	movw	r28, r8
    2f74:	58 81       	ld	r21, Y
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2f78:	24 2f       	mov	r18, r20
    2f7a:	76 2f       	mov	r23, r22
    2f7c:	5b 2d       	mov	r21, r11
    2f7e:	21 ff       	sbrs	r18, 1
    2f80:	12 c0       	rjmp	.+36     	; 0x2fa6 <Endpoint_ConfigureEndpoint_Prv+0x62>
    2f82:	3c 91       	ld	r19, X
    2f84:	3e 7f       	andi	r19, 0xFE	; 254
    2f86:	3c 93       	st	X, r19
    2f88:	30 81       	ld	r19, Z
    2f8a:	3d 7f       	andi	r19, 0xFD	; 253
    2f8c:	30 83       	st	Z, r19
    2f8e:	3c 91       	ld	r19, X
    2f90:	31 60       	ori	r19, 0x01	; 1
    2f92:	3c 93       	st	X, r19
    2f94:	e8 01       	movw	r28, r16
    2f96:	78 83       	st	Y, r23
    2f98:	20 83       	st	Z, r18
    2f9a:	e4 01       	movw	r28, r8
    2f9c:	58 83       	st	Y, r21
    2f9e:	e6 01       	movw	r28, r12
    2fa0:	28 81       	ld	r18, Y
    2fa2:	22 23       	and	r18, r18
    2fa4:	44 f4       	brge	.+16     	; 0x2fb6 <Endpoint_ConfigureEndpoint_Prv+0x72>
    2fa6:	9f 5f       	subi	r25, 0xFF	; 255
    2fa8:	97 30       	cpi	r25, 0x07	; 7
    2faa:	d1 f6       	brne	.-76     	; 0x2f60 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2fac:	8f 70       	andi	r24, 0x0F	; 15
    2fae:	80 93 e9 00 	sts	0x00E9, r24
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	21 c0       	rjmp	.+66     	; 0x2ff8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	1f c0       	rjmp	.+62     	; 0x2ff8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2fba:	98 2f       	mov	r25, r24
    2fbc:	9f 70       	andi	r25, 0x0F	; 15
    2fbe:	90 93 e9 00 	sts	0x00E9, r25
    2fc2:	98 2f       	mov	r25, r24
    2fc4:	24 2f       	mov	r18, r20
    2fc6:	76 2f       	mov	r23, r22
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	ab ee       	ldi	r26, 0xEB	; 235
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	ed ee       	ldi	r30, 0xED	; 237
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	0c ee       	ldi	r16, 0xEC	; 236
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
    2fd6:	0f 2e       	mov	r0, r31
    2fd8:	f0 ef       	ldi	r31, 0xF0	; 240
    2fda:	8f 2e       	mov	r8, r31
    2fdc:	91 2c       	mov	r9, r1
    2fde:	f0 2d       	mov	r31, r0
    2fe0:	0f 2e       	mov	r0, r31
    2fe2:	fe ee       	ldi	r31, 0xEE	; 238
    2fe4:	cf 2e       	mov	r12, r31
    2fe6:	d1 2c       	mov	r13, r1
    2fe8:	f0 2d       	mov	r31, r0
    2fea:	0f 2e       	mov	r0, r31
    2fec:	f9 ee       	ldi	r31, 0xE9	; 233
    2fee:	ef 2e       	mov	r14, r31
    2ff0:	f1 2c       	mov	r15, r1
    2ff2:	f0 2d       	mov	r31, r0
    2ff4:	b1 2c       	mov	r11, r1
    2ff6:	c3 cf       	rjmp	.-122    	; 0x2f7e <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	9f 90       	pop	r9
    300c:	8f 90       	pop	r8
    300e:	08 95       	ret

00003010 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3010:	80 91 76 07 	lds	r24, 0x0776
    3014:	88 23       	and	r24, r24
    3016:	44 f0       	brlt	.+16     	; 0x3028 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3018:	e8 ee       	ldi	r30, 0xE8	; 232
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    301e:	80 91 75 07 	lds	r24, 0x0775
    3022:	81 11       	cpse	r24, r1
    3024:	03 c0       	rjmp	.+6      	; 0x302c <Endpoint_ClearStatusStage+0x1c>
    3026:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3028:	e8 ee       	ldi	r30, 0xE8	; 232
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    302e:	82 ff       	sbrs	r24, 2
    3030:	f6 cf       	rjmp	.-20     	; 0x301e <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3032:	e8 ee       	ldi	r30, 0xE8	; 232
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	8b 77       	andi	r24, 0x7B	; 123
    303a:	80 83       	st	Z, r24
    303c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    303e:	80 91 75 07 	lds	r24, 0x0775
    3042:	88 23       	and	r24, r24
    3044:	41 f0       	breq	.+16     	; 0x3056 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3046:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3048:	80 ff       	sbrs	r24, 0
    304a:	f9 cf       	rjmp	.-14     	; 0x303e <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    304c:	e8 ee       	ldi	r30, 0xE8	; 232
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	8e 77       	andi	r24, 0x7E	; 126
    3054:	80 83       	st	Z, r24
    3056:	08 95       	ret

00003058 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3060:	20 91 e4 00 	lds	r18, 0x00E4
    3064:	30 91 e5 00 	lds	r19, 0x00E5
    3068:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    306a:	ac ee       	ldi	r26, 0xEC	; 236
    306c:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    306e:	e8 ee       	ldi	r30, 0xE8	; 232
    3070:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3072:	0b ee       	ldi	r16, 0xEB	; 235
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	44 ee       	ldi	r20, 0xE4	; 228
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	01 c0       	rjmp	.+2      	; 0x307e <Endpoint_WaitUntilReady+0x26>
    307c:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    307e:	9c 91       	ld	r25, X
    3080:	89 2f       	mov	r24, r25
    3082:	81 70       	andi	r24, 0x01	; 1
    3084:	90 fd       	sbrc	r25, 0
    3086:	1d c0       	rjmp	.+58     	; 0x30c2 <Endpoint_WaitUntilReady+0x6a>
    3088:	20 c0       	rjmp	.+64     	; 0x30ca <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    308a:	80 91 75 07 	lds	r24, 0x0775

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    308e:	88 23       	and	r24, r24
    3090:	81 f0       	breq	.+32     	; 0x30b2 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3092:	85 30       	cpi	r24, 0x05	; 5
    3094:	81 f0       	breq	.+32     	; 0x30b6 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3096:	e8 01       	movw	r28, r16
    3098:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    309a:	85 fd       	sbrc	r24, 5
    309c:	0e c0       	rjmp	.+28     	; 0x30ba <Endpoint_WaitUntilReady+0x62>
    309e:	ea 01       	movw	r28, r20
    30a0:	88 81       	ld	r24, Y
    30a2:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    30a4:	28 17       	cp	r18, r24
    30a6:	39 07       	cpc	r19, r25
    30a8:	51 f3       	breq	.-44     	; 0x307e <Endpoint_WaitUntilReady+0x26>
    30aa:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    30ac:	39 f7       	brne	.-50     	; 0x307c <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    30ae:	84 e0       	ldi	r24, 0x04	; 4
    30b0:	0f c0       	rjmp	.+30     	; 0x30d0 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	0d c0       	rjmp	.+26     	; 0x30d0 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    30b6:	83 e0       	ldi	r24, 0x03	; 3
    30b8:	0b c0       	rjmp	.+22     	; 0x30d0 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	09 c0       	rjmp	.+18     	; 0x30d0 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	07 c0       	rjmp	.+14     	; 0x30d0 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    30c2:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    30c4:	80 ff       	sbrs	r24, 0
    30c6:	e1 cf       	rjmp	.-62     	; 0x308a <Endpoint_WaitUntilReady+0x32>
    30c8:	fa cf       	rjmp	.-12     	; 0x30be <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    30ca:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    30cc:	92 ff       	sbrs	r25, 2
    30ce:	dd cf       	rjmp	.-70     	; 0x308a <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    30e2:	0e 94 c2 18 	call	0x3184	; 0x3184 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    30e6:	0e 94 ca 18 	call	0x3194	; 0x3194 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    30ea:	c8 ed       	ldi	r28, 0xD8	; 216
    30ec:	d0 e0       	ldi	r29, 0x00	; 0
    30ee:	88 81       	ld	r24, Y
    30f0:	8f 77       	andi	r24, 0x7F	; 127
    30f2:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    30f4:	88 81       	ld	r24, Y
    30f6:	80 68       	ori	r24, 0x80	; 128
    30f8:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    30fa:	88 81       	ld	r24, Y
    30fc:	8f 7d       	andi	r24, 0xDF	; 223
    30fe:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3100:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3102:	10 92 75 07 	sts	0x0775, r1
	USB_Device_ConfigurationNumber  = 0;
    3106:	10 92 71 07 	sts	0x0771, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    310a:	10 92 73 07 	sts	0x0773, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    310e:	10 92 72 07 	sts	0x0772, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3112:	00 ee       	ldi	r16, 0xE0	; 224
    3114:	10 e0       	ldi	r17, 0x00	; 0
    3116:	f8 01       	movw	r30, r16
    3118:	80 81       	ld	r24, Z
    311a:	8b 7f       	andi	r24, 0xFB	; 251
    311c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    311e:	88 81       	ld	r24, Y
    3120:	81 60       	ori	r24, 0x01	; 1
    3122:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3124:	42 e0       	ldi	r20, 0x02	; 2
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    312e:	e1 ee       	ldi	r30, 0xE1	; 225
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	8e 7f       	andi	r24, 0xFE	; 254
    3136:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3138:	e2 ee       	ldi	r30, 0xE2	; 226
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	81 60       	ori	r24, 0x01	; 1
    3140:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3142:	80 81       	ld	r24, Z
    3144:	88 60       	ori	r24, 0x08	; 8
    3146:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3148:	f8 01       	movw	r30, r16
    314a:	80 81       	ld	r24, Z
    314c:	8e 7f       	andi	r24, 0xFE	; 254
    314e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3150:	88 81       	ld	r24, Y
    3152:	80 61       	ori	r24, 0x10	; 16
    3154:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3160:	e8 ed       	ldi	r30, 0xD8	; 216
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	8f 7e       	andi	r24, 0xEF	; 239
    3168:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    316a:	e7 ed       	ldi	r30, 0xD7	; 215
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	81 60       	ori	r24, 0x01	; 1
    3172:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    3174:	84 e0       	ldi	r24, 0x04	; 4
    3176:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	80 93 74 07 	sts	0x0774, r24

	USB_ResetInterface();
    317e:	0e 94 6d 18 	call	0x30da	; 0x30da <USB_ResetInterface>
    3182:	08 95       	ret

00003184 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3184:	e8 ed       	ldi	r30, 0xD8	; 216
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8e 7f       	andi	r24, 0xFE	; 254
    318c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    318e:	10 92 e2 00 	sts	0x00E2, r1
    3192:	08 95       	ret

00003194 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3194:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3198:	10 92 e1 00 	sts	0x00E1, r1
    319c:	08 95       	ret

0000319e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    319e:	1f 92       	push	r1
    31a0:	0f 92       	push	r0
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	0f 92       	push	r0
    31a6:	11 24       	eor	r1, r1
    31a8:	2f 93       	push	r18
    31aa:	3f 93       	push	r19
    31ac:	4f 93       	push	r20
    31ae:	5f 93       	push	r21
    31b0:	6f 93       	push	r22
    31b2:	7f 93       	push	r23
    31b4:	8f 93       	push	r24
    31b6:	9f 93       	push	r25
    31b8:	af 93       	push	r26
    31ba:	bf 93       	push	r27
    31bc:	ef 93       	push	r30
    31be:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    31c0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    31c4:	82 ff       	sbrs	r24, 2
    31c6:	0b c0       	rjmp	.+22     	; 0x31de <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    31c8:	80 91 e2 00 	lds	r24, 0x00E2
    31cc:	82 ff       	sbrs	r24, 2
    31ce:	07 c0       	rjmp	.+14     	; 0x31de <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    31d0:	e1 ee       	ldi	r30, 0xE1	; 225
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8b 7f       	andi	r24, 0xFB	; 251
    31d8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    31da:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    31de:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    31e2:	80 ff       	sbrs	r24, 0
    31e4:	1f c0       	rjmp	.+62     	; 0x3224 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    31e6:	80 91 d8 00 	lds	r24, 0x00D8
    31ea:	80 ff       	sbrs	r24, 0
    31ec:	1b c0       	rjmp	.+54     	; 0x3224 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    31ee:	ea ed       	ldi	r30, 0xDA	; 218
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	8e 7f       	andi	r24, 0xFE	; 254
    31f6:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    31f8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    31fc:	80 ff       	sbrs	r24, 0
    31fe:	0d c0       	rjmp	.+26     	; 0x321a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3200:	80 e1       	ldi	r24, 0x10	; 16
    3202:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3204:	82 e1       	ldi	r24, 0x12	; 18
    3206:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3208:	09 b4       	in	r0, 0x29	; 41
    320a:	00 fe       	sbrs	r0, 0
    320c:	fd cf       	rjmp	.-6      	; 0x3208 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	80 93 75 07 	sts	0x0775, r24
			EVENT_USB_Device_Connect();
    3214:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
    3218:	05 c0       	rjmp	.+10     	; 0x3224 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    321a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    321c:	10 92 75 07 	sts	0x0775, r1
			EVENT_USB_Device_Disconnect();
    3220:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3224:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3228:	80 ff       	sbrs	r24, 0
    322a:	17 c0       	rjmp	.+46     	; 0x325a <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    322c:	80 91 e2 00 	lds	r24, 0x00E2
    3230:	80 ff       	sbrs	r24, 0
    3232:	13 c0       	rjmp	.+38     	; 0x325a <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3234:	e2 ee       	ldi	r30, 0xE2	; 226
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8e 7f       	andi	r24, 0xFE	; 254
    323c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    323e:	80 81       	ld	r24, Z
    3240:	80 61       	ori	r24, 0x10	; 16
    3242:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3244:	e8 ed       	ldi	r30, 0xD8	; 216
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 62       	ori	r24, 0x20	; 32
    324c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    324e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3250:	85 e0       	ldi	r24, 0x05	; 5
    3252:	80 93 75 07 	sts	0x0775, r24
		EVENT_USB_Device_Suspend();
    3256:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    325a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    325e:	84 ff       	sbrs	r24, 4
    3260:	30 c0       	rjmp	.+96     	; 0x32c2 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3262:	80 91 e2 00 	lds	r24, 0x00E2
    3266:	84 ff       	sbrs	r24, 4
    3268:	2c c0       	rjmp	.+88     	; 0x32c2 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    326a:	80 e1       	ldi	r24, 0x10	; 16
    326c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    326e:	82 e1       	ldi	r24, 0x12	; 18
    3270:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3272:	09 b4       	in	r0, 0x29	; 41
    3274:	00 fe       	sbrs	r0, 0
    3276:	fd cf       	rjmp	.-6      	; 0x3272 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3278:	e8 ed       	ldi	r30, 0xD8	; 216
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 7d       	andi	r24, 0xDF	; 223
    3280:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3282:	e1 ee       	ldi	r30, 0xE1	; 225
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	8f 7e       	andi	r24, 0xEF	; 239
    328a:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    328c:	e2 ee       	ldi	r30, 0xE2	; 226
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	8f 7e       	andi	r24, 0xEF	; 239
    3294:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3296:	80 81       	ld	r24, Z
    3298:	81 60       	ori	r24, 0x01	; 1
    329a:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    329c:	80 91 71 07 	lds	r24, 0x0771
    32a0:	88 23       	and	r24, r24
    32a2:	21 f0       	breq	.+8      	; 0x32ac <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    32a4:	84 e0       	ldi	r24, 0x04	; 4
    32a6:	80 93 75 07 	sts	0x0775, r24
    32aa:	09 c0       	rjmp	.+18     	; 0x32be <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    32ac:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    32b0:	88 23       	and	r24, r24
    32b2:	14 f0       	brlt	.+4      	; 0x32b8 <__vector_10+0x11a>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <__vector_10+0x11c>
    32b8:	83 e0       	ldi	r24, 0x03	; 3
    32ba:	80 93 75 07 	sts	0x0775, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    32be:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    32c2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    32c6:	83 ff       	sbrs	r24, 3
    32c8:	25 c0       	rjmp	.+74     	; 0x3314 <__vector_10+0x176>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    32ca:	80 91 e2 00 	lds	r24, 0x00E2
    32ce:	83 ff       	sbrs	r24, 3
    32d0:	21 c0       	rjmp	.+66     	; 0x3314 <__vector_10+0x176>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    32d2:	e1 ee       	ldi	r30, 0xE1	; 225
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	87 7f       	andi	r24, 0xF7	; 247
    32da:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	80 93 75 07 	sts	0x0775, r24
		USB_Device_ConfigurationNumber = 0;
    32e2:	10 92 71 07 	sts	0x0771, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    32e6:	80 81       	ld	r24, Z
    32e8:	8e 7f       	andi	r24, 0xFE	; 254
    32ea:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    32ec:	e2 ee       	ldi	r30, 0xE2	; 226
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8e 7f       	andi	r24, 0xFE	; 254
    32f4:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    32f6:	80 81       	ld	r24, Z
    32f8:	80 61       	ori	r24, 0x10	; 16
    32fa:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    32fc:	42 e0       	ldi	r20, 0x02	; 2
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3306:	e0 ef       	ldi	r30, 0xF0	; 240
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	88 60       	ori	r24, 0x08	; 8
    330e:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3310:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	0f 90       	pop	r0
    3332:	1f 90       	pop	r1
    3334:	18 95       	reti

00003336 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3336:	1f 92       	push	r1
    3338:	0f 92       	push	r0
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	0f 92       	push	r0
    333e:	11 24       	eor	r1, r1
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	2f 93       	push	r18
    334a:	3f 93       	push	r19
    334c:	4f 93       	push	r20
    334e:	5f 93       	push	r21
    3350:	6f 93       	push	r22
    3352:	7f 93       	push	r23
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	ef 93       	push	r30
    3362:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3364:	c0 91 e9 00 	lds	r28, 0x00E9
    3368:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    336a:	80 91 ec 00 	lds	r24, 0x00EC
    336e:	d8 2f       	mov	r29, r24
    3370:	d1 70       	andi	r29, 0x01	; 1
    3372:	80 fd       	sbrc	r24, 0
    3374:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3376:	0f 2e       	mov	r0, r31
    3378:	f9 ee       	ldi	r31, 0xE9	; 233
    337a:	ef 2e       	mov	r14, r31
    337c:	f1 2c       	mov	r15, r1
    337e:	f0 2d       	mov	r31, r0
    3380:	f7 01       	movw	r30, r14
    3382:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3384:	00 ef       	ldi	r16, 0xF0	; 240
    3386:	10 e0       	ldi	r17, 0x00	; 0
    3388:	f8 01       	movw	r30, r16
    338a:	80 81       	ld	r24, Z
    338c:	87 7f       	andi	r24, 0xF7	; 247
    338e:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3390:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3392:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <USB_Device_ProcessControlRequest>
    3396:	f7 01       	movw	r30, r14
    3398:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    339a:	f8 01       	movw	r30, r16
    339c:	80 81       	ld	r24, Z
    339e:	88 60       	ori	r24, 0x08	; 8
    33a0:	80 83       	st	Z, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    33a2:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    33a4:	cf 70       	andi	r28, 0x0F	; 15
    33a6:	f7 01       	movw	r30, r14
    33a8:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    33aa:	ff 91       	pop	r31
    33ac:	ef 91       	pop	r30
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	bf 91       	pop	r27
    33b4:	af 91       	pop	r26
    33b6:	9f 91       	pop	r25
    33b8:	8f 91       	pop	r24
    33ba:	7f 91       	pop	r23
    33bc:	6f 91       	pop	r22
    33be:	5f 91       	pop	r21
    33c0:	4f 91       	pop	r20
    33c2:	3f 91       	pop	r19
    33c4:	2f 91       	pop	r18
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	0f 90       	pop	r0
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	0f 90       	pop	r0
    33d4:	1f 90       	pop	r1
    33d6:	18 95       	reti

000033d8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	aa 97       	sbiw	r28, 0x2a	; 42
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	e6 e7       	ldi	r30, 0x76	; 118
    33f2:	f7 e0       	ldi	r31, 0x07	; 7
    33f4:	2e e7       	ldi	r18, 0x7E	; 126
    33f6:	37 e0       	ldi	r19, 0x07	; 7
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    33f8:	a1 ef       	ldi	r26, 0xF1	; 241
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    33fe:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3400:	e2 17       	cp	r30, r18
    3402:	f3 07       	cpc	r31, r19
    3404:	d9 f7       	brne	.-10     	; 0x33fc <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3406:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    340a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    340e:	83 ff       	sbrs	r24, 3
    3410:	2c c1       	rjmp	.+600    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3412:	e6 e7       	ldi	r30, 0x76	; 118
    3414:	f7 e0       	ldi	r31, 0x07	; 7
    3416:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    3418:	31 81       	ldd	r19, Z+1	; 0x01
    341a:	83 2f       	mov	r24, r19
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	8a 30       	cpi	r24, 0x0A	; 10
    3420:	91 05       	cpc	r25, r1
    3422:	08 f0       	brcs	.+2      	; 0x3426 <USB_Device_ProcessControlRequest+0x4e>
    3424:	22 c1       	rjmp	.+580    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
    3426:	fc 01       	movw	r30, r24
    3428:	ea 52       	subi	r30, 0x2A	; 42
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	0c 94 3e 30 	jmp	0x607c	; 0x607c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3430:	20 38       	cpi	r18, 0x80	; 128
    3432:	21 f0       	breq	.+8      	; 0x343c <USB_Device_ProcessControlRequest+0x64>
    3434:	22 38       	cpi	r18, 0x82	; 130
    3436:	09 f0       	breq	.+2      	; 0x343a <USB_Device_ProcessControlRequest+0x62>
    3438:	18 c1       	rjmp	.+560    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
    343a:	08 c0       	rjmp	.+16     	; 0x344c <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    343c:	80 91 72 07 	lds	r24, 0x0772
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3440:	90 91 73 07 	lds	r25, 0x0773
    3444:	99 23       	and	r25, r25
    3446:	71 f0       	breq	.+28     	; 0x3464 <USB_Device_ProcessControlRequest+0x8c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3448:	82 60       	ori	r24, 0x02	; 2
    344a:	0c c0       	rjmp	.+24     	; 0x3464 <USB_Device_ProcessControlRequest+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    344c:	80 91 7a 07 	lds	r24, 0x077A
    3450:	8f 70       	andi	r24, 0x0F	; 15
    3452:	e9 ee       	ldi	r30, 0xE9	; 233
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3458:	80 91 eb 00 	lds	r24, 0x00EB
    345c:	85 fb       	bst	r24, 5
    345e:	88 27       	eor	r24, r24
    3460:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3462:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3464:	e8 ee       	ldi	r30, 0xE8	; 232
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	90 81       	ld	r25, Z
    346a:	97 7f       	andi	r25, 0xF7	; 247
    346c:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    346e:	a1 ef       	ldi	r26, 0xF1	; 241
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    3474:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3476:	80 81       	ld	r24, Z
    3478:	8e 77       	andi	r24, 0x7E	; 126
    347a:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    347c:	0e 94 08 18 	call	0x3010	; 0x3010 <Endpoint_ClearStatusStage>
    3480:	f4 c0       	rjmp	.+488    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3482:	22 23       	and	r18, r18
    3484:	09 f4       	brne	.+2      	; 0x3488 <USB_Device_ProcessControlRequest+0xb0>
    3486:	00 c1       	rjmp	.+512    	; 0x3688 <USB_Device_ProcessControlRequest+0x2b0>
    3488:	22 30       	cpi	r18, 0x02	; 2
    348a:	09 f0       	breq	.+2      	; 0x348e <USB_Device_ProcessControlRequest+0xb6>
    348c:	ee c0       	rjmp	.+476    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
    348e:	01 c1       	rjmp	.+514    	; 0x3692 <USB_Device_ProcessControlRequest+0x2ba>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	33 30       	cpi	r19, 0x03	; 3
    3494:	09 f0       	breq	.+2      	; 0x3498 <USB_Device_ProcessControlRequest+0xc0>
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	80 93 73 07 	sts	0x0773, r24
    349c:	29 c0       	rjmp	.+82     	; 0x34f0 <USB_Device_ProcessControlRequest+0x118>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    349e:	80 91 7a 07 	lds	r24, 0x077A
    34a2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <USB_Device_ProcessControlRequest+0xd0>
    34a6:	e1 c0       	rjmp	.+450    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34a8:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    34ac:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    34b0:	90 ff       	sbrs	r25, 0
    34b2:	1e c0       	rjmp	.+60     	; 0x34f0 <USB_Device_ProcessControlRequest+0x118>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    34b4:	90 91 77 07 	lds	r25, 0x0777
    34b8:	93 30       	cpi	r25, 0x03	; 3
    34ba:	31 f4       	brne	.+12     	; 0x34c8 <USB_Device_ProcessControlRequest+0xf0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    34bc:	eb ee       	ldi	r30, 0xEB	; 235
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	80 62       	ori	r24, 0x20	; 32
    34c4:	80 83       	st	Z, r24
    34c6:	14 c0       	rjmp	.+40     	; 0x34f0 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    34c8:	eb ee       	ldi	r30, 0xEB	; 235
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	90 81       	ld	r25, Z
    34ce:	90 61       	ori	r25, 0x10	; 16
    34d0:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    34d2:	21 e0       	ldi	r18, 0x01	; 1
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	a9 01       	movw	r20, r18
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <USB_Device_ProcessControlRequest+0x106>
    34da:	44 0f       	add	r20, r20
    34dc:	55 1f       	adc	r21, r21
    34de:	8a 95       	dec	r24
    34e0:	e2 f7       	brpl	.-8      	; 0x34da <USB_Device_ProcessControlRequest+0x102>
    34e2:	aa ee       	ldi	r26, 0xEA	; 234
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	4c 93       	st	X, r20
				UERST = 0;
    34e8:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    34ea:	80 81       	ld	r24, Z
    34ec:	88 60       	ori	r24, 0x08	; 8
    34ee:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34f0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    34f4:	e8 ee       	ldi	r30, 0xE8	; 232
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	87 7f       	andi	r24, 0xF7	; 247
    34fc:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    34fe:	0e 94 08 18 	call	0x3010	; 0x3010 <Endpoint_ClearStatusStage>
    3502:	b3 c0       	rjmp	.+358    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3504:	21 11       	cpse	r18, r1
    3506:	b1 c0       	rjmp	.+354    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3508:	10 91 78 07 	lds	r17, 0x0778
    350c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    350e:	e3 ee       	ldi	r30, 0xE3	; 227
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	80 78       	andi	r24, 0x80	; 128
    3516:	81 2b       	or	r24, r17
    3518:	80 83       	st	Z, r24
    351a:	e8 ee       	ldi	r30, 0xE8	; 232
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	87 7f       	andi	r24, 0xF7	; 247
    3522:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3524:	0e 94 08 18 	call	0x3010	; 0x3010 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3528:	e8 ee       	ldi	r30, 0xE8	; 232
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    352e:	80 ff       	sbrs	r24, 0
    3530:	fd cf       	rjmp	.-6      	; 0x352c <USB_Device_ProcessControlRequest+0x154>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3532:	e3 ee       	ldi	r30, 0xE3	; 227
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	80 68       	ori	r24, 0x80	; 128
    353a:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    353c:	11 11       	cpse	r17, r1
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <USB_Device_ProcessControlRequest+0x16c>
    3540:	82 e0       	ldi	r24, 0x02	; 2
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <USB_Device_ProcessControlRequest+0x16e>
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	80 93 75 07 	sts	0x0775, r24
    354a:	8f c0       	rjmp	.+286    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    354c:	20 58       	subi	r18, 0x80	; 128
    354e:	22 30       	cpi	r18, 0x02	; 2
    3550:	08 f0       	brcs	.+2      	; 0x3554 <USB_Device_ProcessControlRequest+0x17c>
    3552:	8b c0       	rjmp	.+278    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3554:	80 91 78 07 	lds	r24, 0x0778
    3558:	90 91 79 07 	lds	r25, 0x0779
    355c:	8c 3d       	cpi	r24, 0xDC	; 220
    355e:	53 e0       	ldi	r21, 0x03	; 3
    3560:	95 07       	cpc	r25, r21
    3562:	a1 f5       	brne	.+104    	; 0x35cc <USB_Device_ProcessControlRequest+0x1f4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3568:	8a e2       	ldi	r24, 0x2A	; 42
    356a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    356c:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    356e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3570:	de 01       	movw	r26, r28
    3572:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3574:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3576:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3578:	41 e2       	ldi	r20, 0x21	; 33
    357a:	e3 2f       	mov	r30, r19
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	40 93 57 00 	sts	0x0057, r20
    3582:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    3584:	20 ff       	sbrs	r18, 0
    3586:	03 c0       	rjmp	.+6      	; 0x358e <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
    3588:	82 95       	swap	r24
    358a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    358c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    358e:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3590:	8a 30       	cpi	r24, 0x0A	; 10
    3592:	18 f0       	brcs	.+6      	; 0x359a <USB_Device_ProcessControlRequest+0x1c2>
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	c7 96       	adiw	r24, 0x37	; 55
    3598:	02 c0       	rjmp	.+4      	; 0x359e <USB_Device_ProcessControlRequest+0x1c6>
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	c0 96       	adiw	r24, 0x30	; 48
    359e:	8d 93       	st	X+, r24
    35a0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    35a2:	2f 5f       	subi	r18, 0xFF	; 255
    35a4:	24 31       	cpi	r18, 0x14	; 20
    35a6:	49 f7       	brne	.-46     	; 0x357a <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    35a8:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35aa:	08 ee       	ldi	r16, 0xE8	; 232
    35ac:	10 e0       	ldi	r17, 0x00	; 0
    35ae:	f8 01       	movw	r30, r16
    35b0:	80 81       	ld	r24, Z
    35b2:	87 7f       	andi	r24, 0xF7	; 247
    35b4:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    35b6:	6a e2       	ldi	r22, 0x2A	; 42
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	ce 01       	movw	r24, r28
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	0e 94 99 16 	call	0x2d32	; 0x2d32 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35c2:	f8 01       	movw	r30, r16
    35c4:	80 81       	ld	r24, Z
    35c6:	8b 77       	andi	r24, 0x7B	; 123
    35c8:	80 83       	st	Z, r24
    35ca:	4f c0       	rjmp	.+158    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    35cc:	ae 01       	movw	r20, r28
    35ce:	4f 5f       	subi	r20, 0xFF	; 255
    35d0:	5f 4f       	sbci	r21, 0xFF	; 255
    35d2:	60 91 7a 07 	lds	r22, 0x077A
    35d6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <CALLBACK_USB_GetDescriptor>
    35da:	bc 01       	movw	r22, r24
    35dc:	89 2b       	or	r24, r25
    35de:	09 f4       	brne	.+2      	; 0x35e2 <USB_Device_ProcessControlRequest+0x20a>
    35e0:	44 c0       	rjmp	.+136    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35e2:	08 ee       	ldi	r16, 0xE8	; 232
    35e4:	10 e0       	ldi	r17, 0x00	; 0
    35e6:	f8 01       	movw	r30, r16
    35e8:	90 81       	ld	r25, Z
    35ea:	97 7f       	andi	r25, 0xF7	; 247
    35ec:	90 83       	st	Z, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35f6:	f8 01       	movw	r30, r16
    35f8:	80 81       	ld	r24, Z
    35fa:	8b 77       	andi	r24, 0x7B	; 123
    35fc:	80 83       	st	Z, r24
    35fe:	35 c0       	rjmp	.+106    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3600:	20 38       	cpi	r18, 0x80	; 128
    3602:	99 f5       	brne	.+102    	; 0x366a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3604:	e8 ee       	ldi	r30, 0xE8	; 232
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	87 7f       	andi	r24, 0xF7	; 247
    360c:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    360e:	80 91 71 07 	lds	r24, 0x0771
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3612:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3616:	80 81       	ld	r24, Z
    3618:	8e 77       	andi	r24, 0x7E	; 126
    361a:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    361c:	0e 94 08 18 	call	0x3010	; 0x3010 <Endpoint_ClearStatusStage>
    3620:	24 c0       	rjmp	.+72     	; 0x366a <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3622:	21 11       	cpse	r18, r1
    3624:	22 c0       	rjmp	.+68     	; 0x366a <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3626:	80 91 78 07 	lds	r24, 0x0778
    362a:	82 30       	cpi	r24, 0x02	; 2
    362c:	f0 f4       	brcc	.+60     	; 0x366a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    362e:	e8 ee       	ldi	r30, 0xE8	; 232
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	87 7f       	andi	r24, 0xF7	; 247
    3636:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3638:	80 91 78 07 	lds	r24, 0x0778
    363c:	80 93 71 07 	sts	0x0771, r24

	Endpoint_ClearStatusStage();
    3640:	0e 94 08 18 	call	0x3010	; 0x3010 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3644:	80 91 71 07 	lds	r24, 0x0771
    3648:	88 23       	and	r24, r24
    364a:	21 f0       	breq	.+8      	; 0x3654 <USB_Device_ProcessControlRequest+0x27c>
	  USB_DeviceState = DEVICE_STATE_Configured;
    364c:	84 e0       	ldi	r24, 0x04	; 4
    364e:	80 93 75 07 	sts	0x0775, r24
    3652:	09 c0       	rjmp	.+18     	; 0x3666 <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3654:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3658:	88 23       	and	r24, r24
    365a:	14 f0       	brlt	.+4      	; 0x3660 <USB_Device_ProcessControlRequest+0x288>
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <USB_Device_ProcessControlRequest+0x28a>
    3660:	84 e0       	ldi	r24, 0x04	; 4
    3662:	80 93 75 07 	sts	0x0775, r24

	EVENT_USB_Device_ConfigurationChanged();
    3666:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    366a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    366e:	83 ff       	sbrs	r24, 3
    3670:	16 c0       	rjmp	.+44     	; 0x369e <USB_Device_ProcessControlRequest+0x2c6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3672:	e8 ee       	ldi	r30, 0xE8	; 232
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	87 7f       	andi	r24, 0xF7	; 247
    367a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    367c:	eb ee       	ldi	r30, 0xEB	; 235
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	80 62       	ori	r24, 0x20	; 32
    3684:	80 83       	st	Z, r24
    3686:	0b c0       	rjmp	.+22     	; 0x369e <USB_Device_ProcessControlRequest+0x2c6>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3688:	80 91 78 07 	lds	r24, 0x0778
    368c:	81 30       	cpi	r24, 0x01	; 1
    368e:	69 f7       	brne	.-38     	; 0x366a <USB_Device_ProcessControlRequest+0x292>
    3690:	ff ce       	rjmp	.-514    	; 0x3490 <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3692:	80 91 78 07 	lds	r24, 0x0778
    3696:	88 23       	and	r24, r24
    3698:	09 f4       	brne	.+2      	; 0x369c <USB_Device_ProcessControlRequest+0x2c4>
    369a:	01 cf       	rjmp	.-510    	; 0x349e <USB_Device_ProcessControlRequest+0xc6>
    369c:	29 cf       	rjmp	.-430    	; 0x34f0 <USB_Device_ProcessControlRequest+0x118>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    369e:	aa 96       	adiw	r28, 0x2a	; 42
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	08 95       	ret

000036b4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    36b4:	08 95       	ret

000036b6 <_ZN6Analog4initEv>:
        analogDebounceCounter[analogID] = 0;
        return true;

    }   return false;

}
    36b6:	cf 92       	push	r12
    36b8:	df 92       	push	r13
    36ba:	ef 92       	push	r14
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	6e 97       	sbiw	r28, 0x1e	; 30
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	80 e2       	ldi	r24, 0x20	; 32
    36d6:	8c 8f       	std	Y+28, r24	; 0x1c
    36d8:	1d 8e       	std	Y+29, r1	; 0x1d
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	9e 8f       	std	Y+30, r25	; 0x1e
    36de:	89 8f       	std	Y+25, r24	; 0x19
    36e0:	1a 8e       	std	Y+26, r1	; 0x1a
    36e2:	9b 8f       	std	Y+27, r25	; 0x1b
    36e4:	8e 8b       	std	Y+22, r24	; 0x16
    36e6:	1f 8a       	std	Y+23, r1	; 0x17
    36e8:	92 e0       	ldi	r25, 0x02	; 2
    36ea:	98 8f       	std	Y+24, r25	; 0x18
    36ec:	8b 8b       	std	Y+19, r24	; 0x13
    36ee:	1c 8a       	std	Y+20, r1	; 0x14
    36f0:	9f e7       	ldi	r25, 0x7F	; 127
    36f2:	9d 8b       	std	Y+21, r25	; 0x15
    36f4:	88 8b       	std	Y+16, r24	; 0x10
    36f6:	19 8a       	std	Y+17, r1	; 0x11
    36f8:	9a 8b       	std	Y+18, r25	; 0x12
    36fa:	8d 87       	std	Y+13, r24	; 0x0d
    36fc:	1e 86       	std	Y+14, r1	; 0x0e
    36fe:	9f 87       	std	Y+15, r25	; 0x0f
    3700:	ce 01       	movw	r24, r28
    3702:	4c 96       	adiw	r24, 0x1c	; 28
    3704:	9a 83       	std	Y+2, r25	; 0x02
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	06 97       	sbiw	r24, 0x06	; 6
    370a:	9c 83       	std	Y+4, r25	; 0x04
    370c:	8b 83       	std	Y+3, r24	; 0x03
    370e:	03 96       	adiw	r24, 0x03	; 3
    3710:	9e 83       	std	Y+6, r25	; 0x06
    3712:	8d 83       	std	Y+5, r24	; 0x05
    3714:	06 97       	sbiw	r24, 0x06	; 6
    3716:	98 87       	std	Y+8, r25	; 0x08
    3718:	8f 83       	std	Y+7, r24	; 0x07
    371a:	03 97       	sbiw	r24, 0x03	; 3
    371c:	9a 87       	std	Y+10, r25	; 0x0a
    371e:	89 87       	std	Y+9, r24	; 0x09
    3720:	03 97       	sbiw	r24, 0x03	; 3
    3722:	9c 87       	std	Y+12, r25	; 0x0c
    3724:	8b 87       	std	Y+11, r24	; 0x0b
    3726:	46 e0       	ldi	r20, 0x06	; 6
    3728:	63 e0       	ldi	r22, 0x03	; 3
    372a:	82 e9       	ldi	r24, 0x92	; 146
    372c:	96 e0       	ldi	r25, 0x06	; 6
    372e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN5SysEx14addMessageTypeEhh>
    3732:	ce 01       	movw	r24, r28
    3734:	01 96       	adiw	r24, 0x01	; 1
    3736:	6c 01       	movw	r12, r24
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	d6 01       	movw	r26, r12
    373c:	ed 91       	ld	r30, X+
    373e:	fd 91       	ld	r31, X+
    3740:	6d 01       	movw	r12, r26
    3742:	e2 80       	ldd	r14, Z+2	; 0x02
    3744:	01 81       	ldd	r16, Z+1	; 0x01
    3746:	20 81       	ld	r18, Z
    3748:	41 2f       	mov	r20, r17
    374a:	63 e0       	ldi	r22, 0x03	; 3
    374c:	82 e9       	ldi	r24, 0x92	; 146
    374e:	96 e0       	ldi	r25, 0x06	; 6
    3750:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    3754:	1f 5f       	subi	r17, 0xFF	; 255
    3756:	16 30       	cpi	r17, 0x06	; 6
    3758:	81 f7       	brne	.-32     	; 0x373a <_ZN6Analog4initEv+0x84>
    375a:	6e 96       	adiw	r28, 0x1e	; 30
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	ef 90       	pop	r14
    3770:	df 90       	pop	r13
    3772:	cf 90       	pop	r12
    3774:	08 95       	ret

00003776 <_ZN6Analog14getMedianValueEh>:

int16_t Analog::getMedianValue(uint8_t analogID)  {
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29

    int16_t medianValue = 0;

    if ((analogSample[analogID][0] <= analogSample[analogID][1]) && (analogSample[analogID][0] <= analogSample[analogID][2]))
    377a:	46 2f       	mov	r20, r22
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	9c 01       	movw	r18, r24
    3780:	78 e0       	ldi	r23, 0x08	; 8
    3782:	67 9f       	mul	r22, r23
    3784:	20 0d       	add	r18, r0
    3786:	31 1d       	adc	r19, r1
    3788:	11 24       	eor	r1, r1
    378a:	f9 01       	movw	r30, r18
    378c:	eb 59       	subi	r30, 0x9B	; 155
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	32 96       	adiw	r30, 0x02	; 2
    3796:	a0 81       	ld	r26, Z
    3798:	b1 81       	ldd	r27, Z+1	; 0x01
    379a:	a6 17       	cp	r26, r22
    379c:	b7 07       	cpc	r27, r23
    379e:	cc f0       	brlt	.+50     	; 0x37d2 <_ZN6Analog14getMedianValueEh+0x5c>
    37a0:	ea 01       	movw	r28, r20
    37a2:	cc 0f       	add	r28, r28
    37a4:	dd 1f       	adc	r29, r29
    37a6:	cc 0f       	add	r28, r28
    37a8:	dd 1f       	adc	r29, r29
    37aa:	cc 0f       	add	r28, r28
    37ac:	dd 1f       	adc	r29, r29
    37ae:	c8 0f       	add	r28, r24
    37b0:	d9 1f       	adc	r29, r25
    37b2:	c7 59       	subi	r28, 0x97	; 151
    37b4:	df 4f       	sbci	r29, 0xFF	; 255
    37b6:	28 81       	ld	r18, Y
    37b8:	39 81       	ldd	r19, Y+1	; 0x01
    37ba:	26 17       	cp	r18, r22
    37bc:	37 07       	cpc	r19, r23
    37be:	34 f0       	brlt	.+12     	; 0x37cc <_ZN6Analog14getMedianValueEh+0x56>
    37c0:	c9 01       	movw	r24, r18
    37c2:	a2 17       	cp	r26, r18
    37c4:	b3 07       	cpc	r27, r19
    37c6:	fc f4       	brge	.+62     	; 0x3806 <_ZN6Analog14getMedianValueEh+0x90>
    37c8:	cd 01       	movw	r24, r26
    37ca:	1d c0       	rjmp	.+58     	; 0x3806 <_ZN6Analog14getMedianValueEh+0x90>
    medianValue = (analogSample[analogID][1] <= analogSample[analogID][2]) ? analogSample[analogID][1] : analogSample[analogID][2];

    else if ((analogSample[analogID][1] <= analogSample[analogID][0]) && (analogSample[analogID][1] <= analogSample[analogID][2]))
    37cc:	6a 17       	cp	r22, r26
    37ce:	7b 07       	cpc	r23, r27
    37d0:	ac f0       	brlt	.+42     	; 0x37fc <_ZN6Analog14getMedianValueEh+0x86>
    37d2:	44 0f       	add	r20, r20
    37d4:	55 1f       	adc	r21, r21
    37d6:	44 0f       	add	r20, r20
    37d8:	55 1f       	adc	r21, r21
    37da:	44 0f       	add	r20, r20
    37dc:	55 1f       	adc	r21, r21
    37de:	84 0f       	add	r24, r20
    37e0:	95 1f       	adc	r25, r21
    37e2:	fc 01       	movw	r30, r24
    37e4:	e7 59       	subi	r30, 0x97	; 151
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	8a 17       	cp	r24, r26
    37ee:	9b 07       	cpc	r25, r27
    37f0:	2c f0       	brlt	.+10     	; 0x37fc <_ZN6Analog14getMedianValueEh+0x86>
    37f2:	68 17       	cp	r22, r24
    37f4:	79 07       	cpc	r23, r25
    37f6:	3c f4       	brge	.+14     	; 0x3806 <_ZN6Analog14getMedianValueEh+0x90>
    37f8:	cb 01       	movw	r24, r22
    37fa:	05 c0       	rjmp	.+10     	; 0x3806 <_ZN6Analog14getMedianValueEh+0x90>
    37fc:	cd 01       	movw	r24, r26
    37fe:	6a 17       	cp	r22, r26
    3800:	7b 07       	cpc	r23, r27
    3802:	0c f4       	brge	.+2      	; 0x3806 <_ZN6Analog14getMedianValueEh+0x90>
    3804:	cb 01       	movw	r24, r22
    medianValue = (analogSample[analogID][0] <= analogSample[analogID][1]) ? analogSample[analogID][0] : analogSample[analogID][1];


    return medianValue;

}
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	08 95       	ret

0000380c <_ZN6Analog16getAnalogEnabledEh>:

bool Analog::getAnalogEnabled(uint8_t analogID) {
    380c:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    380e:	20 91 00 02 	lds	r18, 0x0200
    3812:	30 91 01 02 	lds	r19, 0x0201
    3816:	80 91 fe 01 	lds	r24, 0x01FE
    381a:	90 91 ff 01 	lds	r25, 0x01FF
    381e:	82 0f       	add	r24, r18
    3820:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3822:	20 91 12 02 	lds	r18, 0x0212
    3826:	22 23       	and	r18, r18
    3828:	a9 f0       	breq	.+42     	; 0x3854 <_ZN6Analog16getAnalogEnabledEh+0x48>
    382a:	21 30       	cpi	r18, 0x01	; 1
    382c:	c9 f4       	brne	.+50     	; 0x3860 <_ZN6Analog16getAnalogEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    382e:	26 2f       	mov	r18, r22
    3830:	26 95       	lsr	r18
    3832:	26 95       	lsr	r18
    3834:	26 95       	lsr	r18
    3836:	c6 2f       	mov	r28, r22
    3838:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    383a:	82 0f       	add	r24, r18
    383c:	91 1d       	adc	r25, r1
    383e:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	02 c0       	rjmp	.+4      	; 0x384a <_ZN6Analog16getAnalogEnabledEh+0x3e>
    3846:	95 95       	asr	r25
    3848:	87 95       	ror	r24
    384a:	ca 95       	dec	r28
    384c:	e2 f7       	brpl	.-8      	; 0x3846 <_ZN6Analog16getAnalogEnabledEh+0x3a>
    384e:	98 2f       	mov	r25, r24
    3850:	91 70       	andi	r25, 0x01	; 1
    3852:	07 c0       	rjmp	.+14     	; 0x3862 <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3854:	86 0f       	add	r24, r22
    3856:	91 1d       	adc	r25, r1
    3858:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    385c:	98 2f       	mov	r25, r24
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

        }   return 0;
    3860:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID);
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	91 11       	cpse	r25, r1
    3866:	01 c0       	rjmp	.+2      	; 0x386a <_ZN6Analog16getAnalogEnabledEh+0x5e>
    3868:	80 e0       	ldi	r24, 0x00	; 0

}
    386a:	cf 91       	pop	r28
    386c:	08 95       	ret

0000386e <_ZN6Analog20getAnalogInvertStateEh>:

bool Analog::getAnalogInvertState(uint8_t analogID) {
    386e:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3870:	20 91 04 02 	lds	r18, 0x0204
    3874:	30 91 05 02 	lds	r19, 0x0205
    3878:	80 91 fe 01 	lds	r24, 0x01FE
    387c:	90 91 ff 01 	lds	r25, 0x01FF
    3880:	82 0f       	add	r24, r18
    3882:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3884:	20 91 14 02 	lds	r18, 0x0214
    3888:	22 23       	and	r18, r18
    388a:	a9 f0       	breq	.+42     	; 0x38b6 <_ZN6Analog20getAnalogInvertStateEh+0x48>
    388c:	21 30       	cpi	r18, 0x01	; 1
    388e:	c9 f4       	brne	.+50     	; 0x38c2 <_ZN6Analog20getAnalogInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3890:	26 2f       	mov	r18, r22
    3892:	26 95       	lsr	r18
    3894:	26 95       	lsr	r18
    3896:	26 95       	lsr	r18
    3898:	c6 2f       	mov	r28, r22
    389a:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    389c:	82 0f       	add	r24, r18
    389e:	91 1d       	adc	r25, r1
    38a0:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <_ZN6Analog20getAnalogInvertStateEh+0x3e>
    38a8:	95 95       	asr	r25
    38aa:	87 95       	ror	r24
    38ac:	ca 95       	dec	r28
    38ae:	e2 f7       	brpl	.-8      	; 0x38a8 <_ZN6Analog20getAnalogInvertStateEh+0x3a>
    38b0:	98 2f       	mov	r25, r24
    38b2:	91 70       	andi	r25, 0x01	; 1
    38b4:	07 c0       	rjmp	.+14     	; 0x38c4 <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    38b6:	86 0f       	add	r24, r22
    38b8:	91 1d       	adc	r25, r1
    38ba:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    38be:	98 2f       	mov	r25, r24
    38c0:	01 c0       	rjmp	.+2      	; 0x38c4 <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

        }   return 0;
    38c2:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	91 11       	cpse	r25, r1
    38c8:	01 c0       	rjmp	.+2      	; 0x38cc <_ZN6Analog20getAnalogInvertStateEh+0x5e>
    38ca:	80 e0       	ldi	r24, 0x00	; 0

}
    38cc:	cf 91       	pop	r28
    38ce:	08 95       	ret

000038d0 <_ZN6Analog13getAnalogTypeEh>:

analogType_t Analog::getAnalogType(uint8_t analogID) {
    38d0:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    38d2:	20 91 02 02 	lds	r18, 0x0202
    38d6:	30 91 03 02 	lds	r19, 0x0203
    38da:	80 91 fe 01 	lds	r24, 0x01FE
    38de:	90 91 ff 01 	lds	r25, 0x01FF
    38e2:	82 0f       	add	r24, r18
    38e4:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    38e6:	20 91 13 02 	lds	r18, 0x0213
    38ea:	22 23       	and	r18, r18
    38ec:	a1 f0       	breq	.+40     	; 0x3916 <_ZN6Analog13getAnalogTypeEh+0x46>
    38ee:	21 30       	cpi	r18, 0x01	; 1
    38f0:	b9 f4       	brne	.+46     	; 0x3920 <_ZN6Analog13getAnalogTypeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    38f2:	26 2f       	mov	r18, r22
    38f4:	26 95       	lsr	r18
    38f6:	26 95       	lsr	r18
    38f8:	26 95       	lsr	r18
    38fa:	c6 2f       	mov	r28, r22
    38fc:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    38fe:	82 0f       	add	r24, r18
    3900:	91 1d       	adc	r25, r1
    3902:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	02 c0       	rjmp	.+4      	; 0x390e <_ZN6Analog13getAnalogTypeEh+0x3e>
    390a:	95 95       	asr	r25
    390c:	87 95       	ror	r24
    390e:	ca 95       	dec	r28
    3910:	e2 f7       	brpl	.-8      	; 0x390a <_ZN6Analog13getAnalogTypeEh+0x3a>
    3912:	81 70       	andi	r24, 0x01	; 1
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3916:	86 0f       	add	r24, r22
    3918:	91 1d       	adc	r25, r1
    391a:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    391e:	01 c0       	rjmp	.+2      	; 0x3922 <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

        }   return 0;
    3920:	80 e0       	ldi	r24, 0x00	; 0

    return (analogType_t)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <_ZN6Analog6updateEv>:

    }

}

void Analog::update()   {
    3926:	df 92       	push	r13
    3928:	ef 92       	push	r14
    392a:	ff 92       	push	r15
    392c:	0f 93       	push	r16
    392e:	1f 93       	push	r17
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	8c 01       	movw	r16, r24

    if (!board.analogDataAvailable()) return;
    3936:	81 e4       	ldi	r24, 0x41	; 65
    3938:	92 e0       	ldi	r25, 0x02	; 2
    393a:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN5Board19analogDataAvailableEv>
    393e:	88 23       	and	r24, r24
    3940:	09 f4       	brne	.+2      	; 0x3944 <_ZN6Analog6updateEv+0x1e>
    3942:	4e c0       	rjmp	.+156    	; 0x39e0 <_ZN6Analog6updateEv+0xba>
    3944:	c0 e0       	ldi	r28, 0x00	; 0
    3946:	d0 e0       	ldi	r29, 0x00	; 0
    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {

        analogData = board.getAnalogValue(i); //get raw analog reading
    3948:	6c 2f       	mov	r22, r28
    394a:	81 e4       	ldi	r24, 0x41	; 65
    394c:	92 e0       	ldi	r25, 0x02	; 2
    394e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN5Board14getAnalogValueEh>
    3952:	7c 01       	movw	r14, r24
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
    3954:	6c 2f       	mov	r22, r28
    3956:	c8 01       	movw	r24, r16
    3958:	0e 94 06 1c 	call	0x380c	; 0x380c <_ZN6Analog16getAnalogEnabledEh>
    395c:	88 23       	and	r24, r24
    395e:	d9 f1       	breq	.+118    	; 0x39d6 <_ZN6Analog6updateEv+0xb0>

}

void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];
    3960:	ce 01       	movw	r24, r28
    3962:	99 27       	eor	r25, r25
    3964:	f8 01       	movw	r30, r16
    3966:	e8 0f       	add	r30, r24
    3968:	f9 1f       	adc	r31, r25
    396a:	20 81       	ld	r18, Z

    analogSample[analogID][sampleIndex] = sample;
    396c:	fc 01       	movw	r30, r24
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	e2 0f       	add	r30, r18
    3978:	f1 1d       	adc	r31, r1
    397a:	ee 0f       	add	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	e0 0f       	add	r30, r16
    3980:	f1 1f       	adc	r31, r17
    3982:	eb 59       	subi	r30, 0x9B	; 155
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	f1 82       	std	Z+1, r15	; 0x01
    3988:	e0 82       	st	Z, r14
    analogDebounceCounter[analogID]++;
    398a:	2f 5f       	subi	r18, 0xFF	; 255

}

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {
    398c:	23 30       	cpi	r18, 0x03	; 3
    398e:	29 f0       	breq	.+10     	; 0x399a <_ZN6Analog6updateEv+0x74>
void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];

    analogSample[analogID][sampleIndex] = sample;
    analogDebounceCounter[analogID]++;
    3990:	f8 01       	movw	r30, r16
    3992:	e8 0f       	add	r30, r24
    3994:	f9 1f       	adc	r31, r25
    3996:	20 83       	st	Z, r18
    3998:	1e c0       	rjmp	.+60     	; 0x39d6 <_ZN6Analog6updateEv+0xb0>

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {

        analogDebounceCounter[analogID] = 0;
    399a:	f8 01       	movw	r30, r16
    399c:	e8 0f       	add	r30, r24
    399e:	f9 1f       	adc	r31, r25
    39a0:	10 82       	st	Z, r1

        analogData = board.getAnalogValue(i); //get raw analog reading
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
        addAnalogSample(i, analogData);
        if (!analogValueSampled(i)) continue;  //three samples are needed
        analogData = getMedianValue(i);  //get median value from three analog samples for better accuracy
    39a2:	6c 2f       	mov	r22, r28
    39a4:	c8 01       	movw	r24, r16
    39a6:	0e 94 bb 1b 	call	0x3776	; 0x3776 <_ZN6Analog14getMedianValueEh>
    39aa:	7c 01       	movw	r14, r24
        analogType_t type = getAnalogType(i);
    39ac:	6c 2f       	mov	r22, r28
    39ae:	c8 01       	movw	r24, r16
    39b0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN6Analog13getAnalogTypeEh>

        switch(type) {
    39b4:	81 30       	cpi	r24, 0x01	; 1
    39b6:	51 f0       	breq	.+20     	; 0x39cc <_ZN6Analog6updateEv+0xa6>
    39b8:	18 f0       	brcs	.+6      	; 0x39c0 <_ZN6Analog6updateEv+0x9a>
    39ba:	82 30       	cpi	r24, 0x02	; 2
    39bc:	61 f0       	breq	.+24     	; 0x39d6 <_ZN6Analog6updateEv+0xb0>
    39be:	10 c0       	rjmp	.+32     	; 0x39e0 <_ZN6Analog6updateEv+0xba>

            case potentiometer:
            checkPotentiometerValue(i, analogData);
    39c0:	a7 01       	movw	r20, r14
    39c2:	6c 2f       	mov	r22, r28
    39c4:	c8 01       	movw	r24, r16
    39c6:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN6Analog23checkPotentiometerValueEhi>
            break;
    39ca:	05 c0       	rjmp	.+10     	; 0x39d6 <_ZN6Analog6updateEv+0xb0>

            case fsr:
            checkFSRvalue(i, analogData);
    39cc:	a7 01       	movw	r20, r14
    39ce:	6c 2f       	mov	r22, r28
    39d0:	c8 01       	movw	r24, r16
    39d2:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <_ZN6Analog13checkFSRvalueEhi>
    if (!board.analogDataAvailable()) return;

    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {
    39d6:	21 96       	adiw	r28, 0x01	; 1
    39d8:	c0 32       	cpi	r28, 0x20	; 32
    39da:	d1 05       	cpc	r29, r1
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <_ZN6Analog6updateEv+0xba>
    39de:	b4 cf       	rjmp	.-152    	; 0x3948 <_ZN6Analog6updateEv+0x22>

        }

    }

}
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	df 90       	pop	r13
    39ee:	08 95       	ret

000039f0 <_ZN6Analog9getMIDIidEh>:

    return (analogType_t)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}

uint8_t Analog::getMIDIid(uint8_t analogID)    {
    39f0:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    39f2:	20 91 06 02 	lds	r18, 0x0206
    39f6:	30 91 07 02 	lds	r19, 0x0207
    39fa:	80 91 fe 01 	lds	r24, 0x01FE
    39fe:	90 91 ff 01 	lds	r25, 0x01FF
    3a02:	82 0f       	add	r24, r18
    3a04:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3a06:	20 91 15 02 	lds	r18, 0x0215
    3a0a:	22 23       	and	r18, r18
    3a0c:	a1 f0       	breq	.+40     	; 0x3a36 <_ZN6Analog9getMIDIidEh+0x46>
    3a0e:	21 30       	cpi	r18, 0x01	; 1
    3a10:	b9 f4       	brne	.+46     	; 0x3a40 <_ZN6Analog9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3a12:	26 2f       	mov	r18, r22
    3a14:	26 95       	lsr	r18
    3a16:	26 95       	lsr	r18
    3a18:	26 95       	lsr	r18
    3a1a:	c6 2f       	mov	r28, r22
    3a1c:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3a1e:	82 0f       	add	r24, r18
    3a20:	91 1d       	adc	r25, r1
    3a22:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <_ZN6Analog9getMIDIidEh+0x3e>
    3a2a:	95 95       	asr	r25
    3a2c:	87 95       	ror	r24
    3a2e:	ca 95       	dec	r28
    3a30:	e2 f7       	brpl	.-8      	; 0x3a2a <_ZN6Analog9getMIDIidEh+0x3a>
    3a32:	81 70       	andi	r24, 0x01	; 1
    3a34:	06 c0       	rjmp	.+12     	; 0x3a42 <_ZN6Analog9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3a36:	86 0f       	add	r24, r22
    3a38:	91 1d       	adc	r25, r1
    3a3a:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3a3e:	01 c0       	rjmp	.+2      	; 0x3a42 <_ZN6Analog9getMIDIidEh+0x52>
            break;

        }   return 0;
    3a40:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID);

}
    3a42:	cf 91       	pop	r28
    3a44:	08 95       	ret

00003a46 <_ZN6Analog10getCClimitEh13ccLimitType_t>:

uint8_t Analog::getCClimit(uint8_t analogID, ccLimitType_t type)  {
    3a46:	cf 93       	push	r28

    switch(type)    {
    3a48:	44 23       	and	r20, r20
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xc>
    3a4c:	41 30       	cpi	r20, 0x01	; 1
    3a4e:	49 f1       	breq	.+82     	; 0x3aa2 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x5c>
    3a50:	4f c0       	rjmp	.+158    	; 0x3af0 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xaa>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3a52:	20 91 08 02 	lds	r18, 0x0208
    3a56:	30 91 09 02 	lds	r19, 0x0209
    3a5a:	80 91 fe 01 	lds	r24, 0x01FE
    3a5e:	90 91 ff 01 	lds	r25, 0x01FF
    3a62:	82 0f       	add	r24, r18
    3a64:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3a66:	20 91 16 02 	lds	r18, 0x0216
    3a6a:	22 23       	and	r18, r18
    3a6c:	a9 f0       	breq	.+42     	; 0x3a98 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x52>
    3a6e:	21 30       	cpi	r18, 0x01	; 1
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x2e>
    3a72:	40 c0       	rjmp	.+128    	; 0x3af4 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xae>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3a74:	26 2f       	mov	r18, r22
    3a76:	26 95       	lsr	r18
    3a78:	26 95       	lsr	r18
    3a7a:	26 95       	lsr	r18
    3a7c:	c6 2f       	mov	r28, r22
    3a7e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3a80:	82 0f       	add	r24, r18
    3a82:	91 1d       	adc	r25, r1
    3a84:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x4a>
    3a8c:	95 95       	asr	r25
    3a8e:	87 95       	ror	r24
    3a90:	ca 95       	dec	r28
    3a92:	e2 f7       	brpl	.-8      	; 0x3a8c <_ZN6Analog10getCClimitEh13ccLimitType_t+0x46>
    3a94:	81 70       	andi	r24, 0x01	; 1
    3a96:	31 c0       	rjmp	.+98     	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3a98:	86 0f       	add	r24, r22
    3a9a:	91 1d       	adc	r25, r1
    3a9c:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3aa0:	2c c0       	rjmp	.+88     	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3aa2:	20 91 0a 02 	lds	r18, 0x020A
    3aa6:	30 91 0b 02 	lds	r19, 0x020B
    3aaa:	80 91 fe 01 	lds	r24, 0x01FE
    3aae:	90 91 ff 01 	lds	r25, 0x01FF
    3ab2:	82 0f       	add	r24, r18
    3ab4:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3ab6:	20 91 17 02 	lds	r18, 0x0217
    3aba:	22 23       	and	r18, r18
    3abc:	a1 f0       	breq	.+40     	; 0x3ae6 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xa0>
    3abe:	21 30       	cpi	r18, 0x01	; 1
    3ac0:	d9 f4       	brne	.+54     	; 0x3af8 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb2>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3ac2:	26 2f       	mov	r18, r22
    3ac4:	26 95       	lsr	r18
    3ac6:	26 95       	lsr	r18
    3ac8:	26 95       	lsr	r18
    3aca:	c6 2f       	mov	r28, r22
    3acc:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3ace:	82 0f       	add	r24, r18
    3ad0:	91 1d       	adc	r25, r1
    3ad2:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <_ZN6Analog10getCClimitEh13ccLimitType_t+0x98>
    3ada:	95 95       	asr	r25
    3adc:	87 95       	ror	r24
    3ade:	ca 95       	dec	r28
    3ae0:	e2 f7       	brpl	.-8      	; 0x3ada <_ZN6Analog10getCClimitEh13ccLimitType_t+0x94>
    3ae2:	81 70       	andi	r24, 0x01	; 1
    3ae4:	0a c0       	rjmp	.+20     	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3ae6:	86 0f       	add	r24, r22
    3ae8:	91 1d       	adc	r25, r1
    3aea:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    3aee:	05 c0       	rjmp	.+10     	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>

        case ccLimitHigh:
        return configuration.readParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID);
        break;

    }   return 0;
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	03 c0       	rjmp	.+6      	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

        }   return 0;
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	01 c0       	rjmp	.+2      	; 0x3afa <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
    3af8:	80 e0       	ldi	r24, 0x00	; 0

}
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <_ZN6Analog12getParameterEhh>:

uint8_t Analog::getParameter(uint8_t messageType, uint8_t parameter) {
    3afe:	24 2f       	mov	r18, r20

    switch(messageType) {
    3b00:	62 30       	cpi	r22, 0x02	; 2
    3b02:	a1 f0       	breq	.+40     	; 0x3b2c <_ZN6Analog12getParameterEhh+0x2e>
    3b04:	28 f4       	brcc	.+10     	; 0x3b10 <_ZN6Analog12getParameterEhh+0x12>
    3b06:	66 23       	and	r22, r22
    3b08:	49 f0       	breq	.+18     	; 0x3b1c <_ZN6Analog12getParameterEhh+0x1e>
    3b0a:	61 30       	cpi	r22, 0x01	; 1
    3b0c:	59 f0       	breq	.+22     	; 0x3b24 <_ZN6Analog12getParameterEhh+0x26>
    3b0e:	20 c0       	rjmp	.+64     	; 0x3b50 <_ZN6Analog12getParameterEhh+0x52>
    3b10:	64 30       	cpi	r22, 0x04	; 4
    3b12:	a1 f0       	breq	.+40     	; 0x3b3c <_ZN6Analog12getParameterEhh+0x3e>
    3b14:	78 f0       	brcs	.+30     	; 0x3b34 <_ZN6Analog12getParameterEhh+0x36>
    3b16:	65 30       	cpi	r22, 0x05	; 5
    3b18:	b1 f0       	breq	.+44     	; 0x3b46 <_ZN6Analog12getParameterEhh+0x48>
    3b1a:	1a c0       	rjmp	.+52     	; 0x3b50 <_ZN6Analog12getParameterEhh+0x52>

        case analogEnabledConf:
        return getAnalogEnabled(parameter);
    3b1c:	64 2f       	mov	r22, r20
    3b1e:	0e 94 06 1c 	call	0x380c	; 0x380c <_ZN6Analog16getAnalogEnabledEh>
    3b22:	08 95       	ret
        break;

        case analogInvertedConf:
        return getAnalogInvertState(parameter);
    3b24:	64 2f       	mov	r22, r20
    3b26:	0e 94 37 1c 	call	0x386e	; 0x386e <_ZN6Analog20getAnalogInvertStateEh>
    3b2a:	08 95       	ret
        break;

        case analogTypeConf:
        return getAnalogType(parameter);
    3b2c:	64 2f       	mov	r22, r20
    3b2e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN6Analog13getAnalogTypeEh>
    3b32:	08 95       	ret
        break;

        case analogMIDIidConf:
        return getMIDIid(parameter);
    3b34:	64 2f       	mov	r22, r20
    3b36:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6Analog9getMIDIidEh>
    3b3a:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return getCClimit(parameter, ccLimitLow);
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	62 2f       	mov	r22, r18
    3b40:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3b44:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return getCClimit(parameter, ccLimitHigh);
    3b46:	41 e0       	ldi	r20, 0x01	; 1
    3b48:	62 2f       	mov	r22, r18
    3b4a:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3b4e:	08 95       	ret
        break;

    }   return 0;
    3b50:	80 e0       	ldi	r24, 0x00	; 0

}
    3b52:	08 95       	ret

00003b54 <_ZN6Analog16setAnalogEnabledEhb>:


bool Analog::setAnalogEnabled(uint8_t analogID, bool state)    {
    3b54:	0f 93       	push	r16
    3b56:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID, state);
    3b58:	04 2f       	mov	r16, r20
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	63 e0       	ldi	r22, 0x03	; 3
    3b5e:	8a e9       	ldi	r24, 0x9A	; 154
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3b66:	0f 91       	pop	r16
    3b68:	08 95       	ret

00003b6a <_ZN6Analog20setAnalogInvertStateEhh>:

bool Analog::setAnalogInvertState(uint8_t analogID, uint8_t state) {
    3b6a:	0f 93       	push	r16
    3b6c:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID, state);
    3b6e:	04 2f       	mov	r16, r20
    3b70:	42 e0       	ldi	r20, 0x02	; 2
    3b72:	63 e0       	ldi	r22, 0x03	; 3
    3b74:	8a e9       	ldi	r24, 0x9A	; 154
    3b76:	91 e0       	ldi	r25, 0x01	; 1
    3b78:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3b7c:	0f 91       	pop	r16
    3b7e:	08 95       	ret

00003b80 <_ZN6Analog13setAnalogTypeEhh>:

bool Analog::setAnalogType(uint8_t analogID, uint8_t type)    {
    3b80:	0f 93       	push	r16
    3b82:	26 2f       	mov	r18, r22

    lastAnalogueValue[analogID] = 0;
    3b84:	e6 2f       	mov	r30, r22
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	ee 0f       	add	r30, r30
    3b8a:	ff 1f       	adc	r31, r31
    3b8c:	8e 0f       	add	r24, r30
    3b8e:	9f 1f       	adc	r25, r31
    3b90:	fc 01       	movw	r30, r24
    3b92:	eb 59       	subi	r30, 0x9B	; 155
    3b94:	fe 4f       	sbci	r31, 0xFE	; 254
    3b96:	11 82       	std	Z+1, r1	; 0x01
    3b98:	10 82       	st	Z, r1

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID, type);
    3b9a:	04 2f       	mov	r16, r20
    3b9c:	41 e0       	ldi	r20, 0x01	; 1
    3b9e:	63 e0       	ldi	r22, 0x03	; 3
    3ba0:	8a e9       	ldi	r24, 0x9A	; 154
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <_ZN6Analog9setMIDIidEhh>:

bool Analog::setMIDIid(uint8_t analogID, uint8_t midiID)   {
    3bac:	0f 93       	push	r16
    3bae:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID, midiID);
    3bb0:	04 2f       	mov	r16, r20
    3bb2:	43 e0       	ldi	r20, 0x03	; 3
    3bb4:	63 e0       	ldi	r22, 0x03	; 3
    3bb6:	8a e9       	ldi	r24, 0x9A	; 154
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3bbe:	0f 91       	pop	r16
    3bc0:	08 95       	ret

00003bc2 <_ZN6Analog10setCClimitE13ccLimitType_thh>:

bool Analog::setCClimit(ccLimitType_t type, uint8_t analogID, uint8_t limit)  {
    3bc2:	0f 93       	push	r16

    switch (type)  {
    3bc4:	66 23       	and	r22, r22
    3bc6:	19 f0       	breq	.+6      	; 0x3bce <_ZN6Analog10setCClimitE13ccLimitType_thh+0xc>
    3bc8:	61 30       	cpi	r22, 0x01	; 1
    3bca:	51 f0       	breq	.+20     	; 0x3be0 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x1e>
    3bcc:	12 c0       	rjmp	.+36     	; 0x3bf2 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x30>

        case ccLimitLow:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCClowerLimitSection, analogID, limit);
    3bce:	02 2f       	mov	r16, r18
    3bd0:	24 2f       	mov	r18, r20
    3bd2:	44 e0       	ldi	r20, 0x04	; 4
    3bd4:	63 e0       	ldi	r22, 0x03	; 3
    3bd6:	8a e9       	ldi	r24, 0x9A	; 154
    3bd8:	91 e0       	ldi	r25, 0x01	; 1
    3bda:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    3bde:	0a c0       	rjmp	.+20     	; 0x3bf4 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x32>
        break;

        case ccLimitHigh:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID, limit);
    3be0:	02 2f       	mov	r16, r18
    3be2:	24 2f       	mov	r18, r20
    3be4:	45 e0       	ldi	r20, 0x05	; 5
    3be6:	63 e0       	ldi	r22, 0x03	; 3
    3be8:	8a e9       	ldi	r24, 0x9A	; 154
    3bea:	91 e0       	ldi	r25, 0x01	; 1
    3bec:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x32>
        break;

        default:
        return false;
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }

}
    3bf4:	0f 91       	pop	r16
    3bf6:	08 95       	ret

00003bf8 <_ZN6Analog12setParameterEhhh>:

bool Analog::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    3bf8:	34 2f       	mov	r19, r20

    switch(messageType) {
    3bfa:	62 30       	cpi	r22, 0x02	; 2
    3bfc:	c9 f0       	breq	.+50     	; 0x3c30 <_ZN6Analog12setParameterEhhh+0x38>
    3bfe:	28 f4       	brcc	.+10     	; 0x3c0a <_ZN6Analog12setParameterEhhh+0x12>
    3c00:	66 23       	and	r22, r22
    3c02:	49 f0       	breq	.+18     	; 0x3c16 <_ZN6Analog12setParameterEhhh+0x1e>
    3c04:	61 30       	cpi	r22, 0x01	; 1
    3c06:	79 f0       	breq	.+30     	; 0x3c26 <_ZN6Analog12setParameterEhhh+0x2e>
    3c08:	25 c0       	rjmp	.+74     	; 0x3c54 <_ZN6Analog12setParameterEhhh+0x5c>
    3c0a:	64 30       	cpi	r22, 0x04	; 4
    3c0c:	d9 f0       	breq	.+54     	; 0x3c44 <_ZN6Analog12setParameterEhhh+0x4c>
    3c0e:	a8 f0       	brcs	.+42     	; 0x3c3a <_ZN6Analog12setParameterEhhh+0x42>
    3c10:	65 30       	cpi	r22, 0x05	; 5
    3c12:	e1 f0       	breq	.+56     	; 0x3c4c <_ZN6Analog12setParameterEhhh+0x54>
    3c14:	1f c0       	rjmp	.+62     	; 0x3c54 <_ZN6Analog12setParameterEhhh+0x5c>

        case analogEnabledConf:
        return setAnalogEnabled(parameter, newParameter);
    3c16:	41 e0       	ldi	r20, 0x01	; 1
    3c18:	21 11       	cpse	r18, r1
    3c1a:	01 c0       	rjmp	.+2      	; 0x3c1e <_ZN6Analog12setParameterEhhh+0x26>
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	63 2f       	mov	r22, r19
    3c20:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <_ZN6Analog16setAnalogEnabledEhb>
    3c24:	08 95       	ret
        break;

        case analogInvertedConf:
        return setAnalogInvertState(parameter, newParameter);
    3c26:	42 2f       	mov	r20, r18
    3c28:	63 2f       	mov	r22, r19
    3c2a:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <_ZN6Analog20setAnalogInvertStateEhh>
    3c2e:	08 95       	ret
        break;

        case analogTypeConf:
        return setAnalogType(parameter, newParameter);
    3c30:	42 2f       	mov	r20, r18
    3c32:	63 2f       	mov	r22, r19
    3c34:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <_ZN6Analog13setAnalogTypeEhh>
    3c38:	08 95       	ret
        break;

        case analogMIDIidConf:
        return setMIDIid(parameter, newParameter);
    3c3a:	42 2f       	mov	r20, r18
    3c3c:	63 2f       	mov	r22, r19
    3c3e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <_ZN6Analog9setMIDIidEhh>
    3c42:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return setCClimit(ccLimitLow, parameter, newParameter);
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN6Analog10setCClimitE13ccLimitType_thh>
    3c4a:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return setCClimit(ccLimitHigh, parameter, newParameter);
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN6Analog10setCClimitE13ccLimitType_thh>
    3c52:	08 95       	ret
        break;

    }   return false;
    3c54:	80 e0       	ldi	r24, 0x00	; 0

}
    3c56:	08 95       	ret

00003c58 <_ZN6Analog13getFsrPressedEh>:

}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    3c58:	26 2f       	mov	r18, r22
    3c5a:	26 95       	lsr	r18
    3c5c:	26 95       	lsr	r18
    3c5e:	26 95       	lsr	r18
    uint8_t fsrIndex = fsrID - 8*arrayIndex;

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    3c60:	82 0f       	add	r24, r18
    3c62:	91 1d       	adc	r25, r1
    3c64:	fc 01       	movw	r30, r24
    3c66:	80 a1       	ldd	r24, Z+32	; 0x20
    3c68:	90 e0       	ldi	r25, 0x00	; 0
}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    3c6a:	22 0f       	add	r18, r18
    3c6c:	22 0f       	add	r18, r18
    3c6e:	22 0f       	add	r18, r18
    3c70:	62 1b       	sub	r22, r18

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <_ZN6Analog13getFsrPressedEh+0x20>
    3c74:	95 95       	asr	r25
    3c76:	87 95       	ror	r24
    3c78:	6a 95       	dec	r22
    3c7a:	e2 f7       	brpl	.-8      	; 0x3c74 <_ZN6Analog13getFsrPressedEh+0x1c>

}
    3c7c:	81 70       	andi	r24, 0x01	; 1
    3c7e:	08 95       	ret

00003c80 <_ZN6Analog13setFsrPressedEhb>:

void Analog::setFsrPressed(uint8_t fsrID, bool state)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    3c80:	26 2f       	mov	r18, r22
    3c82:	26 95       	lsr	r18
    3c84:	26 95       	lsr	r18
    3c86:	26 95       	lsr	r18
    3c88:	67 70       	andi	r22, 0x07	; 7

    bitWrite(fsrPressed[arrayIndex], fsrIndex, state);
    3c8a:	44 23       	and	r20, r20
    3c8c:	91 f0       	breq	.+36     	; 0x3cb2 <_ZN6Analog13setFsrPressedEhb+0x32>
    3c8e:	fc 01       	movw	r30, r24
    3c90:	e2 0f       	add	r30, r18
    3c92:	f1 1d       	adc	r31, r1
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	a0 e0       	ldi	r26, 0x00	; 0
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	04 c0       	rjmp	.+8      	; 0x3ca6 <_ZN6Analog13setFsrPressedEhb+0x26>
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	aa 1f       	adc	r26, r26
    3ca4:	bb 1f       	adc	r27, r27
    3ca6:	6a 95       	dec	r22
    3ca8:	d2 f7       	brpl	.-12     	; 0x3c9e <_ZN6Analog13setFsrPressedEhb+0x1e>
    3caa:	20 a1       	ldd	r18, Z+32	; 0x20
    3cac:	82 2b       	or	r24, r18
    3cae:	80 a3       	std	Z+32, r24	; 0x20
    3cb0:	08 95       	ret
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e2 0f       	add	r30, r18
    3cb6:	f1 1d       	adc	r31, r1
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	a0 e0       	ldi	r26, 0x00	; 0
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	04 c0       	rjmp	.+8      	; 0x3cca <_ZN6Analog13setFsrPressedEhb+0x4a>
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	aa 1f       	adc	r26, r26
    3cc8:	bb 1f       	adc	r27, r27
    3cca:	6a 95       	dec	r22
    3ccc:	d2 f7       	brpl	.-12     	; 0x3cc2 <_ZN6Analog13setFsrPressedEhb+0x42>
    3cce:	80 95       	com	r24
    3cd0:	90 a1       	ldd	r25, Z+32	; 0x20
    3cd2:	89 23       	and	r24, r25
    3cd4:	80 a3       	std	Z+32, r24	; 0x20
    3cd6:	08 95       	ret

00003cd8 <_ZN6Analog13checkFSRvalueEhi>:

}

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	8c 01       	movw	r16, r24
    3ce6:	36 2f       	mov	r19, r22
inline int16_t calibratePressure(int16_t value, pressureType_t type)  {

    switch(type)    {

        case velocity:
        return mapAnalog_int16(constrain(value, FSR_MIN_VALUE, FSR_MAX_VALUE), FSR_MIN_VALUE, FSR_MAX_VALUE, 0, 127);
    3ce8:	48 32       	cpi	r20, 0x28	; 40
    3cea:	51 05       	cpc	r21, r1
    3cec:	3c f0       	brlt	.+14     	; 0x3cfc <_ZN6Analog13checkFSRvalueEhi+0x24>
    3cee:	45 35       	cpi	r20, 0x55	; 85
    3cf0:	21 e0       	ldi	r18, 0x01	; 1
    3cf2:	52 07       	cpc	r21, r18
    3cf4:	2c f0       	brlt	.+10     	; 0x3d00 <_ZN6Analog13checkFSRvalueEhi+0x28>
    3cf6:	44 e5       	ldi	r20, 0x54	; 84
    3cf8:	51 e0       	ldi	r21, 0x01	; 1
    3cfa:	02 c0       	rjmp	.+4      	; 0x3d00 <_ZN6Analog13checkFSRvalueEhi+0x28>
    3cfc:	48 e2       	ldi	r20, 0x28	; 40
    3cfe:	50 e0       	ldi	r21, 0x00	; 0

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    3d00:	c3 2f       	mov	r28, r19
    3d02:	d0 e0       	ldi	r29, 0x00	; 0
    3d04:	f8 01       	movw	r30, r16
    3d06:	ec 0f       	add	r30, r28
    3d08:	fd 1f       	adc	r31, r29
    3d0a:	eb 5b       	subi	r30, 0xBB	; 187
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	20 81       	ld	r18, Z
    3d10:	2f 5f       	subi	r18, 0xFF	; 255
    3d12:	20 83       	st	Z, r18
    lastAnalogueValue[analogID] += calibratedPressure;
    3d14:	fe 01       	movw	r30, r28
    3d16:	ee 0f       	add	r30, r30
    3d18:	ff 1f       	adc	r31, r31
    3d1a:	e0 0f       	add	r30, r16
    3d1c:	f1 1f       	adc	r31, r17
    3d1e:	eb 59       	subi	r30, 0x9B	; 155
    3d20:	fe 4f       	sbci	r31, 0xFE	; 254

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

inline int16_t mapAnalog_int16(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3d22:	48 52       	subi	r20, 0x28	; 40
    3d24:	51 09       	sbc	r21, r1
    3d26:	ca 01       	movw	r24, r20
    3d28:	96 95       	lsr	r25
    3d2a:	98 2f       	mov	r25, r24
    3d2c:	88 27       	eor	r24, r24
    3d2e:	97 95       	ror	r25
    3d30:	87 95       	ror	r24
    3d32:	84 1b       	sub	r24, r20
    3d34:	95 0b       	sbc	r25, r21
    3d36:	6c e2       	ldi	r22, 0x2C	; 44
    3d38:	71 e0       	ldi	r23, 0x01	; 1
    3d3a:	0e 94 08 30 	call	0x6010	; 0x6010 <__divmodhi4>
void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    lastAnalogueValue[analogID] += calibratedPressure;
    3d3e:	80 81       	ld	r24, Z
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	86 0f       	add	r24, r22
    3d44:	91 1d       	adc	r25, r1
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24

    if (fsrMedianRunCounter[analogID] == FSR_MEDIAN_RUNS) {
    3d4a:	22 30       	cpi	r18, 0x02	; 2
    3d4c:	09 f0       	breq	.+2      	; 0x3d50 <_ZN6Analog13checkFSRvalueEhi+0x78>
    3d4e:	64 c0       	rjmp	.+200    	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>

        fsrMedianRunCounter[analogID] = 0;
    3d50:	f8 01       	movw	r30, r16
    3d52:	ec 0f       	add	r30, r28
    3d54:	fd 1f       	adc	r31, r29
    3d56:	eb 5b       	subi	r30, 0xBB	; 187
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	10 82       	st	Z, r1
        calibratedPressure = lastAnalogueValue[analogID] / FSR_MEDIAN_RUNS;
    3d5c:	7c 01       	movw	r14, r24
    3d5e:	99 23       	and	r25, r25
    3d60:	1c f4       	brge	.+6      	; 0x3d68 <_ZN6Analog13checkFSRvalueEhi+0x90>
    3d62:	2f ef       	ldi	r18, 0xFF	; 255
    3d64:	e2 1a       	sub	r14, r18
    3d66:	f2 0a       	sbc	r15, r18
    3d68:	f5 94       	asr	r15
    3d6a:	e7 94       	ror	r14
        lastAnalogueValue[analogID] = 0;
    3d6c:	cc 0f       	add	r28, r28
    3d6e:	dd 1f       	adc	r29, r29
    3d70:	c0 0f       	add	r28, r16
    3d72:	d1 1f       	adc	r29, r17
    3d74:	cb 59       	subi	r28, 0x9B	; 155
    3d76:	de 4f       	sbci	r29, 0xFE	; 254
    3d78:	19 82       	std	Y+1, r1	; 0x01
    3d7a:	18 82       	st	Y, r1

    }   else return;

    bool pressDetected = (calibratedPressure > 0);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	e1 10       	cpse	r14, r1
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <_ZN6Analog13checkFSRvalueEhi+0xb0>
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	c3 2f       	mov	r28, r19

    switch (pressDetected)    {
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	19 f5       	brne	.+70     	; 0x3dd4 <_ZN6Analog13checkFSRvalueEhi+0xfc>

        case true:

        if (!getFsrPressed(analogID)) {
    3d8e:	63 2f       	mov	r22, r19
    3d90:	c8 01       	movw	r24, r16
    3d92:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN6Analog13getFsrPressedEh>
    3d96:	81 11       	cpse	r24, r1
    3d98:	3f c0       	rjmp	.+126    	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>

            //sensor is really pressed
            setFsrPressed(analogID, true);
    3d9a:	41 e0       	ldi	r20, 0x01	; 1
    3d9c:	6c 2f       	mov	r22, r28
    3d9e:	c8 01       	movw	r24, r16
    3da0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), true, calibratedPressure);
    3da4:	6c 2f       	mov	r22, r28
    3da6:	c8 01       	movw	r24, r16
    3da8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6Analog9getMIDIidEh>
    3dac:	2e 2d       	mov	r18, r14
    3dae:	41 e0       	ldi	r20, 0x01	; 1
    3db0:	68 2f       	mov	r22, r24
    3db2:	8d e8       	ldi	r24, 0x8D	; 141
    3db4:	96 e0       	ldi	r25, 0x06	; 6
    3db6:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3dba:	82 e9       	ldi	r24, 0x92	; 146
    3dbc:	96 e0       	ldi	r25, 0x06	; 6
    3dbe:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    3dc2:	88 23       	and	r24, r24
    3dc4:	49 f1       	breq	.+82     	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>
    3dc6:	4c 2f       	mov	r20, r28
    3dc8:	63 e0       	ldi	r22, 0x03	; 3
    3dca:	82 e9       	ldi	r24, 0x92	; 146
    3dcc:	96 e0       	ldi	r25, 0x06	; 6
    3dce:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>
    3dd2:	22 c0       	rjmp	.+68     	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>
        }
        break;

        case false:

        if (getFsrPressed(analogID))  {
    3dd4:	63 2f       	mov	r22, r19
    3dd6:	c8 01       	movw	r24, r16
    3dd8:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN6Analog13getFsrPressedEh>
    3ddc:	88 23       	and	r24, r24
    3dde:	e1 f0       	breq	.+56     	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>

            setFsrPressed(analogID, false);
    3de0:	40 e0       	ldi	r20, 0x00	; 0
    3de2:	6c 2f       	mov	r22, r28
    3de4:	c8 01       	movw	r24, r16
    3de6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), false, 0);
    3dea:	6c 2f       	mov	r22, r28
    3dec:	c8 01       	movw	r24, r16
    3dee:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6Analog9getMIDIidEh>
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	68 2f       	mov	r22, r24
    3df8:	8d e8       	ldi	r24, 0x8D	; 141
    3dfa:	96 e0       	ldi	r25, 0x06	; 6
    3dfc:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3e00:	82 e9       	ldi	r24, 0x92	; 146
    3e02:	96 e0       	ldi	r25, 0x06	; 6
    3e04:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    3e08:	88 23       	and	r24, r24
    3e0a:	31 f0       	breq	.+12     	; 0x3e18 <_ZN6Analog13checkFSRvalueEhi+0x140>
    3e0c:	4c 2f       	mov	r20, r28
    3e0e:	63 e0       	ldi	r22, 0x03	; 3
    3e10:	82 e9       	ldi	r24, 0x92	; 146
    3e12:	96 e0       	ldi	r25, 0x06	; 6
    3e14:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>

        break;

    }

}
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	08 95       	ret

00003e26 <_ZN6Analog23checkPotentiometerValueEhi>:
#include "../../eeprom/Blocks.h"

//potentiometer must exceed this value before sending new value
#define POTENTIOMETER_CC_STEP 8

void Analog::checkPotentiometerValue(uint8_t analogID, int16_t tempValue)  {
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	bf 92       	push	r11
    3e2c:	cf 92       	push	r12
    3e2e:	df 92       	push	r13
    3e30:	ef 92       	push	r14
    3e32:	ff 92       	push	r15
    3e34:	0f 93       	push	r16
    3e36:	1f 93       	push	r17
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29

    //calculate difference between current and previous reading
    int16_t analogDiff = tempValue - lastAnalogueValue[analogID];
    3e3c:	c6 2f       	mov	r28, r22
    3e3e:	d0 e0       	ldi	r29, 0x00	; 0
    3e40:	fe 01       	movw	r30, r28
    3e42:	ee 0f       	add	r30, r30
    3e44:	ff 1f       	adc	r31, r31
    3e46:	e8 0f       	add	r30, r24
    3e48:	f9 1f       	adc	r31, r25
    3e4a:	eb 59       	subi	r30, 0x9B	; 155
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	20 81       	ld	r18, Z
    3e50:	31 81       	ldd	r19, Z+1	; 0x01
    3e52:	fa 01       	movw	r30, r20
    3e54:	e2 1b       	sub	r30, r18
    3e56:	f3 0b       	sbc	r31, r19
    3e58:	9f 01       	movw	r18, r30
    3e5a:	22 f4       	brpl	.+8      	; 0x3e64 <_ZN6Analog23checkPotentiometerValueEhi+0x3e>
    3e5c:	22 27       	eor	r18, r18
    3e5e:	33 27       	eor	r19, r19
    3e60:	2e 1b       	sub	r18, r30
    3e62:	3f 0b       	sbc	r19, r31

    //get absolute difference
    if (analogDiff < 0)   analogDiff *= -1;

    if (!(analogDiff >= POTENTIOMETER_CC_STEP)) return;
    3e64:	28 30       	cpi	r18, 0x08	; 8
    3e66:	31 05       	cpc	r19, r1
    3e68:	0c f4       	brge	.+2      	; 0x3e6c <_ZN6Analog23checkPotentiometerValueEhi+0x46>
    3e6a:	64 c0       	rjmp	.+200    	; 0x3f34 <_ZN6Analog23checkPotentiometerValueEhi+0x10e>
    3e6c:	8a 01       	movw	r16, r20
    3e6e:	d6 2e       	mov	r13, r22
    3e70:	7c 01       	movw	r14, r24

    uint8_t ccValue = tempValue >> 3;
    3e72:	4a 01       	movw	r8, r20
    3e74:	95 94       	asr	r9
    3e76:	87 94       	ror	r8
    3e78:	95 94       	asr	r9
    3e7a:	87 94       	ror	r8
    3e7c:	95 94       	asr	r9
    3e7e:	87 94       	ror	r8
    3e80:	b8 2c       	mov	r11, r8

    //invert CC data if potInverted is true
    if (getAnalogInvertState(analogID))   ccValue = 127 - ccValue;
    3e82:	0e 94 37 1c 	call	0x386e	; 0x386e <_ZN6Analog20getAnalogInvertStateEh>
    3e86:	88 23       	and	r24, r24
    3e88:	19 f0       	breq	.+6      	; 0x3e90 <_ZN6Analog23checkPotentiometerValueEhi+0x6a>
    3e8a:	8f e7       	ldi	r24, 0x7F	; 127
    3e8c:	b8 2e       	mov	r11, r24
    3e8e:	b8 18       	sub	r11, r8

    uint8_t lowerCClimit = getCClimit(analogID, ccLimitLow);
    3e90:	40 e0       	ldi	r20, 0x00	; 0
    3e92:	6d 2d       	mov	r22, r13
    3e94:	c7 01       	movw	r24, r14
    3e96:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3e9a:	c8 2e       	mov	r12, r24
    uint8_t upperCClimit = getCClimit(analogID, ccLimitHigh);
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	6d 2d       	mov	r22, r13
    3ea0:	c7 01       	movw	r24, r14
    3ea2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN6Analog10getCClimitEh13ccLimitType_t>

    //only use map when cc limits are different from defaults
    if ((lowerCClimit != 0) || (upperCClimit != 127))   {
    3ea6:	c1 10       	cpse	r12, r1
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <_ZN6Analog23checkPotentiometerValueEhi+0x88>
    3eaa:	8f 37       	cpi	r24, 0x7F	; 127
    3eac:	29 f1       	breq	.+74     	; 0x3ef8 <_ZN6Analog23checkPotentiometerValueEhi+0xd2>
    int16_t getMedianValue(uint8_t analogID);
    void addAnalogSample(uint8_t analogID, int16_t sample);
    bool analogValueSampled(uint8_t analogID);
    inline uint8_t mapAnalog_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max) {

        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3eae:	28 2f       	mov	r18, r24
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	2c 19       	sub	r18, r12
    3eb4:	31 09       	sbc	r19, r1
    3eb6:	b2 9e       	mul	r11, r18
    3eb8:	c0 01       	movw	r24, r0
    3eba:	b3 9e       	mul	r11, r19
    3ebc:	90 0d       	add	r25, r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	6f e7       	ldi	r22, 0x7F	; 127
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	0e 94 08 30 	call	0x6010	; 0x6010 <__divmodhi4>
    3ec8:	c6 0e       	add	r12, r22

        midi.sendControlChange(getMIDIid(analogID), mapAnalog_uint8(ccValue, 0, 127, lowerCClimit, upperCClimit));
    3eca:	6d 2d       	mov	r22, r13
    3ecc:	c7 01       	movw	r24, r14
    3ece:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6Analog9getMIDIidEh>
    3ed2:	4c 2d       	mov	r20, r12
    3ed4:	68 2f       	mov	r22, r24
    3ed6:	8d e8       	ldi	r24, 0x8D	; 141
    3ed8:	96 e0       	ldi	r25, 0x06	; 6
    3eda:	0e 94 47 2b 	call	0x568e	; 0x568e <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3ede:	82 e9       	ldi	r24, 0x92	; 146
    3ee0:	96 e0       	ldi	r25, 0x06	; 6
    3ee2:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    3ee6:	88 23       	and	r24, r24
    3ee8:	e9 f0       	breq	.+58     	; 0x3f24 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    3eea:	4d 2d       	mov	r20, r13
    3eec:	63 e0       	ldi	r22, 0x03	; 3
    3eee:	82 e9       	ldi	r24, 0x92	; 146
    3ef0:	96 e0       	ldi	r25, 0x06	; 6
    3ef2:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>
    3ef6:	16 c0       	rjmp	.+44     	; 0x3f24 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>

    }

    else {

        midi.sendControlChange(getMIDIid(analogID), ccValue);
    3ef8:	6d 2d       	mov	r22, r13
    3efa:	c7 01       	movw	r24, r14
    3efc:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6Analog9getMIDIidEh>
    3f00:	4b 2d       	mov	r20, r11
    3f02:	68 2f       	mov	r22, r24
    3f04:	8d e8       	ldi	r24, 0x8D	; 141
    3f06:	96 e0       	ldi	r25, 0x06	; 6
    3f08:	0e 94 47 2b 	call	0x568e	; 0x568e <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3f0c:	82 e9       	ldi	r24, 0x92	; 146
    3f0e:	96 e0       	ldi	r25, 0x06	; 6
    3f10:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    3f14:	88 23       	and	r24, r24
    3f16:	31 f0       	breq	.+12     	; 0x3f24 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    3f18:	4d 2d       	mov	r20, r13
    3f1a:	63 e0       	ldi	r22, 0x03	; 3
    3f1c:	82 e9       	ldi	r24, 0x92	; 146
    3f1e:	96 e0       	ldi	r25, 0x06	; 6
    3f20:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>

    }

    //update values
    lastAnalogueValue[analogID] = tempValue;
    3f24:	cc 0f       	add	r28, r28
    3f26:	dd 1f       	adc	r29, r29
    3f28:	ce 0d       	add	r28, r14
    3f2a:	df 1d       	adc	r29, r15
    3f2c:	cb 59       	subi	r28, 0x9B	; 155
    3f2e:	de 4f       	sbci	r29, 0xFE	; 254
    3f30:	19 83       	std	Y+1, r17	; 0x01
    3f32:	08 83       	st	Y, r16

}
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	ff 90       	pop	r15
    3f3e:	ef 90       	pop	r14
    3f40:	df 90       	pop	r13
    3f42:	cf 90       	pop	r12
    3f44:	bf 90       	pop	r11
    3f46:	9f 90       	pop	r9
    3f48:	8f 90       	pop	r8
    3f4a:	08 95       	ret

00003f4c <_ZN7Buttons4initEv>:

    //def const

}

void Buttons::init()    {
    3f4c:	cf 92       	push	r12
    3f4e:	df 92       	push	r13
    3f50:	ef 92       	push	r14
    3f52:	0f 93       	push	r16
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	2f 97       	sbiw	r28, 0x0f	; 15
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61

    const subtype buttonTypeSubtype                   = { MAX_NUMBER_OF_BUTTONS, 0, BUTTON_TYPES-1 };
    3f6a:	80 e4       	ldi	r24, 0x40	; 64
    3f6c:	8d 87       	std	Y+13, r24	; 0x0d
    3f6e:	1e 86       	std	Y+14, r1	; 0x0e
    3f70:	91 e0       	ldi	r25, 0x01	; 1
    3f72:	9f 87       	std	Y+15, r25	; 0x0f
    const subtype buttonProgramChangeEnabledSubtype   = { MAX_NUMBER_OF_BUTTONS, 0, 1 };
    3f74:	8a 87       	std	Y+10, r24	; 0x0a
    3f76:	1b 86       	std	Y+11, r1	; 0x0b
    3f78:	9c 87       	std	Y+12, r25	; 0x0c
    const subtype buttonMIDIidSubtype                 = { MAX_NUMBER_OF_BUTTONS, 0, 127 };
    3f7a:	8f 83       	std	Y+7, r24	; 0x07
    3f7c:	18 86       	std	Y+8, r1	; 0x08
    3f7e:	8f e7       	ldi	r24, 0x7F	; 127
    3f80:	89 87       	std	Y+9, r24	; 0x09

        &buttonTypeSubtype,
        &buttonProgramChangeEnabledSubtype,
        &buttonMIDIidSubtype

    };
    3f82:	ce 01       	movw	r24, r28
    3f84:	0d 96       	adiw	r24, 0x0d	; 13
    3f86:	9a 83       	std	Y+2, r25	; 0x02
    3f88:	89 83       	std	Y+1, r24	; 0x01
    3f8a:	03 97       	sbiw	r24, 0x03	; 3
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
    3f8e:	8b 83       	std	Y+3, r24	; 0x03
    3f90:	03 97       	sbiw	r24, 0x03	; 3
    3f92:	9e 83       	std	Y+6, r25	; 0x06
    3f94:	8d 83       	std	Y+5, r24	; 0x05

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);
    3f96:	43 e0       	ldi	r20, 0x03	; 3
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	82 e9       	ldi	r24, 0x92	; 146
    3f9c:	96 e0       	ldi	r25, 0x06	; 6
    3f9e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN5SysEx14addMessageTypeEhh>
    3fa2:	ce 01       	movw	r24, r28
    3fa4:	01 96       	adiw	r24, 0x01	; 1
    3fa6:	6c 01       	movw	r12, r24
    3fa8:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);
    3faa:	d6 01       	movw	r26, r12
    3fac:	ed 91       	ld	r30, X+
    3fae:	fd 91       	ld	r31, X+
    3fb0:	6d 01       	movw	r12, r26
    3fb2:	e2 80       	ldd	r14, Z+2	; 0x02
    3fb4:	01 81       	ldd	r16, Z+1	; 0x01
    3fb6:	20 81       	ld	r18, Z
    3fb8:	41 2f       	mov	r20, r17
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	82 e9       	ldi	r24, 0x92	; 146
    3fbe:	96 e0       	ldi	r25, 0x06	; 6
    3fc0:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    3fc4:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {
    3fc6:	13 30       	cpi	r17, 0x03	; 3
    3fc8:	81 f7       	brne	.-32     	; 0x3faa <_ZN7Buttons4initEv+0x5e>
        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);

    }

}
    3fca:	2f 96       	adiw	r28, 0x0f	; 15
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ef 90       	pop	r14
    3fe0:	df 90       	pop	r13
    3fe2:	cf 90       	pop	r12
    3fe4:	08 95       	ret

00003fe6 <_ZN7Buttons16setButtonPressedEhb>:

void Buttons::setButtonPressed(uint8_t buttonID, bool state)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    3fe6:	26 2f       	mov	r18, r22
    3fe8:	26 95       	lsr	r18
    3fea:	26 95       	lsr	r18
    3fec:	26 95       	lsr	r18
    3fee:	67 70       	andi	r22, 0x07	; 7

    bitWrite(buttonPressed[arrayIndex], buttonIndex, state);
    3ff0:	44 23       	and	r20, r20
    3ff2:	91 f0       	breq	.+36     	; 0x4018 <_ZN7Buttons16setButtonPressedEhb+0x32>
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e2 0f       	add	r30, r18
    3ff8:	f1 1d       	adc	r31, r1
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	a0 e0       	ldi	r26, 0x00	; 0
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	04 c0       	rjmp	.+8      	; 0x400c <_ZN7Buttons16setButtonPressedEhb+0x26>
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	aa 1f       	adc	r26, r26
    400a:	bb 1f       	adc	r27, r27
    400c:	6a 95       	dec	r22
    400e:	d2 f7       	brpl	.-12     	; 0x4004 <_ZN7Buttons16setButtonPressedEhb+0x1e>
    4010:	21 85       	ldd	r18, Z+9	; 0x09
    4012:	82 2b       	or	r24, r18
    4014:	81 87       	std	Z+9, r24	; 0x09
    4016:	08 95       	ret
    4018:	fc 01       	movw	r30, r24
    401a:	e2 0f       	add	r30, r18
    401c:	f1 1d       	adc	r31, r1
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <_ZN7Buttons16setButtonPressedEhb+0x4a>
    4028:	88 0f       	add	r24, r24
    402a:	99 1f       	adc	r25, r25
    402c:	aa 1f       	adc	r26, r26
    402e:	bb 1f       	adc	r27, r27
    4030:	6a 95       	dec	r22
    4032:	d2 f7       	brpl	.-12     	; 0x4028 <_ZN7Buttons16setButtonPressedEhb+0x42>
    4034:	80 95       	com	r24
    4036:	91 85       	ldd	r25, Z+9	; 0x09
    4038:	89 23       	and	r24, r25
    403a:	81 87       	std	Z+9, r24	; 0x09
    403c:	08 95       	ret

0000403e <_ZN7Buttons16getButtonPressedEh>:

}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    403e:	26 2f       	mov	r18, r22
    4040:	26 95       	lsr	r18
    4042:	26 95       	lsr	r18
    4044:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    4046:	82 0f       	add	r24, r18
    4048:	91 1d       	adc	r25, r1
    404a:	fc 01       	movw	r30, r24
    404c:	81 85       	ldd	r24, Z+9	; 0x09
    404e:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    4050:	22 0f       	add	r18, r18
    4052:	22 0f       	add	r18, r18
    4054:	22 0f       	add	r18, r18
    4056:	62 1b       	sub	r22, r18

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    4058:	02 c0       	rjmp	.+4      	; 0x405e <_ZN7Buttons16getButtonPressedEh+0x20>
    405a:	95 95       	asr	r25
    405c:	87 95       	ror	r24
    405e:	6a 95       	dec	r22
    4060:	e2 f7       	brpl	.-8      	; 0x405a <_ZN7Buttons16getButtonPressedEh+0x1c>

}
    4062:	81 70       	andi	r24, 0x01	; 1
    4064:	08 95       	ret

00004066 <_ZN7Buttons17updateButtonStateEhh>:

    }

}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	dc 01       	movw	r26, r24

    uint8_t arrayIndex = buttonID/8;
    4070:	96 2f       	mov	r25, r22
    4072:	96 95       	lsr	r25
    4074:	96 95       	lsr	r25
    4076:	96 95       	lsr	r25
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    4078:	e9 2f       	mov	r30, r25
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	ed 01       	movw	r28, r26
    407e:	ce 0f       	add	r28, r30
    4080:	df 1f       	adc	r29, r31
    4082:	58 81       	ld	r21, Y
}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    4084:	99 0f       	add	r25, r25
    4086:	99 0f       	add	r25, r25
    4088:	99 0f       	add	r25, r25
    408a:	69 1b       	sub	r22, r25

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    408c:	25 2f       	mov	r18, r21
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	06 2e       	mov	r0, r22
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <_ZN7Buttons17updateButtonStateEhh+0x32>
    4094:	35 95       	asr	r19
    4096:	27 95       	ror	r18
    4098:	0a 94       	dec	r0
    409a:	e2 f7       	brpl	.-8      	; 0x4094 <_ZN7Buttons17updateButtonStateEhh+0x2e>
    409c:	21 70       	andi	r18, 0x01	; 1
    409e:	33 27       	eor	r19, r19
    40a0:	84 2f       	mov	r24, r20
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	28 17       	cp	r18, r24
    40a6:	39 07       	cpc	r19, r25
    40a8:	01 f1       	breq	.+64     	; 0x40ea <_ZN7Buttons17updateButtonStateEhh+0x84>
        bitWrite(previousButtonState[arrayIndex], buttonIndex, buttonState);
    40aa:	44 23       	and	r20, r20
    40ac:	71 f0       	breq	.+28     	; 0x40ca <_ZN7Buttons17updateButtonStateEhh+0x64>
    40ae:	01 e0       	ldi	r16, 0x01	; 1
    40b0:	10 e0       	ldi	r17, 0x00	; 0
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	04 c0       	rjmp	.+8      	; 0x40c0 <_ZN7Buttons17updateButtonStateEhh+0x5a>
    40b8:	00 0f       	add	r16, r16
    40ba:	11 1f       	adc	r17, r17
    40bc:	22 1f       	adc	r18, r18
    40be:	33 1f       	adc	r19, r19
    40c0:	6a 95       	dec	r22
    40c2:	d2 f7       	brpl	.-12     	; 0x40b8 <_ZN7Buttons17updateButtonStateEhh+0x52>
    40c4:	05 2b       	or	r16, r21
    40c6:	08 83       	st	Y, r16
    40c8:	10 c0       	rjmp	.+32     	; 0x40ea <_ZN7Buttons17updateButtonStateEhh+0x84>
    40ca:	ea 0f       	add	r30, r26
    40cc:	fb 1f       	adc	r31, r27
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	a0 e0       	ldi	r26, 0x00	; 0
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <_ZN7Buttons17updateButtonStateEhh+0x7a>
    40d8:	88 0f       	add	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	aa 1f       	adc	r26, r26
    40de:	bb 1f       	adc	r27, r27
    40e0:	6a 95       	dec	r22
    40e2:	d2 f7       	brpl	.-12     	; 0x40d8 <_ZN7Buttons17updateButtonStateEhh+0x72>
    40e4:	80 95       	com	r24
    40e6:	58 23       	and	r21, r24
    40e8:	50 83       	st	Z, r21

}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	08 95       	ret

000040f4 <_ZN7Buttons22getPreviousButtonStateEh>:

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    40f4:	26 2f       	mov	r18, r22
    40f6:	26 95       	lsr	r18
    40f8:	26 95       	lsr	r18
    40fa:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    40fc:	82 0f       	add	r24, r18
    40fe:	91 1d       	adc	r25, r1
    4100:	fc 01       	movw	r30, r24
    4102:	80 81       	ld	r24, Z
    4104:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    4106:	22 0f       	add	r18, r18
    4108:	22 0f       	add	r18, r18
    410a:	22 0f       	add	r18, r18
    410c:	62 1b       	sub	r22, r18

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <_ZN7Buttons22getPreviousButtonStateEh+0x20>
    4110:	95 95       	asr	r25
    4112:	87 95       	ror	r24
    4114:	6a 95       	dec	r22
    4116:	e2 f7       	brpl	.-8      	; 0x4110 <_ZN7Buttons22getPreviousButtonStateEh+0x1c>

}
    4118:	81 70       	andi	r24, 0x01	; 1
    411a:	08 95       	ret

0000411c <_ZN7Buttons15buttonDebouncedEhb>:

bool Buttons::buttonDebounced(uint8_t buttonID, bool buttonState)   {
    411c:	40 68       	ori	r20, 0x80	; 128

    //shift new button reading into previousButtonState
    buttonDebounceCounter[buttonID] = (buttonDebounceCounter[buttonID] << 1) | buttonState | buttonDebounceCompare;
    411e:	fc 01       	movw	r30, r24
    4120:	e6 0f       	add	r30, r22
    4122:	f1 1d       	adc	r31, r1
    4124:	92 89       	ldd	r25, Z+18	; 0x12
    4126:	99 0f       	add	r25, r25
    4128:	49 2b       	or	r20, r25
    412a:	42 8b       	std	Z+18, r20	; 0x12

    //if button is debounced, return true
    return ((buttonDebounceCounter[buttonID] == buttonDebounceCompare) || (buttonDebounceCounter[buttonID] == 0xFF));
    412c:	40 38       	cpi	r20, 0x80	; 128
    412e:	29 f0       	breq	.+10     	; 0x413a <_ZN7Buttons15buttonDebouncedEhb+0x1e>
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	4f 3f       	cpi	r20, 0xFF	; 255
    4134:	19 f0       	breq	.+6      	; 0x413c <_ZN7Buttons15buttonDebouncedEhb+0x20>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	08 95       	ret
    413a:	81 e0       	ldi	r24, 0x01	; 1

}
    413c:	08 95       	ret

0000413e <_ZN7Buttons13getButtonTypeEh>:

buttonType_t Buttons::getButtonType(uint8_t buttonID)  {
    413e:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4140:	ea e9       	ldi	r30, 0x9A	; 154
    4142:	f1 e0       	ldi	r31, 0x01	; 1
    4144:	24 a1       	ldd	r18, Z+36	; 0x24
    4146:	35 a1       	ldd	r19, Z+37	; 0x25
    4148:	82 a1       	ldd	r24, Z+34	; 0x22
    414a:	93 a1       	ldd	r25, Z+35	; 0x23
    414c:	82 0f       	add	r24, r18
    414e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4150:	26 a9       	ldd	r18, Z+54	; 0x36
    4152:	22 23       	and	r18, r18
    4154:	a1 f0       	breq	.+40     	; 0x417e <_ZN7Buttons13getButtonTypeEh+0x40>
    4156:	21 30       	cpi	r18, 0x01	; 1
    4158:	b9 f4       	brne	.+46     	; 0x4188 <_ZN7Buttons13getButtonTypeEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    415a:	26 2f       	mov	r18, r22
    415c:	26 95       	lsr	r18
    415e:	26 95       	lsr	r18
    4160:	26 95       	lsr	r18
    4162:	c6 2f       	mov	r28, r22
    4164:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4166:	82 0f       	add	r24, r18
    4168:	91 1d       	adc	r25, r1
    416a:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	02 c0       	rjmp	.+4      	; 0x4176 <_ZN7Buttons13getButtonTypeEh+0x38>
    4172:	95 95       	asr	r25
    4174:	87 95       	ror	r24
    4176:	ca 95       	dec	r28
    4178:	e2 f7       	brpl	.-8      	; 0x4172 <_ZN7Buttons13getButtonTypeEh+0x34>
    417a:	81 70       	andi	r24, 0x01	; 1
    417c:	06 c0       	rjmp	.+12     	; 0x418a <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    417e:	86 0f       	add	r24, r22
    4180:	91 1d       	adc	r25, r1
    4182:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4186:	01 c0       	rjmp	.+2      	; 0x418a <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

        }   return 0;
    4188:	80 e0       	ldi	r24, 0x00	; 0

    return (buttonType_t)configuration.readParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID);

}
    418a:	cf 91       	pop	r28
    418c:	08 95       	ret

0000418e <_ZN7Buttons18getButtonPCenabledEh>:

bool Buttons::getButtonPCenabled(uint8_t buttonID)   {
    418e:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4190:	ea e9       	ldi	r30, 0x9A	; 154
    4192:	f1 e0       	ldi	r31, 0x01	; 1
    4194:	26 a1       	ldd	r18, Z+38	; 0x26
    4196:	37 a1       	ldd	r19, Z+39	; 0x27
    4198:	82 a1       	ldd	r24, Z+34	; 0x22
    419a:	93 a1       	ldd	r25, Z+35	; 0x23
    419c:	82 0f       	add	r24, r18
    419e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    41a0:	27 a9       	ldd	r18, Z+55	; 0x37
    41a2:	22 23       	and	r18, r18
    41a4:	a9 f0       	breq	.+42     	; 0x41d0 <_ZN7Buttons18getButtonPCenabledEh+0x42>
    41a6:	21 30       	cpi	r18, 0x01	; 1
    41a8:	c9 f4       	brne	.+50     	; 0x41dc <_ZN7Buttons18getButtonPCenabledEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    41aa:	26 2f       	mov	r18, r22
    41ac:	26 95       	lsr	r18
    41ae:	26 95       	lsr	r18
    41b0:	26 95       	lsr	r18
    41b2:	c6 2f       	mov	r28, r22
    41b4:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    41b6:	82 0f       	add	r24, r18
    41b8:	91 1d       	adc	r25, r1
    41ba:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	02 c0       	rjmp	.+4      	; 0x41c6 <_ZN7Buttons18getButtonPCenabledEh+0x38>
    41c2:	95 95       	asr	r25
    41c4:	87 95       	ror	r24
    41c6:	ca 95       	dec	r28
    41c8:	e2 f7       	brpl	.-8      	; 0x41c2 <_ZN7Buttons18getButtonPCenabledEh+0x34>
    41ca:	98 2f       	mov	r25, r24
    41cc:	91 70       	andi	r25, 0x01	; 1
    41ce:	07 c0       	rjmp	.+14     	; 0x41de <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    41d0:	86 0f       	add	r24, r22
    41d2:	91 1d       	adc	r25, r1
    41d4:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    41d8:	98 2f       	mov	r25, r24
    41da:	01 c0       	rjmp	.+2      	; 0x41de <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

        }   return 0;
    41dc:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID);
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	91 11       	cpse	r25, r1
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <_ZN7Buttons18getButtonPCenabledEh+0x58>
    41e4:	80 e0       	ldi	r24, 0x00	; 0

}
    41e6:	cf 91       	pop	r28
    41e8:	08 95       	ret

000041ea <_ZN7Buttons9getMIDIidEh>:

uint8_t Buttons::getMIDIid(uint8_t buttonID)   {
    41ea:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    41ec:	ea e9       	ldi	r30, 0x9A	; 154
    41ee:	f1 e0       	ldi	r31, 0x01	; 1
    41f0:	20 a5       	ldd	r18, Z+40	; 0x28
    41f2:	31 a5       	ldd	r19, Z+41	; 0x29
    41f4:	82 a1       	ldd	r24, Z+34	; 0x22
    41f6:	93 a1       	ldd	r25, Z+35	; 0x23
    41f8:	82 0f       	add	r24, r18
    41fa:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    41fc:	20 ad       	ldd	r18, Z+56	; 0x38
    41fe:	22 23       	and	r18, r18
    4200:	a1 f0       	breq	.+40     	; 0x422a <_ZN7Buttons9getMIDIidEh+0x40>
    4202:	21 30       	cpi	r18, 0x01	; 1
    4204:	b9 f4       	brne	.+46     	; 0x4234 <_ZN7Buttons9getMIDIidEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4206:	26 2f       	mov	r18, r22
    4208:	26 95       	lsr	r18
    420a:	26 95       	lsr	r18
    420c:	26 95       	lsr	r18
    420e:	c6 2f       	mov	r28, r22
    4210:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4212:	82 0f       	add	r24, r18
    4214:	91 1d       	adc	r25, r1
    4216:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <_ZN7Buttons9getMIDIidEh+0x38>
    421e:	95 95       	asr	r25
    4220:	87 95       	ror	r24
    4222:	ca 95       	dec	r28
    4224:	e2 f7       	brpl	.-8      	; 0x421e <_ZN7Buttons9getMIDIidEh+0x34>
    4226:	81 70       	andi	r24, 0x01	; 1
    4228:	06 c0       	rjmp	.+12     	; 0x4236 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    422a:	86 0f       	add	r24, r22
    422c:	91 1d       	adc	r25, r1
    422e:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4232:	01 c0       	rjmp	.+2      	; 0x4236 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

        }   return 0;
    4234:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID);

}
    4236:	cf 91       	pop	r28
    4238:	08 95       	ret

0000423a <_ZN7Buttons20processProgramChangeEhb>:

    return bitRead(buttonPressed[arrayIndex], buttonIndex);

}

void Buttons::processProgramChange(uint8_t buttonID, bool buttonState)   {
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	8c 01       	movw	r16, r24
    4242:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    4244:	44 23       	and	r20, r20
    4246:	f9 f0       	breq	.+62     	; 0x4286 <_ZN7Buttons20processProgramChangeEhb+0x4c>

        if (!getButtonPressed(buttonID))    {
    4248:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN7Buttons16getButtonPressedEh>
    424c:	81 11       	cpse	r24, r1
    424e:	24 c0       	rjmp	.+72     	; 0x4298 <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, true);
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	6c 2f       	mov	r22, r28
    4254:	c8 01       	movw	r24, r16
    4256:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>
            midi.sendProgramChange(getMIDIid(buttonID));
    425a:	6c 2f       	mov	r22, r28
    425c:	c8 01       	movw	r24, r16
    425e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    4262:	68 2f       	mov	r22, r24
    4264:	8d e8       	ldi	r24, 0x8D	; 141
    4266:	96 e0       	ldi	r25, 0x06	; 6
    4268:	0e 94 2f 2b 	call	0x565e	; 0x565e <_ZN4MIDI17sendProgramChangeEh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    426c:	82 e9       	ldi	r24, 0x92	; 146
    426e:	96 e0       	ldi	r25, 0x06	; 6
    4270:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    4274:	88 23       	and	r24, r24
    4276:	81 f0       	breq	.+32     	; 0x4298 <_ZN7Buttons20processProgramChangeEhb+0x5e>
    4278:	4c 2f       	mov	r20, r28
    427a:	61 e0       	ldi	r22, 0x01	; 1
    427c:	82 e9       	ldi	r24, 0x92	; 146
    427e:	96 e0       	ldi	r25, 0x06	; 6
    4280:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>
    4284:	09 c0       	rjmp	.+18     	; 0x4298 <_ZN7Buttons20processProgramChangeEhb+0x5e>

        }

    }   else {

        if (getButtonPressed(buttonID)) {
    4286:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN7Buttons16getButtonPressedEh>
    428a:	88 23       	and	r24, r24
    428c:	29 f0       	breq	.+10     	; 0x4298 <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, false);
    428e:	40 e0       	ldi	r20, 0x00	; 0
    4290:	6c 2f       	mov	r22, r28
    4292:	c8 01       	movw	r24, r16
    4294:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    4298:	cf 91       	pop	r28
    429a:	1f 91       	pop	r17
    429c:	0f 91       	pop	r16
    429e:	08 95       	ret

000042a0 <_ZN7Buttons22processMomentaryButtonEhb>:

void Buttons::processMomentaryButton(uint8_t buttonID, bool buttonState)   {
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	cf 93       	push	r28
    42a6:	8c 01       	movw	r16, r24
    42a8:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    42aa:	44 23       	and	r20, r20
    42ac:	09 f1       	breq	.+66     	; 0x42f0 <_ZN7Buttons22processMomentaryButtonEhb+0x50>

        //send note on only once
        if (!getButtonPressed(buttonID))    {
    42ae:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN7Buttons16getButtonPressedEh>
    42b2:	81 11       	cpse	r24, r1
    42b4:	3d c0       	rjmp	.+122    	; 0x4330 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

            setButtonPressed(buttonID, true);
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	6c 2f       	mov	r22, r28
    42ba:	c8 01       	movw	r24, r16
    42bc:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>

            midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    42c0:	6c 2f       	mov	r22, r28
    42c2:	c8 01       	movw	r24, r16
    42c4:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    42c8:	2f e7       	ldi	r18, 0x7F	; 127
    42ca:	41 e0       	ldi	r20, 0x01	; 1
    42cc:	68 2f       	mov	r22, r24
    42ce:	8d e8       	ldi	r24, 0x8D	; 141
    42d0:	96 e0       	ldi	r25, 0x06	; 6
    42d2:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    42d6:	82 e9       	ldi	r24, 0x92	; 146
    42d8:	96 e0       	ldi	r25, 0x06	; 6
    42da:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    42de:	88 23       	and	r24, r24
    42e0:	39 f1       	breq	.+78     	; 0x4330 <_ZN7Buttons22processMomentaryButtonEhb+0x90>
    42e2:	4c 2f       	mov	r20, r28
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	82 e9       	ldi	r24, 0x92	; 146
    42e8:	96 e0       	ldi	r25, 0x06	; 6
    42ea:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>
    42ee:	20 c0       	rjmp	.+64     	; 0x4330 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

        }

    }   else {  //button is released

            if (getButtonPressed(buttonID))    {
    42f0:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN7Buttons16getButtonPressedEh>
    42f4:	88 23       	and	r24, r24
    42f6:	e1 f0       	breq	.+56     	; 0x4330 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    42f8:	6c 2f       	mov	r22, r28
    42fa:	c8 01       	movw	r24, r16
    42fc:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	40 e0       	ldi	r20, 0x00	; 0
    4304:	68 2f       	mov	r22, r24
    4306:	8d e8       	ldi	r24, 0x8D	; 141
    4308:	96 e0       	ldi	r25, 0x06	; 6
    430a:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    430e:	82 e9       	ldi	r24, 0x92	; 146
    4310:	96 e0       	ldi	r25, 0x06	; 6
    4312:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    4316:	88 23       	and	r24, r24
    4318:	31 f0       	breq	.+12     	; 0x4326 <_ZN7Buttons22processMomentaryButtonEhb+0x86>
    431a:	4c 2f       	mov	r20, r28
    431c:	61 e0       	ldi	r22, 0x01	; 1
    431e:	82 e9       	ldi	r24, 0x92	; 146
    4320:	96 e0       	ldi	r25, 0x06	; 6
    4322:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>

                setButtonPressed(buttonID, false);
    4326:	40 e0       	ldi	r20, 0x00	; 0
    4328:	6c 2f       	mov	r22, r28
    432a:	c8 01       	movw	r24, r16
    432c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>

            }

        }

}
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	08 95       	ret

00004338 <_ZN7Buttons21processLatchingButtonEhb>:

void Buttons::processLatchingButton(uint8_t buttonID, bool buttonState)    {
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	8c 01       	movw	r16, r24
    4342:	c6 2f       	mov	r28, r22
    4344:	d4 2f       	mov	r29, r20

    if (buttonState != getPreviousButtonState(buttonID)) {
    4346:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN7Buttons22getPreviousButtonStateEh>
    434a:	8d 17       	cp	r24, r29
    434c:	09 f4       	brne	.+2      	; 0x4350 <_ZN7Buttons21processLatchingButtonEhb+0x18>
    434e:	42 c0       	rjmp	.+132    	; 0x43d4 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

        if (buttonState) {
    4350:	dd 23       	and	r29, r29
    4352:	09 f4       	brne	.+2      	; 0x4356 <_ZN7Buttons21processLatchingButtonEhb+0x1e>
    4354:	3f c0       	rjmp	.+126    	; 0x43d4 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            //button is pressed
            //if a button has been already pressed
            if (getButtonPressed(buttonID)) {
    4356:	6c 2f       	mov	r22, r28
    4358:	c8 01       	movw	r24, r16
    435a:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN7Buttons16getButtonPressedEh>
    435e:	88 23       	and	r24, r24
    4360:	e9 f0       	breq	.+58     	; 0x439c <_ZN7Buttons21processLatchingButtonEhb+0x64>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    4362:	6c 2f       	mov	r22, r28
    4364:	c8 01       	movw	r24, r16
    4366:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	40 e0       	ldi	r20, 0x00	; 0
    436e:	68 2f       	mov	r22, r24
    4370:	8d e8       	ldi	r24, 0x8D	; 141
    4372:	96 e0       	ldi	r25, 0x06	; 6
    4374:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    4378:	82 e9       	ldi	r24, 0x92	; 146
    437a:	96 e0       	ldi	r25, 0x06	; 6
    437c:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    4380:	88 23       	and	r24, r24
    4382:	31 f0       	breq	.+12     	; 0x4390 <_ZN7Buttons21processLatchingButtonEhb+0x58>
    4384:	4c 2f       	mov	r20, r28
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	82 e9       	ldi	r24, 0x92	; 146
    438a:	96 e0       	ldi	r25, 0x06	; 6
    438c:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>

                //reset pressed state
                setButtonPressed(buttonID, false);
    4390:	40 e0       	ldi	r20, 0x00	; 0
    4392:	6c 2f       	mov	r22, r28
    4394:	c8 01       	movw	r24, r16
    4396:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>
    439a:	1c c0       	rjmp	.+56     	; 0x43d4 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            } else {

                //send note on
                midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    439c:	6c 2f       	mov	r22, r28
    439e:	c8 01       	movw	r24, r16
    43a0:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    43a4:	2f e7       	ldi	r18, 0x7F	; 127
    43a6:	41 e0       	ldi	r20, 0x01	; 1
    43a8:	68 2f       	mov	r22, r24
    43aa:	8d e8       	ldi	r24, 0x8D	; 141
    43ac:	96 e0       	ldi	r25, 0x06	; 6
    43ae:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    43b2:	82 e9       	ldi	r24, 0x92	; 146
    43b4:	96 e0       	ldi	r25, 0x06	; 6
    43b6:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    43ba:	88 23       	and	r24, r24
    43bc:	31 f0       	breq	.+12     	; 0x43ca <_ZN7Buttons21processLatchingButtonEhb+0x92>
    43be:	4c 2f       	mov	r20, r28
    43c0:	61 e0       	ldi	r22, 0x01	; 1
    43c2:	82 e9       	ldi	r24, 0x92	; 146
    43c4:	96 e0       	ldi	r25, 0x06	; 6
    43c6:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>

                //toggle buttonPressed flag to true
                setButtonPressed(buttonID, true);
    43ca:	41 e0       	ldi	r20, 0x01	; 1
    43cc:	6c 2f       	mov	r22, r28
    43ce:	c8 01       	movw	r24, r16
    43d0:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	08 95       	ret

000043de <_ZN7Buttons6updateEv>:

void Buttons::update()    {
    43de:	0f 93       	push	r16
    43e0:	1f 93       	push	r17
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	8c 01       	movw	r16, r24

    if (!board.buttonDataAvailable()) return;
    43e8:	81 e4       	ldi	r24, 0x41	; 65
    43ea:	92 e0       	ldi	r25, 0x02	; 2
    43ec:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Board19buttonDataAvailableEv>
    43f0:	88 23       	and	r24, r24
    43f2:	a9 f1       	breq	.+106    	; 0x445e <_ZN7Buttons6updateEv+0x80>
    43f4:	c0 e0       	ldi	r28, 0x00	; 0

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        uint8_t buttonState = board.getButtonState(i);
    43f6:	6c 2f       	mov	r22, r28
    43f8:	81 e4       	ldi	r24, 0x41	; 65
    43fa:	92 e0       	ldi	r25, 0x02	; 2
    43fc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN5Board14getButtonStateEh>
    4400:	d8 2f       	mov	r29, r24

        if (buttonDebounced(i, buttonState))  {
    4402:	48 2f       	mov	r20, r24
    4404:	6c 2f       	mov	r22, r28
    4406:	c8 01       	movw	r24, r16
    4408:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN7Buttons15buttonDebouncedEhb>
    440c:	88 23       	and	r24, r24
    440e:	21 f1       	breq	.+72     	; 0x4458 <_ZN7Buttons6updateEv+0x7a>

            if (getButtonPCenabled(i))  {
    4410:	6c 2f       	mov	r22, r28
    4412:	c8 01       	movw	r24, r16
    4414:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN7Buttons18getButtonPCenabledEh>
    4418:	88 23       	and	r24, r24
    441a:	31 f0       	breq	.+12     	; 0x4428 <_ZN7Buttons6updateEv+0x4a>

                //ignore momentary/latching modes if button sends program change
                //when in program change, button has latching mode since momentary mode makes no sense
                processProgramChange(i, buttonState);
    441c:	4d 2f       	mov	r20, r29
    441e:	6c 2f       	mov	r22, r28
    4420:	c8 01       	movw	r24, r16
    4422:	0e 94 1d 21 	call	0x423a	; 0x423a <_ZN7Buttons20processProgramChangeEhb>
    4426:	13 c0       	rjmp	.+38     	; 0x444e <_ZN7Buttons6updateEv+0x70>

            }   else {

                switch (getButtonType(i))   {
    4428:	6c 2f       	mov	r22, r28
    442a:	c8 01       	movw	r24, r16
    442c:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN7Buttons13getButtonTypeEh>
    4430:	88 23       	and	r24, r24
    4432:	41 f0       	breq	.+16     	; 0x4444 <_ZN7Buttons6updateEv+0x66>
    4434:	81 30       	cpi	r24, 0x01	; 1
    4436:	59 f4       	brne	.+22     	; 0x444e <_ZN7Buttons6updateEv+0x70>

                    case buttonLatching:
                    processLatchingButton(i, buttonState);
    4438:	4d 2f       	mov	r20, r29
    443a:	6c 2f       	mov	r22, r28
    443c:	c8 01       	movw	r24, r16
    443e:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN7Buttons21processLatchingButtonEhb>
                    break;
    4442:	05 c0       	rjmp	.+10     	; 0x444e <_ZN7Buttons6updateEv+0x70>

                    case buttonMomentary:
                    processMomentaryButton(i, buttonState);
    4444:	4d 2f       	mov	r20, r29
    4446:	6c 2f       	mov	r22, r28
    4448:	c8 01       	movw	r24, r16
    444a:	0e 94 50 21 	call	0x42a0	; 0x42a0 <_ZN7Buttons22processMomentaryButtonEhb>

                }

            }

            updateButtonState(i, buttonState);
    444e:	4d 2f       	mov	r20, r29
    4450:	6c 2f       	mov	r22, r28
    4452:	c8 01       	movw	r24, r16
    4454:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN7Buttons17updateButtonStateEhh>
    4458:	cf 5f       	subi	r28, 0xFF	; 255

void Buttons::update()    {

    if (!board.buttonDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    445a:	c0 34       	cpi	r28, 0x40	; 64
    445c:	61 f6       	brne	.-104    	; 0x43f6 <_ZN7Buttons6updateEv+0x18>

        }

    }

}
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	08 95       	ret

00004468 <_ZN7Buttons12getParameterEhh>:

}

uint8_t Buttons::getParameter(uint8_t messageType, uint8_t parameterID) {

    switch(messageType) {
    4468:	61 30       	cpi	r22, 0x01	; 1
    446a:	41 f0       	breq	.+16     	; 0x447c <_ZN7Buttons12getParameterEhh+0x14>
    446c:	18 f0       	brcs	.+6      	; 0x4474 <_ZN7Buttons12getParameterEhh+0xc>
    446e:	62 30       	cpi	r22, 0x02	; 2
    4470:	49 f0       	breq	.+18     	; 0x4484 <_ZN7Buttons12getParameterEhh+0x1c>
    4472:	0c c0       	rjmp	.+24     	; 0x448c <_ZN7Buttons12getParameterEhh+0x24>

        case buttonTypeConf:
        return getButtonType(parameterID);
    4474:	64 2f       	mov	r22, r20
    4476:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN7Buttons13getButtonTypeEh>
    447a:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return getButtonPCenabled(parameterID);
    447c:	64 2f       	mov	r22, r20
    447e:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN7Buttons18getButtonPCenabledEh>
    4482:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return getMIDIid(parameterID);
    4484:	64 2f       	mov	r22, r20
    4486:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN7Buttons9getMIDIidEh>
    448a:	08 95       	ret
        break;

    }   return 0;
    448c:	80 e0       	ldi	r24, 0x00	; 0
}
    448e:	08 95       	ret

00004490 <_ZN7Buttons13setButtonTypeEhh>:

bool Buttons::setButtonType(uint8_t buttonID, uint8_t type)  {
    4490:	0f 93       	push	r16
    4492:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID, type);
    4494:	04 2f       	mov	r16, r20
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	61 e0       	ldi	r22, 0x01	; 1
    449a:	8a e9       	ldi	r24, 0x9A	; 154
    449c:	91 e0       	ldi	r25, 0x01	; 1
    449e:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    44a2:	0f 91       	pop	r16
    44a4:	08 95       	ret

000044a6 <_ZN7Buttons18setButtonPCenabledEhh>:

bool Buttons::setButtonPCenabled(uint8_t buttonID, uint8_t state)  {
    44a6:	0f 93       	push	r16
    44a8:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID, state);
    44aa:	04 2f       	mov	r16, r20
    44ac:	41 e0       	ldi	r20, 0x01	; 1
    44ae:	61 e0       	ldi	r22, 0x01	; 1
    44b0:	8a e9       	ldi	r24, 0x9A	; 154
    44b2:	91 e0       	ldi	r25, 0x01	; 1
    44b4:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <_ZN7Buttons9setMIDIidEhh>:

bool Buttons::setMIDIid(uint8_t buttonID, uint8_t midiID)    {
    44bc:	0f 93       	push	r16
    44be:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID, midiID);
    44c0:	04 2f       	mov	r16, r20
    44c2:	42 e0       	ldi	r20, 0x02	; 2
    44c4:	61 e0       	ldi	r22, 0x01	; 1
    44c6:	8a e9       	ldi	r24, 0x9A	; 154
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    44ce:	0f 91       	pop	r16
    44d0:	08 95       	ret

000044d2 <_ZN7Buttons12setParameterEhhh>:

bool Buttons::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    44d2:	34 2f       	mov	r19, r20

    switch(messageType) {
    44d4:	61 30       	cpi	r22, 0x01	; 1
    44d6:	49 f0       	breq	.+18     	; 0x44ea <_ZN7Buttons12setParameterEhhh+0x18>
    44d8:	18 f0       	brcs	.+6      	; 0x44e0 <_ZN7Buttons12setParameterEhhh+0xe>
    44da:	62 30       	cpi	r22, 0x02	; 2
    44dc:	59 f0       	breq	.+22     	; 0x44f4 <_ZN7Buttons12setParameterEhhh+0x22>
    44de:	0f c0       	rjmp	.+30     	; 0x44fe <_ZN7Buttons12setParameterEhhh+0x2c>

        case buttonTypeConf:
        return setButtonType(parameter, newParameter);
    44e0:	42 2f       	mov	r20, r18
    44e2:	63 2f       	mov	r22, r19
    44e4:	0e 94 48 22 	call	0x4490	; 0x4490 <_ZN7Buttons13setButtonTypeEhh>
    44e8:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return setButtonPCenabled(parameter, newParameter);
    44ea:	42 2f       	mov	r20, r18
    44ec:	63 2f       	mov	r22, r19
    44ee:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN7Buttons18setButtonPCenabledEhh>
    44f2:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return setMIDIid(parameter, newParameter);
    44f4:	42 2f       	mov	r20, r18
    44f6:	63 2f       	mov	r22, r19
    44f8:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN7Buttons9setMIDIidEhh>
    44fc:	08 95       	ret
        break;

    }   return false;
    44fe:	80 e0       	ldi	r24, 0x00	; 0

}
    4500:	08 95       	ret

00004502 <_ZN8Encoders4initEv>:

    //def const

}

void Encoders::init()   {
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	64 97       	sbiw	r28, 0x14	; 20
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61

    const subtype encoderEnabledSubtype       = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    4520:	80 e2       	ldi	r24, 0x20	; 32
    4522:	8a 8b       	std	Y+18, r24	; 0x12
    4524:	1b 8a       	std	Y+19, r1	; 0x13
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	9c 8b       	std	Y+20, r25	; 0x14
    const subtype encoderInvertedSubtype      = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    452a:	8f 87       	std	Y+15, r24	; 0x0f
    452c:	18 8a       	std	Y+16, r1	; 0x10
    452e:	99 8b       	std	Y+17, r25	; 0x11
    const subtype encoderEncodingModeSubtype  = { MAX_NUMBER_OF_ENCODERS, 0, ENCODING_MODES-1 };
    4530:	8c 87       	std	Y+12, r24	; 0x0c
    4532:	1d 86       	std	Y+13, r1	; 0x0d
    4534:	9e 87       	std	Y+14, r25	; 0x0e
    const subtype encoderMIDIidSubtype        = { MAX_NUMBER_OF_ENCODERS, 0, 127 };
    4536:	89 87       	std	Y+9, r24	; 0x09
    4538:	1a 86       	std	Y+10, r1	; 0x0a
    453a:	8f e7       	ldi	r24, 0x7F	; 127
    453c:	8b 87       	std	Y+11, r24	; 0x0b
        &encoderEnabledSubtype,
        &encoderInvertedSubtype,
        &encoderEncodingModeSubtype,
        &encoderMIDIidSubtype

    };
    453e:	ce 01       	movw	r24, r28
    4540:	42 96       	adiw	r24, 0x12	; 18
    4542:	9a 83       	std	Y+2, r25	; 0x02
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	03 97       	sbiw	r24, 0x03	; 3
    4548:	9c 83       	std	Y+4, r25	; 0x04
    454a:	8b 83       	std	Y+3, r24	; 0x03
    454c:	03 97       	sbiw	r24, 0x03	; 3
    454e:	9e 83       	std	Y+6, r25	; 0x06
    4550:	8d 83       	std	Y+5, r24	; 0x05
    4552:	03 97       	sbiw	r24, 0x03	; 3
    4554:	98 87       	std	Y+8, r25	; 0x08
    4556:	8f 83       	std	Y+7, r24	; 0x07

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);
    4558:	44 e0       	ldi	r20, 0x04	; 4
    455a:	62 e0       	ldi	r22, 0x02	; 2
    455c:	82 e9       	ldi	r24, 0x92	; 146
    455e:	96 e0       	ldi	r25, 0x06	; 6
    4560:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN5SysEx14addMessageTypeEhh>
    4564:	ce 01       	movw	r24, r28
    4566:	01 96       	adiw	r24, 0x01	; 1
    4568:	6c 01       	movw	r12, r24
    456a:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);
    456c:	d6 01       	movw	r26, r12
    456e:	ed 91       	ld	r30, X+
    4570:	fd 91       	ld	r31, X+
    4572:	6d 01       	movw	r12, r26
    4574:	e2 80       	ldd	r14, Z+2	; 0x02
    4576:	01 81       	ldd	r16, Z+1	; 0x01
    4578:	20 81       	ld	r18, Z
    457a:	41 2f       	mov	r20, r17
    457c:	62 e0       	ldi	r22, 0x02	; 2
    457e:	82 e9       	ldi	r24, 0x92	; 146
    4580:	96 e0       	ldi	r25, 0x06	; 6
    4582:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    4586:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {
    4588:	14 30       	cpi	r17, 0x04	; 4
    458a:	81 f7       	brne	.-32     	; 0x456c <_ZN8Encoders4initEv+0x6a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);

    }

}
    458c:	64 96       	adiw	r28, 0x14	; 20
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	ef 90       	pop	r14
    45a2:	df 90       	pop	r13
    45a4:	cf 90       	pop	r12
    45a6:	08 95       	ret

000045a8 <_ZN8Encoders17getEncoderEnabledEh>:

    }

}

bool Encoders::getEncoderEnabled(uint8_t encoderID) {
    45a8:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    45aa:	20 91 df 01 	lds	r18, 0x01DF
    45ae:	30 91 e0 01 	lds	r19, 0x01E0
    45b2:	80 91 dd 01 	lds	r24, 0x01DD
    45b6:	90 91 de 01 	lds	r25, 0x01DE
    45ba:	82 0f       	add	r24, r18
    45bc:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    45be:	20 91 f1 01 	lds	r18, 0x01F1
    45c2:	22 23       	and	r18, r18
    45c4:	a9 f0       	breq	.+42     	; 0x45f0 <_ZN8Encoders17getEncoderEnabledEh+0x48>
    45c6:	21 30       	cpi	r18, 0x01	; 1
    45c8:	c9 f4       	brne	.+50     	; 0x45fc <_ZN8Encoders17getEncoderEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    45ca:	26 2f       	mov	r18, r22
    45cc:	26 95       	lsr	r18
    45ce:	26 95       	lsr	r18
    45d0:	26 95       	lsr	r18
    45d2:	c6 2f       	mov	r28, r22
    45d4:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    45d6:	82 0f       	add	r24, r18
    45d8:	91 1d       	adc	r25, r1
    45da:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	02 c0       	rjmp	.+4      	; 0x45e6 <_ZN8Encoders17getEncoderEnabledEh+0x3e>
    45e2:	95 95       	asr	r25
    45e4:	87 95       	ror	r24
    45e6:	ca 95       	dec	r28
    45e8:	e2 f7       	brpl	.-8      	; 0x45e2 <_ZN8Encoders17getEncoderEnabledEh+0x3a>
    45ea:	98 2f       	mov	r25, r24
    45ec:	91 70       	andi	r25, 0x01	; 1
    45ee:	07 c0       	rjmp	.+14     	; 0x45fe <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    45f0:	86 0f       	add	r24, r22
    45f2:	91 1d       	adc	r25, r1
    45f4:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    45f8:	98 2f       	mov	r25, r24
    45fa:	01 c0       	rjmp	.+2      	; 0x45fe <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

        }   return 0;
    45fc:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID);
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	91 11       	cpse	r25, r1
    4602:	01 c0       	rjmp	.+2      	; 0x4606 <_ZN8Encoders17getEncoderEnabledEh+0x5e>
    4604:	80 e0       	ldi	r24, 0x00	; 0

}
    4606:	cf 91       	pop	r28
    4608:	08 95       	ret

0000460a <_ZN8Encoders21getEncoderInvertStateEh>:

bool Encoders::getEncoderInvertState(uint8_t encoderID) {
    460a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    460c:	20 91 e1 01 	lds	r18, 0x01E1
    4610:	30 91 e2 01 	lds	r19, 0x01E2
    4614:	80 91 dd 01 	lds	r24, 0x01DD
    4618:	90 91 de 01 	lds	r25, 0x01DE
    461c:	82 0f       	add	r24, r18
    461e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4620:	20 91 f2 01 	lds	r18, 0x01F2
    4624:	22 23       	and	r18, r18
    4626:	a9 f0       	breq	.+42     	; 0x4652 <_ZN8Encoders21getEncoderInvertStateEh+0x48>
    4628:	21 30       	cpi	r18, 0x01	; 1
    462a:	c9 f4       	brne	.+50     	; 0x465e <_ZN8Encoders21getEncoderInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    462c:	26 2f       	mov	r18, r22
    462e:	26 95       	lsr	r18
    4630:	26 95       	lsr	r18
    4632:	26 95       	lsr	r18
    4634:	c6 2f       	mov	r28, r22
    4636:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4638:	82 0f       	add	r24, r18
    463a:	91 1d       	adc	r25, r1
    463c:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	02 c0       	rjmp	.+4      	; 0x4648 <_ZN8Encoders21getEncoderInvertStateEh+0x3e>
    4644:	95 95       	asr	r25
    4646:	87 95       	ror	r24
    4648:	ca 95       	dec	r28
    464a:	e2 f7       	brpl	.-8      	; 0x4644 <_ZN8Encoders21getEncoderInvertStateEh+0x3a>
    464c:	98 2f       	mov	r25, r24
    464e:	91 70       	andi	r25, 0x01	; 1
    4650:	07 c0       	rjmp	.+14     	; 0x4660 <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4652:	86 0f       	add	r24, r22
    4654:	91 1d       	adc	r25, r1
    4656:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    465a:	98 2f       	mov	r25, r24
    465c:	01 c0       	rjmp	.+2      	; 0x4660 <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

        }   return 0;
    465e:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID);
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	91 11       	cpse	r25, r1
    4664:	01 c0       	rjmp	.+2      	; 0x4668 <_ZN8Encoders21getEncoderInvertStateEh+0x5e>
    4666:	80 e0       	ldi	r24, 0x00	; 0

}
    4668:	cf 91       	pop	r28
    466a:	08 95       	ret

0000466c <_ZN8Encoders15getEncodingModeEh>:

encoderType_t Encoders::getEncodingMode(uint8_t encoderID)  {
    466c:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    466e:	20 91 e3 01 	lds	r18, 0x01E3
    4672:	30 91 e4 01 	lds	r19, 0x01E4
    4676:	80 91 dd 01 	lds	r24, 0x01DD
    467a:	90 91 de 01 	lds	r25, 0x01DE
    467e:	82 0f       	add	r24, r18
    4680:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4682:	20 91 f3 01 	lds	r18, 0x01F3
    4686:	22 23       	and	r18, r18
    4688:	a1 f0       	breq	.+40     	; 0x46b2 <_ZN8Encoders15getEncodingModeEh+0x46>
    468a:	21 30       	cpi	r18, 0x01	; 1
    468c:	b9 f4       	brne	.+46     	; 0x46bc <_ZN8Encoders15getEncodingModeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    468e:	26 2f       	mov	r18, r22
    4690:	26 95       	lsr	r18
    4692:	26 95       	lsr	r18
    4694:	26 95       	lsr	r18
    4696:	c6 2f       	mov	r28, r22
    4698:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    469a:	82 0f       	add	r24, r18
    469c:	91 1d       	adc	r25, r1
    469e:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <_ZN8Encoders15getEncodingModeEh+0x3e>
    46a6:	95 95       	asr	r25
    46a8:	87 95       	ror	r24
    46aa:	ca 95       	dec	r28
    46ac:	e2 f7       	brpl	.-8      	; 0x46a6 <_ZN8Encoders15getEncodingModeEh+0x3a>
    46ae:	81 70       	andi	r24, 0x01	; 1
    46b0:	06 c0       	rjmp	.+12     	; 0x46be <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    46b2:	86 0f       	add	r24, r22
    46b4:	91 1d       	adc	r25, r1
    46b6:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    46ba:	01 c0       	rjmp	.+2      	; 0x46be <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

        }   return 0;
    46bc:	80 e0       	ldi	r24, 0x00	; 0

    return (encoderType_t)configuration.readParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID);

}
    46be:	cf 91       	pop	r28
    46c0:	08 95       	ret

000046c2 <_ZN8Encoders9getMIDIidEh>:

uint8_t Encoders::getMIDIid(uint8_t encoderID)  {
    46c2:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    46c4:	20 91 e5 01 	lds	r18, 0x01E5
    46c8:	30 91 e6 01 	lds	r19, 0x01E6
    46cc:	80 91 dd 01 	lds	r24, 0x01DD
    46d0:	90 91 de 01 	lds	r25, 0x01DE
    46d4:	82 0f       	add	r24, r18
    46d6:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    46d8:	20 91 f4 01 	lds	r18, 0x01F4
    46dc:	22 23       	and	r18, r18
    46de:	a1 f0       	breq	.+40     	; 0x4708 <_ZN8Encoders9getMIDIidEh+0x46>
    46e0:	21 30       	cpi	r18, 0x01	; 1
    46e2:	b9 f4       	brne	.+46     	; 0x4712 <_ZN8Encoders9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    46e4:	26 2f       	mov	r18, r22
    46e6:	26 95       	lsr	r18
    46e8:	26 95       	lsr	r18
    46ea:	26 95       	lsr	r18
    46ec:	c6 2f       	mov	r28, r22
    46ee:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    46f0:	82 0f       	add	r24, r18
    46f2:	91 1d       	adc	r25, r1
    46f4:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	02 c0       	rjmp	.+4      	; 0x4700 <_ZN8Encoders9getMIDIidEh+0x3e>
    46fc:	95 95       	asr	r25
    46fe:	87 95       	ror	r24
    4700:	ca 95       	dec	r28
    4702:	e2 f7       	brpl	.-8      	; 0x46fc <_ZN8Encoders9getMIDIidEh+0x3a>
    4704:	81 70       	andi	r24, 0x01	; 1
    4706:	06 c0       	rjmp	.+12     	; 0x4714 <_ZN8Encoders9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4708:	86 0f       	add	r24, r22
    470a:	91 1d       	adc	r25, r1
    470c:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <_ZN8Encoders9getMIDIidEh+0x52>
            break;

        }   return 0;
    4712:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID);

}
    4714:	cf 91       	pop	r28
    4716:	08 95       	ret

00004718 <_ZN8Encoders6updateEv>:

    }

}

void Encoders::update()   {
    4718:	df 92       	push	r13
    471a:	ef 92       	push	r14
    471c:	ff 92       	push	r15
    471e:	0f 93       	push	r16
    4720:	1f 93       	push	r17
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	8c 01       	movw	r16, r24

    if (!board.encoderDataAvailable()) return;
    4728:	81 e4       	ldi	r24, 0x41	; 65
    472a:	92 e0       	ldi	r25, 0x02	; 2
    472c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN5Board20encoderDataAvailableEv>
    4730:	88 23       	and	r24, r24
    4732:	09 f4       	brne	.+2      	; 0x4736 <_ZN8Encoders6updateEv+0x1e>
    4734:	52 c0       	rjmp	.+164    	; 0x47da <_ZN8Encoders6updateEv+0xc2>
    4736:	c0 e0       	ldi	r28, 0x00	; 0
        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    4738:	0f 2e       	mov	r0, r31
    473a:	ff e7       	ldi	r31, 0x7F	; 127
    473c:	df 2e       	mov	r13, r31
    473e:	f0 2d       	mov	r31, r0
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    4740:	ff 24       	eor	r15, r15
    4742:	f3 94       	inc	r15

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    4744:	e1 2c       	mov	r14, r1

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {

        if (!getEncoderEnabled(i)) continue;
    4746:	6c 2f       	mov	r22, r28
    4748:	c8 01       	movw	r24, r16
    474a:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <_ZN8Encoders17getEncoderEnabledEh>
    474e:	88 23       	and	r24, r24
    4750:	09 f4       	brne	.+2      	; 0x4754 <_ZN8Encoders6updateEv+0x3c>
    4752:	3f c0       	rjmp	.+126    	; 0x47d2 <_ZN8Encoders6updateEv+0xba>

        encoderPosition_t encoderState = board.getEncoderState(i);
    4754:	6c 2f       	mov	r22, r28
    4756:	81 e4       	ldi	r24, 0x41	; 65
    4758:	92 e0       	ldi	r25, 0x02	; 2
    475a:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN5Board15getEncoderStateEh>
    475e:	d8 2f       	mov	r29, r24
        if (encoderState == encStopped) continue;
    4760:	88 23       	and	r24, r24
    4762:	b9 f1       	breq	.+110    	; 0x47d2 <_ZN8Encoders6updateEv+0xba>

        if (getEncoderInvertState(i))   {
    4764:	6c 2f       	mov	r22, r28
    4766:	c8 01       	movw	r24, r16
    4768:	0e 94 05 23 	call	0x460a	; 0x460a <_ZN8Encoders21getEncoderInvertStateEh>
    476c:	88 23       	and	r24, r24
    476e:	29 f0       	breq	.+10     	; 0x477a <_ZN8Encoders6updateEv+0x62>

            if (encoderState == encMoveLeft)
    4770:	d1 30       	cpi	r29, 0x01	; 1
    4772:	11 f0       	breq	.+4      	; 0x4778 <_ZN8Encoders6updateEv+0x60>
                encoderState = encMoveRight;

             else encoderState = encMoveLeft;
    4774:	df 2d       	mov	r29, r15
    4776:	01 c0       	rjmp	.+2      	; 0x477a <_ZN8Encoders6updateEv+0x62>
        if (encoderState == encStopped) continue;

        if (getEncoderInvertState(i))   {

            if (encoderState == encMoveLeft)
                encoderState = encMoveRight;
    4778:	d2 e0       	ldi	r29, 0x02	; 2

        }

        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {
    477a:	6c 2f       	mov	r22, r28
    477c:	c8 01       	movw	r24, r16
    477e:	0e 94 36 23 	call	0x466c	; 0x466c <_ZN8Encoders15getEncodingModeEh>
    4782:	88 23       	and	r24, r24
    4784:	19 f0       	breq	.+6      	; 0x478c <_ZN8Encoders6updateEv+0x74>
    4786:	81 30       	cpi	r24, 0x01	; 1
    4788:	29 f0       	breq	.+10     	; 0x4794 <_ZN8Encoders6updateEv+0x7c>
    478a:	08 c0       	rjmp	.+16     	; 0x479c <_ZN8Encoders6updateEv+0x84>

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    478c:	d1 30       	cpi	r29, 0x01	; 1
    478e:	41 f0       	breq	.+16     	; 0x47a0 <_ZN8Encoders6updateEv+0x88>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    4790:	df 2d       	mov	r29, r15
    4792:	09 c0       	rjmp	.+18     	; 0x47a6 <_ZN8Encoders6updateEv+0x8e>
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    4794:	d1 30       	cpi	r29, 0x01	; 1
    4796:	31 f0       	breq	.+12     	; 0x47a4 <_ZN8Encoders6updateEv+0x8c>
            else encoderValue = ENCODER_VALUE_RIGHT_3FH41H;
    4798:	d1 e4       	ldi	r29, 0x41	; 65
    479a:	05 c0       	rjmp	.+10     	; 0x47a6 <_ZN8Encoders6updateEv+0x8e>

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    479c:	de 2d       	mov	r29, r14
    479e:	03 c0       	rjmp	.+6      	; 0x47a6 <_ZN8Encoders6updateEv+0x8e>

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    47a0:	dd 2d       	mov	r29, r13
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <_ZN8Encoders6updateEv+0x8e>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    47a4:	df e3       	ldi	r29, 0x3F	; 63
            default:
            break;

        }

        midi.sendControlChange(getMIDIid(i), encoderValue);
    47a6:	6c 2f       	mov	r22, r28
    47a8:	c8 01       	movw	r24, r16
    47aa:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN8Encoders9getMIDIidEh>
    47ae:	4d 2f       	mov	r20, r29
    47b0:	68 2f       	mov	r22, r24
    47b2:	8d e8       	ldi	r24, 0x8D	; 141
    47b4:	96 e0       	ldi	r25, 0x06	; 6
    47b6:	0e 94 47 2b 	call	0x568e	; 0x568e <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);
    47ba:	82 e9       	ldi	r24, 0x92	; 146
    47bc:	96 e0       	ldi	r25, 0x06	; 6
    47be:	0e 94 00 30 	call	0x6000	; 0x6000 <_ZN5SysEx20configurationEnabledEv>
    47c2:	88 23       	and	r24, r24
    47c4:	31 f0       	breq	.+12     	; 0x47d2 <_ZN8Encoders6updateEv+0xba>
    47c6:	4c 2f       	mov	r20, r28
    47c8:	62 e0       	ldi	r22, 0x02	; 2
    47ca:	82 e9       	ldi	r24, 0x92	; 146
    47cc:	96 e0       	ldi	r25, 0x06	; 6
    47ce:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <_ZN5SysEx15sendComponentIDEhh>
    47d2:	cf 5f       	subi	r28, 0xFF	; 255

void Encoders::update()   {

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {
    47d4:	c0 32       	cpi	r28, 0x20	; 32
    47d6:	09 f0       	breq	.+2      	; 0x47da <_ZN8Encoders6updateEv+0xc2>
    47d8:	b6 cf       	rjmp	.-148    	; 0x4746 <_ZN8Encoders6updateEv+0x2e>
        midi.sendControlChange(getMIDIid(i), encoderValue);
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);

    }

}
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	df 90       	pop	r13
    47e8:	08 95       	ret

000047ea <_ZN8Encoders12getParameterEhh>:

}

uint8_t Encoders::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    47ea:	61 30       	cpi	r22, 0x01	; 1
    47ec:	51 f0       	breq	.+20     	; 0x4802 <_ZN8Encoders12getParameterEhh+0x18>
    47ee:	28 f0       	brcs	.+10     	; 0x47fa <_ZN8Encoders12getParameterEhh+0x10>
    47f0:	62 30       	cpi	r22, 0x02	; 2
    47f2:	59 f0       	breq	.+22     	; 0x480a <_ZN8Encoders12getParameterEhh+0x20>
    47f4:	63 30       	cpi	r22, 0x03	; 3
    47f6:	69 f0       	breq	.+26     	; 0x4812 <_ZN8Encoders12getParameterEhh+0x28>
    47f8:	10 c0       	rjmp	.+32     	; 0x481a <_ZN8Encoders12getParameterEhh+0x30>

        case encoderEnabledConf:
        return getEncoderEnabled(parameterID);
    47fa:	64 2f       	mov	r22, r20
    47fc:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <_ZN8Encoders17getEncoderEnabledEh>
    4800:	08 95       	ret
        break;

        case encoderInvertedConf:
        return getEncoderInvertState(parameterID);
    4802:	64 2f       	mov	r22, r20
    4804:	0e 94 05 23 	call	0x460a	; 0x460a <_ZN8Encoders21getEncoderInvertStateEh>
    4808:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return getEncodingMode(parameterID);
    480a:	64 2f       	mov	r22, r20
    480c:	0e 94 36 23 	call	0x466c	; 0x466c <_ZN8Encoders15getEncodingModeEh>
    4810:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return getMIDIid(parameterID);
    4812:	64 2f       	mov	r22, r20
    4814:	0e 94 61 23 	call	0x46c2	; 0x46c2 <_ZN8Encoders9getMIDIidEh>
    4818:	08 95       	ret
        break;

    }   return 0;
    481a:	80 e0       	ldi	r24, 0x00	; 0

}
    481c:	08 95       	ret

0000481e <_ZN8Encoders17setEncoderEnabledEhh>:

bool Encoders::setEncoderEnabled(uint8_t encoderID, uint8_t state)    {
    481e:	0f 93       	push	r16
    4820:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID, state);
    4822:	04 2f       	mov	r16, r20
    4824:	40 e0       	ldi	r20, 0x00	; 0
    4826:	62 e0       	ldi	r22, 0x02	; 2
    4828:	8a e9       	ldi	r24, 0x9A	; 154
    482a:	91 e0       	ldi	r25, 0x01	; 1
    482c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4830:	0f 91       	pop	r16
    4832:	08 95       	ret

00004834 <_ZN8Encoders21setEncoderInvertStateEhh>:

bool Encoders::setEncoderInvertState(uint8_t encoderID, uint8_t state)    {
    4834:	0f 93       	push	r16
    4836:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID, state);
    4838:	04 2f       	mov	r16, r20
    483a:	41 e0       	ldi	r20, 0x01	; 1
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	8a e9       	ldi	r24, 0x9A	; 154
    4840:	91 e0       	ldi	r25, 0x01	; 1
    4842:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4846:	0f 91       	pop	r16
    4848:	08 95       	ret

0000484a <_ZN8Encoders15setEncodingModeEhh>:

bool Encoders::setEncodingMode(uint8_t encoderID, uint8_t type)  {
    484a:	0f 93       	push	r16
    484c:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID, type);
    484e:	04 2f       	mov	r16, r20
    4850:	42 e0       	ldi	r20, 0x02	; 2
    4852:	62 e0       	ldi	r22, 0x02	; 2
    4854:	8a e9       	ldi	r24, 0x9A	; 154
    4856:	91 e0       	ldi	r25, 0x01	; 1
    4858:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    485c:	0f 91       	pop	r16
    485e:	08 95       	ret

00004860 <_ZN8Encoders9setMIDIidEhh>:

bool Encoders::setMIDIid(uint8_t encoderID, uint8_t midiID)  {
    4860:	0f 93       	push	r16
    4862:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID, midiID);
    4864:	04 2f       	mov	r16, r20
    4866:	43 e0       	ldi	r20, 0x03	; 3
    4868:	62 e0       	ldi	r22, 0x02	; 2
    486a:	8a e9       	ldi	r24, 0x9A	; 154
    486c:	91 e0       	ldi	r25, 0x01	; 1
    486e:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4872:	0f 91       	pop	r16
    4874:	08 95       	ret

00004876 <_ZN8Encoders12setParameterEhhh>:

bool Encoders::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    4876:	34 2f       	mov	r19, r20

    switch(messageType) {
    4878:	61 30       	cpi	r22, 0x01	; 1
    487a:	59 f0       	breq	.+22     	; 0x4892 <_ZN8Encoders12setParameterEhhh+0x1c>
    487c:	28 f0       	brcs	.+10     	; 0x4888 <_ZN8Encoders12setParameterEhhh+0x12>
    487e:	62 30       	cpi	r22, 0x02	; 2
    4880:	69 f0       	breq	.+26     	; 0x489c <_ZN8Encoders12setParameterEhhh+0x26>
    4882:	63 30       	cpi	r22, 0x03	; 3
    4884:	81 f0       	breq	.+32     	; 0x48a6 <_ZN8Encoders12setParameterEhhh+0x30>
    4886:	14 c0       	rjmp	.+40     	; 0x48b0 <_ZN8Encoders12setParameterEhhh+0x3a>

        case encoderEnabledConf:
        return setEncoderEnabled(parameter, newParameter);
    4888:	42 2f       	mov	r20, r18
    488a:	63 2f       	mov	r22, r19
    488c:	0e 94 0f 24 	call	0x481e	; 0x481e <_ZN8Encoders17setEncoderEnabledEhh>
    4890:	08 95       	ret
        break;

        case encoderInvertedConf:
        return setEncoderInvertState(parameter, newParameter);
    4892:	42 2f       	mov	r20, r18
    4894:	63 2f       	mov	r22, r19
    4896:	0e 94 1a 24 	call	0x4834	; 0x4834 <_ZN8Encoders21setEncoderInvertStateEhh>
    489a:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return setEncodingMode(parameter, newParameter);
    489c:	42 2f       	mov	r20, r18
    489e:	63 2f       	mov	r22, r19
    48a0:	0e 94 25 24 	call	0x484a	; 0x484a <_ZN8Encoders15setEncodingModeEhh>
    48a4:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return setMIDIid(parameter, newParameter);
    48a6:	42 2f       	mov	r20, r18
    48a8:	63 2f       	mov	r22, r19
    48aa:	0e 94 30 24 	call	0x4860	; 0x4860 <_ZN8Encoders9setMIDIidEhh>
    48ae:	08 95       	ret
        break;

    }   return 0;
    48b0:	80 e0       	ldi	r24, 0x00	; 0

}
    48b2:	08 95       	ret

000048b4 <_ZN4LEDs14velocity2colorEbh>:

    //return true if all LEDs are on
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (board.getLEDstate(i))   return false;
    return true;

}
    48b4:	61 30       	cpi	r22, 0x01	; 1
    48b6:	21 f0       	breq	.+8      	; 0x48c0 <_ZN4LEDs14velocity2colorEbh+0xc>
    48b8:	84 2f       	mov	r24, r20
    48ba:	82 95       	swap	r24
    48bc:	8f 70       	andi	r24, 0x0F	; 15
    48be:	08 95       	ret
    48c0:	40 34       	cpi	r20, 0x40	; 64
    48c2:	08 f0       	brcs	.+2      	; 0x48c6 <_ZN4LEDs14velocity2colorEbh+0x12>
    48c4:	40 54       	subi	r20, 0x40	; 64
    48c6:	84 2f       	mov	r24, r20
    48c8:	86 95       	lsr	r24
    48ca:	86 95       	lsr	r24
    48cc:	86 95       	lsr	r24
    48ce:	08 95       	ret

000048d0 <_ZN4LEDs9allLEDsOnEv>:
    48d0:	cf 93       	push	r28
    48d2:	c0 e0       	ldi	r28, 0x00	; 0
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	48 e0       	ldi	r20, 0x08	; 8
    48d8:	6c 2f       	mov	r22, r28
    48da:	81 e4       	ldi	r24, 0x41	; 65
    48dc:	92 e0       	ldi	r25, 0x02	; 2
    48de:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    48e2:	cf 5f       	subi	r28, 0xFF	; 255
    48e4:	c0 33       	cpi	r28, 0x30	; 48
    48e6:	b1 f7       	brne	.-20     	; 0x48d4 <_ZN4LEDs9allLEDsOnEv+0x4>
    48e8:	cf 91       	pop	r28
    48ea:	08 95       	ret

000048ec <_ZN4LEDs10allLEDsOffEv>:
    48ec:	cf 93       	push	r28
    48ee:	c0 e0       	ldi	r28, 0x00	; 0
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	6c 2f       	mov	r22, r28
    48f6:	81 e4       	ldi	r24, 0x41	; 65
    48f8:	92 e0       	ldi	r25, 0x02	; 2
    48fa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    48fe:	cf 5f       	subi	r28, 0xFF	; 255
    4900:	c0 33       	cpi	r28, 0x30	; 48
    4902:	b1 f7       	brne	.-20     	; 0x48f0 <_ZN4LEDs10allLEDsOffEv+0x4>
    4904:	cf 91       	pop	r28
    4906:	08 95       	ret

00004908 <_ZN4LEDs12checkLEDsOffEv>:

bool LEDs::checkLEDsOff()   {
    4908:	cf 93       	push	r28
    490a:	c0 e0       	ldi	r28, 0x00	; 0

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    490c:	6c 2f       	mov	r22, r28
    490e:	81 e4       	ldi	r24, 0x41	; 65
    4910:	92 e0       	ldi	r25, 0x02	; 2
    4912:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4916:	88 23       	and	r24, r24
    4918:	29 f0       	breq	.+10     	; 0x4924 <_ZN4LEDs12checkLEDsOffEv+0x1c>
    491a:	cf 5f       	subi	r28, 0xFF	; 255
    491c:	c0 33       	cpi	r28, 0x30	; 48
    491e:	b1 f7       	brne	.-20     	; 0x490c <_ZN4LEDs12checkLEDsOffEv+0x4>
    return true;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	01 c0       	rjmp	.+2      	; 0x4926 <_ZN4LEDs12checkLEDsOffEv+0x1e>
}

bool LEDs::checkLEDsOff()   {

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    4924:	80 e0       	ldi	r24, 0x00	; 0
    return true;

}
    4926:	cf 91       	pop	r28
    4928:	08 95       	ret

0000492a <_ZN4LEDs17getLEDHwParameterEh>:

uint8_t LEDs::getLEDHwParameter(uint8_t parameter)  {
    492a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    492c:	20 91 21 02 	lds	r18, 0x0221
    4930:	30 91 22 02 	lds	r19, 0x0222
    4934:	80 91 1f 02 	lds	r24, 0x021F
    4938:	90 91 20 02 	lds	r25, 0x0220
    493c:	82 0f       	add	r24, r18
    493e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4940:	20 91 33 02 	lds	r18, 0x0233
    4944:	22 23       	and	r18, r18
    4946:	a1 f0       	breq	.+40     	; 0x4970 <_ZN4LEDs17getLEDHwParameterEh+0x46>
    4948:	21 30       	cpi	r18, 0x01	; 1
    494a:	b9 f4       	brne	.+46     	; 0x497a <_ZN4LEDs17getLEDHwParameterEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    494c:	26 2f       	mov	r18, r22
    494e:	26 95       	lsr	r18
    4950:	26 95       	lsr	r18
    4952:	26 95       	lsr	r18
    4954:	c6 2f       	mov	r28, r22
    4956:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4958:	82 0f       	add	r24, r18
    495a:	91 1d       	adc	r25, r1
    495c:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <_ZN4LEDs17getLEDHwParameterEh+0x3e>
    4964:	95 95       	asr	r25
    4966:	87 95       	ror	r24
    4968:	ca 95       	dec	r28
    496a:	e2 f7       	brpl	.-8      	; 0x4964 <_ZN4LEDs17getLEDHwParameterEh+0x3a>
    496c:	81 70       	andi	r24, 0x01	; 1
    496e:	06 c0       	rjmp	.+12     	; 0x497c <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4970:	86 0f       	add	r24, r22
    4972:	91 1d       	adc	r25, r1
    4974:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4978:	01 c0       	rjmp	.+2      	; 0x497c <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

        }   return 0;
    497a:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter);

}
    497c:	cf 91       	pop	r28
    497e:	08 95       	ret

00004980 <_ZN4LEDs20getLEDActivationNoteEh>:

uint8_t LEDs::getLEDActivationNote(uint8_t ledNumber)   {
    4980:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4982:	20 91 23 02 	lds	r18, 0x0223
    4986:	30 91 24 02 	lds	r19, 0x0224
    498a:	80 91 1f 02 	lds	r24, 0x021F
    498e:	90 91 20 02 	lds	r25, 0x0220
    4992:	82 0f       	add	r24, r18
    4994:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4996:	20 91 34 02 	lds	r18, 0x0234
    499a:	22 23       	and	r18, r18
    499c:	a1 f0       	breq	.+40     	; 0x49c6 <_ZN4LEDs20getLEDActivationNoteEh+0x46>
    499e:	21 30       	cpi	r18, 0x01	; 1
    49a0:	b9 f4       	brne	.+46     	; 0x49d0 <_ZN4LEDs20getLEDActivationNoteEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    49a2:	26 2f       	mov	r18, r22
    49a4:	26 95       	lsr	r18
    49a6:	26 95       	lsr	r18
    49a8:	26 95       	lsr	r18
    49aa:	c6 2f       	mov	r28, r22
    49ac:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    49ae:	82 0f       	add	r24, r18
    49b0:	91 1d       	adc	r25, r1
    49b2:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	02 c0       	rjmp	.+4      	; 0x49be <_ZN4LEDs20getLEDActivationNoteEh+0x3e>
    49ba:	95 95       	asr	r25
    49bc:	87 95       	ror	r24
    49be:	ca 95       	dec	r28
    49c0:	e2 f7       	brpl	.-8      	; 0x49ba <_ZN4LEDs20getLEDActivationNoteEh+0x3a>
    49c2:	81 70       	andi	r24, 0x01	; 1
    49c4:	06 c0       	rjmp	.+12     	; 0x49d2 <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    49c6:	86 0f       	add	r24, r22
    49c8:	91 1d       	adc	r25, r1
    49ca:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    49ce:	01 c0       	rjmp	.+2      	; 0x49d2 <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

        }   return 0;
    49d0:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}
    49d2:	cf 91       	pop	r28
    49d4:	08 95       	ret

000049d6 <_ZN4LEDs14noteToLEDstateEhh>:

    return (receivedVelocity > 63);

}

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {
    49d6:	ef 92       	push	r14
    49d8:	ff 92       	push	r15
    49da:	0f 93       	push	r16
    49dc:	1f 93       	push	r17
    49de:	cf 93       	push	r28
    49e0:	df 93       	push	r29
    49e2:	8c 01       	movw	r16, r24
    49e4:	d6 2f       	mov	r29, r22
    49e6:	c4 2f       	mov	r28, r20

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    49e8:	61 e0       	ldi	r22, 0x01	; 1
    49ea:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    49ee:	61 e0       	ldi	r22, 0x01	; 1
    49f0:	81 11       	cpse	r24, r1
    49f2:	01 c0       	rjmp	.+2      	; 0x49f6 <_ZN4LEDs14noteToLEDstateEhh+0x20>
    49f4:	60 e0       	ldi	r22, 0x00	; 0
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    49f6:	66 23       	and	r22, r22
    49f8:	31 f0       	breq	.+12     	; 0x4a06 <_ZN4LEDs14noteToLEDstateEhh+0x30>

}

bool LEDs::velocity2blinkState(uint8_t receivedVelocity)    {

    return (receivedVelocity > 63);
    49fa:	ff 24       	eor	r15, r15
    49fc:	f3 94       	inc	r15
    49fe:	c0 34       	cpi	r28, 0x40	; 64
    4a00:	18 f4       	brcc	.+6      	; 0x4a08 <_ZN4LEDs14noteToLEDstateEhh+0x32>
    4a02:	f1 2c       	mov	r15, r1
    4a04:	01 c0       	rjmp	.+2      	; 0x4a08 <_ZN4LEDs14noteToLEDstateEhh+0x32>

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    4a06:	f1 2c       	mov	r15, r1
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor_t color = velocity2color(blinkEnabled_global, receivedVelocity);
    4a08:	4c 2f       	mov	r20, r28
    4a0a:	c8 01       	movw	r24, r16
    4a0c:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <_ZN4LEDs14velocity2colorEbh>
    4a10:	e8 2e       	mov	r14, r24
    4a12:	c0 e0       	ldi	r28, 0x00	; 0

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        if (getLEDActivationNote(i) == receivedNote)  {
    4a14:	6c 2f       	mov	r22, r28
    4a16:	c8 01       	movw	r24, r16
    4a18:	0e 94 c0 24 	call	0x4980	; 0x4980 <_ZN4LEDs20getLEDActivationNoteEh>
    4a1c:	8d 13       	cpse	r24, r29
    4a1e:	07 c0       	rjmp	.+14     	; 0x4a2e <_ZN4LEDs14noteToLEDstateEhh+0x58>

            board.setLEDstate(i, color, blinkEnabled_led);
    4a20:	2f 2d       	mov	r18, r15
    4a22:	4e 2d       	mov	r20, r14
    4a24:	6c 2f       	mov	r22, r28
    4a26:	81 e4       	ldi	r24, 0x41	; 65
    4a28:	92 e0       	ldi	r25, 0x02	; 2
    4a2a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4a2e:	cf 5f       	subi	r28, 0xFF	; 255
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor_t color = velocity2color(blinkEnabled_global, receivedVelocity);

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    4a30:	c0 33       	cpi	r28, 0x30	; 48
    4a32:	81 f7       	brne	.-32     	; 0x4a14 <_ZN4LEDs14noteToLEDstateEhh+0x3e>

        }

    }

}
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	1f 91       	pop	r17
    4a3a:	0f 91       	pop	r16
    4a3c:	ff 90       	pop	r15
    4a3e:	ef 90       	pop	r14
    4a40:	08 95       	ret

00004a42 <_ZN4LEDs19getLEDstartUpNumberEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}

uint8_t LEDs::getLEDstartUpNumber(uint8_t ledNumber)    {
    4a42:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4a44:	20 91 25 02 	lds	r18, 0x0225
    4a48:	30 91 26 02 	lds	r19, 0x0226
    4a4c:	80 91 1f 02 	lds	r24, 0x021F
    4a50:	90 91 20 02 	lds	r25, 0x0220
    4a54:	82 0f       	add	r24, r18
    4a56:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4a58:	20 91 35 02 	lds	r18, 0x0235
    4a5c:	22 23       	and	r18, r18
    4a5e:	a1 f0       	breq	.+40     	; 0x4a88 <_ZN4LEDs19getLEDstartUpNumberEh+0x46>
    4a60:	21 30       	cpi	r18, 0x01	; 1
    4a62:	b9 f4       	brne	.+46     	; 0x4a92 <_ZN4LEDs19getLEDstartUpNumberEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4a64:	26 2f       	mov	r18, r22
    4a66:	26 95       	lsr	r18
    4a68:	26 95       	lsr	r18
    4a6a:	26 95       	lsr	r18
    4a6c:	c6 2f       	mov	r28, r22
    4a6e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4a70:	82 0f       	add	r24, r18
    4a72:	91 1d       	adc	r25, r1
    4a74:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <_ZN4LEDs19getLEDstartUpNumberEh+0x3e>
    4a7c:	95 95       	asr	r25
    4a7e:	87 95       	ror	r24
    4a80:	ca 95       	dec	r28
    4a82:	e2 f7       	brpl	.-8      	; 0x4a7c <_ZN4LEDs19getLEDstartUpNumberEh+0x3a>
    4a84:	81 70       	andi	r24, 0x01	; 1
    4a86:	06 c0       	rjmp	.+12     	; 0x4a94 <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4a88:	86 0f       	add	r24, r22
    4a8a:	91 1d       	adc	r25, r1
    4a8c:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4a90:	01 c0       	rjmp	.+2      	; 0x4a94 <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

        }   return 0;
    4a92:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}
    4a94:	cf 91       	pop	r28
    4a96:	08 95       	ret

00004a98 <_ZN4LEDs11oneByOneLEDEbbb>:
    wait(1000);

}


void LEDs::oneByOneLED(bool ledDirection, bool singleLED, bool turnOn)  {
    4a98:	2f 92       	push	r2
    4a9a:	3f 92       	push	r3
    4a9c:	4f 92       	push	r4
    4a9e:	5f 92       	push	r5
    4aa0:	6f 92       	push	r6
    4aa2:	7f 92       	push	r7
    4aa4:	8f 92       	push	r8
    4aa6:	9f 92       	push	r9
    4aa8:	af 92       	push	r10
    4aaa:	bf 92       	push	r11
    4aac:	cf 92       	push	r12
    4aae:	df 92       	push	r13
    4ab0:	ef 92       	push	r14
    4ab2:	ff 92       	push	r15
    4ab4:	0f 93       	push	r16
    4ab6:	1f 93       	push	r17
    4ab8:	cf 93       	push	r28
    4aba:	df 93       	push	r29
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	e4 97       	sbiw	r28, 0x34	; 52
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	7c 01       	movw	r14, r24
    4ace:	26 2e       	mov	r2, r22
    4ad0:	44 2e       	mov	r4, r20
    4ad2:	82 2e       	mov	r8, r18
                    false means that all LEDs are lighted up and they turn off one by one, depending
                    on second argument

    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;
    4ad4:	62 e0       	ldi	r22, 0x02	; 2
    4ad6:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	9c 01       	movw	r18, r24
    4ade:	22 0f       	add	r18, r18
    4ae0:	33 1f       	adc	r19, r19
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	88 0f       	add	r24, r24
    4ae8:	99 1f       	adc	r25, r25
    4aea:	88 0f       	add	r24, r24
    4aec:	99 1f       	adc	r25, r25
    4aee:	a9 01       	movw	r20, r18
    4af0:	48 0f       	add	r20, r24
    4af2:	59 1f       	adc	r21, r25
    4af4:	5a ab       	std	Y+50, r21	; 0x32
    4af6:	49 ab       	std	Y+49, r20	; 0x31

    //index of LED to be processed next
    uint8_t ledNumber,
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);
    4af8:	60 e0       	ldi	r22, 0x00	; 0
    4afa:	c7 01       	movw	r24, r14
    4afc:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4b00:	98 2e       	mov	r9, r24

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    4b02:	68 2e       	mov	r6, r24
    4b04:	71 2c       	mov	r7, r1
    4b06:	16 14       	cp	r1, r6
    4b08:	17 04       	cpc	r1, r7
    4b0a:	94 f4       	brge	.+36     	; 0x4b30 <_ZN4LEDs11oneByOneLEDEbbb+0x98>
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	01 96       	adiw	r24, 0x01	; 1
    4b10:	6c 01       	movw	r12, r24
    4b12:	5c 01       	movw	r10, r24
    4b14:	a9 0c       	add	r10, r9
    4b16:	b1 1c       	adc	r11, r1
    4b18:	8c 01       	movw	r16, r24
    4b1a:	60 2f       	mov	r22, r16
    4b1c:	6c 19       	sub	r22, r12
        _ledNumber[i] = getLEDstartUpNumber(i);
    4b1e:	c7 01       	movw	r24, r14
    4b20:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_ZN4LEDs19getLEDstartUpNumberEh>
    4b24:	d8 01       	movw	r26, r16
    4b26:	8d 93       	st	X+, r24
    4b28:	8d 01       	movw	r16, r26
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    4b2a:	aa 15       	cp	r26, r10
    4b2c:	bb 05       	cpc	r27, r11
    4b2e:	a9 f7       	brne	.-22     	; 0x4b1a <_ZN4LEDs11oneByOneLEDEbbb+0x82>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    4b30:	41 10       	cpse	r4, r1
    4b32:	03 c0       	rjmp	.+6      	; 0x4b3a <_ZN4LEDs11oneByOneLEDEbbb+0xa2>
    4b34:	81 10       	cpse	r8, r1
    4b36:	b9 c0       	rjmp	.+370    	; 0x4caa <_ZN4LEDs11oneByOneLEDEbbb+0x212>
    4b38:	07 c0       	rjmp	.+14     	; 0x4b48 <_ZN4LEDs11oneByOneLEDEbbb+0xb0>
    4b3a:	c7 01       	movw	r24, r14
    4b3c:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN4LEDs12checkLEDsOffEv>
    4b40:	88 23       	and	r24, r24
    4b42:	29 f0       	breq	.+10     	; 0x4b4e <_ZN4LEDs11oneByOneLEDEbbb+0xb6>
    4b44:	81 10       	cpse	r8, r1
    4b46:	05 c0       	rjmp	.+10     	; 0x4b52 <_ZN4LEDs11oneByOneLEDEbbb+0xba>
    4b48:	c7 01       	movw	r24, r14
    4b4a:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN4LEDs9allLEDsOnEv>

    if (turnOn) {
    4b4e:	88 20       	and	r8, r8
    4b50:	a1 f1       	breq	.+104    	; 0x4bba <_ZN4LEDs11oneByOneLEDEbbb+0x122>
    //it is we increment or decrement ledNumber by one, depending on previous and current direction.
    //When function is called second time with direction different than previous one, the number of
    //times it needs to execute is reduced by one, therefore passCounter is incremented.

        //right-to-left direction
        if (!ledDirection)  {
    4b52:	21 10       	cpse	r2, r1
    4b54:	15 c0       	rjmp	.+42     	; 0x4b80 <_ZN4LEDs11oneByOneLEDEbbb+0xe8>

            //if last LED is turned on
            if (board.getLEDstate(_ledNumber[totalNumberOfLEDs-1]))  {
    4b56:	fe 01       	movw	r30, r28
    4b58:	e6 0d       	add	r30, r6
    4b5a:	f7 1d       	adc	r31, r7
    4b5c:	30 80       	ld	r3, Z
    4b5e:	63 2d       	mov	r22, r3
    4b60:	81 e4       	ldi	r24, 0x41	; 65
    4b62:	92 e0       	ldi	r25, 0x02	; 2
    4b64:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4b68:	88 23       	and	r24, r24
    4b6a:	b1 f0       	breq	.+44     	; 0x4b98 <_ZN4LEDs11oneByOneLEDEbbb+0x100>

                //LED index is penultimate LED number
                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    4b6c:	ef ef       	ldi	r30, 0xFF	; 255
    4b6e:	ff ef       	ldi	r31, 0xFF	; 255
    4b70:	ec 0f       	add	r30, r28
    4b72:	fd 1f       	adc	r31, r29
    4b74:	e6 0d       	add	r30, r6
    4b76:	f7 1d       	adc	r31, r7
    4b78:	30 80       	ld	r3, Z
                //increment counter since the loop has to run one cycle less
                passCounter++;
    4b7a:	55 24       	eor	r5, r5
    4b7c:	53 94       	inc	r5
    4b7e:	13 c0       	rjmp	.+38     	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>

        }   else {

            //left-to-right direction
            //if first LED is already on
            if (board.getLEDstate(_ledNumber[0]))    {
    4b80:	39 80       	ldd	r3, Y+1	; 0x01
    4b82:	63 2d       	mov	r22, r3
    4b84:	81 e4       	ldi	r24, 0x41	; 65
    4b86:	92 e0       	ldi	r25, 0x02	; 2
    4b88:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4b8c:	88 23       	and	r24, r24
    4b8e:	31 f0       	breq	.+12     	; 0x4b9c <_ZN4LEDs11oneByOneLEDEbbb+0x104>

                //led index is 1
                ledNumber = _ledNumber[1];
    4b90:	3a 80       	ldd	r3, Y+2	; 0x02
                //increment counter
                passCounter++;
    4b92:	55 24       	eor	r5, r5
    4b94:	53 94       	inc	r5
    4b96:	07 c0       	rjmp	.+14     	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;

    //while loop counter
    uint8_t passCounter = 0;
    4b98:	51 2c       	mov	r5, r1
    4b9a:	05 c0       	rjmp	.+10     	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4b9c:	51 2c       	mov	r5, r1
    4b9e:	03 c0       	rjmp	.+6      	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4ba0:	51 2c       	mov	r5, r1
    4ba2:	01 c0       	rjmp	.+2      	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4ba4:	51 2c       	mov	r5, r1

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4ba6:	05 2d       	mov	r16, r5
    4ba8:	10 e0       	ldi	r17, 0x00	; 0
    4baa:	63 01       	movw	r12, r6
    4bac:	bf ef       	ldi	r27, 0xFF	; 255
    4bae:	cb 1a       	sub	r12, r27
    4bb0:	db 0a       	sbc	r13, r27
    4bb2:	0c 15       	cp	r16, r12
    4bb4:	1d 05       	cpc	r17, r13
    4bb6:	24 f1       	brlt	.+72     	; 0x4c00 <_ZN4LEDs11oneByOneLEDEbbb+0x168>
    4bb8:	7e c0       	rjmp	.+252    	; 0x4cb6 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>
        //This is situation when all LEDs are turned on and we're turning them off one by one. Same
        //logic applies in both cases (see above). In this case we're not checking for whether the LED
        //is already turned on, but whether it's already turned off.

        //right-to-left direction
        if (!ledDirection)  {
    4bba:	21 10       	cpse	r2, r1
    4bbc:	15 c0       	rjmp	.+42     	; 0x4be8 <_ZN4LEDs11oneByOneLEDEbbb+0x150>

            if (!(board.getLEDstate(_ledNumber[totalNumberOfLEDs-1])))   {
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e6 0d       	add	r30, r6
    4bc2:	f7 1d       	adc	r31, r7
    4bc4:	30 80       	ld	r3, Z
    4bc6:	63 2d       	mov	r22, r3
    4bc8:	81 e4       	ldi	r24, 0x41	; 65
    4bca:	92 e0       	ldi	r25, 0x02	; 2
    4bcc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4bd0:	81 11       	cpse	r24, r1
    4bd2:	e6 cf       	rjmp	.-52     	; 0x4ba0 <_ZN4LEDs11oneByOneLEDEbbb+0x108>

                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    4bd4:	ef ef       	ldi	r30, 0xFF	; 255
    4bd6:	ff ef       	ldi	r31, 0xFF	; 255
    4bd8:	ec 0f       	add	r30, r28
    4bda:	fd 1f       	adc	r31, r29
    4bdc:	e6 0d       	add	r30, r6
    4bde:	f7 1d       	adc	r31, r7
    4be0:	30 80       	ld	r3, Z
                passCounter++;
    4be2:	55 24       	eor	r5, r5
    4be4:	53 94       	inc	r5
    4be6:	df cf       	rjmp	.-66     	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            }   else ledNumber = _ledNumber[totalNumberOfLEDs-1];

            }   else {

            //left-to-right direction
            if (!(board.getLEDstate(_ledNumber[0]))) {
    4be8:	39 80       	ldd	r3, Y+1	; 0x01
    4bea:	63 2d       	mov	r22, r3
    4bec:	81 e4       	ldi	r24, 0x41	; 65
    4bee:	92 e0       	ldi	r25, 0x02	; 2
    4bf0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4bf4:	81 11       	cpse	r24, r1
    4bf6:	d6 cf       	rjmp	.-84     	; 0x4ba4 <_ZN4LEDs11oneByOneLEDEbbb+0x10c>

                ledNumber = _ledNumber[1];
    4bf8:	3a 80       	ldd	r3, Y+2	; 0x02
                passCounter++;
    4bfa:	55 24       	eor	r5, r5
    4bfc:	53 94       	inc	r5
    4bfe:	d3 cf       	rjmp	.-90     	; 0x4ba6 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    4c00:	53 01       	movw	r10, r6
    4c02:	e1 e0       	ldi	r30, 0x01	; 1
    4c04:	ae 1a       	sub	r10, r30
    4c06:	b1 08       	sbc	r11, r1

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    4c08:	f2 e0       	ldi	r31, 0x02	; 2
    4c0a:	6f 1a       	sub	r6, r31
    4c0c:	71 08       	sbc	r7, r1
        }

        //always increment pass counter
        passCounter++;

        wait(startUpLEDswitchTime);
    4c0e:	a9 a9       	ldd	r26, Y+49	; 0x31
    4c10:	ba a9       	ldd	r27, Y+50	; 0x32
    4c12:	cd 01       	movw	r24, r26
    4c14:	a0 e0       	ldi	r26, 0x00	; 0
    4c16:	b0 e0       	ldi	r27, 0x00	; 0
    4c18:	89 ab       	std	Y+49, r24	; 0x31
    4c1a:	9a ab       	std	Y+50, r25	; 0x32
    4c1c:	ab ab       	std	Y+51, r26	; 0x33
    4c1e:	bc ab       	std	Y+52, r27	; 0x34

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {

        if (passCounter < totalNumberOfLEDs)    {
    4c20:	59 14       	cp	r5, r9
    4c22:	30 f5       	brcc	.+76     	; 0x4c70 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

            //if we're turning LEDs on one by one, turn all the other LEDs off
            if (singleLED && turnOn)            allLEDsOff();
    4c24:	44 20       	and	r4, r4
    4c26:	31 f0       	breq	.+12     	; 0x4c34 <_ZN4LEDs11oneByOneLEDEbbb+0x19c>
    4c28:	88 20       	and	r8, r8
    4c2a:	39 f0       	breq	.+14     	; 0x4c3a <_ZN4LEDs11oneByOneLEDEbbb+0x1a2>
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	0e 94 76 24 	call	0x48ec	; 0x48ec <_ZN4LEDs10allLEDsOffEv>
    4c32:	2b c0       	rjmp	.+86     	; 0x4c8a <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();
    4c34:	81 10       	cpse	r8, r1
    4c36:	29 c0       	rjmp	.+82     	; 0x4c8a <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>
    4c38:	30 c0       	rjmp	.+96     	; 0x4c9a <_ZN4LEDs11oneByOneLEDEbbb+0x202>
    4c3a:	c7 01       	movw	r24, r14
    4c3c:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN4LEDs9allLEDsOnEv>
    4c40:	2c c0       	rjmp	.+88     	; 0x4c9a <_ZN4LEDs11oneByOneLEDEbbb+0x202>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    4c42:	0a 15       	cp	r16, r10
    4c44:	1b 05       	cpc	r17, r11
    4c46:	a4 f4       	brge	.+40     	; 0x4c70 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    4c48:	21 10       	cpse	r2, r1
    4c4a:	0b c0       	rjmp	.+22     	; 0x4c62 <_ZN4LEDs11oneByOneLEDEbbb+0x1ca>
    4c4c:	f3 01       	movw	r30, r6
    4c4e:	e0 1b       	sub	r30, r16
    4c50:	f1 0b       	sbc	r31, r17
    4c52:	41 e0       	ldi	r20, 0x01	; 1
    4c54:	50 e0       	ldi	r21, 0x00	; 0
    4c56:	4c 0f       	add	r20, r28
    4c58:	5d 1f       	adc	r21, r29
    4c5a:	e4 0f       	add	r30, r20
    4c5c:	f5 1f       	adc	r31, r21
    4c5e:	30 80       	ld	r3, Z
    4c60:	07 c0       	rjmp	.+14     	; 0x4c70 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //left-to-right direction
                else    if (passCounter < totalNumberOfLEDs-1)  ledNumber = _ledNumber[passCounter+1];
    4c62:	e2 e0       	ldi	r30, 0x02	; 2
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	ec 0f       	add	r30, r28
    4c68:	fd 1f       	adc	r31, r29
    4c6a:	e0 0f       	add	r30, r16
    4c6c:	f1 1f       	adc	r31, r17
    4c6e:	30 80       	ld	r3, Z
            }

        }

        //always increment pass counter
        passCounter++;
    4c70:	53 94       	inc	r5

        wait(startUpLEDswitchTime);
    4c72:	69 a9       	ldd	r22, Y+49	; 0x31
    4c74:	7a a9       	ldd	r23, Y+50	; 0x32
    4c76:	8b a9       	ldd	r24, Y+51	; 0x33
    4c78:	9c a9       	ldd	r25, Y+52	; 0x34
    4c7a:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4c7e:	05 2d       	mov	r16, r5
    4c80:	10 e0       	ldi	r17, 0x00	; 0
    4c82:	0c 15       	cp	r16, r12
    4c84:	1d 05       	cpc	r17, r13
    4c86:	64 f2       	brlt	.-104    	; 0x4c20 <_ZN4LEDs11oneByOneLEDEbbb+0x188>
    4c88:	16 c0       	rjmp	.+44     	; 0x4cb6 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();

            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	48 e0       	ldi	r20, 0x08	; 8
    4c8e:	63 2d       	mov	r22, r3
    4c90:	81 e4       	ldi	r24, 0x41	; 65
    4c92:	92 e0       	ldi	r25, 0x02	; 2
    4c94:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4c98:	d4 cf       	rjmp	.-88     	; 0x4c42 <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
            else    board.setLEDstate(ledNumber, colorOff, false);
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	40 e0       	ldi	r20, 0x00	; 0
    4c9e:	63 2d       	mov	r22, r3
    4ca0:	81 e4       	ldi	r24, 0x41	; 65
    4ca2:	92 e0       	ldi	r25, 0x02	; 2
    4ca4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4ca8:	cc cf       	rjmp	.-104    	; 0x4c42 <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    4caa:	c7 01       	movw	r24, r14
    4cac:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN4LEDs12checkLEDsOffEv>
    4cb0:	81 11       	cpse	r24, r1
    4cb2:	48 cf       	rjmp	.-368    	; 0x4b44 <_ZN4LEDs11oneByOneLEDEbbb+0xac>
    4cb4:	4e cf       	rjmp	.-356    	; 0x4b52 <_ZN4LEDs11oneByOneLEDEbbb+0xba>

        wait(startUpLEDswitchTime);

    }

}
    4cb6:	e4 96       	adiw	r28, 0x34	; 52
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	5f 90       	pop	r5
    4ce0:	4f 90       	pop	r4
    4ce2:	3f 90       	pop	r3
    4ce4:	2f 90       	pop	r2
    4ce6:	08 95       	ret

00004ce8 <_ZN4LEDs16startUpAnimationEv>:
    //run LED animation on start-up
    startUpAnimation();

}

void LEDs::startUpAnimation() {
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	ec 01       	movw	r28, r24

    if (!getLEDHwParameter(ledHwParameterTotalLEDnumber) || !getLEDHwParameter(ledHwParameterStartUpSwitchTime))
    4cee:	60 e0       	ldi	r22, 0x00	; 0
    4cf0:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4cf4:	88 23       	and	r24, r24
    4cf6:	09 f4       	brne	.+2      	; 0x4cfa <_ZN4LEDs16startUpAnimationEv+0x12>
    4cf8:	79 c0       	rjmp	.+242    	; 0x4dec <_ZN4LEDs16startUpAnimationEv+0x104>
    4cfa:	62 e0       	ldi	r22, 0x02	; 2
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4d02:	88 23       	and	r24, r24
    4d04:	09 f4       	brne	.+2      	; 0x4d08 <_ZN4LEDs16startUpAnimationEv+0x20>
    4d06:	72 c0       	rjmp	.+228    	; 0x4dec <_ZN4LEDs16startUpAnimationEv+0x104>
        return;

    //turn off all LEDs before starting animation
    allLEDsOff();
    4d08:	ce 01       	movw	r24, r28
    4d0a:	0e 94 76 24 	call	0x48ec	; 0x48ec <_ZN4LEDs10allLEDsOffEv>

    switch (getLEDHwParameter(ledHwParameterStartUpRoutine))  {
    4d0e:	63 e0       	ldi	r22, 0x03	; 3
    4d10:	ce 01       	movw	r24, r28
    4d12:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4d16:	83 30       	cpi	r24, 0x03	; 3
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <_ZN4LEDs16startUpAnimationEv+0x34>
    4d1a:	3f c0       	rjmp	.+126    	; 0x4d9a <_ZN4LEDs16startUpAnimationEv+0xb2>
    4d1c:	28 f4       	brcc	.+10     	; 0x4d28 <_ZN4LEDs16startUpAnimationEv+0x40>
    4d1e:	81 30       	cpi	r24, 0x01	; 1
    4d20:	51 f0       	breq	.+20     	; 0x4d36 <_ZN4LEDs16startUpAnimationEv+0x4e>
    4d22:	82 30       	cpi	r24, 0x02	; 2
    4d24:	69 f1       	breq	.+90     	; 0x4d80 <_ZN4LEDs16startUpAnimationEv+0x98>
    4d26:	59 c0       	rjmp	.+178    	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>
    4d28:	84 30       	cpi	r24, 0x04	; 4
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <_ZN4LEDs16startUpAnimationEv+0x46>
    4d2c:	43 c0       	rjmp	.+134    	; 0x4db4 <_ZN4LEDs16startUpAnimationEv+0xcc>
    4d2e:	85 30       	cpi	r24, 0x05	; 5
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <_ZN4LEDs16startUpAnimationEv+0x4c>
    4d32:	4d c0       	rjmp	.+154    	; 0x4dce <_ZN4LEDs16startUpAnimationEv+0xe6>
    4d34:	52 c0       	rjmp	.+164    	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 1:
        oneByOneLED(true, true, true);
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	41 e0       	ldi	r20, 0x01	; 1
    4d3a:	61 e0       	ldi	r22, 0x01	; 1
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, true);
    4d42:	21 e0       	ldi	r18, 0x01	; 1
    4d44:	40 e0       	ldi	r20, 0x00	; 0
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	ce 01       	movw	r24, r28
    4d4a:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	40 e0       	ldi	r20, 0x00	; 0
    4d52:	61 e0       	ldi	r22, 0x01	; 1
    4d54:	ce 01       	movw	r24, r28
    4d56:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4d5a:	21 e0       	ldi	r18, 0x01	; 1
    4d5c:	41 e0       	ldi	r20, 0x01	; 1
    4d5e:	60 e0       	ldi	r22, 0x00	; 0
    4d60:	ce 01       	movw	r24, r28
    4d62:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, true);
    4d66:	21 e0       	ldi	r18, 0x01	; 1
    4d68:	40 e0       	ldi	r20, 0x00	; 0
    4d6a:	61 e0       	ldi	r22, 0x01	; 1
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	40 e0       	ldi	r20, 0x00	; 0
    4d76:	60 e0       	ldi	r22, 0x00	; 0
    4d78:	ce 01       	movw	r24, r28
    4d7a:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d7e:	2d c0       	rjmp	.+90     	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 2:
        oneByOneLED(true, false, true);
    4d80:	21 e0       	ldi	r18, 0x01	; 1
    4d82:	40 e0       	ldi	r20, 0x00	; 0
    4d84:	61 e0       	ldi	r22, 0x01	; 1
    4d86:	ce 01       	movw	r24, r28
    4d88:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	40 e0       	ldi	r20, 0x00	; 0
    4d90:	60 e0       	ldi	r22, 0x00	; 0
    4d92:	ce 01       	movw	r24, r28
    4d94:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d98:	20 c0       	rjmp	.+64     	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 3:
        oneByOneLED(true, true, true);
    4d9a:	21 e0       	ldi	r18, 0x01	; 1
    4d9c:	41 e0       	ldi	r20, 0x01	; 1
    4d9e:	61 e0       	ldi	r22, 0x01	; 1
    4da0:	ce 01       	movw	r24, r28
    4da2:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4da6:	21 e0       	ldi	r18, 0x01	; 1
    4da8:	41 e0       	ldi	r20, 0x01	; 1
    4daa:	60 e0       	ldi	r22, 0x00	; 0
    4dac:	ce 01       	movw	r24, r28
    4dae:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4db2:	13 c0       	rjmp	.+38     	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 4:
        oneByOneLED(true, false, true);
    4db4:	21 e0       	ldi	r18, 0x01	; 1
    4db6:	40 e0       	ldi	r20, 0x00	; 0
    4db8:	61 e0       	ldi	r22, 0x01	; 1
    4dba:	ce 01       	movw	r24, r28
    4dbc:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	40 e0       	ldi	r20, 0x00	; 0
    4dc4:	61 e0       	ldi	r22, 0x01	; 1
    4dc6:	ce 01       	movw	r24, r28
    4dc8:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 5:
        oneByOneLED(true, false, true);
    4dce:	21 e0       	ldi	r18, 0x01	; 1
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	61 e0       	ldi	r22, 0x01	; 1
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <_ZN4LEDs11oneByOneLEDEbbb>
        default:
        break;

    }

    allLEDsOff();
    4dda:	ce 01       	movw	r24, r28
    4ddc:	0e 94 76 24 	call	0x48ec	; 0x48ec <_ZN4LEDs10allLEDsOffEv>
    wait(1000);
    4de0:	68 ee       	ldi	r22, 0xE8	; 232
    4de2:	73 e0       	ldi	r23, 0x03	; 3
    4de4:	80 e0       	ldi	r24, 0x00	; 0
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>

}
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	08 95       	ret

00004df2 <_ZN4LEDs4initEv>:

    //def const

}

void LEDs::init()   {
    4df2:	af 92       	push	r10
    4df4:	bf 92       	push	r11
    4df6:	cf 92       	push	r12
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62
    4e08:	69 97       	sbiw	r28, 0x19	; 25
    4e0a:	0f b6       	in	r0, 0x3f	; 63
    4e0c:	f8 94       	cli
    4e0e:	de bf       	out	0x3e, r29	; 62
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	cd bf       	out	0x3d, r28	; 61
    4e14:	5c 01       	movw	r10, r24

    const subtype ledHardwareParameterSubtype   = { LED_HARDWARE_PARAMETERS, IGNORE_NEW_VALUE, IGNORE_NEW_VALUE };
    4e16:	85 e0       	ldi	r24, 0x05	; 5
    4e18:	8f 8b       	std	Y+23, r24	; 0x17
    4e1a:	8f ef       	ldi	r24, 0xFF	; 255
    4e1c:	88 8f       	std	Y+24, r24	; 0x18
    4e1e:	89 8f       	std	Y+25, r24	; 0x19
    const subtype ledActivationNoteSubtype      = { MAX_NUMBER_OF_LEDS, 0, 127 };
    4e20:	80 e3       	ldi	r24, 0x30	; 48
    4e22:	8c 8b       	std	Y+20, r24	; 0x14
    4e24:	1d 8a       	std	Y+21, r1	; 0x15
    4e26:	9f e7       	ldi	r25, 0x7F	; 127
    4e28:	9e 8b       	std	Y+22, r25	; 0x16
    const subtype ledStartUpNumberSubtype       = { MAX_NUMBER_OF_LEDS, 0, MAX_NUMBER_OF_LEDS-1 };
    4e2a:	89 8b       	std	Y+17, r24	; 0x11
    4e2c:	1a 8a       	std	Y+18, r1	; 0x12
    4e2e:	9f e2       	ldi	r25, 0x2F	; 47
    4e30:	9b 8b       	std	Y+19, r25	; 0x13
    const subtype ledRGBenabledSubtype          = { MAX_NUMBER_OF_RGB_LEDS, 0, 1 };
    4e32:	90 e1       	ldi	r25, 0x10	; 16
    4e34:	9e 87       	std	Y+14, r25	; 0x0e
    4e36:	1f 86       	std	Y+15, r1	; 0x0f
    4e38:	91 e0       	ldi	r25, 0x01	; 1
    4e3a:	98 8b       	std	Y+16, r25	; 0x10
    const subtype ledsStateSubtype              = { MAX_NUMBER_OF_LEDS, 0, LED_STATES-1 };
    4e3c:	8b 87       	std	Y+11, r24	; 0x0b
    4e3e:	1c 86       	std	Y+12, r1	; 0x0c
    4e40:	8e e0       	ldi	r24, 0x0E	; 14
    4e42:	8d 87       	std	Y+13, r24	; 0x0d
        &ledActivationNoteSubtype,
        &ledStartUpNumberSubtype,
        &ledRGBenabledSubtype,
        &ledsStateSubtype

    };
    4e44:	ce 01       	movw	r24, r28
    4e46:	47 96       	adiw	r24, 0x17	; 23
    4e48:	9a 83       	std	Y+2, r25	; 0x02
    4e4a:	89 83       	std	Y+1, r24	; 0x01
    4e4c:	03 97       	sbiw	r24, 0x03	; 3
    4e4e:	9c 83       	std	Y+4, r25	; 0x04
    4e50:	8b 83       	std	Y+3, r24	; 0x03
    4e52:	03 97       	sbiw	r24, 0x03	; 3
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
    4e58:	03 97       	sbiw	r24, 0x03	; 3
    4e5a:	98 87       	std	Y+8, r25	; 0x08
    4e5c:	8f 83       	std	Y+7, r24	; 0x07
    4e5e:	03 97       	sbiw	r24, 0x03	; 3
    4e60:	9a 87       	std	Y+10, r25	; 0x0a
    4e62:	89 87       	std	Y+9, r24	; 0x09

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);
    4e64:	45 e0       	ldi	r20, 0x05	; 5
    4e66:	64 e0       	ldi	r22, 0x04	; 4
    4e68:	82 e9       	ldi	r24, 0x92	; 146
    4e6a:	96 e0       	ldi	r25, 0x06	; 6
    4e6c:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN5SysEx14addMessageTypeEhh>
    4e70:	ce 01       	movw	r24, r28
    4e72:	01 96       	adiw	r24, 0x01	; 1
    4e74:	6c 01       	movw	r12, r24
    4e76:	10 e0       	ldi	r17, 0x00	; 0

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);
    4e78:	d6 01       	movw	r26, r12
    4e7a:	ed 91       	ld	r30, X+
    4e7c:	fd 91       	ld	r31, X+
    4e7e:	6d 01       	movw	r12, r26
    4e80:	e2 80       	ldd	r14, Z+2	; 0x02
    4e82:	01 81       	ldd	r16, Z+1	; 0x01
    4e84:	20 81       	ld	r18, Z
    4e86:	41 2f       	mov	r20, r17
    4e88:	64 e0       	ldi	r22, 0x04	; 4
    4e8a:	82 e9       	ldi	r24, 0x92	; 146
    4e8c:	96 e0       	ldi	r25, 0x06	; 6
    4e8e:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    4e92:	1f 5f       	subi	r17, 0xFF	; 255

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {
    4e94:	15 30       	cpi	r17, 0x05	; 5
    4e96:	81 f7       	brne	.-32     	; 0x4e78 <_ZN4LEDs4initEv+0x86>
        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);

    }

    board.setLEDblinkTime(getLEDHwParameter(ledHwParameterBlinkTime));
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	c5 01       	movw	r24, r10
    4e9c:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4ea0:	68 2f       	mov	r22, r24
    4ea2:	70 e0       	ldi	r23, 0x00	; 0
    4ea4:	81 e4       	ldi	r24, 0x41	; 65
    4ea6:	92 e0       	ldi	r25, 0x02	; 2
    4ea8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN5Board15setLEDblinkTimeEj>
    board.setLEDTransitionSpeed(getLEDHwParameter(ledHwParameterFadeTime));
    4eac:	64 e0       	ldi	r22, 0x04	; 4
    4eae:	c5 01       	movw	r24, r10
    4eb0:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4eb4:	68 2f       	mov	r22, r24
    4eb6:	81 e4       	ldi	r24, 0x41	; 65
    4eb8:	92 e0       	ldi	r25, 0x02	; 2
    4eba:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>

    //run LED animation on start-up
    startUpAnimation();
    4ebe:	c5 01       	movw	r24, r10
    4ec0:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <_ZN4LEDs16startUpAnimationEv>

}
    4ec4:	69 96       	adiw	r28, 0x19	; 25
    4ec6:	0f b6       	in	r0, 0x3f	; 63
    4ec8:	f8 94       	cli
    4eca:	de bf       	out	0x3e, r29	; 62
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	cd bf       	out	0x3d, r28	; 61
    4ed0:	df 91       	pop	r29
    4ed2:	cf 91       	pop	r28
    4ed4:	1f 91       	pop	r17
    4ed6:	0f 91       	pop	r16
    4ed8:	ef 90       	pop	r14
    4eda:	df 90       	pop	r13
    4edc:	cf 90       	pop	r12
    4ede:	bf 90       	pop	r11
    4ee0:	af 90       	pop	r10
    4ee2:	08 95       	ret

00004ee4 <_ZN4LEDs13getRGBenabledEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}

bool LEDs::getRGBenabled(uint8_t ledNumber) {
    4ee4:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4ee6:	20 91 27 02 	lds	r18, 0x0227
    4eea:	30 91 28 02 	lds	r19, 0x0228
    4eee:	80 91 1f 02 	lds	r24, 0x021F
    4ef2:	90 91 20 02 	lds	r25, 0x0220
    4ef6:	82 0f       	add	r24, r18
    4ef8:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4efa:	20 91 36 02 	lds	r18, 0x0236
    4efe:	22 23       	and	r18, r18
    4f00:	a9 f0       	breq	.+42     	; 0x4f2c <_ZN4LEDs13getRGBenabledEh+0x48>
    4f02:	21 30       	cpi	r18, 0x01	; 1
    4f04:	c9 f4       	brne	.+50     	; 0x4f38 <_ZN4LEDs13getRGBenabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4f06:	26 2f       	mov	r18, r22
    4f08:	26 95       	lsr	r18
    4f0a:	26 95       	lsr	r18
    4f0c:	26 95       	lsr	r18
    4f0e:	c6 2f       	mov	r28, r22
    4f10:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4f12:	82 0f       	add	r24, r18
    4f14:	91 1d       	adc	r25, r1
    4f16:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <_ZN4LEDs13getRGBenabledEh+0x3e>
    4f1e:	95 95       	asr	r25
    4f20:	87 95       	ror	r24
    4f22:	ca 95       	dec	r28
    4f24:	e2 f7       	brpl	.-8      	; 0x4f1e <_ZN4LEDs13getRGBenabledEh+0x3a>
    4f26:	98 2f       	mov	r25, r24
    4f28:	91 70       	andi	r25, 0x01	; 1
    4f2a:	07 c0       	rjmp	.+14     	; 0x4f3a <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4f2c:	86 0f       	add	r24, r22
    4f2e:	91 1d       	adc	r25, r1
    4f30:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    4f34:	98 2f       	mov	r25, r24
    4f36:	01 c0       	rjmp	.+2      	; 0x4f3a <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

        }   return 0;
    4f38:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber);
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	91 11       	cpse	r25, r1
    4f3e:	01 c0       	rjmp	.+2      	; 0x4f42 <_ZN4LEDs13getRGBenabledEh+0x5e>
    4f40:	80 e0       	ldi	r24, 0x00	; 0

}
    4f42:	cf 91       	pop	r28
    4f44:	08 95       	ret

00004f46 <_ZN4LEDs12getParameterEhh>:

uint8_t LEDs::getParameter(uint8_t messageType, uint8_t parameterID)   {

    switch(messageType) {
    4f46:	62 30       	cpi	r22, 0x02	; 2
    4f48:	a9 f0       	breq	.+42     	; 0x4f74 <_ZN4LEDs12getParameterEhh+0x2e>
    4f4a:	28 f4       	brcc	.+10     	; 0x4f56 <_ZN4LEDs12getParameterEhh+0x10>
    4f4c:	66 23       	and	r22, r22
    4f4e:	41 f0       	breq	.+16     	; 0x4f60 <_ZN4LEDs12getParameterEhh+0x1a>
    4f50:	61 30       	cpi	r22, 0x01	; 1
    4f52:	59 f0       	breq	.+22     	; 0x4f6a <_ZN4LEDs12getParameterEhh+0x24>
    4f54:	23 c0       	rjmp	.+70     	; 0x4f9c <_ZN4LEDs12getParameterEhh+0x56>
    4f56:	63 30       	cpi	r22, 0x03	; 3
    4f58:	91 f0       	breq	.+36     	; 0x4f7e <_ZN4LEDs12getParameterEhh+0x38>
    4f5a:	64 30       	cpi	r22, 0x04	; 4
    4f5c:	a9 f0       	breq	.+42     	; 0x4f88 <_ZN4LEDs12getParameterEhh+0x42>
    4f5e:	1e c0       	rjmp	.+60     	; 0x4f9c <_ZN4LEDs12getParameterEhh+0x56>

        case ledHardwareParameterConf:
        return getLEDHwParameter(parameterID);
    4f60:	64 2f       	mov	r22, r20
    4f62:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN4LEDs17getLEDHwParameterEh>
    4f66:	98 2f       	mov	r25, r24
    4f68:	1a c0       	rjmp	.+52     	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledActivationNoteConf:
        return getLEDActivationNote(parameterID);
    4f6a:	64 2f       	mov	r22, r20
    4f6c:	0e 94 c0 24 	call	0x4980	; 0x4980 <_ZN4LEDs20getLEDActivationNoteEh>
    4f70:	98 2f       	mov	r25, r24
    4f72:	15 c0       	rjmp	.+42     	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStartUpNumberConf:
        return getLEDstartUpNumber(parameterID);
    4f74:	64 2f       	mov	r22, r20
    4f76:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_ZN4LEDs19getLEDstartUpNumberEh>
    4f7a:	98 2f       	mov	r25, r24
    4f7c:	10 c0       	rjmp	.+32     	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledRGBenabledConf:
        return getRGBenabled(parameterID);
    4f7e:	64 2f       	mov	r22, r20
    4f80:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN4LEDs13getRGBenabledEh>
    4f84:	98 2f       	mov	r25, r24
    4f86:	0b c0       	rjmp	.+22     	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStateConf:
        return (bool)board.getLEDstate(parameterID);
    4f88:	64 2f       	mov	r22, r20
    4f8a:	81 e4       	ldi	r24, 0x41	; 65
    4f8c:	92 e0       	ldi	r25, 0x02	; 2
    4f8e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4f92:	91 e0       	ldi	r25, 0x01	; 1
    4f94:	81 11       	cpse	r24, r1
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	01 c0       	rjmp	.+2      	; 0x4f9e <_ZN4LEDs12getParameterEhh+0x58>
        break;

    }   return 0;
    4f9c:	90 e0       	ldi	r25, 0x00	; 0

}
    4f9e:	89 2f       	mov	r24, r25
    4fa0:	08 95       	ret

00004fa2 <_ZN4LEDs17setLEDHwParameterEhh>:


bool LEDs::setLEDHwParameter(uint8_t parameter, uint8_t newParameter) {
    4fa2:	0f 93       	push	r16
    4fa4:	cf 93       	push	r28
    4fa6:	c4 2f       	mov	r28, r20

    //some special considerations here
    switch(parameter)   {
    4fa8:	62 30       	cpi	r22, 0x02	; 2
    4faa:	d9 f0       	breq	.+54     	; 0x4fe2 <_ZN4LEDs17setLEDHwParameterEhh+0x40>
    4fac:	18 f4       	brcc	.+6      	; 0x4fb4 <_ZN4LEDs17setLEDHwParameterEhh+0x12>
    4fae:	61 30       	cpi	r22, 0x01	; 1
    4fb0:	31 f0       	breq	.+12     	; 0x4fbe <_ZN4LEDs17setLEDHwParameterEhh+0x1c>
    4fb2:	29 c0       	rjmp	.+82     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4fb4:	63 30       	cpi	r22, 0x03	; 3
    4fb6:	f1 f0       	breq	.+60     	; 0x4ff4 <_ZN4LEDs17setLEDHwParameterEhh+0x52>
    4fb8:	64 30       	cpi	r22, 0x04	; 4
    4fba:	51 f0       	breq	.+20     	; 0x4fd0 <_ZN4LEDs17setLEDHwParameterEhh+0x2e>
    4fbc:	24 c0       	rjmp	.+72     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>

        case ledHwParameterBlinkTime:
        if ((newParameter < BLINK_TIME_MIN) || (newParameter > BLINK_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4fbe:	40 31       	cpi	r20, 0x10	; 16
    4fc0:	10 f1       	brcs	.+68     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4fc2:	66 e0       	ldi	r22, 0x06	; 6
    4fc4:	82 e9       	ldi	r24, 0x92	; 146
    4fc6:	96 e0       	ldi	r25, 0x06	; 6
    4fc8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	3c c0       	rjmp	.+120    	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterFadeTime:
        if ((newParameter < FADE_TIME_MIN) || (newParameter > FADE_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4fd0:	4b 30       	cpi	r20, 0x0B	; 11
    4fd2:	c8 f0       	brcs	.+50     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4fd4:	66 e0       	ldi	r22, 0x06	; 6
    4fd6:	82 e9       	ldi	r24, 0x92	; 146
    4fd8:	96 e0       	ldi	r25, 0x06	; 6
    4fda:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	33 c0       	rjmp	.+102    	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpSwitchTime:
        if ((newParameter < START_UP_SWITCH_TIME_MIN) || (newParameter > START_UP_SWITCH_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4fe2:	49 37       	cpi	r20, 0x79	; 121
    4fe4:	80 f0       	brcs	.+32     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4fe6:	66 e0       	ldi	r22, 0x06	; 6
    4fe8:	82 e9       	ldi	r24, 0x92	; 146
    4fea:	96 e0       	ldi	r25, 0x06	; 6
    4fec:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	2a c0       	rjmp	.+84     	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpRoutine:
        if (newParameter > NUMBER_OF_START_UP_ANIMATIONS) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4ff4:	46 30       	cpi	r20, 0x06	; 6
    4ff6:	38 f0       	brcs	.+14     	; 0x5006 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4ff8:	66 e0       	ldi	r22, 0x06	; 6
    4ffa:	82 e9       	ldi	r24, 0x92	; 146
    4ffc:	96 e0       	ldi	r25, 0x06	; 6
    4ffe:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
    5002:	80 e0       	ldi	r24, 0x00	; 0
    5004:	21 c0       	rjmp	.+66     	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        default:
        break;

    }

    bool returnValue = configuration.writeParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter, newParameter);
    5006:	0c 2f       	mov	r16, r28
    5008:	26 2f       	mov	r18, r22
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	64 e0       	ldi	r22, 0x04	; 4
    500e:	8a e9       	ldi	r24, 0x9A	; 154
    5010:	91 e0       	ldi	r25, 0x01	; 1
    5012:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

    if (returnValue)    {
    5016:	88 23       	and	r24, r24
    5018:	a1 f0       	breq	.+40     	; 0x5042 <_ZN4LEDs17setLEDHwParameterEhh+0xa0>

        switch(newParameter)    {
    501a:	c1 30       	cpi	r28, 0x01	; 1
    501c:	19 f0       	breq	.+6      	; 0x5024 <_ZN4LEDs17setLEDHwParameterEhh+0x82>
    501e:	c4 30       	cpi	r28, 0x04	; 4
    5020:	49 f0       	breq	.+18     	; 0x5034 <_ZN4LEDs17setLEDHwParameterEhh+0x92>
    5022:	11 c0       	rjmp	.+34     	; 0x5046 <_ZN4LEDs17setLEDHwParameterEhh+0xa4>

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
    5024:	61 e0       	ldi	r22, 0x01	; 1
    5026:	70 e0       	ldi	r23, 0x00	; 0
    5028:	81 e4       	ldi	r24, 0x41	; 65
    502a:	92 e0       	ldi	r25, 0x02	; 2
    502c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN5Board15setLEDblinkTimeEj>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    5030:	81 e0       	ldi	r24, 0x01	; 1

        switch(newParameter)    {

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
            break;
    5032:	0a c0       	rjmp	.+20     	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
    5034:	64 e0       	ldi	r22, 0x04	; 4
    5036:	81 e4       	ldi	r24, 0x41	; 65
    5038:	92 e0       	ldi	r25, 0x02	; 2
    503a:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>
            break;

        }   return true;
    503e:	81 e0       	ldi	r24, 0x01	; 1
            board.setLEDblinkTime(newParameter);
            break;

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;
    5040:	03 c0       	rjmp	.+6      	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

        }   return true;

    }   return false;
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	01 c0       	rjmp	.+2      	; 0x5048 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    5046:	81 e0       	ldi	r24, 0x01	; 1

    }   return false;

}
    5048:	cf 91       	pop	r28
    504a:	0f 91       	pop	r16
    504c:	08 95       	ret

0000504e <_ZN4LEDs20setLEDActivationNoteEhh>:

bool LEDs::setLEDActivationNote(uint8_t ledNumber, uint8_t ledActNote) {
    504e:	0f 93       	push	r16
    5050:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber, ledActNote);
    5052:	04 2f       	mov	r16, r20
    5054:	41 e0       	ldi	r20, 0x01	; 1
    5056:	64 e0       	ldi	r22, 0x04	; 4
    5058:	8a e9       	ldi	r24, 0x9A	; 154
    505a:	91 e0       	ldi	r25, 0x01	; 1
    505c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    5060:	0f 91       	pop	r16
    5062:	08 95       	ret

00005064 <_ZN4LEDs17setLEDstartNumberEhh>:

bool LEDs::setLEDstartNumber(uint8_t startNumber, uint8_t ledNumber) {
    5064:	0f 93       	push	r16
    5066:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledStartUpNumberSection, startNumber, ledNumber);
    5068:	04 2f       	mov	r16, r20
    506a:	42 e0       	ldi	r20, 0x02	; 2
    506c:	64 e0       	ldi	r22, 0x04	; 4
    506e:	8a e9       	ldi	r24, 0x9A	; 154
    5070:	91 e0       	ldi	r25, 0x01	; 1
    5072:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    5076:	0f 91       	pop	r16
    5078:	08 95       	ret

0000507a <_ZN4LEDs13setRGBenabledEhb>:

bool LEDs::setRGBenabled(uint8_t ledNumber, bool state) {
    507a:	0f 93       	push	r16
    507c:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber, state);
    507e:	04 2f       	mov	r16, r20
    5080:	43 e0       	ldi	r20, 0x03	; 3
    5082:	64 e0       	ldi	r22, 0x04	; 4
    5084:	8a e9       	ldi	r24, 0x9A	; 154
    5086:	91 e0       	ldi	r25, 0x01	; 1
    5088:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    508c:	0f 91       	pop	r16
    508e:	08 95       	ret

00005090 <_ZN4LEDs12setParameterEhhh>:

bool LEDs::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    5090:	34 2f       	mov	r19, r20

    switch(messageType) {
    5092:	62 30       	cpi	r22, 0x02	; 2
    5094:	a9 f0       	breq	.+42     	; 0x50c0 <_ZN4LEDs12setParameterEhhh+0x30>
    5096:	28 f4       	brcc	.+10     	; 0x50a2 <_ZN4LEDs12setParameterEhhh+0x12>
    5098:	66 23       	and	r22, r22
    509a:	41 f0       	breq	.+16     	; 0x50ac <_ZN4LEDs12setParameterEhhh+0x1c>
    509c:	61 30       	cpi	r22, 0x01	; 1
    509e:	59 f0       	breq	.+22     	; 0x50b6 <_ZN4LEDs12setParameterEhhh+0x26>
    50a0:	ae c0       	rjmp	.+348    	; 0x51fe <_ZN4LEDs12setParameterEhhh+0x16e>
    50a2:	63 30       	cpi	r22, 0x03	; 3
    50a4:	91 f0       	breq	.+36     	; 0x50ca <_ZN4LEDs12setParameterEhhh+0x3a>
    50a6:	64 30       	cpi	r22, 0x04	; 4
    50a8:	c1 f0       	breq	.+48     	; 0x50da <_ZN4LEDs12setParameterEhhh+0x4a>
    50aa:	a9 c0       	rjmp	.+338    	; 0x51fe <_ZN4LEDs12setParameterEhhh+0x16e>

        case ledHardwareParameterConf:
        return setLEDHwParameter(parameter, newParameter);
    50ac:	42 2f       	mov	r20, r18
    50ae:	63 2f       	mov	r22, r19
    50b0:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <_ZN4LEDs17setLEDHwParameterEhh>
    50b4:	08 95       	ret
        break;

        case ledActivationNoteConf:
        return setLEDActivationNote(parameter, newParameter);
    50b6:	42 2f       	mov	r20, r18
    50b8:	63 2f       	mov	r22, r19
    50ba:	0e 94 27 28 	call	0x504e	; 0x504e <_ZN4LEDs20setLEDActivationNoteEhh>
    50be:	08 95       	ret
        break;

        case ledStartUpNumberConf:
        return setLEDstartNumber(parameter, newParameter);
    50c0:	42 2f       	mov	r20, r18
    50c2:	63 2f       	mov	r22, r19
    50c4:	0e 94 32 28 	call	0x5064	; 0x5064 <_ZN4LEDs17setLEDstartNumberEhh>
    50c8:	08 95       	ret
        break;

        case ledRGBenabledConf:
        return setRGBenabled(parameter, newParameter);
    50ca:	41 e0       	ldi	r20, 0x01	; 1
    50cc:	21 11       	cpse	r18, r1
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <_ZN4LEDs12setParameterEhhh+0x42>
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	63 2f       	mov	r22, r19
    50d4:	0e 94 3d 28 	call	0x507a	; 0x507a <_ZN4LEDs13setRGBenabledEhb>
    50d8:	08 95       	ret
        break;

        case ledStateConf:
        switch ((ledStatesHardwareParameter)newParameter)   {
    50da:	82 2f       	mov	r24, r18
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	8f 30       	cpi	r24, 0x0F	; 15
    50e0:	91 05       	cpc	r25, r1
    50e2:	08 f0       	brcs	.+2      	; 0x50e6 <_ZN4LEDs12setParameterEhhh+0x56>
    50e4:	8e c0       	rjmp	.+284    	; 0x5202 <_ZN4LEDs12setParameterEhhh+0x172>
    50e6:	fc 01       	movw	r30, r24
    50e8:	e0 52       	subi	r30, 0x20	; 32
    50ea:	ff 4f       	sbci	r31, 0xFF	; 255
    50ec:	0c 94 3e 30 	jmp	0x607c	; 0x607c <__tablejump2__>

            case ledStateOff:
            board.setLEDstate(parameter, colorOff, false);
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	40 e0       	ldi	r20, 0x00	; 0
    50f4:	63 2f       	mov	r22, r19
    50f6:	81 e4       	ldi	r24, 0x41	; 65
    50f8:	92 e0       	ldi	r25, 0x02	; 2
    50fa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	08 95       	ret
            break;

            case ledStateConstantWhite:
            board.setLEDstate(parameter, colorWhite, false);
    5102:	20 e0       	ldi	r18, 0x00	; 0
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	63 2f       	mov	r22, r19
    5108:	81 e4       	ldi	r24, 0x41	; 65
    510a:	92 e0       	ldi	r25, 0x02	; 2
    510c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	08 95       	ret
            break;

            case ledStateConstantCyan:
            board.setLEDstate(parameter, colorCyan, false);
    5114:	20 e0       	ldi	r18, 0x00	; 0
    5116:	42 e0       	ldi	r20, 0x02	; 2
    5118:	63 2f       	mov	r22, r19
    511a:	81 e4       	ldi	r24, 0x41	; 65
    511c:	92 e0       	ldi	r25, 0x02	; 2
    511e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	08 95       	ret
            break;

            case ledStateConstantMagenta:
            board.setLEDstate(parameter, colorMagenta, false);
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	43 e0       	ldi	r20, 0x03	; 3
    512a:	63 2f       	mov	r22, r19
    512c:	81 e4       	ldi	r24, 0x41	; 65
    512e:	92 e0       	ldi	r25, 0x02	; 2
    5130:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	08 95       	ret
            break;

            case ledStateConstantRed:
            board.setLEDstate(parameter, colorRed, false);
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	44 e0       	ldi	r20, 0x04	; 4
    513c:	63 2f       	mov	r22, r19
    513e:	81 e4       	ldi	r24, 0x41	; 65
    5140:	92 e0       	ldi	r25, 0x02	; 2
    5142:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	08 95       	ret
            break;

            case ledStateConstantBlue:
            board.setLEDstate(parameter, colorBlue, false);
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	45 e0       	ldi	r20, 0x05	; 5
    514e:	63 2f       	mov	r22, r19
    5150:	81 e4       	ldi	r24, 0x41	; 65
    5152:	92 e0       	ldi	r25, 0x02	; 2
    5154:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	08 95       	ret
            break;

            case ledStateConstantYellow:
            board.setLEDstate(parameter, colorYellow, false);
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	46 e0       	ldi	r20, 0x06	; 6
    5160:	63 2f       	mov	r22, r19
    5162:	81 e4       	ldi	r24, 0x41	; 65
    5164:	92 e0       	ldi	r25, 0x02	; 2
    5166:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	08 95       	ret
            break;

            case ledStateConstantGreen:
            board.setLEDstate(parameter, colorGreen, false);
    516e:	20 e0       	ldi	r18, 0x00	; 0
    5170:	47 e0       	ldi	r20, 0x07	; 7
    5172:	63 2f       	mov	r22, r19
    5174:	81 e4       	ldi	r24, 0x41	; 65
    5176:	92 e0       	ldi	r25, 0x02	; 2
    5178:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	08 95       	ret
            break;

            case ledStateBlinkWhite:
            board.setLEDstate(parameter, colorWhite, true);
    5180:	21 e0       	ldi	r18, 0x01	; 1
    5182:	41 e0       	ldi	r20, 0x01	; 1
    5184:	63 2f       	mov	r22, r19
    5186:	81 e4       	ldi	r24, 0x41	; 65
    5188:	92 e0       	ldi	r25, 0x02	; 2
    518a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	08 95       	ret
            break;

            case ledStateBlinkCyan:
            board.setLEDstate(parameter, colorCyan, true);
    5192:	21 e0       	ldi	r18, 0x01	; 1
    5194:	42 e0       	ldi	r20, 0x02	; 2
    5196:	63 2f       	mov	r22, r19
    5198:	81 e4       	ldi	r24, 0x41	; 65
    519a:	92 e0       	ldi	r25, 0x02	; 2
    519c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	08 95       	ret
            break;

            case ledStateBlinkMagenta:
            board.setLEDstate(parameter, colorMagenta, true);
    51a4:	21 e0       	ldi	r18, 0x01	; 1
    51a6:	43 e0       	ldi	r20, 0x03	; 3
    51a8:	63 2f       	mov	r22, r19
    51aa:	81 e4       	ldi	r24, 0x41	; 65
    51ac:	92 e0       	ldi	r25, 0x02	; 2
    51ae:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	08 95       	ret
            break;

            case ledStateBlinkRed:
            board.setLEDstate(parameter, colorRed, true);
    51b6:	21 e0       	ldi	r18, 0x01	; 1
    51b8:	44 e0       	ldi	r20, 0x04	; 4
    51ba:	63 2f       	mov	r22, r19
    51bc:	81 e4       	ldi	r24, 0x41	; 65
    51be:	92 e0       	ldi	r25, 0x02	; 2
    51c0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	08 95       	ret
            break;

            case ledStateBlinkBlue:
            board.setLEDstate(parameter, colorBlue, true);
    51c8:	21 e0       	ldi	r18, 0x01	; 1
    51ca:	45 e0       	ldi	r20, 0x05	; 5
    51cc:	63 2f       	mov	r22, r19
    51ce:	81 e4       	ldi	r24, 0x41	; 65
    51d0:	92 e0       	ldi	r25, 0x02	; 2
    51d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	08 95       	ret
            break;

            case ledStateBlinkYellow:
            board.setLEDstate(parameter, colorYellow, true);
    51da:	21 e0       	ldi	r18, 0x01	; 1
    51dc:	46 e0       	ldi	r20, 0x06	; 6
    51de:	63 2f       	mov	r22, r19
    51e0:	81 e4       	ldi	r24, 0x41	; 65
    51e2:	92 e0       	ldi	r25, 0x02	; 2
    51e4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	08 95       	ret
            break;

            case ledStateBlinkGreen:
            board.setLEDstate(parameter, colorGreen, true);
    51ec:	21 e0       	ldi	r18, 0x01	; 1
    51ee:	47 e0       	ldi	r20, 0x07	; 7
    51f0:	63 2f       	mov	r22, r19
    51f2:	81 e4       	ldi	r24, 0x41	; 65
    51f4:	92 e0       	ldi	r25, 0x02	; 2
    51f6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	08 95       	ret
            break;

        }
        break;

    }   return false;
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	08 95       	ret
            board.setLEDstate(parameter, colorGreen, true);
            return true;
            break;

            default:
            return false;
    5202:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;

    }   return false;

}
    5204:	08 95       	ret

00005206 <_ZN4MIDI9sendSysExEPhh>:
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, usbInterface);
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, dinInterface);

}

void MIDI::sendSysEx(uint8_t *sysExArray, uint8_t arraySize)   {
    5206:	0f 93       	push	r16

    switch (source) {
    5208:	fc 01       	movw	r30, r24
    520a:	84 81       	ldd	r24, Z+4	; 0x04
    520c:	88 23       	and	r24, r24
    520e:	19 f0       	breq	.+6      	; 0x5216 <_ZN4MIDI9sendSysExEPhh+0x10>
    5210:	81 30       	cpi	r24, 0x01	; 1
    5212:	61 f0       	breq	.+24     	; 0x522c <_ZN4MIDI9sendSysExEPhh+0x26>
    5214:	15 c0       	rjmp	.+42     	; 0x5240 <_ZN4MIDI9sendSysExEPhh+0x3a>

        case dinInterface:
        hwMIDI.sendSysEx(arraySize, sysExArray, false, dinInterface);
    5216:	84 2f       	mov	r24, r20
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	00 e0       	ldi	r16, 0x00	; 0
    521c:	20 e0       	ldi	r18, 0x00	; 0
    521e:	ab 01       	movw	r20, r22
    5220:	bc 01       	movw	r22, r24
    5222:	81 e9       	ldi	r24, 0x91	; 145
    5224:	93 e0       	ldi	r25, 0x03	; 3
    5226:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
        break;
    522a:	0a c0       	rjmp	.+20     	; 0x5240 <_ZN4MIDI9sendSysExEPhh+0x3a>

        case usbInterface:
        hwMIDI.sendSysEx(arraySize, sysExArray, false, usbInterface);
    522c:	84 2f       	mov	r24, r20
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	01 e0       	ldi	r16, 0x01	; 1
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	ab 01       	movw	r20, r22
    5236:	bc 01       	movw	r22, r24
    5238:	81 e9       	ldi	r24, 0x91	; 145
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
        break;

    }

}
    5240:	0f 91       	pop	r16
    5242:	08 95       	ret

00005244 <_ZN4MIDI10getFeatureEh>:


bool MIDI::getFeature(uint8_t featureID)  {
    5244:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    5246:	ea e9       	ldi	r30, 0x9A	; 154
    5248:	f1 e0       	ldi	r31, 0x01	; 1
    524a:	23 81       	ldd	r18, Z+3	; 0x03
    524c:	34 81       	ldd	r19, Z+4	; 0x04
    524e:	81 81       	ldd	r24, Z+1	; 0x01
    5250:	92 81       	ldd	r25, Z+2	; 0x02
    5252:	82 0f       	add	r24, r18
    5254:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    5256:	25 89       	ldd	r18, Z+21	; 0x15
    5258:	22 23       	and	r18, r18
    525a:	a9 f0       	breq	.+42     	; 0x5286 <_ZN4MIDI10getFeatureEh+0x42>
    525c:	21 30       	cpi	r18, 0x01	; 1
    525e:	c9 f4       	brne	.+50     	; 0x5292 <_ZN4MIDI10getFeatureEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    5260:	26 2f       	mov	r18, r22
    5262:	26 95       	lsr	r18
    5264:	26 95       	lsr	r18
    5266:	26 95       	lsr	r18
    5268:	c6 2f       	mov	r28, r22
    526a:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    526c:	82 0f       	add	r24, r18
    526e:	91 1d       	adc	r25, r1
    5270:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	02 c0       	rjmp	.+4      	; 0x527c <_ZN4MIDI10getFeatureEh+0x38>
    5278:	95 95       	asr	r25
    527a:	87 95       	ror	r24
    527c:	ca 95       	dec	r28
    527e:	e2 f7       	brpl	.-8      	; 0x5278 <_ZN4MIDI10getFeatureEh+0x34>
    5280:	98 2f       	mov	r25, r24
    5282:	91 70       	andi	r25, 0x01	; 1
    5284:	07 c0       	rjmp	.+14     	; 0x5294 <_ZN4MIDI10getFeatureEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    5286:	86 0f       	add	r24, r22
    5288:	91 1d       	adc	r25, r1
    528a:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    528e:	98 2f       	mov	r25, r24
    5290:	01 c0       	rjmp	.+2      	; 0x5294 <_ZN4MIDI10getFeatureEh+0x50>
            break;

        }   return 0;
    5292:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID);
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	91 11       	cpse	r25, r1
    5298:	01 c0       	rjmp	.+2      	; 0x529c <_ZN4MIDI10getFeatureEh+0x58>
    529a:	80 e0       	ldi	r24, 0x00	; 0

}
    529c:	cf 91       	pop	r28
    529e:	08 95       	ret

000052a0 <_ZN4MIDI14getMIDIchannelEh>:

uint8_t MIDI::getMIDIchannel(uint8_t channel)  {
    52a0:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    52a2:	ea e9       	ldi	r30, 0x9A	; 154
    52a4:	f1 e0       	ldi	r31, 0x01	; 1
    52a6:	25 81       	ldd	r18, Z+5	; 0x05
    52a8:	36 81       	ldd	r19, Z+6	; 0x06
    52aa:	81 81       	ldd	r24, Z+1	; 0x01
    52ac:	92 81       	ldd	r25, Z+2	; 0x02
    52ae:	82 0f       	add	r24, r18
    52b0:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    52b2:	26 89       	ldd	r18, Z+22	; 0x16
    52b4:	22 23       	and	r18, r18
    52b6:	a1 f0       	breq	.+40     	; 0x52e0 <_ZN4MIDI14getMIDIchannelEh+0x40>
    52b8:	21 30       	cpi	r18, 0x01	; 1
    52ba:	b9 f4       	brne	.+46     	; 0x52ea <_ZN4MIDI14getMIDIchannelEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    52bc:	26 2f       	mov	r18, r22
    52be:	26 95       	lsr	r18
    52c0:	26 95       	lsr	r18
    52c2:	26 95       	lsr	r18
    52c4:	c6 2f       	mov	r28, r22
    52c6:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    52c8:	82 0f       	add	r24, r18
    52ca:	91 1d       	adc	r25, r1
    52cc:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	02 c0       	rjmp	.+4      	; 0x52d8 <_ZN4MIDI14getMIDIchannelEh+0x38>
    52d4:	95 95       	asr	r25
    52d6:	87 95       	ror	r24
    52d8:	ca 95       	dec	r28
    52da:	e2 f7       	brpl	.-8      	; 0x52d4 <_ZN4MIDI14getMIDIchannelEh+0x34>
    52dc:	81 70       	andi	r24, 0x01	; 1
    52de:	06 c0       	rjmp	.+12     	; 0x52ec <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    52e0:	86 0f       	add	r24, r22
    52e2:	91 1d       	adc	r25, r1
    52e4:	0e 94 8f 30 	call	0x611e	; 0x611e <eeprom_read_byte>
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

        }   return 0;
    52ea:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiChannelSection, channel);

}
    52ec:	cf 91       	pop	r28
    52ee:	08 95       	ret

000052f0 <_ZN4MIDI4initEv>:

    //default constructor

}

void MIDI::init() {
    52f0:	af 92       	push	r10
    52f2:	bf 92       	push	r11
    52f4:	cf 92       	push	r12
    52f6:	df 92       	push	r13
    52f8:	ef 92       	push	r14
    52fa:	0f 93       	push	r16
    52fc:	1f 93       	push	r17
    52fe:	cf 93       	push	r28
    5300:	df 93       	push	r29
    5302:	cd b7       	in	r28, 0x3d	; 61
    5304:	de b7       	in	r29, 0x3e	; 62
    5306:	2a 97       	sbiw	r28, 0x0a	; 10
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	de bf       	out	0x3e, r29	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	cd bf       	out	0x3d, r28	; 61
    5312:	5c 01       	movw	r10, r24

    const subtype midiFeatureSubtype = { MIDI_FEATURES, 0, 1 };
    5314:	83 e0       	ldi	r24, 0x03	; 3
    5316:	88 87       	std	Y+8, r24	; 0x08
    5318:	19 86       	std	Y+9, r1	; 0x09
    531a:	91 e0       	ldi	r25, 0x01	; 1
    531c:	9a 87       	std	Y+10, r25	; 0x0a
    const subtype midiChannelSubtype = { MIDI_CHANNELS, 1, 16 };
    531e:	84 e0       	ldi	r24, 0x04	; 4
    5320:	8d 83       	std	Y+5, r24	; 0x05
    5322:	9e 83       	std	Y+6, r25	; 0x06
    5324:	80 e1       	ldi	r24, 0x10	; 16
    5326:	8f 83       	std	Y+7, r24	; 0x07
    const subtype *midiSubtypeArray[] = {

        &midiFeatureSubtype,
        &midiChannelSubtype

    };
    5328:	ce 01       	movw	r24, r28
    532a:	08 96       	adiw	r24, 0x08	; 8
    532c:	9a 83       	std	Y+2, r25	; 0x02
    532e:	89 83       	std	Y+1, r24	; 0x01
    5330:	03 97       	sbiw	r24, 0x03	; 3
    5332:	9c 83       	std	Y+4, r25	; 0x04
    5334:	8b 83       	std	Y+3, r24	; 0x03

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);
    5336:	42 e0       	ldi	r20, 0x02	; 2
    5338:	60 e0       	ldi	r22, 0x00	; 0
    533a:	82 e9       	ldi	r24, 0x92	; 146
    533c:	96 e0       	ldi	r25, 0x06	; 6
    533e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN5SysEx14addMessageTypeEhh>
    5342:	ce 01       	movw	r24, r28
    5344:	01 96       	adiw	r24, 0x01	; 1
    5346:	6c 01       	movw	r12, r24
    5348:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<MIDI_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);
    534a:	d6 01       	movw	r26, r12
    534c:	ed 91       	ld	r30, X+
    534e:	fd 91       	ld	r31, X+
    5350:	6d 01       	movw	r12, r26
    5352:	e2 80       	ldd	r14, Z+2	; 0x02
    5354:	01 81       	ldd	r16, Z+1	; 0x01
    5356:	20 81       	ld	r18, Z
    5358:	41 2f       	mov	r20, r17
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	82 e9       	ldi	r24, 0x92	; 146
    535e:	96 e0       	ldi	r25, 0x06	; 6
    5360:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    5364:	1f 5f       	subi	r17, 0xFF	; 255

    };

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);

    for (int i=0; i<MIDI_SUBTYPES; i++)   {
    5366:	12 30       	cpi	r17, 0x02	; 2
    5368:	81 f7       	brne	.-32     	; 0x534a <_ZN4MIDI4initEv+0x5a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);

    }

    uint8_t inChannel = getMIDIchannel(inputChannel);
    536a:	63 e0       	ldi	r22, 0x03	; 3
    536c:	c5 01       	movw	r24, r10
    536e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    5372:	18 2f       	mov	r17, r24
    hwMIDI.init(true, true, dinInterface);
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	41 e0       	ldi	r20, 0x01	; 1
    5378:	61 e0       	ldi	r22, 0x01	; 1
    537a:	81 e9       	ldi	r24, 0x91	; 145
    537c:	93 e0       	ldi	r25, 0x03	; 3
    537e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6HWmidi4initEbb19midiInterfaceType_t>
    hwMIDI.init(true, true, usbInterface);
    5382:	21 e0       	ldi	r18, 0x01	; 1
    5384:	41 e0       	ldi	r20, 0x01	; 1
    5386:	61 e0       	ldi	r22, 0x01	; 1
    5388:	81 e9       	ldi	r24, 0x91	; 145
    538a:	93 e0       	ldi	r25, 0x03	; 3
    538c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6HWmidi4initEbb19midiInterfaceType_t>
    hwMIDI.setInputChannel(inChannel);
    5390:	61 2f       	mov	r22, r17
    5392:	81 e9       	ldi	r24, 0x91	; 145
    5394:	93 e0       	ldi	r25, 0x03	; 3
    5396:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <_ZN6HWmidi15setInputChannelEh>

}
    539a:	2a 96       	adiw	r28, 0x0a	; 10
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	de bf       	out	0x3e, r29	; 62
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	cd bf       	out	0x3d, r28	; 61
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ef 90       	pop	r14
    53b0:	df 90       	pop	r13
    53b2:	cf 90       	pop	r12
    53b4:	bf 90       	pop	r11
    53b6:	af 90       	pop	r10
    53b8:	08 95       	ret

000053ba <_ZN4MIDI10checkInputEv>:

void MIDI::checkInput()   {
    53ba:	ef 92       	push	r14
    53bc:	ff 92       	push	r15
    53be:	0f 93       	push	r16
    53c0:	1f 93       	push	r17
    53c2:	cf 93       	push	r28
    53c4:	df 93       	push	r29
    53c6:	ec 01       	movw	r28, r24

    if (hwMIDI.read(usbInterface))   {   //new message on usb
    53c8:	61 e0       	ldi	r22, 0x01	; 1
    53ca:	81 e9       	ldi	r24, 0x91	; 145
    53cc:	93 e0       	ldi	r25, 0x03	; 3
    53ce:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <_ZN6HWmidi4readE19midiInterfaceType_t>
    53d2:	88 23       	and	r24, r24
    53d4:	c1 f1       	breq	.+112    	; 0x5446 <_ZN4MIDI10checkInputEv+0x8c>

        midiMessageType_t messageType = hwMIDI.getType(usbInterface);
    53d6:	61 e0       	ldi	r22, 0x01	; 1
    53d8:	81 e9       	ldi	r24, 0x91	; 145
    53da:	93 e0       	ldi	r25, 0x03	; 3
    53dc:	0e 94 a6 10 	call	0x214c	; 0x214c <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>
    53e0:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1(usbInterface);
    53e2:	61 e0       	ldi	r22, 0x01	; 1
    53e4:	81 e9       	ldi	r24, 0x91	; 145
    53e6:	93 e0       	ldi	r25, 0x03	; 3
    53e8:	0e 94 b5 10 	call	0x216a	; 0x216a <_ZNK6HWmidi8getData1E19midiInterfaceType_t>
    53ec:	08 2f       	mov	r16, r24
        uint8_t data2 = hwMIDI.getData2(usbInterface);
    53ee:	61 e0       	ldi	r22, 0x01	; 1
    53f0:	81 e9       	ldi	r24, 0x91	; 145
    53f2:	93 e0       	ldi	r25, 0x03	; 3
    53f4:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZNK6HWmidi8getData2E19midiInterfaceType_t>
        source = usbInterface;
    53f8:	91 e0       	ldi	r25, 0x01	; 1
    53fa:	9c 83       	std	Y+4, r25	; 0x04

        switch(messageType) {
    53fc:	10 39       	cpi	r17, 0x90	; 144
    53fe:	e9 f0       	breq	.+58     	; 0x543a <_ZN4MIDI10checkInputEv+0x80>
    5400:	10 3f       	cpi	r17, 0xF0	; 240
    5402:	19 f0       	breq	.+6      	; 0x540a <_ZN4MIDI10checkInputEv+0x50>
    5404:	10 38       	cpi	r17, 0x80	; 128
    5406:	f9 f4       	brne	.+62     	; 0x5446 <_ZN4MIDI10checkInputEv+0x8c>
    5408:	18 c0       	rjmp	.+48     	; 0x543a <_ZN4MIDI10checkInputEv+0x80>

            case midiMessageSystemExclusive:
            sysEx.handleSysEx(hwMIDI.getSysExArray(usbInterface), hwMIDI.getSysExArrayLength(usbInterface));
    540a:	61 e0       	ldi	r22, 0x01	; 1
    540c:	81 e9       	ldi	r24, 0x91	; 145
    540e:	93 e0       	ldi	r25, 0x03	; 3
    5410:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>
    5414:	18 2f       	mov	r17, r24
    5416:	61 e0       	ldi	r22, 0x01	; 1
    5418:	81 e9       	ldi	r24, 0x91	; 145
    541a:	93 e0       	ldi	r25, 0x03	; 3
    541c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>
    5420:	bc 01       	movw	r22, r24
    5422:	41 2f       	mov	r20, r17
    5424:	82 e9       	ldi	r24, 0x92	; 146
    5426:	96 e0       	ldi	r25, 0x06	; 6
    5428:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN5SysEx11handleSysExEPhh>
            lastSysExMessageTime = rTimeMillis();
    542c:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
    5430:	68 83       	st	Y, r22
    5432:	79 83       	std	Y+1, r23	; 0x01
    5434:	8a 83       	std	Y+2, r24	; 0x02
    5436:	9b 83       	std	Y+3, r25	; 0x03
            break;
    5438:	06 c0       	rjmp	.+12     	; 0x5446 <_ZN4MIDI10checkInputEv+0x8c>

            case midiMessageNoteOff:
            case midiMessageNoteOn:
            //we're using received note data to control LEDs
            leds.noteToLEDstate(data1, data2);
    543a:	48 2f       	mov	r20, r24
    543c:	60 2f       	mov	r22, r16
    543e:	8c e8       	ldi	r24, 0x8C	; 140
    5440:	96 e0       	ldi	r25, 0x06	; 6
    5442:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <_ZN4LEDs14noteToLEDstateEhh>
        }

    }

    //check for incoming MIDI messages on USART
    if (hwMIDI.read(dinInterface))    {
    5446:	60 e0       	ldi	r22, 0x00	; 0
    5448:	81 e9       	ldi	r24, 0x91	; 145
    544a:	93 e0       	ldi	r25, 0x03	; 3
    544c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <_ZN6HWmidi4readE19midiInterfaceType_t>
    5450:	88 23       	and	r24, r24
    5452:	09 f4       	brne	.+2      	; 0x5456 <_ZN4MIDI10checkInputEv+0x9c>
    5454:	99 c0       	rjmp	.+306    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

        uint8_t messageType = hwMIDI.getType(dinInterface);
    5456:	60 e0       	ldi	r22, 0x00	; 0
    5458:	81 e9       	ldi	r24, 0x91	; 145
    545a:	93 e0       	ldi	r25, 0x03	; 3
    545c:	0e 94 a6 10 	call	0x214c	; 0x214c <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>
    5460:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1(dinInterface);
    5462:	60 e0       	ldi	r22, 0x00	; 0
    5464:	81 e9       	ldi	r24, 0x91	; 145
    5466:	93 e0       	ldi	r25, 0x03	; 3
    5468:	0e 94 b5 10 	call	0x216a	; 0x216a <_ZNK6HWmidi8getData1E19midiInterfaceType_t>
    546c:	f8 2e       	mov	r15, r24
        uint8_t data2 = hwMIDI.getData2(dinInterface);
    546e:	60 e0       	ldi	r22, 0x00	; 0
    5470:	81 e9       	ldi	r24, 0x91	; 145
    5472:	93 e0       	ldi	r25, 0x03	; 3
    5474:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZNK6HWmidi8getData2E19midiInterfaceType_t>
    5478:	e8 2e       	mov	r14, r24

        source = dinInterface;
    547a:	1c 82       	std	Y+4, r1	; 0x04

        if (!getFeature(midiFeatureUSBconvert))  {
    547c:	62 e0       	ldi	r22, 0x02	; 2
    547e:	ce 01       	movw	r24, r28
    5480:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN4MIDI10getFeatureEh>
    5484:	81 11       	cpse	r24, r1
    5486:	0c c0       	rjmp	.+24     	; 0x54a0 <_ZN4MIDI10checkInputEv+0xe6>

            switch(messageType) {
    5488:	10 38       	cpi	r17, 0x80	; 128
    548a:	19 f0       	breq	.+6      	; 0x5492 <_ZN4MIDI10checkInputEv+0xd8>
    548c:	10 39       	cpi	r17, 0x90	; 144
    548e:	09 f0       	breq	.+2      	; 0x5492 <_ZN4MIDI10checkInputEv+0xd8>
    5490:	7b c0       	rjmp	.+246    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                case midiMessageNoteOff:
                case midiMessageNoteOn:
                leds.noteToLEDstate(data1, data2);
    5492:	4e 2d       	mov	r20, r14
    5494:	6f 2d       	mov	r22, r15
    5496:	8c e8       	ldi	r24, 0x8C	; 140
    5498:	96 e0       	ldi	r25, 0x06	; 6
    549a:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <_ZN4LEDs14noteToLEDstateEhh>
                break;
    549e:	74 c0       	rjmp	.+232    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>
            }

        }   else {

                //dump everything from MIDI in to USB MIDI out
                switch(messageType) {
    54a0:	10 3b       	cpi	r17, 0xB0	; 176
    54a2:	69 f1       	breq	.+90     	; 0x54fe <_ZN4MIDI10checkInputEv+0x144>
    54a4:	48 f4       	brcc	.+18     	; 0x54b8 <_ZN4MIDI10checkInputEv+0xfe>
    54a6:	10 39       	cpi	r17, 0x90	; 144
    54a8:	e9 f0       	breq	.+58     	; 0x54e4 <_ZN4MIDI10checkInputEv+0x12a>
    54aa:	10 3a       	cpi	r17, 0xA0	; 160
    54ac:	09 f4       	brne	.+2      	; 0x54b0 <_ZN4MIDI10checkInputEv+0xf6>
    54ae:	60 c0       	rjmp	.+192    	; 0x5570 <_ZN4MIDI10checkInputEv+0x1b6>
    54b0:	10 38       	cpi	r17, 0x80	; 128
    54b2:	09 f0       	breq	.+2      	; 0x54b6 <_ZN4MIDI10checkInputEv+0xfc>
    54b4:	69 c0       	rjmp	.+210    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>
    54b6:	09 c0       	rjmp	.+18     	; 0x54ca <_ZN4MIDI10checkInputEv+0x110>
    54b8:	10 3d       	cpi	r17, 0xD0	; 208
    54ba:	09 f4       	brne	.+2      	; 0x54be <_ZN4MIDI10checkInputEv+0x104>
    54bc:	4d c0       	rjmp	.+154    	; 0x5558 <_ZN4MIDI10checkInputEv+0x19e>
    54be:	10 3f       	cpi	r17, 0xF0	; 240
    54c0:	b9 f1       	breq	.+110    	; 0x5530 <_ZN4MIDI10checkInputEv+0x176>
    54c2:	10 3c       	cpi	r17, 0xC0	; 192
    54c4:	09 f0       	breq	.+2      	; 0x54c8 <_ZN4MIDI10checkInputEv+0x10e>
    54c6:	60 c0       	rjmp	.+192    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>
    54c8:	27 c0       	rjmp	.+78     	; 0x5518 <_ZN4MIDI10checkInputEv+0x15e>

                    case midiMessageNoteOff:
                    hwMIDI.sendNoteOff(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    54ca:	63 e0       	ldi	r22, 0x03	; 3
    54cc:	ce 01       	movw	r24, r28
    54ce:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    54d2:	01 e0       	ldi	r16, 0x01	; 1
    54d4:	28 2f       	mov	r18, r24
    54d6:	4e 2d       	mov	r20, r14
    54d8:	6f 2d       	mov	r22, r15
    54da:	81 e9       	ldi	r24, 0x91	; 145
    54dc:	93 e0       	ldi	r25, 0x03	; 3
    54de:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
                    break;
    54e2:	52 c0       	rjmp	.+164    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageNoteOn:
                    hwMIDI.sendNoteOn(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    54e4:	63 e0       	ldi	r22, 0x03	; 3
    54e6:	ce 01       	movw	r24, r28
    54e8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    54ec:	01 e0       	ldi	r16, 0x01	; 1
    54ee:	28 2f       	mov	r18, r24
    54f0:	4e 2d       	mov	r20, r14
    54f2:	6f 2d       	mov	r22, r15
    54f4:	81 e9       	ldi	r24, 0x91	; 145
    54f6:	93 e0       	ldi	r25, 0x03	; 3
    54f8:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
                    break;
    54fc:	45 c0       	rjmp	.+138    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageControlChange:
                    hwMIDI.sendControlChange(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    54fe:	63 e0       	ldi	r22, 0x03	; 3
    5500:	ce 01       	movw	r24, r28
    5502:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    5506:	01 e0       	ldi	r16, 0x01	; 1
    5508:	28 2f       	mov	r18, r24
    550a:	4e 2d       	mov	r20, r14
    550c:	6f 2d       	mov	r22, r15
    550e:	81 e9       	ldi	r24, 0x91	; 145
    5510:	93 e0       	ldi	r25, 0x03	; 3
    5512:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>
                    break;
    5516:	38 c0       	rjmp	.+112    	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageProgramChange:
                    hwMIDI.sendProgramChange(data1, getMIDIchannel(inputChannel), usbInterface);
    5518:	63 e0       	ldi	r22, 0x03	; 3
    551a:	ce 01       	movw	r24, r28
    551c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    5520:	21 e0       	ldi	r18, 0x01	; 1
    5522:	48 2f       	mov	r20, r24
    5524:	6f 2d       	mov	r22, r15
    5526:	81 e9       	ldi	r24, 0x91	; 145
    5528:	93 e0       	ldi	r25, 0x03	; 3
    552a:	0e 94 3b 10 	call	0x2076	; 0x2076 <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>
                    break;
    552e:	2c c0       	rjmp	.+88     	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageSystemExclusive:
                    hwMIDI.sendSysEx(hwMIDI.getSysExArrayLength(dinInterface), hwMIDI.getSysExArray(dinInterface), true, usbInterface);
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	81 e9       	ldi	r24, 0x91	; 145
    5534:	93 e0       	ldi	r25, 0x03	; 3
    5536:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>
    553a:	7c 01       	movw	r14, r24
    553c:	60 e0       	ldi	r22, 0x00	; 0
    553e:	81 e9       	ldi	r24, 0x91	; 145
    5540:	93 e0       	ldi	r25, 0x03	; 3
    5542:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>
    5546:	bc 01       	movw	r22, r24
    5548:	01 e0       	ldi	r16, 0x01	; 1
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	a7 01       	movw	r20, r14
    554e:	81 e9       	ldi	r24, 0x91	; 145
    5550:	93 e0       	ldi	r25, 0x03	; 3
    5552:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
                    break;
    5556:	18 c0       	rjmp	.+48     	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageAfterTouchChannel:
                    hwMIDI.sendAfterTouch(data1, getMIDIchannel(inputChannel), usbInterface);
    5558:	63 e0       	ldi	r22, 0x03	; 3
    555a:	ce 01       	movw	r24, r28
    555c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    5560:	21 e0       	ldi	r18, 0x01	; 1
    5562:	48 2f       	mov	r20, r24
    5564:	6f 2d       	mov	r22, r15
    5566:	81 e9       	ldi	r24, 0x91	; 145
    5568:	93 e0       	ldi	r25, 0x03	; 3
    556a:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>
                    break;
    556e:	0c c0       	rjmp	.+24     	; 0x5588 <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageAfterTouchPoly:
                    hwMIDI.sendPolyPressure(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    5570:	63 e0       	ldi	r22, 0x03	; 3
    5572:	ce 01       	movw	r24, r28
    5574:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    5578:	01 e0       	ldi	r16, 0x01	; 1
    557a:	28 2f       	mov	r18, r24
    557c:	4e 2d       	mov	r20, r14
    557e:	6f 2d       	mov	r22, r15
    5580:	81 e9       	ldi	r24, 0x91	; 145
    5582:	93 e0       	ldi	r25, 0x03	; 3
    5584:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>
        }

    }

    //disable sysex config after inactivity
    if (rTimeMillis() - lastSysExMessageTime > CONFIG_TIMEOUT)
    5588:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
    558c:	08 81       	ld	r16, Y
    558e:	19 81       	ldd	r17, Y+1	; 0x01
    5590:	2a 81       	ldd	r18, Y+2	; 0x02
    5592:	3b 81       	ldd	r19, Y+3	; 0x03
    5594:	dc 01       	movw	r26, r24
    5596:	cb 01       	movw	r24, r22
    5598:	80 1b       	sub	r24, r16
    559a:	91 0b       	sbc	r25, r17
    559c:	a2 0b       	sbc	r26, r18
    559e:	b3 0b       	sbc	r27, r19
    55a0:	81 36       	cpi	r24, 0x61	; 97
    55a2:	9a 4e       	sbci	r25, 0xEA	; 234
    55a4:	a1 05       	cpc	r26, r1
    55a6:	b1 05       	cpc	r27, r1
    55a8:	20 f0       	brcs	.+8      	; 0x55b2 <_ZN4MIDI10checkInputEv+0x1f8>
        sysEx.disableConf();
    55aa:	82 e9       	ldi	r24, 0x92	; 146
    55ac:	96 e0       	ldi	r25, 0x06	; 6
    55ae:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5SysEx11disableConfEv>

}
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	1f 91       	pop	r17
    55b8:	0f 91       	pop	r16
    55ba:	ff 90       	pop	r15
    55bc:	ef 90       	pop	r14
    55be:	08 95       	ret

000055c0 <_ZN4MIDI12sendMIDInoteEhbh>:

void MIDI::sendMIDInote(uint8_t note, bool state, uint8_t _velocity)  {
    55c0:	ef 92       	push	r14
    55c2:	ff 92       	push	r15
    55c4:	0f 93       	push	r16
    55c6:	1f 93       	push	r17
    55c8:	cf 93       	push	r28
    55ca:	df 93       	push	r29
    55cc:	7c 01       	movw	r14, r24
    55ce:	c6 2f       	mov	r28, r22
    55d0:	04 2f       	mov	r16, r20
    55d2:	d2 2f       	mov	r29, r18

    uint8_t channel = getMIDIchannel(noteChannel);
    55d4:	60 e0       	ldi	r22, 0x00	; 0
    55d6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    55da:	18 2f       	mov	r17, r24

    switch (state) {
    55dc:	01 30       	cpi	r16, 0x01	; 1
    55de:	41 f1       	breq	.+80     	; 0x5630 <_ZN4MIDI12sendMIDInoteEhbh+0x70>

        case false:
        //button released
        if (getFeature(midiFeatureStandardNoteOff))   {
    55e0:	60 e0       	ldi	r22, 0x00	; 0
    55e2:	c7 01       	movw	r24, r14
    55e4:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN4MIDI10getFeatureEh>
    55e8:	88 23       	and	r24, r24
    55ea:	89 f0       	breq	.+34     	; 0x560e <_ZN4MIDI12sendMIDInoteEhbh+0x4e>

            hwMIDI.sendNoteOff(note, _velocity, channel, usbInterface);
    55ec:	01 e0       	ldi	r16, 0x01	; 1
    55ee:	21 2f       	mov	r18, r17
    55f0:	4d 2f       	mov	r20, r29
    55f2:	6c 2f       	mov	r22, r28
    55f4:	81 e9       	ldi	r24, 0x91	; 145
    55f6:	93 e0       	ldi	r25, 0x03	; 3
    55f8:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
            hwMIDI.sendNoteOff(note, _velocity, channel, dinInterface);
    55fc:	00 e0       	ldi	r16, 0x00	; 0
    55fe:	21 2f       	mov	r18, r17
    5600:	4d 2f       	mov	r20, r29
    5602:	6c 2f       	mov	r22, r28
    5604:	81 e9       	ldi	r24, 0x91	; 145
    5606:	93 e0       	ldi	r25, 0x03	; 3
    5608:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
    560c:	21 c0       	rjmp	.+66     	; 0x5650 <_ZN4MIDI12sendMIDInoteEhbh+0x90>

        } else {

            hwMIDI.sendNoteOn(note, _velocity, channel, usbInterface);
    560e:	01 e0       	ldi	r16, 0x01	; 1
    5610:	21 2f       	mov	r18, r17
    5612:	4d 2f       	mov	r20, r29
    5614:	6c 2f       	mov	r22, r28
    5616:	81 e9       	ldi	r24, 0x91	; 145
    5618:	93 e0       	ldi	r25, 0x03	; 3
    561a:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
            hwMIDI.sendNoteOn(note, _velocity, channel, dinInterface);
    561e:	00 e0       	ldi	r16, 0x00	; 0
    5620:	21 2f       	mov	r18, r17
    5622:	4d 2f       	mov	r20, r29
    5624:	6c 2f       	mov	r22, r28
    5626:	81 e9       	ldi	r24, 0x91	; 145
    5628:	93 e0       	ldi	r25, 0x03	; 3
    562a:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
    562e:	10 c0       	rjmp	.+32     	; 0x5650 <_ZN4MIDI12sendMIDInoteEhbh+0x90>
        }
        break;

        case true:
        //button pressed
        hwMIDI.sendNoteOn(note, _velocity, channel, usbInterface);
    5630:	01 e0       	ldi	r16, 0x01	; 1
    5632:	28 2f       	mov	r18, r24
    5634:	4d 2f       	mov	r20, r29
    5636:	6c 2f       	mov	r22, r28
    5638:	81 e9       	ldi	r24, 0x91	; 145
    563a:	93 e0       	ldi	r25, 0x03	; 3
    563c:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
        hwMIDI.sendNoteOn(note, _velocity, channel, dinInterface);
    5640:	00 e0       	ldi	r16, 0x00	; 0
    5642:	21 2f       	mov	r18, r17
    5644:	4d 2f       	mov	r20, r29
    5646:	6c 2f       	mov	r22, r28
    5648:	81 e9       	ldi	r24, 0x91	; 145
    564a:	93 e0       	ldi	r25, 0x03	; 3
    564c:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
        break;

    }

}
    5650:	df 91       	pop	r29
    5652:	cf 91       	pop	r28
    5654:	1f 91       	pop	r17
    5656:	0f 91       	pop	r16
    5658:	ff 90       	pop	r15
    565a:	ef 90       	pop	r14
    565c:	08 95       	ret

0000565e <_ZN4MIDI17sendProgramChangeEh>:

void MIDI::sendProgramChange(uint8_t program)    {
    565e:	cf 93       	push	r28
    5660:	df 93       	push	r29
    5662:	c6 2f       	mov	r28, r22

    uint8_t channel = getMIDIchannel(programChangeChannel);
    5664:	61 e0       	ldi	r22, 0x01	; 1
    5666:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    566a:	d8 2f       	mov	r29, r24
    hwMIDI.sendProgramChange(program, channel, usbInterface);
    566c:	21 e0       	ldi	r18, 0x01	; 1
    566e:	48 2f       	mov	r20, r24
    5670:	6c 2f       	mov	r22, r28
    5672:	81 e9       	ldi	r24, 0x91	; 145
    5674:	93 e0       	ldi	r25, 0x03	; 3
    5676:	0e 94 3b 10 	call	0x2076	; 0x2076 <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>
    hwMIDI.sendProgramChange(program, channel, dinInterface);
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	4d 2f       	mov	r20, r29
    567e:	6c 2f       	mov	r22, r28
    5680:	81 e9       	ldi	r24, 0x91	; 145
    5682:	93 e0       	ldi	r25, 0x03	; 3
    5684:	0e 94 3b 10 	call	0x2076	; 0x2076 <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>

}
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	08 95       	ret

0000568e <_ZN4MIDI17sendControlChangeEhh>:

void MIDI::sendControlChange(uint8_t ccNumber, uint8_t ccValue) {
    568e:	0f 93       	push	r16
    5690:	1f 93       	push	r17
    5692:	cf 93       	push	r28
    5694:	df 93       	push	r29
    5696:	c6 2f       	mov	r28, r22
    5698:	d4 2f       	mov	r29, r20

    uint8_t channel = getMIDIchannel(CCchannel);
    569a:	62 e0       	ldi	r22, 0x02	; 2
    569c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    56a0:	18 2f       	mov	r17, r24
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, usbInterface);
    56a2:	01 e0       	ldi	r16, 0x01	; 1
    56a4:	28 2f       	mov	r18, r24
    56a6:	4d 2f       	mov	r20, r29
    56a8:	6c 2f       	mov	r22, r28
    56aa:	81 e9       	ldi	r24, 0x91	; 145
    56ac:	93 e0       	ldi	r25, 0x03	; 3
    56ae:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, dinInterface);
    56b2:	00 e0       	ldi	r16, 0x00	; 0
    56b4:	21 2f       	mov	r18, r17
    56b6:	4d 2f       	mov	r20, r29
    56b8:	6c 2f       	mov	r22, r28
    56ba:	81 e9       	ldi	r24, 0x91	; 145
    56bc:	93 e0       	ldi	r25, 0x03	; 3
    56be:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>

}
    56c2:	df 91       	pop	r29
    56c4:	cf 91       	pop	r28
    56c6:	1f 91       	pop	r17
    56c8:	0f 91       	pop	r16
    56ca:	08 95       	ret

000056cc <_ZN4MIDI12getParameterEhh>:

}

uint8_t MIDI::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    56cc:	66 23       	and	r22, r22
    56ce:	19 f0       	breq	.+6      	; 0x56d6 <_ZN4MIDI12getParameterEhh+0xa>
    56d0:	61 30       	cpi	r22, 0x01	; 1
    56d2:	29 f0       	breq	.+10     	; 0x56de <_ZN4MIDI12getParameterEhh+0x12>
    56d4:	08 c0       	rjmp	.+16     	; 0x56e6 <_ZN4MIDI12getParameterEhh+0x1a>

        case midiFeatureConf:
        return getFeature(parameterID);
    56d6:	64 2f       	mov	r22, r20
    56d8:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN4MIDI10getFeatureEh>
    56dc:	08 95       	ret
        break;

        case midiChannelConf:
        return getMIDIchannel(parameterID);
    56de:	64 2f       	mov	r22, r20
    56e0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <_ZN4MIDI14getMIDIchannelEh>
    56e4:	08 95       	ret
        break;

    }   return 0;
    56e6:	80 e0       	ldi	r24, 0x00	; 0

}
    56e8:	08 95       	ret

000056ea <_ZN4MIDI14setMIDIchannelEhh>:


bool MIDI::setMIDIchannel(uint8_t channelID, uint8_t channelNumber)  {
    56ea:	0f 93       	push	r16
    56ec:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_MIDI_BLOCK, midiChannelSection, channelID, channelNumber);
    56ee:	04 2f       	mov	r16, r20
    56f0:	41 e0       	ldi	r20, 0x01	; 1
    56f2:	60 e0       	ldi	r22, 0x00	; 0
    56f4:	8a e9       	ldi	r24, 0x9A	; 154
    56f6:	91 e0       	ldi	r25, 0x01	; 1
    56f8:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    56fc:	0f 91       	pop	r16
    56fe:	08 95       	ret

00005700 <_ZN4MIDI10setFeatureEhh>:

bool MIDI::setFeature(uint8_t featureID, uint8_t newValue)  {
    5700:	0f 93       	push	r16
    5702:	1f 93       	push	r17
    5704:	cf 93       	push	r28
    5706:	df 93       	push	r29
    5708:	d6 2f       	mov	r29, r22
    570a:	14 2f       	mov	r17, r20

    if (!configuration.writeParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID, newValue))
    570c:	04 2f       	mov	r16, r20
    570e:	26 2f       	mov	r18, r22
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	60 e0       	ldi	r22, 0x00	; 0
    5714:	8a e9       	ldi	r24, 0x9A	; 154
    5716:	91 e0       	ldi	r25, 0x01	; 1
    5718:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    571c:	c8 2f       	mov	r28, r24
    571e:	88 23       	and	r24, r24
    5720:	69 f0       	breq	.+26     	; 0x573c <_ZN4MIDI10setFeatureEhh+0x3c>
        return false;

    if (featureID == midiFeatureRunningStatus)    {
    5722:	d1 30       	cpi	r29, 0x01	; 1
    5724:	59 f4       	brne	.+22     	; 0x573c <_ZN4MIDI10setFeatureEhh+0x3c>

        //tell hwMIDI object that we've changed this setting
        newValue ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();
    5726:	11 23       	and	r17, r17
    5728:	29 f0       	breq	.+10     	; 0x5734 <_ZN4MIDI10setFeatureEhh+0x34>
    572a:	81 e9       	ldi	r24, 0x91	; 145
    572c:	93 e0       	ldi	r25, 0x03	; 3
    572e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN6HWmidi19enableRunningStatusEv>
    5732:	04 c0       	rjmp	.+8      	; 0x573c <_ZN4MIDI10setFeatureEhh+0x3c>
    5734:	81 e9       	ldi	r24, 0x91	; 145
    5736:	93 e0       	ldi	r25, 0x03	; 3
    5738:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN6HWmidi20disableRunningStatusEv>

    }   return true;

}
    573c:	8c 2f       	mov	r24, r28
    573e:	df 91       	pop	r29
    5740:	cf 91       	pop	r28
    5742:	1f 91       	pop	r17
    5744:	0f 91       	pop	r16
    5746:	08 95       	ret

00005748 <_ZN4MIDI12setParameterEhhh>:

bool MIDI::setParameter(uint8_t messageType, uint8_t parameterID, uint8_t newValue) {
    5748:	34 2f       	mov	r19, r20

    switch(messageType) {
    574a:	66 23       	and	r22, r22
    574c:	19 f0       	breq	.+6      	; 0x5754 <_ZN4MIDI12setParameterEhhh+0xc>
    574e:	61 30       	cpi	r22, 0x01	; 1
    5750:	31 f0       	breq	.+12     	; 0x575e <_ZN4MIDI12setParameterEhhh+0x16>
    5752:	0a c0       	rjmp	.+20     	; 0x5768 <_ZN4MIDI12setParameterEhhh+0x20>

        case midiFeatureConf:
        return setFeature(parameterID, newValue);
    5754:	42 2f       	mov	r20, r18
    5756:	63 2f       	mov	r22, r19
    5758:	0e 94 80 2b 	call	0x5700	; 0x5700 <_ZN4MIDI10setFeatureEhh>
    575c:	08 95       	ret
        break;

        case midiChannelConf:
        return setMIDIchannel(parameterID, newValue);
    575e:	42 2f       	mov	r20, r18
    5760:	63 2f       	mov	r22, r19
    5762:	0e 94 75 2b 	call	0x56ea	; 0x56ea <_ZN4MIDI14setMIDIchannelEhh>
    5766:	08 95       	ret
        break;

    }   return false;
    5768:	80 e0       	ldi	r24, 0x00	; 0

}
    576a:	08 95       	ret

0000576c <_Z5onGethhh>:

}

uint8_t onGet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    576c:	82 30       	cpi	r24, 0x02	; 2
    576e:	a9 f0       	breq	.+42     	; 0x579a <_Z5onGethhh+0x2e>
    5770:	28 f4       	brcc	.+10     	; 0x577c <_Z5onGethhh+0x10>
    5772:	88 23       	and	r24, r24
    5774:	41 f0       	breq	.+16     	; 0x5786 <_Z5onGethhh+0x1a>
    5776:	81 30       	cpi	r24, 0x01	; 1
    5778:	59 f0       	breq	.+22     	; 0x5790 <_Z5onGethhh+0x24>
    577a:	1e c0       	rjmp	.+60     	; 0x57b8 <_Z5onGethhh+0x4c>
    577c:	83 30       	cpi	r24, 0x03	; 3
    577e:	91 f0       	breq	.+36     	; 0x57a4 <_Z5onGethhh+0x38>
    5780:	84 30       	cpi	r24, 0x04	; 4
    5782:	a9 f0       	breq	.+42     	; 0x57ae <_Z5onGethhh+0x42>
    5784:	19 c0       	rjmp	.+50     	; 0x57b8 <_Z5onGethhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.getParameter(messageSubtype, parameter);
    5786:	8d e8       	ldi	r24, 0x8D	; 141
    5788:	96 e0       	ldi	r25, 0x06	; 6
    578a:	0e 94 66 2b 	call	0x56cc	; 0x56cc <_ZN4MIDI12getParameterEhh>
    578e:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.getParameter(messageSubtype, parameter);
    5790:	89 e3       	ldi	r24, 0x39	; 57
    5792:	96 e0       	ldi	r25, 0x06	; 6
    5794:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZN7Buttons12getParameterEhh>
    5798:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.getParameter(messageSubtype, parameter);
    579a:	8b e8       	ldi	r24, 0x8B	; 139
    579c:	96 e0       	ldi	r25, 0x06	; 6
    579e:	0e 94 f5 23 	call	0x47ea	; 0x47ea <_ZN8Encoders12getParameterEhh>
    57a2:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.getParameter(messageSubtype, parameter);
    57a4:	84 e9       	ldi	r24, 0x94	; 148
    57a6:	94 e0       	ldi	r25, 0x04	; 4
    57a8:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <_ZN6Analog12getParameterEhh>
    57ac:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.getParameter(messageSubtype, parameter);
    57ae:	8c e8       	ldi	r24, 0x8C	; 140
    57b0:	96 e0       	ldi	r25, 0x06	; 6
    57b2:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <_ZN4LEDs12getParameterEhh>
    57b6:	08 95       	ret
        break;

    } return INVALID_VALUE;
    57b8:	80 e8       	ldi	r24, 0x80	; 128

}
    57ba:	08 95       	ret

000057bc <_Z5onSethhhh>:

bool onSet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter, uint8_t newParameter)   {

    switch(messageType) {
    57bc:	82 30       	cpi	r24, 0x02	; 2
    57be:	a9 f0       	breq	.+42     	; 0x57ea <_Z5onSethhhh+0x2e>
    57c0:	28 f4       	brcc	.+10     	; 0x57cc <_Z5onSethhhh+0x10>
    57c2:	88 23       	and	r24, r24
    57c4:	41 f0       	breq	.+16     	; 0x57d6 <_Z5onSethhhh+0x1a>
    57c6:	81 30       	cpi	r24, 0x01	; 1
    57c8:	59 f0       	breq	.+22     	; 0x57e0 <_Z5onSethhhh+0x24>
    57ca:	1e c0       	rjmp	.+60     	; 0x5808 <_Z5onSethhhh+0x4c>
    57cc:	83 30       	cpi	r24, 0x03	; 3
    57ce:	91 f0       	breq	.+36     	; 0x57f4 <_Z5onSethhhh+0x38>
    57d0:	84 30       	cpi	r24, 0x04	; 4
    57d2:	a9 f0       	breq	.+42     	; 0x57fe <_Z5onSethhhh+0x42>
    57d4:	19 c0       	rjmp	.+50     	; 0x5808 <_Z5onSethhhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, newParameter);
    57d6:	8d e8       	ldi	r24, 0x8D	; 141
    57d8:	96 e0       	ldi	r25, 0x06	; 6
    57da:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN4MIDI12setParameterEhhh>
    57de:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, newParameter);
    57e0:	89 e3       	ldi	r24, 0x39	; 57
    57e2:	96 e0       	ldi	r25, 0x06	; 6
    57e4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN7Buttons12setParameterEhhh>
    57e8:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, newParameter);
    57ea:	8b e8       	ldi	r24, 0x8B	; 139
    57ec:	96 e0       	ldi	r25, 0x06	; 6
    57ee:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN8Encoders12setParameterEhhh>
    57f2:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.setParameter(messageSubtype, parameter, newParameter);
    57f4:	84 e9       	ldi	r24, 0x94	; 148
    57f6:	94 e0       	ldi	r25, 0x04	; 4
    57f8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN6Analog12setParameterEhhh>
    57fc:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, newParameter);
    57fe:	8c e8       	ldi	r24, 0x8C	; 140
    5800:	96 e0       	ldi	r25, 0x06	; 6
    5802:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN4LEDs12setParameterEhhh>
    5806:	08 95       	ret
        break;

    }   return false;
    5808:	80 e0       	ldi	r24, 0x00	; 0

}
    580a:	08 95       	ret

0000580c <_Z7onResethhh>:

bool onReset(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    580c:	82 30       	cpi	r24, 0x02	; 2
    580e:	b9 f0       	breq	.+46     	; 0x583e <_Z7onResethhh+0x32>
    5810:	28 f4       	brcc	.+10     	; 0x581c <_Z7onResethhh+0x10>
    5812:	88 23       	and	r24, r24
    5814:	41 f0       	breq	.+16     	; 0x5826 <_Z7onResethhh+0x1a>
    5816:	81 30       	cpi	r24, 0x01	; 1
    5818:	61 f0       	breq	.+24     	; 0x5832 <_Z7onResethhh+0x26>
    581a:	23 c0       	rjmp	.+70     	; 0x5862 <_Z7onResethhh+0x56>
    581c:	83 30       	cpi	r24, 0x03	; 3
    581e:	d9 f0       	breq	.+54     	; 0x5856 <_Z7onResethhh+0x4a>
    5820:	84 30       	cpi	r24, 0x04	; 4
    5822:	99 f0       	breq	.+38     	; 0x584a <_Z7onResethhh+0x3e>
    5824:	1e c0       	rjmp	.+60     	; 0x5862 <_Z7onResethhh+0x56>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    5826:	20 e8       	ldi	r18, 0x80	; 128
    5828:	8d e8       	ldi	r24, 0x8D	; 141
    582a:	96 e0       	ldi	r25, 0x06	; 6
    582c:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN4MIDI12setParameterEhhh>
    5830:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    5832:	20 e8       	ldi	r18, 0x80	; 128
    5834:	89 e3       	ldi	r24, 0x39	; 57
    5836:	96 e0       	ldi	r25, 0x06	; 6
    5838:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN7Buttons12setParameterEhhh>
    583c:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return analog.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    583e:	20 e8       	ldi	r18, 0x80	; 128
    5840:	84 e9       	ldi	r24, 0x94	; 148
    5842:	94 e0       	ldi	r25, 0x04	; 4
    5844:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN6Analog12setParameterEhhh>
    5848:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    584a:	20 e8       	ldi	r18, 0x80	; 128
    584c:	8c e8       	ldi	r24, 0x8C	; 140
    584e:	96 e0       	ldi	r25, 0x06	; 6
    5850:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN4LEDs12setParameterEhhh>
    5854:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    5856:	20 e8       	ldi	r18, 0x80	; 128
    5858:	8b e8       	ldi	r24, 0x8B	; 139
    585a:	96 e0       	ldi	r25, 0x06	; 6
    585c:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN8Encoders12setParameterEhhh>
    5860:	08 95       	ret
        break;

    }   return false;
    5862:	80 e0       	ldi	r24, 0x00	; 0

}
    5864:	08 95       	ret

00005866 <_Z12ledsOff_slowv>:
#include "hardware/reset/Reset.h"

void ledsOff_slow() {

    //turn off all leds slowly before reseting
    board.setLEDTransitionSpeed(1);
    5866:	61 e0       	ldi	r22, 0x01	; 1
    5868:	81 e4       	ldi	r24, 0x41	; 65
    586a:	92 e0       	ldi	r25, 0x02	; 2
    586c:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>
    leds.allLEDsOff();
    5870:	8c e8       	ldi	r24, 0x8C	; 140
    5872:	96 e0       	ldi	r25, 0x06	; 6
    5874:	0e 94 76 24 	call	0x48ec	; 0x48ec <_ZN4LEDs10allLEDsOffEv>
    //make sure all leds are off
    wait(1000);
    5878:	68 ee       	ldi	r22, 0xE8	; 232
    587a:	73 e0       	ldi	r23, 0x03	; 3
    587c:	80 e0       	ldi	r24, 0x00	; 0
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>
    5884:	08 95       	ret

00005886 <_Z8onRebootv>:

}

void onReboot()  {

    ledsOff_slow();
    5886:	0e 94 33 2c 	call	0x5866	; 0x5866 <_Z12ledsOff_slowv>
    //this will reset the board into bootloader mode
    reboot(BTLDR_REBOOT);
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	0e 94 08 14 	call	0x2810	; 0x2810 <_Z6rebooth>
    5890:	08 95       	ret

00005892 <_Z14onFactoryResetv>:

}

void onFactoryReset()   {

    ledsOff_slow();
    5892:	0e 94 33 2c 	call	0x5866	; 0x5866 <_Z12ledsOff_slowv>
    configuration.factoryReset();
    5896:	8a e9       	ldi	r24, 0x9A	; 154
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN13Configuration12factoryResetEv>
    reboot(APP_REBOOT);
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	0e 94 08 14 	call	0x2810	; 0x2810 <_Z6rebooth>
    58a4:	08 95       	ret

000058a6 <_Z5setupv>:

}

void setup()    {

    configuration.init();
    58a6:	8a e9       	ldi	r24, 0x9A	; 154
    58a8:	91 e0       	ldi	r25, 0x01	; 1
    58aa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Configuration4initEv>

    sysEx.setHandleReboot(onReboot);
    58ae:	63 e4       	ldi	r22, 0x43	; 67
    58b0:	7c e2       	ldi	r23, 0x2C	; 44
    58b2:	82 e9       	ldi	r24, 0x92	; 146
    58b4:	96 e0       	ldi	r25, 0x06	; 6
    58b6:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <_ZN5SysEx15setHandleRebootEPFvvE>
    sysEx.setHandleGet(onGet);
    58ba:	66 eb       	ldi	r22, 0xB6	; 182
    58bc:	7b e2       	ldi	r23, 0x2B	; 43
    58be:	82 e9       	ldi	r24, 0x92	; 146
    58c0:	96 e0       	ldi	r25, 0x06	; 6
    58c2:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <_ZN5SysEx12setHandleGetEPFhhhhE>
    sysEx.setHandleSet(onSet);
    58c6:	6e ed       	ldi	r22, 0xDE	; 222
    58c8:	7b e2       	ldi	r23, 0x2B	; 43
    58ca:	82 e9       	ldi	r24, 0x92	; 146
    58cc:	96 e0       	ldi	r25, 0x06	; 6
    58ce:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <_ZN5SysEx12setHandleSetEPFbhhhhE>
    sysEx.setHandleReset(onReset);
    58d2:	66 e0       	ldi	r22, 0x06	; 6
    58d4:	7c e2       	ldi	r23, 0x2C	; 44
    58d6:	82 e9       	ldi	r24, 0x92	; 146
    58d8:	96 e0       	ldi	r25, 0x06	; 6
    58da:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <_ZN5SysEx14setHandleResetEPFbhhhE>
    sysEx.setHandleFactoryReset(onFactoryReset);
    58de:	69 e4       	ldi	r22, 0x49	; 73
    58e0:	7c e2       	ldi	r23, 0x2C	; 44
    58e2:	82 e9       	ldi	r24, 0x92	; 146
    58e4:	96 e0       	ldi	r25, 0x06	; 6
    58e6:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <_ZN5SysEx21setHandleFactoryResetEPFvvE>

    board.init();
    58ea:	81 e4       	ldi	r24, 0x41	; 65
    58ec:	92 e0       	ldi	r25, 0x02	; 2
    58ee:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN5Board4initEv>
    midi.init();
    58f2:	8d e8       	ldi	r24, 0x8D	; 141
    58f4:	96 e0       	ldi	r25, 0x06	; 6
    58f6:	0e 94 78 29 	call	0x52f0	; 0x52f0 <_ZN4MIDI4initEv>
    buttons.init();
    58fa:	89 e3       	ldi	r24, 0x39	; 57
    58fc:	96 e0       	ldi	r25, 0x06	; 6
    58fe:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN7Buttons4initEv>
    leds.init();
    5902:	8c e8       	ldi	r24, 0x8C	; 140
    5904:	96 e0       	ldi	r25, 0x06	; 6
    5906:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <_ZN4LEDs4initEv>
    analog.init();
    590a:	84 e9       	ldi	r24, 0x94	; 148
    590c:	94 e0       	ldi	r25, 0x04	; 4
    590e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6Analog4initEv>
    encoders.init();
    5912:	8b e8       	ldi	r24, 0x8B	; 139
    5914:	96 e0       	ldi	r25, 0x06	; 6
    5916:	0e 94 81 22 	call	0x4502	; 0x4502 <_ZN8Encoders4initEv>
    591a:	08 95       	ret

0000591c <main>:

}

int main()  {

    setup();
    591c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <_Z5setupv>
    while(1) { midi.checkInput(); buttons.update(); analog.update(); encoders.update(); }
    5920:	8d e8       	ldi	r24, 0x8D	; 141
    5922:	96 e0       	ldi	r25, 0x06	; 6
    5924:	0e 94 dd 29 	call	0x53ba	; 0x53ba <_ZN4MIDI10checkInputEv>
    5928:	89 e3       	ldi	r24, 0x39	; 57
    592a:	96 e0       	ldi	r25, 0x06	; 6
    592c:	0e 94 ef 21 	call	0x43de	; 0x43de <_ZN7Buttons6updateEv>
    5930:	84 e9       	ldi	r24, 0x94	; 148
    5932:	94 e0       	ldi	r25, 0x04	; 4
    5934:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN6Analog6updateEv>
    5938:	8b e8       	ldi	r24, 0x8B	; 139
    593a:	96 e0       	ldi	r25, 0x06	; 6
    593c:	0e 94 8c 23 	call	0x4718	; 0x4718 <_ZN8Encoders6updateEv>
    analog.init();
    encoders.init();

}

int main()  {
    5940:	ef cf       	rjmp	.-34     	; 0x5920 <main+0x4>

00005942 <_ZN5SysExC1Ev>:
bool SysEx::checkParameterID(uint8_t messageType, uint8_t messageSubType, uint8_t parameter)   {

    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);

}
    5942:	fc 01       	movw	r30, r24
    5944:	11 82       	std	Z+1, r1	; 0x01
    5946:	10 82       	st	Z, r1
    5948:	13 82       	std	Z+3, r1	; 0x03
    594a:	12 82       	std	Z+2, r1	; 0x02
    594c:	15 82       	std	Z+5, r1	; 0x05
    594e:	14 82       	std	Z+4, r1	; 0x04
    5950:	17 82       	std	Z+7, r1	; 0x07
    5952:	16 82       	std	Z+6, r1	; 0x06
    5954:	11 86       	std	Z+9, r1	; 0x09
    5956:	10 86       	std	Z+8, r1	; 0x08
    5958:	12 86       	std	Z+10, r1	; 0x0a
    595a:	ac 01       	movw	r20, r24
    595c:	4e 5e       	subi	r20, 0xEE	; 238
    595e:	5f 4f       	sbci	r21, 0xFF	; 255
    5960:	bc 01       	movw	r22, r24
    5962:	6c 51       	subi	r22, 0x1C	; 28
    5964:	7f 4f       	sbci	r23, 0xFF	; 255
    5966:	80 e8       	ldi	r24, 0x80	; 128
    5968:	fa 01       	movw	r30, r20
    596a:	35 97       	sbiw	r30, 0x05	; 5
    596c:	80 83       	st	Z, r24
    596e:	31 96       	adiw	r30, 0x01	; 1
    5970:	80 83       	st	Z, r24
    5972:	9a 01       	movw	r18, r20
    5974:	24 5e       	subi	r18, 0xE4	; 228
    5976:	3f 4f       	sbci	r19, 0xFF	; 255
    5978:	fa 01       	movw	r30, r20
    597a:	df 01       	movw	r26, r30
    597c:	13 97       	sbiw	r26, 0x03	; 3
    597e:	8c 93       	st	X, r24
    5980:	11 96       	adiw	r26, 0x01	; 1
    5982:	8c 93       	st	X, r24
    5984:	11 96       	adiw	r26, 0x01	; 1
    5986:	8c 93       	st	X, r24
    5988:	80 83       	st	Z, r24
    598a:	34 96       	adiw	r30, 0x04	; 4
    598c:	e2 17       	cp	r30, r18
    598e:	f3 07       	cpc	r31, r19
    5990:	a1 f7       	brne	.-24     	; 0x597a <_ZN5SysExC1Ev+0x38>
    5992:	42 5e       	subi	r20, 0xE2	; 226
    5994:	5f 4f       	sbci	r21, 0xFF	; 255
    5996:	46 17       	cp	r20, r22
    5998:	57 07       	cpc	r21, r23
    599a:	31 f7       	brne	.-52     	; 0x5968 <_ZN5SysExC1Ev+0x26>
    599c:	08 95       	ret

0000599e <_ZN5SysEx11disableConfEv>:
    599e:	fc 01       	movw	r30, r24
    59a0:	12 86       	std	Z+10, r1	; 0x0a
    59a2:	08 95       	ret

000059a4 <_ZN5SysEx14addMessageTypeEhh>:
    59a4:	fc 01       	movw	r30, r24
    59a6:	2e e1       	ldi	r18, 0x1E	; 30
    59a8:	62 9f       	mul	r22, r18
    59aa:	e0 0d       	add	r30, r0
    59ac:	f1 1d       	adc	r31, r1
    59ae:	11 24       	eor	r1, r1
    59b0:	65 87       	std	Z+13, r22	; 0x0d
    59b2:	46 87       	std	Z+14, r20	; 0x0e
    59b4:	08 95       	ret

000059b6 <_ZN5SysEx17addMessageSubTypeEhhhhh>:
    59b6:	ef 92       	push	r14
    59b8:	0f 93       	push	r16
    59ba:	e4 2f       	mov	r30, r20
    59bc:	f0 e0       	ldi	r31, 0x00	; 0
    59be:	3e e1       	ldi	r19, 0x1E	; 30
    59c0:	63 9f       	mul	r22, r19
    59c2:	b0 01       	movw	r22, r0
    59c4:	11 24       	eor	r1, r1
    59c6:	db 01       	movw	r26, r22
    59c8:	34 e0       	ldi	r19, 0x04	; 4
    59ca:	43 9f       	mul	r20, r19
    59cc:	a0 0d       	add	r26, r0
    59ce:	b1 1d       	adc	r27, r1
    59d0:	11 24       	eor	r1, r1
    59d2:	a8 0f       	add	r26, r24
    59d4:	b9 1f       	adc	r27, r25
    59d6:	1f 96       	adiw	r26, 0x0f	; 15
    59d8:	2c 93       	st	X, r18
    59da:	1f 97       	sbiw	r26, 0x0f	; 15
    59dc:	50 96       	adiw	r26, 0x10	; 16
    59de:	0c 93       	st	X, r16
    59e0:	31 96       	adiw	r30, 0x01	; 1
    59e2:	ee 0f       	add	r30, r30
    59e4:	ff 1f       	adc	r31, r31
    59e6:	ee 0f       	add	r30, r30
    59e8:	ff 1f       	adc	r31, r31
    59ea:	6e 0f       	add	r22, r30
    59ec:	7f 1f       	adc	r23, r31
    59ee:	fc 01       	movw	r30, r24
    59f0:	e6 0f       	add	r30, r22
    59f2:	f7 1f       	adc	r31, r23
    59f4:	e5 86       	std	Z+13, r14	; 0x0d
    59f6:	0f 91       	pop	r16
    59f8:	ef 90       	pop	r14
    59fa:	08 95       	ret

000059fc <_ZN5SysEx7checkIDE19sysExManufacturerID>:
    59fc:	41 11       	cpse	r20, r1
    59fe:	07 c0       	rjmp	.+14     	; 0x5a0e <_ZN5SysEx7checkIDE19sysExManufacturerID+0x12>
    5a00:	53 35       	cpi	r21, 0x53	; 83
    5a02:	39 f4       	brne	.+14     	; 0x5a12 <_ZN5SysEx7checkIDE19sysExManufacturerID+0x16>
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	63 34       	cpi	r22, 0x43	; 67
    5a08:	29 f0       	breq	.+10     	; 0x5a14 <_ZN5SysEx7checkIDE19sysExManufacturerID+0x18>
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	08 95       	ret
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	08 95       	ret
    5a12:	80 e0       	ldi	r24, 0x00	; 0
    5a14:	08 95       	ret

00005a16 <_ZN5SysEx10checkBlockEh>:
    5a16:	fc 01       	movw	r30, r24
    5a18:	2e e1       	ldi	r18, 0x1E	; 30
    5a1a:	62 9f       	mul	r22, r18
    5a1c:	e0 0d       	add	r30, r0
    5a1e:	f1 1d       	adc	r31, r1
    5a20:	11 24       	eor	r1, r1
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	95 85       	ldd	r25, Z+13	; 0x0d
    5a26:	69 13       	cpse	r22, r25
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	08 95       	ret

00005a2c <_ZN5SysEx17checkNewParameterEhhhh>:

bool SysEx::checkNewParameter(uint8_t messageType, uint8_t messageSubType, uint8_t parameter, uint8_t newParameter) {
    5a2c:	0f 93       	push	r16

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    5a2e:	e4 2f       	mov	r30, r20
    5a30:	f0 e0       	ldi	r31, 0x00	; 0
    5a32:	2e e1       	ldi	r18, 0x1E	; 30
    5a34:	62 9f       	mul	r22, r18
    5a36:	b0 01       	movw	r22, r0
    5a38:	11 24       	eor	r1, r1
    5a3a:	db 01       	movw	r26, r22
    5a3c:	24 e0       	ldi	r18, 0x04	; 4
    5a3e:	42 9f       	mul	r20, r18
    5a40:	a0 0d       	add	r26, r0
    5a42:	b1 1d       	adc	r27, r1
    5a44:	11 24       	eor	r1, r1
    5a46:	a8 0f       	add	r26, r24
    5a48:	b9 1f       	adc	r27, r25
    5a4a:	50 96       	adiw	r26, 0x10	; 16
    5a4c:	2c 91       	ld	r18, X
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];
    5a4e:	31 96       	adiw	r30, 0x01	; 1
    5a50:	ee 0f       	add	r30, r30
    5a52:	ff 1f       	adc	r31, r31
    5a54:	ee 0f       	add	r30, r30
    5a56:	ff 1f       	adc	r31, r31
    5a58:	6e 0f       	add	r22, r30
    5a5a:	7f 1f       	adc	r23, r31
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	e6 0f       	add	r30, r22
    5a60:	f7 1f       	adc	r31, r23
    5a62:	95 85       	ldd	r25, Z+13	; 0x0d

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    5a64:	2f 3f       	cpi	r18, 0xFF	; 255
    5a66:	71 f0       	breq	.+28     	; 0x5a84 <_ZN5SysEx17checkNewParameterEhhhh+0x58>
    5a68:	9f 3f       	cpi	r25, 0xFF	; 255
    5a6a:	39 f0       	breq	.+14     	; 0x5a7a <_ZN5SysEx17checkNewParameterEhhhh+0x4e>
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    5a6c:	02 17       	cp	r16, r18
    5a6e:	88 f0       	brcs	.+34     	; 0x5a92 <_ZN5SysEx17checkNewParameterEhhhh+0x66>
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	90 17       	cp	r25, r16
    5a74:	88 f4       	brcc	.+34     	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	0f c0       	rjmp	.+30     	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    5a7a:	81 e0       	ldi	r24, 0x01	; 1
    5a7c:	02 17       	cp	r16, r18
    5a7e:	60 f4       	brcc	.+24     	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	0a c0       	rjmp	.+20     	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    5a84:	9f 3f       	cpi	r25, 0xFF	; 255
    5a86:	39 f0       	breq	.+14     	; 0x5a96 <_ZN5SysEx17checkNewParameterEhhhh+0x6a>
        return (newParameter <= maxValue);   //check only max value
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	90 17       	cp	r25, r16
    5a8c:	28 f4       	brcc	.+10     	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	03 c0       	rjmp	.+6      	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	01 c0       	rjmp	.+2      	; 0x5a98 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return (newParameter <= maxValue);   //check only max value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return true; //don't check new parameter
    5a96:	81 e0       	ldi	r24, 0x01	; 1

    return false;

}
    5a98:	0f 91       	pop	r16
    5a9a:	08 95       	ret

00005a9c <_ZN5SysEx24generateMinMessageLenghtEhhhh>:


uint8_t SysEx::generateMinMessageLenght(uint8_t wish, uint8_t amount, uint8_t messageType, uint8_t messageSubType)    {
    5a9c:	0f 93       	push	r16

    //single parameter
    if (amount == AMOUNT_SINGLE)  {
    5a9e:	41 11       	cpse	r20, r1
    5aa0:	04 c0       	rjmp	.+8      	; 0x5aaa <_ZN5SysEx24generateMinMessageLenghtEhhhh+0xe>

        if ((wish == WISH_GET) ||
    5aa2:	6d 7f       	andi	r22, 0xFD	; 253
    5aa4:	b1 f0       	breq	.+44     	; 0x5ad2 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x36>
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value
    5aa6:	8b e0       	ldi	r24, 0x0B	; 11
    5aa8:	19 c0       	rjmp	.+50     	; 0x5adc <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

        }   else if (amount == AMOUNT_ALL)   {
    5aaa:	41 30       	cpi	r20, 0x01	; 1
    5aac:	a1 f4       	brne	.+40     	; 0x5ad6 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3a>

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
    5aae:	6d 7f       	andi	r22, 0xFD	; 253
    5ab0:	a1 f0       	breq	.+40     	; 0x5ada <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3e>
            return ML_REQ_STANDARD;

        else    {                                                                   //set

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];
    5ab2:	e0 2f       	mov	r30, r16
    5ab4:	f0 e0       	ldi	r31, 0x00	; 0
    5ab6:	ee 0f       	add	r30, r30
    5ab8:	ff 1f       	adc	r31, r31
    5aba:	ee 0f       	add	r30, r30
    5abc:	ff 1f       	adc	r31, r31
    5abe:	3e e1       	ldi	r19, 0x1E	; 30
    5ac0:	23 9f       	mul	r18, r19
    5ac2:	e0 0d       	add	r30, r0
    5ac4:	f1 1d       	adc	r31, r1
    5ac6:	11 24       	eor	r1, r1
    5ac8:	e8 0f       	add	r30, r24
    5aca:	f9 1f       	adc	r31, r25
    5acc:	87 85       	ldd	r24, Z+15	; 0x0f
    5ace:	87 5f       	subi	r24, 0xF7	; 247
    5ad0:	05 c0       	rjmp	.+10     	; 0x5adc <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

    //single parameter
    if (amount == AMOUNT_SINGLE)  {

        if ((wish == WISH_GET) ||
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
    5ad2:	8a e0       	ldi	r24, 0x0A	; 10
    5ad4:	03 c0       	rjmp	.+6      	; 0x5adc <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];

        }

    }   else return 0;
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	01 c0       	rjmp	.+2      	; 0x5adc <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value

        }   else if (amount == AMOUNT_ALL)   {

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
            return ML_REQ_STANDARD;
    5ada:	89 e0       	ldi	r24, 0x09	; 9

        }

    }   else return 0;

}
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <_ZN5SysEx9sendErrorE10sysExError>:

void SysEx::sendError(sysExError errorID)  {
    5ae0:	0f 93       	push	r16
    5ae2:	1f 93       	push	r17
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	00 d0       	rcall	.+0      	; 0x5aea <_ZN5SysEx9sendErrorE10sysExError+0xa>
    5aea:	00 d0       	rcall	.+0      	; 0x5aec <_ZN5SysEx9sendErrorE10sysExError+0xc>
    5aec:	1f 92       	push	r1
    5aee:	cd b7       	in	r28, 0x3d	; 61
    5af0:	de b7       	in	r29, 0x3e	; 62
    5af2:	8c 01       	movw	r16, r24
    //public function, interface objects can use this function directly
    //to override internal error checking

    uint8_t sysExResponse[5];

    sysExResponse[0] = SYS_EX_M_ID_0;
    5af4:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5af6:	83 e5       	ldi	r24, 0x53	; 83
    5af8:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5afa:	83 e4       	ldi	r24, 0x43	; 67
    5afc:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_NACK;
    5afe:	86 e4       	ldi	r24, 0x46	; 70
    5b00:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = errorID;
    5b02:	6d 83       	std	Y+5, r22	; 0x05

    midi.sendSysEx(sysExResponse, 5);
    5b04:	45 e0       	ldi	r20, 0x05	; 5
    5b06:	be 01       	movw	r22, r28
    5b08:	6f 5f       	subi	r22, 0xFF	; 255
    5b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b0c:	8d e8       	ldi	r24, 0x8D	; 141
    5b0e:	96 e0       	ldi	r25, 0x06	; 6
    5b10:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN4MIDI9sendSysExEPhh>
    dataAvailable = false;
    5b14:	f8 01       	movw	r30, r16
    5b16:	14 86       	std	Z+12, r1	; 0x0c

}
    5b18:	0f 90       	pop	r0
    5b1a:	0f 90       	pop	r0
    5b1c:	0f 90       	pop	r0
    5b1e:	0f 90       	pop	r0
    5b20:	0f 90       	pop	r0
    5b22:	df 91       	pop	r29
    5b24:	cf 91       	pop	r28
    5b26:	1f 91       	pop	r17
    5b28:	0f 91       	pop	r16
    5b2a:	08 95       	ret

00005b2c <_ZN5SysEx20checkMessageValidityEPhh>:
    //data is processed
    dataAvailable = false;

}

bool SysEx::checkMessageValidity(uint8_t sysExArray[], uint8_t arrSize)  {
    5b2c:	7f 92       	push	r7
    5b2e:	8f 92       	push	r8
    5b30:	9f 92       	push	r9
    5b32:	af 92       	push	r10
    5b34:	bf 92       	push	r11
    5b36:	cf 92       	push	r12
    5b38:	df 92       	push	r13
    5b3a:	ef 92       	push	r14
    5b3c:	ff 92       	push	r15
    5b3e:	0f 93       	push	r16
    5b40:	1f 93       	push	r17
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	7c 01       	movw	r14, r24
    5b48:	eb 01       	movw	r28, r22
    5b4a:	84 2e       	mov	r8, r20

    //check wish validity
    if (!checkWish(sysExArray[MS_WISH]))    {
    5b4c:	cc 80       	ldd	r12, Y+4	; 0x04
    5b4e:	82 e0       	ldi	r24, 0x02	; 2
    5b50:	8c 15       	cp	r24, r12
    5b52:	30 f4       	brcc	.+12     	; 0x5b60 <_ZN5SysEx20checkMessageValidityEPhh+0x34>

        sendError(ERROR_WISH);
    5b54:	61 e0       	ldi	r22, 0x01	; 1
    5b56:	c7 01       	movw	r24, r14
    5b58:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5b5c:	10 e0       	ldi	r17, 0x00	; 0
    5b5e:	84 c0       	rjmp	.+264    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted amount is correct
    if (!checkAmount(sysExArray[MS_AMOUNT]))    {
    5b60:	bd 80       	ldd	r11, Y+5	; 0x05
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	8b 15       	cp	r24, r11
    5b66:	30 f4       	brcc	.+12     	; 0x5b74 <_ZN5SysEx20checkMessageValidityEPhh+0x48>

        sendError(ERROR_AMOUNT);
    5b68:	62 e0       	ldi	r22, 0x02	; 2
    5b6a:	c7 01       	movw	r24, r14
    5b6c:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5b70:	10 e0       	ldi	r17, 0x00	; 0
    5b72:	7a c0       	rjmp	.+244    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if message type is correct
    if (!checkBlock(sysExArray[MS_BLOCK]))    {
    5b74:	de 80       	ldd	r13, Y+6	; 0x06
    5b76:	6d 2d       	mov	r22, r13
    5b78:	c7 01       	movw	r24, r14
    5b7a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <_ZN5SysEx10checkBlockEh>
    5b7e:	18 2f       	mov	r17, r24
    5b80:	81 11       	cpse	r24, r1
    5b82:	05 c0       	rjmp	.+10     	; 0x5b8e <_ZN5SysEx20checkMessageValidityEPhh+0x62>

        sendError(ERROR_BLOCK);
    5b84:	63 e0       	ldi	r22, 0x03	; 3
    5b86:	c7 01       	movw	r24, r14
    5b88:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5b8c:	6d c0       	rjmp	.+218    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    } else {

        //determine minimum message length based on asked parameters
        if (arrSize < generateMinMessageLenght(sysExArray[MS_WISH], sysExArray[MS_AMOUNT],sysExArray[MS_BLOCK], sysExArray[MS_SECTION]))    {
    5b8e:	7f 80       	ldd	r7, Y+7	; 0x07
    5b90:	07 2d       	mov	r16, r7
    5b92:	2d 2d       	mov	r18, r13
    5b94:	4b 2d       	mov	r20, r11
    5b96:	6c 2d       	mov	r22, r12
    5b98:	c7 01       	movw	r24, r14
    5b9a:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN5SysEx24generateMinMessageLenghtEhhhh>
    5b9e:	88 16       	cp	r8, r24
    5ba0:	30 f4       	brcc	.+12     	; 0x5bae <_ZN5SysEx20checkMessageValidityEPhh+0x82>

            sendError(ERROR_MESSAGE_LENGTH);
    5ba2:	67 e0       	ldi	r22, 0x07	; 7
    5ba4:	c7 01       	movw	r24, r14
    5ba6:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    5baa:	10 e0       	ldi	r17, 0x00	; 0
    5bac:	5d c0       	rjmp	.+186    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

}

bool SysEx::checkSection(uint8_t messageType, uint8_t messageSubType)    {

    return (messageSubType < messageInfo[messageType].numberOfSubtypes);
    5bae:	4d 2d       	mov	r20, r13
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	f7 01       	movw	r30, r14
    5bb4:	8e e1       	ldi	r24, 0x1E	; 30
    5bb6:	d8 9e       	mul	r13, r24
    5bb8:	e0 0d       	add	r30, r0
    5bba:	f1 1d       	adc	r31, r1
    5bbc:	11 24       	eor	r1, r1
        }

    }

    //check if subtype is correct
    if (!checkSection(sysExArray[MS_BLOCK], sysExArray[MS_SECTION])) {
    5bbe:	86 85       	ldd	r24, Z+14	; 0x0e
    5bc0:	78 16       	cp	r7, r24
    5bc2:	30 f0       	brcs	.+12     	; 0x5bd0 <_ZN5SysEx20checkMessageValidityEPhh+0xa4>

        sendError(ERROR_SECTION);
    5bc4:	64 e0       	ldi	r22, 0x04	; 4
    5bc6:	c7 01       	movw	r24, r14
    5bc8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5bcc:	10 e0       	ldi	r17, 0x00	; 0
    5bce:	4c c0       	rjmp	.+152    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {
    5bd0:	b1 10       	cpse	r11, r1
    5bd2:	28 c0       	rjmp	.+80     	; 0x5c24 <_ZN5SysEx20checkMessageValidityEPhh+0xf8>

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    5bd4:	28 85       	ldd	r18, Y+8	; 0x08
}

bool SysEx::checkParameterID(uint8_t messageType, uint8_t messageSubType, uint8_t parameter)   {

    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);
    5bd6:	8e e1       	ldi	r24, 0x1E	; 30
    5bd8:	84 9f       	mul	r24, r20
    5bda:	f0 01       	movw	r30, r0
    5bdc:	85 9f       	mul	r24, r21
    5bde:	f0 0d       	add	r31, r0
    5be0:	11 24       	eor	r1, r1
    5be2:	84 e0       	ldi	r24, 0x04	; 4
    5be4:	78 9e       	mul	r7, r24
    5be6:	e0 0d       	add	r30, r0
    5be8:	f1 1d       	adc	r31, r1
    5bea:	11 24       	eor	r1, r1
    5bec:	ee 0d       	add	r30, r14
    5bee:	ff 1d       	adc	r31, r15
    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    5bf0:	87 85       	ldd	r24, Z+15	; 0x0f
    5bf2:	28 17       	cp	r18, r24
    5bf4:	30 f0       	brcs	.+12     	; 0x5c02 <_ZN5SysEx20checkMessageValidityEPhh+0xd6>

            sendError(ERROR_PARAMETER);
    5bf6:	65 e0       	ldi	r22, 0x05	; 5
    5bf8:	c7 01       	movw	r24, r14
    5bfa:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    5bfe:	10 e0       	ldi	r17, 0x00	; 0
    5c00:	33 c0       	rjmp	.+102    	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

        }

        //if message wish is set, check new parameter
        if (sysExArray[MS_WISH] == WISH_SET) {
    5c02:	81 e0       	ldi	r24, 0x01	; 1
    5c04:	c8 12       	cpse	r12, r24
    5c06:	30 c0       	rjmp	.+96     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID], sysExArray[MS_NEW_PARAMETER_ID_SINGLE]))  {
    5c08:	09 85       	ldd	r16, Y+9	; 0x09
    5c0a:	47 2d       	mov	r20, r7
    5c0c:	6d 2d       	mov	r22, r13
    5c0e:	c7 01       	movw	r24, r14
    5c10:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <_ZN5SysEx17checkNewParameterEhhhh>
    5c14:	18 2f       	mov	r17, r24
    5c16:	81 11       	cpse	r24, r1
    5c18:	27 c0       	rjmp	.+78     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

                sendError(ERROR_NEW_PARAMETER);
    5c1a:	66 e0       	ldi	r22, 0x06	; 6
    5c1c:	c7 01       	movw	r24, r14
    5c1e:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    5c22:	22 c0       	rjmp	.+68     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    } else {

        //all parameters

        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	c8 12       	cpse	r12, r24
    5c28:	1f c0       	rjmp	.+62     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    5c2a:	91 2c       	mov	r9, r1
    5c2c:	89 e0       	ldi	r24, 0x09	; 9
    5c2e:	88 1a       	sub	r8, r24
    5c30:	91 08       	sbc	r9, r1
    5c32:	18 14       	cp	r1, r8
    5c34:	19 04       	cpc	r1, r9
    5c36:	c4 f4       	brge	.+48     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    5c38:	28 96       	adiw	r28, 0x08	; 8
    5c3a:	a1 2c       	mov	r10, r1
    5c3c:	b1 2c       	mov	r11, r1

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], i, sysExArray[arrayIndex+i]))   {
    5c3e:	09 91       	ld	r16, Y+
    5c40:	2a 2d       	mov	r18, r10
    5c42:	47 2d       	mov	r20, r7
    5c44:	6d 2d       	mov	r22, r13
    5c46:	c7 01       	movw	r24, r14
    5c48:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <_ZN5SysEx17checkNewParameterEhhhh>
    5c4c:	18 2f       	mov	r17, r24
    5c4e:	81 11       	cpse	r24, r1
    5c50:	05 c0       	rjmp	.+10     	; 0x5c5c <_ZN5SysEx20checkMessageValidityEPhh+0x130>

                sendError(ERROR_NEW_PARAMETER);
    5c52:	66 e0       	ldi	r22, 0x06	; 6
    5c54:	c7 01       	movw	r24, r14
    5c56:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    5c5a:	06 c0       	rjmp	.+12     	; 0x5c68 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    5c5c:	8f ef       	ldi	r24, 0xFF	; 255
    5c5e:	a8 1a       	sub	r10, r24
    5c60:	b8 0a       	sbc	r11, r24
    5c62:	a8 14       	cp	r10, r8
    5c64:	b9 04       	cpc	r11, r9
    5c66:	5c f3       	brlt	.-42     	; 0x5c3e <_ZN5SysEx20checkMessageValidityEPhh+0x112>

    }

    return true;

}
    5c68:	81 2f       	mov	r24, r17
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	1f 91       	pop	r17
    5c70:	0f 91       	pop	r16
    5c72:	ff 90       	pop	r15
    5c74:	ef 90       	pop	r14
    5c76:	df 90       	pop	r13
    5c78:	cf 90       	pop	r12
    5c7a:	bf 90       	pop	r11
    5c7c:	af 90       	pop	r10
    5c7e:	9f 90       	pop	r9
    5c80:	8f 90       	pop	r8
    5c82:	7f 90       	pop	r7
    5c84:	08 95       	ret

00005c86 <_ZN5SysEx17sendHelloResponseEv>:
    midi.sendSysEx(sysExResponse, 5);
    dataAvailable = false;

}

void SysEx::sendHelloResponse()   {
    5c86:	cf 93       	push	r28
    5c88:	df 93       	push	r29
    5c8a:	cd b7       	in	r28, 0x3d	; 61
    5c8c:	de b7       	in	r29, 0x3e	; 62
    5c8e:	27 97       	sbiw	r28, 0x07	; 7
    5c90:	0f b6       	in	r0, 0x3f	; 63
    5c92:	f8 94       	cli
    5c94:	de bf       	out	0x3e, r29	; 62
    5c96:	0f be       	out	0x3f, r0	; 63
    5c98:	cd bf       	out	0x3d, r28	; 61

    uint8_t sysExAckResponse[7];

    sysExAckResponse[0] = SYS_EX_M_ID_0;
    5c9a:	19 82       	std	Y+1, r1	; 0x01
    sysExAckResponse[1] = SYS_EX_M_ID_1;
    5c9c:	23 e5       	ldi	r18, 0x53	; 83
    5c9e:	2a 83       	std	Y+2, r18	; 0x02
    sysExAckResponse[2] = SYS_EX_M_ID_2;
    5ca0:	23 e4       	ldi	r18, 0x43	; 67
    5ca2:	2b 83       	std	Y+3, r18	; 0x03
    sysExAckResponse[3] = RESPONSE_ACK;
    5ca4:	21 e4       	ldi	r18, 0x41	; 65
    5ca6:	2c 83       	std	Y+4, r18	; 0x04
    sysExAckResponse[4] = VERSION_BYTE_0;
    5ca8:	21 e0       	ldi	r18, 0x01	; 1
    5caa:	2d 83       	std	Y+5, r18	; 0x05
    sysExAckResponse[5] = VERSION_BYTE_1;
    5cac:	1e 82       	std	Y+6, r1	; 0x06
    sysExAckResponse[6] = VERSION_BYTE_2;
    5cae:	1f 82       	std	Y+7, r1	; 0x07

    sysExEnabled = true;
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	22 87       	std	Z+10, r18	; 0x0a

    midi.sendSysEx(sysExAckResponse, 7);
    5cb4:	47 e0       	ldi	r20, 0x07	; 7
    5cb6:	be 01       	movw	r22, r28
    5cb8:	6f 5f       	subi	r22, 0xFF	; 255
    5cba:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbc:	8d e8       	ldi	r24, 0x8D	; 141
    5cbe:	96 e0       	ldi	r25, 0x06	; 6
    5cc0:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN4MIDI9sendSysExEPhh>

}
    5cc4:	27 96       	adiw	r28, 0x07	; 7
    5cc6:	0f b6       	in	r0, 0x3f	; 63
    5cc8:	f8 94       	cli
    5cca:	de bf       	out	0x3e, r29	; 62
    5ccc:	0f be       	out	0x3f, r0	; 63
    5cce:	cd bf       	out	0x3d, r28	; 61
    5cd0:	df 91       	pop	r29
    5cd2:	cf 91       	pop	r28
    5cd4:	08 95       	ret

00005cd6 <_ZN5SysEx12checkSpecialEPhh>:
    messageInfo[messageID].subTypeInfo[subTypeId][1] = minValue;
    messageInfo[messageID].subTypeInfo[subTypeId][2] = maxValue;

}

bool SysEx::checkSpecial(uint8_t *array, uint8_t size) {
    5cd6:	cf 93       	push	r28

    if (size == ML_SPECIAL)   {
    5cd8:	46 30       	cpi	r20, 0x06	; 6
    5cda:	09 f5       	brne	.+66     	; 0x5d1e <_ZN5SysEx12checkSpecialEPhh+0x48>
    5cdc:	db 01       	movw	r26, r22
    5cde:	fc 01       	movw	r30, r24

        if (array[size-2] == REBOOT_STRING)  {   //reset message
    5ce0:	14 96       	adiw	r26, 0x04	; 4
    5ce2:	2c 91       	ld	r18, X
    5ce4:	2f 37       	cpi	r18, 0x7F	; 127
    5ce6:	69 f4       	brne	.+26     	; 0x5d02 <_ZN5SysEx12checkSpecialEPhh+0x2c>

            if (sysExEnabled)
    5ce8:	c2 85       	ldd	r28, Z+10	; 0x0a
    5cea:	cc 23       	and	r28, r28
    5cec:	29 f0       	breq	.+10     	; 0x5cf8 <_ZN5SysEx12checkSpecialEPhh+0x22>
                sendRebootCallback();
    5cee:	01 90       	ld	r0, Z+
    5cf0:	f0 81       	ld	r31, Z
    5cf2:	e0 2d       	mov	r30, r0
    5cf4:	09 95       	icall
    5cf6:	16 c0       	rjmp	.+44     	; 0x5d24 <_ZN5SysEx12checkSpecialEPhh+0x4e>
            else sendError(ERROR_HANDSHAKE);
    5cf8:	60 e0       	ldi	r22, 0x00	; 0
    5cfa:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
            return true;
    5cfe:	c1 e0       	ldi	r28, 0x01	; 1
    5d00:	11 c0       	rjmp	.+34     	; 0x5d24 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == HELLO_STRING)   {
    5d02:	28 34       	cpi	r18, 0x48	; 72
    5d04:	21 f4       	brne	.+8      	; 0x5d0e <_ZN5SysEx12checkSpecialEPhh+0x38>

            //hello message, necessary for allowing configuration
            sendHelloResponse();
    5d06:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <_ZN5SysEx17sendHelloResponseEv>
            return true;
    5d0a:	c1 e0       	ldi	r28, 0x01	; 1
    5d0c:	0b c0       	rjmp	.+22     	; 0x5d24 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == FACTORY_RESET_STRING) {
    5d0e:	24 34       	cpi	r18, 0x44	; 68
    5d10:	41 f4       	brne	.+16     	; 0x5d22 <_ZN5SysEx12checkSpecialEPhh+0x4c>

            sendFactoryResetCallback();
    5d12:	02 80       	ldd	r0, Z+2	; 0x02
    5d14:	f3 81       	ldd	r31, Z+3	; 0x03
    5d16:	e0 2d       	mov	r30, r0
    5d18:	09 95       	icall

        }

    }   return false;
    5d1a:	c0 e0       	ldi	r28, 0x00	; 0
    5d1c:	03 c0       	rjmp	.+6      	; 0x5d24 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5d1e:	c0 e0       	ldi	r28, 0x00	; 0
    5d20:	01 c0       	rjmp	.+2      	; 0x5d24 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5d22:	c0 e0       	ldi	r28, 0x00	; 0

}
    5d24:	8c 2f       	mov	r24, r28
    5d26:	cf 91       	pop	r28
    5d28:	08 95       	ret

00005d2a <_ZN5SysEx15sendComponentIDEhh>:

    midi.sendSysEx(sysExAckResponse, 7);

}

void SysEx::sendComponentID(uint8_t blockID, uint8_t componentID)   {
    5d2a:	cf 93       	push	r28
    5d2c:	df 93       	push	r29
    5d2e:	00 d0       	rcall	.+0      	; 0x5d30 <_ZN5SysEx15sendComponentIDEhh+0x6>
    5d30:	00 d0       	rcall	.+0      	; 0x5d32 <_ZN5SysEx15sendComponentIDEhh+0x8>
    5d32:	00 d0       	rcall	.+0      	; 0x5d34 <_ZN5SysEx15sendComponentIDEhh+0xa>
    5d34:	cd b7       	in	r28, 0x3d	; 61
    5d36:	de b7       	in	r29, 0x3e	; 62

    uint8_t sysExResponse[6];

    sysExResponse[0] = SYS_EX_M_ID_0;
    5d38:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5d3a:	83 e5       	ldi	r24, 0x53	; 83
    5d3c:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5d3e:	83 e4       	ldi	r24, 0x43	; 67
    5d40:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = COMPONENT_INFO_STRING;
    5d42:	89 e4       	ldi	r24, 0x49	; 73
    5d44:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = blockID;
    5d46:	6d 83       	std	Y+5, r22	; 0x05
    sysExResponse[5] = componentID;
    5d48:	4e 83       	std	Y+6, r20	; 0x06

    midi.sendSysEx(sysExResponse, 6);
    5d4a:	46 e0       	ldi	r20, 0x06	; 6
    5d4c:	be 01       	movw	r22, r28
    5d4e:	6f 5f       	subi	r22, 0xFF	; 255
    5d50:	7f 4f       	sbci	r23, 0xFF	; 255
    5d52:	8d e8       	ldi	r24, 0x8D	; 141
    5d54:	96 e0       	ldi	r25, 0x06	; 6
    5d56:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN4MIDI9sendSysExEPhh>

}
    5d5a:	26 96       	adiw	r28, 0x06	; 6
    5d5c:	0f b6       	in	r0, 0x3f	; 63
    5d5e:	f8 94       	cli
    5d60:	de bf       	out	0x3e, r29	; 62
    5d62:	0f be       	out	0x3f, r0	; 63
    5d64:	cd bf       	out	0x3d, r28	; 61
    5d66:	df 91       	pop	r29
    5d68:	cf 91       	pop	r28
    5d6a:	08 95       	ret

00005d6c <_ZN5SysEx12sendResponseEPhh>:

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {
    5d6c:	8f 92       	push	r8
    5d6e:	9f 92       	push	r9
    5d70:	af 92       	push	r10
    5d72:	bf 92       	push	r11
    5d74:	cf 92       	push	r12
    5d76:	df 92       	push	r13
    5d78:	ef 92       	push	r14
    5d7a:	ff 92       	push	r15
    5d7c:	0f 93       	push	r16
    5d7e:	1f 93       	push	r17
    5d80:	cf 93       	push	r28
    5d82:	df 93       	push	r29
    5d84:	cd b7       	in	r28, 0x3d	; 61
    5d86:	de b7       	in	r29, 0x3e	; 62
    5d88:	c8 54       	subi	r28, 0x48	; 72
    5d8a:	d1 09       	sbc	r29, r1
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	f8 94       	cli
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	cd bf       	out	0x3d, r28	; 61
    5d96:	4c 01       	movw	r8, r24
    5d98:	6b 01       	movw	r12, r22
    uint8_t sysExResponse[64+ML_RES_BASIC];
    uint8_t arrayLength = 0;
    uint8_t arrayIndex = 0;
    bool eepromError = false;

    sysExResponse[0] = SYS_EX_M_ID_0;
    5d9a:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5d9c:	83 e5       	ldi	r24, 0x53	; 83
    5d9e:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5da0:	83 e4       	ldi	r24, 0x43	; 67
    5da2:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_ACK;
    5da4:	81 e4       	ldi	r24, 0x41	; 65
    5da6:	8c 83       	std	Y+4, r24	; 0x04

    if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    5da8:	db 01       	movw	r26, r22
    5daa:	15 96       	adiw	r26, 0x05	; 5
    5dac:	8c 91       	ld	r24, X
    5dae:	15 97       	sbiw	r26, 0x05	; 5
    5db0:	81 30       	cpi	r24, 0x01	; 1
    5db2:	09 f0       	breq	.+2      	; 0x5db6 <_ZN5SysEx12sendResponseEPhh+0x4a>
    5db4:	ac c0       	rjmp	.+344    	; 0x5f0e <_ZN5SysEx12sendResponseEPhh+0x1a2>

        uint8_t messageType = sysExArray[MS_BLOCK];
        uint8_t messageSubtype = sysExArray[MS_SECTION];
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];
    5db6:	17 96       	adiw	r26, 0x07	; 7
    5db8:	ec 91       	ld	r30, X
    5dba:	17 97       	sbiw	r26, 0x07	; 7
    5dbc:	f0 e0       	ldi	r31, 0x00	; 0
    5dbe:	16 96       	adiw	r26, 0x06	; 6
    5dc0:	9c 91       	ld	r25, X
    5dc2:	ee 0f       	add	r30, r30
    5dc4:	ff 1f       	adc	r31, r31
    5dc6:	ee 0f       	add	r30, r30
    5dc8:	ff 1f       	adc	r31, r31
    5dca:	be e1       	ldi	r27, 0x1E	; 30
    5dcc:	9b 9f       	mul	r25, r27
    5dce:	e0 0d       	add	r30, r0
    5dd0:	f1 1d       	adc	r31, r1
    5dd2:	11 24       	eor	r1, r1
    5dd4:	e8 0d       	add	r30, r8
    5dd6:	f9 1d       	adc	r31, r9
    5dd8:	e7 84       	ldd	r14, Z+15	; 0x0f

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    5dda:	fb 01       	movw	r30, r22
    5ddc:	94 81       	ldd	r25, Z+4	; 0x04
    5dde:	91 30       	cpi	r25, 0x01	; 1
    5de0:	81 f1       	breq	.+96     	; 0x5e42 <_ZN5SysEx12sendResponseEPhh+0xd6>
    5de2:	50 f0       	brcs	.+20     	; 0x5df8 <_ZN5SysEx12sendResponseEPhh+0x8c>
    5de4:	92 30       	cpi	r25, 0x02	; 2
    5de6:	09 f4       	brne	.+2      	; 0x5dea <_ZN5SysEx12sendResponseEPhh+0x7e>
    5de8:	5c c0       	rjmp	.+184    	; 0x5ea2 <_ZN5SysEx12sendResponseEPhh+0x136>
    5dea:	7f c0       	rjmp	.+254    	; 0x5eea <_ZN5SysEx12sendResponseEPhh+0x17e>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];
    5dec:	d6 01       	movw	r26, r12
    5dee:	18 96       	adiw	r26, 0x08	; 8
    5df0:	fc 90       	ld	r15, X

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5df2:	ee 24       	eor	r14, r14
    5df4:	e3 94       	inc	r14
    5df6:	03 c0       	rjmp	.+6      	; 0x5dfe <_ZN5SysEx12sendResponseEPhh+0x92>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    5df8:	ee 20       	and	r14, r14
    5dfa:	f1 f0       	breq	.+60     	; 0x5e38 <_ZN5SysEx12sendResponseEPhh+0xcc>

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
    5dfc:	f1 2c       	mov	r15, r1
    5dfe:	8e 01       	movw	r16, r28
    5e00:	0b 5f       	subi	r16, 0xFB	; 251
    5e02:	1f 4f       	sbci	r17, 0xFF	; 255
    5e04:	ce 01       	movw	r24, r28
    5e06:	8e 0d       	add	r24, r14
    5e08:	91 1d       	adc	r25, r1
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	35 96       	adiw	r30, 0x05	; 5
    5e0e:	5f 01       	movw	r10, r30
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
    5e10:	d4 01       	movw	r26, r8
    5e12:	14 96       	adiw	r26, 0x04	; 4
    5e14:	ed 91       	ld	r30, X+
    5e16:	fc 91       	ld	r31, X
    5e18:	15 97       	sbiw	r26, 0x05	; 5
    5e1a:	4f 2d       	mov	r20, r15
    5e1c:	d6 01       	movw	r26, r12
    5e1e:	17 96       	adiw	r26, 0x07	; 7
    5e20:	6c 91       	ld	r22, X
    5e22:	17 97       	sbiw	r26, 0x07	; 7
    5e24:	16 96       	adiw	r26, 0x06	; 6
    5e26:	8c 91       	ld	r24, X
    5e28:	09 95       	icall
    5e2a:	f8 01       	movw	r30, r16
    5e2c:	81 93       	st	Z+, r24
    5e2e:	8f 01       	movw	r16, r30
            _parameter++;
    5e30:	f3 94       	inc	r15

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    5e32:	ea 15       	cp	r30, r10
    5e34:	fb 05       	cpc	r31, r11
    5e36:	61 f7       	brne	.-40     	; 0x5e10 <_ZN5SysEx12sendResponseEPhh+0xa4>

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
            _parameter++;

        }   arrayLength = ML_SET_RESTORE+componentNr;
    5e38:	44 e0       	ldi	r20, 0x04	; 4
    5e3a:	4e 0d       	add	r20, r14
        break;
    5e3c:	77 c0       	rjmp	.+238    	; 0x5f2c <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5e3e:	ee 24       	eor	r14, r14
    5e40:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE+componentNr;
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    5e42:	81 30       	cpi	r24, 0x01	; 1
    5e44:	29 f0       	breq	.+10     	; 0x5e50 <_ZN5SysEx12sendResponseEPhh+0xe4>
            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            }   else    {

            _parameter = sysExArray[MS_PARAMETER_ID];
    5e46:	d6 01       	movw	r26, r12
    5e48:	18 96       	adiw	r26, 0x08	; 8
    5e4a:	fc 90       	ld	r15, X
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;
    5e4c:	89 e0       	ldi	r24, 0x09	; 9
    5e4e:	02 c0       	rjmp	.+4      	; 0x5e54 <_ZN5SysEx12sendResponseEPhh+0xe8>

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;
    5e50:	88 e0       	ldi	r24, 0x08	; 8
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
    5e52:	f1 2c       	mov	r15, r1
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5e54:	ee 20       	and	r14, r14
    5e56:	09 f4       	brne	.+2      	; 0x5e5a <_ZN5SysEx12sendResponseEPhh+0xee>
    5e58:	66 c0       	rjmp	.+204    	; 0x5f26 <_ZN5SysEx12sendResponseEPhh+0x1ba>
    5e5a:	a8 2e       	mov	r10, r24
    5e5c:	b1 2c       	mov	r11, r1
    5e5e:	86 01       	movw	r16, r12
    5e60:	0a 0d       	add	r16, r10
    5e62:	1b 1d       	adc	r17, r11
    5e64:	ae 0c       	add	r10, r14
    5e66:	b1 1c       	adc	r11, r1
    5e68:	ac 0c       	add	r10, r12
    5e6a:	bd 1c       	adc	r11, r13

            if (!sendSetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter, sysExArray[arrayIndex+i]))  {
    5e6c:	f8 01       	movw	r30, r16
    5e6e:	21 91       	ld	r18, Z+
    5e70:	8f 01       	movw	r16, r30
    5e72:	d4 01       	movw	r26, r8
    5e74:	16 96       	adiw	r26, 0x06	; 6
    5e76:	ed 91       	ld	r30, X+
    5e78:	fc 91       	ld	r31, X
    5e7a:	17 97       	sbiw	r26, 0x07	; 7
    5e7c:	4f 2d       	mov	r20, r15
    5e7e:	d6 01       	movw	r26, r12
    5e80:	17 96       	adiw	r26, 0x07	; 7
    5e82:	6c 91       	ld	r22, X
    5e84:	17 97       	sbiw	r26, 0x07	; 7
    5e86:	16 96       	adiw	r26, 0x06	; 6
    5e88:	8c 91       	ld	r24, X
    5e8a:	09 95       	icall
    5e8c:	88 23       	and	r24, r24
    5e8e:	09 f4       	brne	.+2      	; 0x5e92 <_ZN5SysEx12sendResponseEPhh+0x126>
    5e90:	52 c0       	rjmp	.+164    	; 0x5f36 <_ZN5SysEx12sendResponseEPhh+0x1ca>
                eepromError = true;
                break;

            }

            _parameter++;
    5e92:	f3 94       	inc	r15
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5e94:	0a 15       	cp	r16, r10
    5e96:	1b 05       	cpc	r17, r11
    5e98:	49 f7       	brne	.-46     	; 0x5e6c <_ZN5SysEx12sendResponseEPhh+0x100>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5e9a:	44 e0       	ldi	r20, 0x04	; 4
    5e9c:	47 c0       	rjmp	.+142    	; 0x5f2c <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5e9e:	ee 24       	eor	r14, r14
    5ea0:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
    5ea2:	81 30       	cpi	r24, 0x01	; 1
    5ea4:	19 f0       	breq	.+6      	; 0x5eac <_ZN5SysEx12sendResponseEPhh+0x140>
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];
    5ea6:	f6 01       	movw	r30, r12
    5ea8:	f0 84       	ldd	r15, Z+8	; 0x08
    5eaa:	01 c0       	rjmp	.+2      	; 0x5eae <_ZN5SysEx12sendResponseEPhh+0x142>
        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
    5eac:	f1 2c       	mov	r15, r1
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    5eae:	ae 2c       	mov	r10, r14
    5eb0:	b1 2c       	mov	r11, r1
    5eb2:	1a 14       	cp	r1, r10
    5eb4:	1b 04       	cpc	r1, r11
    5eb6:	cc f5       	brge	.+114    	; 0x5f2a <_ZN5SysEx12sendResponseEPhh+0x1be>
    5eb8:	00 e0       	ldi	r16, 0x00	; 0
    5eba:	10 e0       	ldi	r17, 0x00	; 0

            if (!sendResetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter))  {
    5ebc:	d4 01       	movw	r26, r8
    5ebe:	18 96       	adiw	r26, 0x08	; 8
    5ec0:	ed 91       	ld	r30, X+
    5ec2:	fc 91       	ld	r31, X
    5ec4:	19 97       	sbiw	r26, 0x09	; 9
    5ec6:	4f 2d       	mov	r20, r15
    5ec8:	40 0f       	add	r20, r16
    5eca:	d6 01       	movw	r26, r12
    5ecc:	17 96       	adiw	r26, 0x07	; 7
    5ece:	6c 91       	ld	r22, X
    5ed0:	17 97       	sbiw	r26, 0x07	; 7
    5ed2:	16 96       	adiw	r26, 0x06	; 6
    5ed4:	8c 91       	ld	r24, X
    5ed6:	09 95       	icall
    5ed8:	88 23       	and	r24, r24
    5eda:	69 f1       	breq	.+90     	; 0x5f36 <_ZN5SysEx12sendResponseEPhh+0x1ca>
        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    5edc:	0f 5f       	subi	r16, 0xFF	; 255
    5ede:	1f 4f       	sbci	r17, 0xFF	; 255
    5ee0:	0a 15       	cp	r16, r10
    5ee2:	1b 05       	cpc	r17, r11
    5ee4:	59 f7       	brne	.-42     	; 0x5ebc <_ZN5SysEx12sendResponseEPhh+0x150>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5ee6:	44 e0       	ldi	r20, 0x04	; 4
    5ee8:	21 c0       	rjmp	.+66     	; 0x5f2c <_ZN5SysEx12sendResponseEPhh+0x1c0>
        break;

    }

    if (dataAvailable)  {
    5eea:	f4 01       	movw	r30, r8
    5eec:	84 85       	ldd	r24, Z+12	; 0x0c
    5eee:	88 23       	and	r24, r24
    5ef0:	39 f1       	breq	.+78     	; 0x5f40 <_ZN5SysEx12sendResponseEPhh+0x1d4>
    5ef2:	40 e0       	ldi	r20, 0x00	; 0

        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
    5ef4:	be 01       	movw	r22, r28
    5ef6:	6f 5f       	subi	r22, 0xFF	; 255
    5ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    5efa:	8d e8       	ldi	r24, 0x8D	; 141
    5efc:	96 e0       	ldi	r25, 0x06	; 6
    5efe:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN4MIDI9sendSysExEPhh>
    5f02:	1e c0       	rjmp	.+60     	; 0x5f40 <_ZN5SysEx12sendResponseEPhh+0x1d4>
        else                sendError(ERROR_EEPROM);
    5f04:	68 e0       	ldi	r22, 0x08	; 8
    5f06:	c4 01       	movw	r24, r8
    5f08:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
    5f0c:	19 c0       	rjmp	.+50     	; 0x5f40 <_ZN5SysEx12sendResponseEPhh+0x1d4>
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    5f0e:	db 01       	movw	r26, r22
    5f10:	14 96       	adiw	r26, 0x04	; 4
    5f12:	9c 91       	ld	r25, X
    5f14:	91 30       	cpi	r25, 0x01	; 1
    5f16:	09 f4       	brne	.+2      	; 0x5f1a <_ZN5SysEx12sendResponseEPhh+0x1ae>
    5f18:	92 cf       	rjmp	.-220    	; 0x5e3e <_ZN5SysEx12sendResponseEPhh+0xd2>
    5f1a:	08 f4       	brcc	.+2      	; 0x5f1e <_ZN5SysEx12sendResponseEPhh+0x1b2>
    5f1c:	67 cf       	rjmp	.-306    	; 0x5dec <_ZN5SysEx12sendResponseEPhh+0x80>
    5f1e:	92 30       	cpi	r25, 0x02	; 2
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <_ZN5SysEx12sendResponseEPhh+0x1b8>
    5f22:	bd cf       	rjmp	.-134    	; 0x5e9e <_ZN5SysEx12sendResponseEPhh+0x132>
    5f24:	e2 cf       	rjmp	.-60     	; 0x5eea <_ZN5SysEx12sendResponseEPhh+0x17e>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5f26:	44 e0       	ldi	r20, 0x04	; 4
    5f28:	01 c0       	rjmp	.+2      	; 0x5f2c <_ZN5SysEx12sendResponseEPhh+0x1c0>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5f2a:	44 e0       	ldi	r20, 0x04	; 4
        break;

    }

    if (dataAvailable)  {
    5f2c:	f4 01       	movw	r30, r8
    5f2e:	84 85       	ldd	r24, Z+12	; 0x0c
    5f30:	81 11       	cpse	r24, r1
    5f32:	e0 cf       	rjmp	.-64     	; 0x5ef4 <_ZN5SysEx12sendResponseEPhh+0x188>
    5f34:	05 c0       	rjmp	.+10     	; 0x5f40 <_ZN5SysEx12sendResponseEPhh+0x1d4>
    5f36:	d4 01       	movw	r26, r8
    5f38:	1c 96       	adiw	r26, 0x0c	; 12
    5f3a:	8c 91       	ld	r24, X
    5f3c:	81 11       	cpse	r24, r1
    5f3e:	e2 cf       	rjmp	.-60     	; 0x5f04 <_ZN5SysEx12sendResponseEPhh+0x198>
        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
        else                sendError(ERROR_EEPROM);

    }

}
    5f40:	c8 5b       	subi	r28, 0xB8	; 184
    5f42:	df 4f       	sbci	r29, 0xFF	; 255
    5f44:	0f b6       	in	r0, 0x3f	; 63
    5f46:	f8 94       	cli
    5f48:	de bf       	out	0x3e, r29	; 62
    5f4a:	0f be       	out	0x3f, r0	; 63
    5f4c:	cd bf       	out	0x3d, r28	; 61
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	0f 91       	pop	r16
    5f56:	ff 90       	pop	r15
    5f58:	ef 90       	pop	r14
    5f5a:	df 90       	pop	r13
    5f5c:	cf 90       	pop	r12
    5f5e:	bf 90       	pop	r11
    5f60:	af 90       	pop	r10
    5f62:	9f 90       	pop	r9
    5f64:	8f 90       	pop	r8
    5f66:	08 95       	ret

00005f68 <_ZN5SysEx11handleSysExEPhh>:

    }   return false;

}

void SysEx::handleSysEx(uint8_t *sysExArray, uint8_t size)    {
    5f68:	ff 92       	push	r15
    5f6a:	0f 93       	push	r16
    5f6c:	1f 93       	push	r17
    5f6e:	cf 93       	push	r28
    5f70:	df 93       	push	r29

    //we have new data
    dataAvailable = true;
    5f72:	21 e0       	ldi	r18, 0x01	; 1
    5f74:	fc 01       	movw	r30, r24
    5f76:	24 87       	std	Z+12, r18	; 0x0c

    //ignore messages shorter than absolute minimum
    if (size < ML_SPECIAL) return;
    5f78:	46 30       	cpi	r20, 0x06	; 6
    5f7a:	40 f1       	brcs	.+80     	; 0x5fcc <_ZN5SysEx11handleSysExEPhh+0x64>
    5f7c:	f4 2e       	mov	r15, r20
    5f7e:	eb 01       	movw	r28, r22
    5f80:	8c 01       	movw	r16, r24
    //don't respond to sysex message if device ID is wrong
    sysExManufacturerID id;
    id.byte1 = sysExArray[MS_M_ID_0];
    5f82:	49 81       	ldd	r20, Y+1	; 0x01
    id.byte2 = sysExArray[MS_M_ID_1];
    5f84:	5a 81       	ldd	r21, Y+2	; 0x02
    id.byte3 = sysExArray[MS_M_ID_2];
    5f86:	6b 81       	ldd	r22, Y+3	; 0x03

    if (!checkID(id)) return;
    5f88:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <_ZN5SysEx7checkIDE19sysExManufacturerID>
    5f8c:	88 23       	and	r24, r24
    5f8e:	f1 f0       	breq	.+60     	; 0x5fcc <_ZN5SysEx11handleSysExEPhh+0x64>

    if (checkSpecial(sysExArray, size)) return;
    5f90:	4f 2d       	mov	r20, r15
    5f92:	be 01       	movw	r22, r28
    5f94:	c8 01       	movw	r24, r16
    5f96:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <_ZN5SysEx12checkSpecialEPhh>
    5f9a:	81 11       	cpse	r24, r1
    5f9c:	17 c0       	rjmp	.+46     	; 0x5fcc <_ZN5SysEx11handleSysExEPhh+0x64>
    //message appears to be fine for now
    //check if hello message has been received by now
    if (!sysExEnabled) {
    5f9e:	f8 01       	movw	r30, r16
    5fa0:	82 85       	ldd	r24, Z+10	; 0x0a
    5fa2:	81 11       	cpse	r24, r1
    5fa4:	05 c0       	rjmp	.+10     	; 0x5fb0 <_ZN5SysEx11handleSysExEPhh+0x48>

        //message is fine, but handshake hasn't been received
        sendError(ERROR_HANDSHAKE);
    5fa6:	60 e0       	ldi	r22, 0x00	; 0
    5fa8:	c8 01       	movw	r24, r16
    5faa:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN5SysEx9sendErrorE10sysExError>
        return;
    5fae:	0e c0       	rjmp	.+28     	; 0x5fcc <_ZN5SysEx11handleSysExEPhh+0x64>

    }

    if (!checkMessageValidity(sysExArray, size)) return; //message not valid
    5fb0:	4f 2d       	mov	r20, r15
    5fb2:	be 01       	movw	r22, r28
    5fb4:	c8 01       	movw	r24, r16
    5fb6:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <_ZN5SysEx20checkMessageValidityEPhh>
    5fba:	88 23       	and	r24, r24
    5fbc:	39 f0       	breq	.+14     	; 0x5fcc <_ZN5SysEx11handleSysExEPhh+0x64>
        sendResponse(sysExArray, size);
    5fbe:	4f 2d       	mov	r20, r15
    5fc0:	be 01       	movw	r22, r28
    5fc2:	c8 01       	movw	r24, r16
    5fc4:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <_ZN5SysEx12sendResponseEPhh>

    //data is processed
    dataAvailable = false;
    5fc8:	f8 01       	movw	r30, r16
    5fca:	14 86       	std	Z+12, r1	; 0x0c

}
    5fcc:	df 91       	pop	r29
    5fce:	cf 91       	pop	r28
    5fd0:	1f 91       	pop	r17
    5fd2:	0f 91       	pop	r16
    5fd4:	ff 90       	pop	r15
    5fd6:	08 95       	ret

00005fd8 <_ZN5SysEx15setHandleRebootEPFvvE>:

//callbacks

void SysEx::setHandleReboot(void (*fptr)(void)) {

    sendRebootCallback = fptr;
    5fd8:	fc 01       	movw	r30, r24
    5fda:	71 83       	std	Z+1, r23	; 0x01
    5fdc:	60 83       	st	Z, r22
    5fde:	08 95       	ret

00005fe0 <_ZN5SysEx21setHandleFactoryResetEPFvvE>:

}

void SysEx::setHandleFactoryReset(void (*fptr)(void))   {

    sendFactoryResetCallback = fptr;
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	73 83       	std	Z+3, r23	; 0x03
    5fe4:	62 83       	std	Z+2, r22	; 0x02
    5fe6:	08 95       	ret

00005fe8 <_ZN5SysEx12setHandleGetEPFhhhhE>:

}

void SysEx::setHandleGet(uint8_t(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendGetCallback = fptr;
    5fe8:	fc 01       	movw	r30, r24
    5fea:	75 83       	std	Z+5, r23	; 0x05
    5fec:	64 83       	std	Z+4, r22	; 0x04
    5fee:	08 95       	ret

00005ff0 <_ZN5SysEx12setHandleSetEPFbhhhhE>:

}

void SysEx::setHandleSet(bool(*fptr)(uint8_t messageType, uint8_t messageSubType, uint8_t parameterID, uint8_t newParameterID))    {

    sendSetCallback = fptr;
    5ff0:	fc 01       	movw	r30, r24
    5ff2:	77 83       	std	Z+7, r23	; 0x07
    5ff4:	66 83       	std	Z+6, r22	; 0x06
    5ff6:	08 95       	ret

00005ff8 <_ZN5SysEx14setHandleResetEPFbhhhE>:

}

void SysEx::setHandleReset(bool(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendResetCallback = fptr;
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	71 87       	std	Z+9, r23	; 0x09
    5ffc:	60 87       	std	Z+8, r22	; 0x08
    5ffe:	08 95       	ret

00006000 <_ZN5SysEx20configurationEnabledEv>:

bool SysEx::configurationEnabled()  {

    return sysExEnabled;

}
    6000:	fc 01       	movw	r30, r24
    6002:	82 85       	ldd	r24, Z+10	; 0x0a
    6004:	08 95       	ret

00006006 <_GLOBAL__sub_I__ZN5SysExC2Ev>:

SysEx sysEx;
    6006:	82 e9       	ldi	r24, 0x92	; 146
    6008:	96 e0       	ldi	r25, 0x06	; 6
    600a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <_ZN5SysExC1Ev>
    600e:	08 95       	ret

00006010 <__divmodhi4>:
    6010:	97 fb       	bst	r25, 7
    6012:	07 2e       	mov	r0, r23
    6014:	16 f4       	brtc	.+4      	; 0x601a <__divmodhi4+0xa>
    6016:	00 94       	com	r0
    6018:	07 d0       	rcall	.+14     	; 0x6028 <__divmodhi4_neg1>
    601a:	77 fd       	sbrc	r23, 7
    601c:	09 d0       	rcall	.+18     	; 0x6030 <__divmodhi4_neg2>
    601e:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <__udivmodhi4>
    6022:	07 fc       	sbrc	r0, 7
    6024:	05 d0       	rcall	.+10     	; 0x6030 <__divmodhi4_neg2>
    6026:	3e f4       	brtc	.+14     	; 0x6036 <__divmodhi4_exit>

00006028 <__divmodhi4_neg1>:
    6028:	90 95       	com	r25
    602a:	81 95       	neg	r24
    602c:	9f 4f       	sbci	r25, 0xFF	; 255
    602e:	08 95       	ret

00006030 <__divmodhi4_neg2>:
    6030:	70 95       	com	r23
    6032:	61 95       	neg	r22
    6034:	7f 4f       	sbci	r23, 0xFF	; 255

00006036 <__divmodhi4_exit>:
    6036:	08 95       	ret

00006038 <__udivmodsi4>:
    6038:	a1 e2       	ldi	r26, 0x21	; 33
    603a:	1a 2e       	mov	r1, r26
    603c:	aa 1b       	sub	r26, r26
    603e:	bb 1b       	sub	r27, r27
    6040:	fd 01       	movw	r30, r26
    6042:	0d c0       	rjmp	.+26     	; 0x605e <__udivmodsi4_ep>

00006044 <__udivmodsi4_loop>:
    6044:	aa 1f       	adc	r26, r26
    6046:	bb 1f       	adc	r27, r27
    6048:	ee 1f       	adc	r30, r30
    604a:	ff 1f       	adc	r31, r31
    604c:	a2 17       	cp	r26, r18
    604e:	b3 07       	cpc	r27, r19
    6050:	e4 07       	cpc	r30, r20
    6052:	f5 07       	cpc	r31, r21
    6054:	20 f0       	brcs	.+8      	; 0x605e <__udivmodsi4_ep>
    6056:	a2 1b       	sub	r26, r18
    6058:	b3 0b       	sbc	r27, r19
    605a:	e4 0b       	sbc	r30, r20
    605c:	f5 0b       	sbc	r31, r21

0000605e <__udivmodsi4_ep>:
    605e:	66 1f       	adc	r22, r22
    6060:	77 1f       	adc	r23, r23
    6062:	88 1f       	adc	r24, r24
    6064:	99 1f       	adc	r25, r25
    6066:	1a 94       	dec	r1
    6068:	69 f7       	brne	.-38     	; 0x6044 <__udivmodsi4_loop>
    606a:	60 95       	com	r22
    606c:	70 95       	com	r23
    606e:	80 95       	com	r24
    6070:	90 95       	com	r25
    6072:	9b 01       	movw	r18, r22
    6074:	ac 01       	movw	r20, r24
    6076:	bd 01       	movw	r22, r26
    6078:	cf 01       	movw	r24, r30
    607a:	08 95       	ret

0000607c <__tablejump2__>:
    607c:	ee 0f       	add	r30, r30
    607e:	ff 1f       	adc	r31, r31
    6080:	05 90       	lpm	r0, Z+
    6082:	f4 91       	lpm	r31, Z
    6084:	e0 2d       	mov	r30, r0
    6086:	09 94       	ijmp

00006088 <__ashldi3>:
    6088:	0f 93       	push	r16
    608a:	08 30       	cpi	r16, 0x08	; 8
    608c:	90 f0       	brcs	.+36     	; 0x60b2 <__ashldi3+0x2a>
    608e:	98 2f       	mov	r25, r24
    6090:	87 2f       	mov	r24, r23
    6092:	76 2f       	mov	r23, r22
    6094:	65 2f       	mov	r22, r21
    6096:	54 2f       	mov	r21, r20
    6098:	43 2f       	mov	r20, r19
    609a:	32 2f       	mov	r19, r18
    609c:	22 27       	eor	r18, r18
    609e:	08 50       	subi	r16, 0x08	; 8
    60a0:	f4 cf       	rjmp	.-24     	; 0x608a <__ashldi3+0x2>
    60a2:	22 0f       	add	r18, r18
    60a4:	33 1f       	adc	r19, r19
    60a6:	44 1f       	adc	r20, r20
    60a8:	55 1f       	adc	r21, r21
    60aa:	66 1f       	adc	r22, r22
    60ac:	77 1f       	adc	r23, r23
    60ae:	88 1f       	adc	r24, r24
    60b0:	99 1f       	adc	r25, r25
    60b2:	0a 95       	dec	r16
    60b4:	b2 f7       	brpl	.-20     	; 0x60a2 <__ashldi3+0x1a>
    60b6:	0f 91       	pop	r16
    60b8:	08 95       	ret

000060ba <__ashrdi3>:
    60ba:	97 fb       	bst	r25, 7
    60bc:	10 f8       	bld	r1, 0

000060be <__lshrdi3>:
    60be:	16 94       	lsr	r1
    60c0:	00 08       	sbc	r0, r0
    60c2:	0f 93       	push	r16
    60c4:	08 30       	cpi	r16, 0x08	; 8
    60c6:	98 f0       	brcs	.+38     	; 0x60ee <__lshrdi3+0x30>
    60c8:	08 50       	subi	r16, 0x08	; 8
    60ca:	23 2f       	mov	r18, r19
    60cc:	34 2f       	mov	r19, r20
    60ce:	45 2f       	mov	r20, r21
    60d0:	56 2f       	mov	r21, r22
    60d2:	67 2f       	mov	r22, r23
    60d4:	78 2f       	mov	r23, r24
    60d6:	89 2f       	mov	r24, r25
    60d8:	90 2d       	mov	r25, r0
    60da:	f4 cf       	rjmp	.-24     	; 0x60c4 <__lshrdi3+0x6>
    60dc:	05 94       	asr	r0
    60de:	97 95       	ror	r25
    60e0:	87 95       	ror	r24
    60e2:	77 95       	ror	r23
    60e4:	67 95       	ror	r22
    60e6:	57 95       	ror	r21
    60e8:	47 95       	ror	r20
    60ea:	37 95       	ror	r19
    60ec:	27 95       	ror	r18
    60ee:	0a 95       	dec	r16
    60f0:	aa f7       	brpl	.-22     	; 0x60dc <__lshrdi3+0x1e>
    60f2:	0f 91       	pop	r16
    60f4:	08 95       	ret

000060f6 <__udivmodhi4>:
    60f6:	aa 1b       	sub	r26, r26
    60f8:	bb 1b       	sub	r27, r27
    60fa:	51 e1       	ldi	r21, 0x11	; 17
    60fc:	07 c0       	rjmp	.+14     	; 0x610c <__udivmodhi4_ep>

000060fe <__udivmodhi4_loop>:
    60fe:	aa 1f       	adc	r26, r26
    6100:	bb 1f       	adc	r27, r27
    6102:	a6 17       	cp	r26, r22
    6104:	b7 07       	cpc	r27, r23
    6106:	10 f0       	brcs	.+4      	; 0x610c <__udivmodhi4_ep>
    6108:	a6 1b       	sub	r26, r22
    610a:	b7 0b       	sbc	r27, r23

0000610c <__udivmodhi4_ep>:
    610c:	88 1f       	adc	r24, r24
    610e:	99 1f       	adc	r25, r25
    6110:	5a 95       	dec	r21
    6112:	a9 f7       	brne	.-22     	; 0x60fe <__udivmodhi4_loop>
    6114:	80 95       	com	r24
    6116:	90 95       	com	r25
    6118:	bc 01       	movw	r22, r24
    611a:	cd 01       	movw	r24, r26
    611c:	08 95       	ret

0000611e <eeprom_read_byte>:
    611e:	f9 99       	sbic	0x1f, 1	; 31
    6120:	fe cf       	rjmp	.-4      	; 0x611e <eeprom_read_byte>
    6122:	92 bd       	out	0x22, r25	; 34
    6124:	81 bd       	out	0x21, r24	; 33
    6126:	f8 9a       	sbi	0x1f, 0	; 31
    6128:	99 27       	eor	r25, r25
    612a:	80 b5       	in	r24, 0x20	; 32
    612c:	08 95       	ret

0000612e <eeprom_update_byte>:
    612e:	26 2f       	mov	r18, r22

00006130 <eeprom_update_r18>:
    6130:	f9 99       	sbic	0x1f, 1	; 31
    6132:	fe cf       	rjmp	.-4      	; 0x6130 <eeprom_update_r18>
    6134:	92 bd       	out	0x22, r25	; 34
    6136:	81 bd       	out	0x21, r24	; 33
    6138:	f8 9a       	sbi	0x1f, 0	; 31
    613a:	01 97       	sbiw	r24, 0x01	; 1
    613c:	00 b4       	in	r0, 0x20	; 32
    613e:	02 16       	cp	r0, r18
    6140:	39 f0       	breq	.+14     	; 0x6150 <eeprom_update_r18+0x20>
    6142:	1f ba       	out	0x1f, r1	; 31
    6144:	20 bd       	out	0x20, r18	; 32
    6146:	0f b6       	in	r0, 0x3f	; 63
    6148:	f8 94       	cli
    614a:	fa 9a       	sbi	0x1f, 2	; 31
    614c:	f9 9a       	sbi	0x1f, 1	; 31
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	08 95       	ret

00006152 <_exit>:
    6152:	f8 94       	cli

00006154 <__stop_program>:
    6154:	ff cf       	rjmp	.-2      	; 0x6154 <__stop_program>
