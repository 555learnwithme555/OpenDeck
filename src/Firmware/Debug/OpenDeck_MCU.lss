
OpenDeck_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000060c2  00006156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000060c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000652  0080019a  0080019a  000061f0  2**0
                  ALLOC
  3 .noinit       00000004  008007ec  008007ec  000061f0  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000061f0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006220  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a48  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001a1ab  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003eaf  00000000  00000000  00020e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000061e6  00000000  00000000  00024d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000021bc  00000000  00000000  0002aee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000066a6  00000000  00000000  0002d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f987  00000000  00000000  0003374a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001680  00000000  00000000  000430d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      28:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__vector_11>
      30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      3c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      44:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      54:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_21>
      58:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      5c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      64:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_25>
      68:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_26>
      6c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_27>
      70:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      74:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_29>
      78:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      7c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      80:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      84:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      8c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      90:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      94:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      98:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      9c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      ac:	92 11       	cpse	r25, r2
      ae:	ac 11       	cpse	r26, r12
      b0:	ac 11       	cpse	r26, r12
      b2:	ac 11       	cpse	r26, r12
      b4:	ac 11       	cpse	r26, r12
      b6:	ac 11       	cpse	r26, r12
      b8:	ac 11       	cpse	r26, r12
      ba:	ac 11       	cpse	r26, r12
      bc:	ac 11       	cpse	r26, r12
      be:	ac 11       	cpse	r26, r12
      c0:	ac 11       	cpse	r26, r12
      c2:	ac 11       	cpse	r26, r12
      c4:	ac 11       	cpse	r26, r12
      c6:	ac 11       	cpse	r26, r12
      c8:	ac 11       	cpse	r26, r12
      ca:	ac 11       	cpse	r26, r12
      cc:	92 11       	cpse	r25, r2
      ce:	ac 11       	cpse	r26, r12
      d0:	ac 11       	cpse	r26, r12
      d2:	ac 11       	cpse	r26, r12
      d4:	ac 11       	cpse	r26, r12
      d6:	ac 11       	cpse	r26, r12
      d8:	ac 11       	cpse	r26, r12
      da:	ac 11       	cpse	r26, r12
      dc:	ac 11       	cpse	r26, r12
      de:	ac 11       	cpse	r26, r12
      e0:	ac 11       	cpse	r26, r12
      e2:	ac 11       	cpse	r26, r12
      e4:	ac 11       	cpse	r26, r12
      e6:	ac 11       	cpse	r26, r12
      e8:	ac 11       	cpse	r26, r12
      ea:	ac 11       	cpse	r26, r12
      ec:	92 11       	cpse	r25, r2
      ee:	ac 11       	cpse	r26, r12
      f0:	ac 11       	cpse	r26, r12
      f2:	ac 11       	cpse	r26, r12
      f4:	ac 11       	cpse	r26, r12
      f6:	ac 11       	cpse	r26, r12
      f8:	ac 11       	cpse	r26, r12
      fa:	ac 11       	cpse	r26, r12
      fc:	ac 11       	cpse	r26, r12
      fe:	ac 11       	cpse	r26, r12
     100:	ac 11       	cpse	r26, r12
     102:	ac 11       	cpse	r26, r12
     104:	ac 11       	cpse	r26, r12
     106:	ac 11       	cpse	r26, r12
     108:	ac 11       	cpse	r26, r12
     10a:	ac 11       	cpse	r26, r12
     10c:	92 11       	cpse	r25, r2
     10e:	ac 11       	cpse	r26, r12
     110:	ac 11       	cpse	r26, r12
     112:	ac 11       	cpse	r26, r12
     114:	ac 11       	cpse	r26, r12
     116:	ac 11       	cpse	r26, r12
     118:	ac 11       	cpse	r26, r12
     11a:	ac 11       	cpse	r26, r12
     11c:	ac 11       	cpse	r26, r12
     11e:	ac 11       	cpse	r26, r12
     120:	ac 11       	cpse	r26, r12
     122:	ac 11       	cpse	r26, r12
     124:	ac 11       	cpse	r26, r12
     126:	ac 11       	cpse	r26, r12
     128:	ac 11       	cpse	r26, r12
     12a:	ac 11       	cpse	r26, r12
     12c:	86 11       	cpse	r24, r6
     12e:	ac 11       	cpse	r26, r12
     130:	ac 11       	cpse	r26, r12
     132:	ac 11       	cpse	r26, r12
     134:	ac 11       	cpse	r26, r12
     136:	ac 11       	cpse	r26, r12
     138:	ac 11       	cpse	r26, r12
     13a:	ac 11       	cpse	r26, r12
     13c:	ac 11       	cpse	r26, r12
     13e:	ac 11       	cpse	r26, r12
     140:	ac 11       	cpse	r26, r12
     142:	ac 11       	cpse	r26, r12
     144:	ac 11       	cpse	r26, r12
     146:	ac 11       	cpse	r26, r12
     148:	ac 11       	cpse	r26, r12
     14a:	ac 11       	cpse	r26, r12
     14c:	86 11       	cpse	r24, r6
     14e:	ac 11       	cpse	r26, r12
     150:	ac 11       	cpse	r26, r12
     152:	ac 11       	cpse	r26, r12
     154:	ac 11       	cpse	r26, r12
     156:	ac 11       	cpse	r26, r12
     158:	ac 11       	cpse	r26, r12
     15a:	ac 11       	cpse	r26, r12
     15c:	ac 11       	cpse	r26, r12
     15e:	ac 11       	cpse	r26, r12
     160:	ac 11       	cpse	r26, r12
     162:	ac 11       	cpse	r26, r12
     164:	ac 11       	cpse	r26, r12
     166:	ac 11       	cpse	r26, r12
     168:	ac 11       	cpse	r26, r12
     16a:	ac 11       	cpse	r26, r12
     16c:	92 11       	cpse	r25, r2
     16e:	ac 11       	cpse	r26, r12
     170:	ac 11       	cpse	r26, r12
     172:	ac 11       	cpse	r26, r12
     174:	ac 11       	cpse	r26, r12
     176:	ac 11       	cpse	r26, r12
     178:	ac 11       	cpse	r26, r12
     17a:	ac 11       	cpse	r26, r12
     17c:	ac 11       	cpse	r26, r12
     17e:	ac 11       	cpse	r26, r12
     180:	ac 11       	cpse	r26, r12
     182:	ac 11       	cpse	r26, r12
     184:	ac 11       	cpse	r26, r12
     186:	ac 11       	cpse	r26, r12
     188:	ac 11       	cpse	r26, r12
     18a:	ac 11       	cpse	r26, r12
     18c:	9e 11       	cpse	r25, r14
     18e:	86 11       	cpse	r24, r6
     190:	92 11       	cpse	r25, r2
     192:	86 11       	cpse	r24, r6
     194:	ac 11       	cpse	r26, r12
     196:	ac 11       	cpse	r26, r12
     198:	77 11       	cpse	r23, r7
     19a:	ac 11       	cpse	r26, r12
     19c:	77 11       	cpse	r23, r7
     19e:	ac 11       	cpse	r26, r12
     1a0:	77 11       	cpse	r23, r7
     1a2:	77 11       	cpse	r23, r7
     1a4:	77 11       	cpse	r23, r7
     1a6:	ac 11       	cpse	r26, r12
     1a8:	77 11       	cpse	r23, r7
     1aa:	77 11       	cpse	r23, r7
     1ac:	d9 19       	sub	r29, r9
     1ae:	02 1a       	sub	r0, r18
     1b0:	f6 1a       	sub	r15, r22
     1b2:	02 1a       	sub	r0, r18
     1b4:	f6 1a       	sub	r15, r22
     1b6:	43 1a       	sub	r4, r19
     1b8:	67 1a       	sub	r6, r23
     1ba:	f6 1a       	sub	r15, r22
     1bc:	c1 1a       	sub	r12, r17
     1be:	d2 1a       	sub	r13, r18
     1c0:	39 28       	or	r3, r9
     1c2:	42 28       	or	r4, r2
     1c4:	4b 28       	or	r4, r11
     1c6:	54 28       	or	r5, r4
     1c8:	5d 28       	or	r5, r13
     1ca:	66 28       	or	r6, r6
     1cc:	6f 28       	or	r6, r15
     1ce:	78 28       	or	r7, r8
     1d0:	81 28       	or	r8, r1
     1d2:	8a 28       	or	r8, r10
     1d4:	93 28       	or	r9, r3
     1d6:	9c 28       	or	r9, r12
     1d8:	a5 28       	or	r10, r5
     1da:	ae 28       	or	r10, r14
     1dc:	b7 28       	or	r11, r7

000001de <ProductString>:
     1de:	12 03 4f 00 70 00 65 00 6e 00 44 00 65 00 63 00     ..O.p.e.n.D.e.c.
     1ee:	6b 00 00 00                                         k...

000001f2 <ManufacturerString>:
     1f2:	22 03 53 00 68 00 61 00 6e 00 74 00 65 00 61 00     ".S.h.a.n.t.e.a.
     202:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
     212:	73 00 00 00                                         s...

00000216 <LanguageString>:
     216:	04 03 09 04                                         ....

0000021a <ConfigurationDescriptor>:
     21a:	09 02 65 00 02 01 00 c0 fa 09 04 00 00 00 01 01     ..e.............
     22a:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
     23a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
     24a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
     25a:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
     26a:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
     27a:	05 25 01 01 03                                      .%...

0000027f <DeviceDescriptor>:
     27f:	12 01 00 02 00 00 00 08 09 12 72 84 01 00 01 02     ..........r.....
     28f:	00 01 00                                            ...

00000292 <__ctors_start>:
     292:	e6 13       	cpse	r30, r22
     294:	b9 2f       	mov	r27, r25

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	da e0       	ldi	r29, 0x0A	; 10
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61

000002a2 <_Z21Bootloader_Jump_Checkv>:
#define BOOTLOADER_START_ADDRESS  0x7000

void Bootloader_Jump_Check(void)    {

    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))  {
     2a2:	04 b6       	in	r0, 0x34	; 52
     2a4:	03 fe       	sbrs	r0, 3
     2a6:	18 c0       	rjmp	.+48     	; 0x2d8 <__do_copy_data>
     2a8:	80 91 ec 07 	lds	r24, 0x07EC
     2ac:	90 91 ed 07 	lds	r25, 0x07ED
     2b0:	a0 91 ee 07 	lds	r26, 0x07EE
     2b4:	b0 91 ef 07 	lds	r27, 0x07EF
     2b8:	8a 3c       	cpi	r24, 0xCA	; 202
     2ba:	9c 4a       	sbci	r25, 0xAC	; 172
     2bc:	a2 44       	sbci	r26, 0x42	; 66
     2be:	bc 4d       	sbci	r27, 0xDC	; 220
     2c0:	59 f4       	brne	.+22     	; 0x2d8 <__do_copy_data>
        Boot_Key = 0;
     2c2:	10 92 ec 07 	sts	0x07EC, r1
     2c6:	10 92 ed 07 	sts	0x07ED, r1
     2ca:	10 92 ee 07 	sts	0x07EE, r1
     2ce:	10 92 ef 07 	sts	0x07EF, r1
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     2d2:	e0 e0       	ldi	r30, 0x00	; 0
     2d4:	f0 e7       	ldi	r31, 0x70	; 112
     2d6:	09 95       	icall

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e2 ec       	ldi	r30, 0xC2	; 194
     2e0:	f0 e6       	ldi	r31, 0x60	; 96
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x10>
     2e4:	05 90       	lpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	aa 39       	cpi	r26, 0x9A	; 154
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0xc>

000002ee <__do_clear_bss>:
     2ee:	27 e0       	ldi	r18, 0x07	; 7
     2f0:	aa e9       	ldi	r26, 0x9A	; 154
     2f2:	b1 e0       	ldi	r27, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	ac 3e       	cpi	r26, 0xEC	; 236
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	cb e4       	ldi	r28, 0x4B	; 75
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <__tablejump2__>
     30e:	c9 34       	cpi	r28, 0x49	; 73
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <main>
     318:	0c 94 5f 30 	jmp	0x60be	; 0x60be <_exit>

0000031c <__bad_interrupt>:
     31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000320 <_ZN13Configuration11clearEEPROMEv>:
    clearEEPROM();
    writeConfiguration();

}

void Configuration::clearEEPROM()    {
     320:	cf 93       	push	r28
     322:	df 93       	push	r29

    for (int i=0; i<1024; i++) eeprom_update_byte((uint8_t*)i, 0xFF);
     324:	c0 e0       	ldi	r28, 0x00	; 0
     326:	d0 e0       	ldi	r29, 0x00	; 0
     328:	6f ef       	ldi	r22, 0xFF	; 255
     32a:	ce 01       	movw	r24, r28
     32c:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
     330:	21 96       	adiw	r28, 0x01	; 1
     332:	c1 15       	cp	r28, r1
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	d8 07       	cpc	r29, r24
     338:	b9 f7       	brne	.-18     	; 0x328 <_ZN13Configuration11clearEEPROMEv+0x8>

}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <_ZN13Configuration14writeParameterEhhhh>:

bool Configuration::writeParameter(uint8_t blockID, uint8_t sectionID, uint8_t parameterID, uint8_t newValue)    {
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	7c 01       	movw	r14, r24
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     356:	c4 2f       	mov	r28, r20
     358:	d0 e0       	ldi	r29, 0x00	; 0
     35a:	de 01       	movw	r26, r28
     35c:	aa 0f       	add	r26, r26
     35e:	bb 1f       	adc	r27, r27
     360:	c6 2e       	mov	r12, r22
     362:	d1 2c       	mov	r13, r1
     364:	81 e2       	ldi	r24, 0x21	; 33
     366:	68 9f       	mul	r22, r24
     368:	f0 01       	movw	r30, r0
     36a:	11 24       	eor	r1, r1
     36c:	ae 0f       	add	r26, r30
     36e:	bf 1f       	adc	r27, r31
     370:	ae 0d       	add	r26, r14
     372:	bf 1d       	adc	r27, r15
     374:	ee 0d       	add	r30, r14
     376:	ff 1d       	adc	r31, r15
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	4d 91       	ld	r20, X+
     37c:	5c 91       	ld	r21, X
     37e:	14 97       	sbiw	r26, 0x04	; 4
     380:	81 81       	ldd	r24, Z+1	; 0x01
     382:	92 81       	ldd	r25, Z+2	; 0x02
     384:	84 0f       	add	r24, r20
     386:	95 1f       	adc	r25, r21

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     388:	ec 0f       	add	r30, r28
     38a:	fd 1f       	adc	r31, r29

    uint8_t arrayIndex;
    uint8_t arrayValue;
    uint8_t parameterIndex;

    switch(parameterType)   {
     38c:	35 89       	ldd	r19, Z+21	; 0x15
     38e:	33 23       	and	r19, r19
     390:	09 f4       	brne	.+2      	; 0x394 <_ZN13Configuration14writeParameterEhhhh+0x54>
     392:	65 c0       	rjmp	.+202    	; 0x45e <_ZN13Configuration14writeParameterEhhhh+0x11e>
     394:	31 30       	cpi	r19, 0x01	; 1
     396:	09 f0       	breq	.+2      	; 0x39a <_ZN13Configuration14writeParameterEhhhh+0x5a>
     398:	8d c0       	rjmp	.+282    	; 0x4b4 <_ZN13Configuration14writeParameterEhhhh+0x174>

        case BIT_PARAMETER:
        arrayIndex = parameterID/8;
        parameterIndex = parameterID - 8*arrayIndex;
     39a:	32 2f       	mov	r19, r18
     39c:	36 95       	lsr	r19
     39e:	36 95       	lsr	r19
     3a0:	36 95       	lsr	r19
     3a2:	12 2f       	mov	r17, r18
     3a4:	17 70       	andi	r17, 0x07	; 7
        arrayValue = eeprom_read_byte((uint8_t*)startAddress+arrayIndex);
     3a6:	5c 01       	movw	r10, r24
     3a8:	a3 0e       	add	r10, r19
     3aa:	b1 1c       	adc	r11, r1
     3ac:	c5 01       	movw	r24, r10
     3ae:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
        if (newValue == DEFAULT_VALUE)
     3b2:	00 38       	cpi	r16, 0x80	; 128
     3b4:	51 f5       	brne	.+84     	; 0x40a <_ZN13Configuration14writeParameterEhhhh+0xca>
            bitWrite(arrayValue, parameterIndex, (blocks[blockID].defaultValue[sectionID] & 0x01));
     3b6:	91 e2       	ldi	r25, 0x21	; 33
     3b8:	9c 9d       	mul	r25, r12
     3ba:	a0 01       	movw	r20, r0
     3bc:	9d 9d       	mul	r25, r13
     3be:	50 0d       	add	r21, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	e4 0e       	add	r14, r20
     3c4:	f5 1e       	adc	r15, r21
     3c6:	ce 0d       	add	r28, r14
     3c8:	df 1d       	adc	r29, r15
     3ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3cc:	90 ff       	sbrs	r25, 0
     3ce:	0e c0       	rjmp	.+28     	; 0x3ec <_ZN13Configuration14writeParameterEhhhh+0xac>
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <_ZN13Configuration14writeParameterEhhhh+0xa2>
     3da:	44 0f       	add	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	66 1f       	adc	r22, r22
     3e0:	77 1f       	adc	r23, r23
     3e2:	1a 95       	dec	r17
     3e4:	d2 f7       	brpl	.-12     	; 0x3da <_ZN13Configuration14writeParameterEhhhh+0x9a>
     3e6:	c8 2f       	mov	r28, r24
     3e8:	c4 2b       	or	r28, r20
     3ea:	2d c0       	rjmp	.+90     	; 0x446 <_ZN13Configuration14writeParameterEhhhh+0x106>
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <_ZN13Configuration14writeParameterEhhhh+0xbe>
     3f6:	44 0f       	add	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	66 1f       	adc	r22, r22
     3fc:	77 1f       	adc	r23, r23
     3fe:	1a 95       	dec	r17
     400:	d2 f7       	brpl	.-12     	; 0x3f6 <_ZN13Configuration14writeParameterEhhhh+0xb6>
     402:	c4 2f       	mov	r28, r20
     404:	c0 95       	com	r28
     406:	c8 23       	and	r28, r24
     408:	1e c0       	rjmp	.+60     	; 0x446 <_ZN13Configuration14writeParameterEhhhh+0x106>
        else bitWrite(arrayValue, parameterIndex, newValue);
     40a:	00 23       	and	r16, r16
     40c:	71 f0       	breq	.+28     	; 0x42a <_ZN13Configuration14writeParameterEhhhh+0xea>
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	04 c0       	rjmp	.+8      	; 0x420 <_ZN13Configuration14writeParameterEhhhh+0xe0>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	66 1f       	adc	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	1a 95       	dec	r17
     422:	d2 f7       	brpl	.-12     	; 0x418 <_ZN13Configuration14writeParameterEhhhh+0xd8>
     424:	c8 2f       	mov	r28, r24
     426:	c4 2b       	or	r28, r20
     428:	0e c0       	rjmp	.+28     	; 0x446 <_ZN13Configuration14writeParameterEhhhh+0x106>
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	04 c0       	rjmp	.+8      	; 0x43c <_ZN13Configuration14writeParameterEhhhh+0xfc>
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	66 1f       	adc	r22, r22
     43a:	77 1f       	adc	r23, r23
     43c:	1a 95       	dec	r17
     43e:	d2 f7       	brpl	.-12     	; 0x434 <_ZN13Configuration14writeParameterEhhhh+0xf4>
     440:	c4 2f       	mov	r28, r20
     442:	c0 95       	com	r28
     444:	c8 23       	and	r28, r24
        eeprom_update_byte((uint8_t*)startAddress+arrayIndex, arrayValue);
     446:	6c 2f       	mov	r22, r28
     448:	c5 01       	movw	r24, r10
     44a:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
        return (arrayValue == eeprom_read_byte((uint8_t*)startAddress+arrayIndex));
     44e:	c5 01       	movw	r24, r10
     450:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	8c 17       	cp	r24, r28
     458:	71 f1       	breq	.+92     	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	2c c0       	rjmp	.+88     	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>
        break;

        case BYTE_PARAMETER:
        if (newValue == DEFAULT_VALUE)    {
     45e:	00 38       	cpi	r16, 0x80	; 128
     460:	d1 f4       	brne	.+52     	; 0x496 <_ZN13Configuration14writeParameterEhhhh+0x156>

            eeprom_update_byte((uint8_t*)startAddress+parameterID, blocks[blockID].defaultValue[sectionID]);
     462:	5c 01       	movw	r10, r24
     464:	a2 0e       	add	r10, r18
     466:	b1 1c       	adc	r11, r1
     468:	81 e2       	ldi	r24, 0x21	; 33
     46a:	8c 9d       	mul	r24, r12
     46c:	a0 01       	movw	r20, r0
     46e:	8d 9d       	mul	r24, r13
     470:	50 0d       	add	r21, r0
     472:	11 24       	eor	r1, r1
     474:	e4 0e       	add	r14, r20
     476:	f5 1e       	adc	r15, r21
     478:	ce 0d       	add	r28, r14
     47a:	df 1d       	adc	r29, r15
     47c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     47e:	c5 01       	movw	r24, r10
     480:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
            return (blocks[blockID].defaultValue[sectionID] == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     484:	cb 8d       	ldd	r28, Y+27	; 0x1b
     486:	c5 01       	movw	r24, r10
     488:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	c8 17       	cp	r28, r24
     490:	91 f0       	breq	.+36     	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	10 c0       	rjmp	.+32     	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>

        }   else {

            eeprom_update_byte((uint8_t*)startAddress+parameterID, newValue);
     496:	ec 01       	movw	r28, r24
     498:	c2 0f       	add	r28, r18
     49a:	d1 1d       	adc	r29, r1
     49c:	60 2f       	mov	r22, r16
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
            return (newValue == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	80 17       	cp	r24, r16
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <_ZN13Configuration14writeParameterEhhhh+0x176>

        }
        break;

    }   return 0;
     4b4:	90 e0       	ldi	r25, 0x00	; 0

}
     4b6:	89 2f       	mov	r24, r25
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	08 95       	ret

000004ce <_ZN13Configuration22createSectionAddressesEv>:

void Configuration::createSectionAddresses()   {
     4ce:	2f 92       	push	r2
     4d0:	3f 92       	push	r3
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <_ZN13Configuration22createSectionAddressesEv+0x26>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <_ZN13Configuration22createSectionAddressesEv+0x28>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <_ZN13Configuration22createSectionAddressesEv+0x2a>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	7c 01       	movw	r14, r24
     4fe:	4c 01       	movw	r8, r24
     500:	24 e1       	ldi	r18, 0x14	; 20
     502:	82 0e       	add	r8, r18
     504:	91 1c       	adc	r9, r1

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	10 e0       	ldi	r17, 0x00	; 0

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     50a:	61 2c       	mov	r6, r1
     50c:	51 2c       	mov	r5, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     50e:	aa 24       	eor	r10, r10
     510:	a3 94       	inc	r10
     512:	71 2c       	mov	r7, r1
     514:	46 2c       	mov	r4, r6
     516:	35 2c       	mov	r3, r5

        }

        uint8_t lastSection = blocks[i].sections-1;

        switch(blocks[i].subsectionType[lastSection]) {
     518:	0f 2e       	mov	r0, r31
     51a:	f1 e2       	ldi	r31, 0x21	; 33
     51c:	bf 2e       	mov	r11, r31
     51e:	f0 2d       	mov	r31, r0
     520:	6c 01       	movw	r12, r24
     522:	c0 c0       	rjmp	.+384    	; 0x6a4 <_ZN13Configuration22createSectionAddressesEv+0x1d6>

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     524:	86 2d       	mov	r24, r6
     526:	95 2d       	mov	r25, r5
     528:	9c 82       	std	Y+4, r9	; 0x04
     52a:	8b 82       	std	Y+3, r8	; 0x03
     52c:	fe 82       	std	Y+6, r15	; 0x06
     52e:	ed 82       	std	Y+5, r14	; 0x05
     530:	db 01       	movw	r26, r22

            if (!j) {
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	29 f4       	brne	.+10     	; 0x540 <_ZN13Configuration22createSectionAddressesEv+0x72>

                //first section address is always 0
                blocks[i].subsectionAddress[0] = 0;
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	1c 92       	st	X, r1
     53a:	1e 92       	st	-X, r1
     53c:	13 97       	sbiw	r26, 0x03	; 3
     53e:	36 c0       	rjmp	.+108    	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     540:	2b 81       	ldd	r18, Y+3	; 0x03
     542:	3c 81       	ldd	r19, Y+4	; 0x04

                }   else {

                switch(blocks[i].subsectionType[j-1])   {
     544:	f9 01       	movw	r30, r18
     546:	40 81       	ld	r20, Z
     548:	44 23       	and	r20, r20
     54a:	11 f1       	breq	.+68     	; 0x590 <_ZN13Configuration22createSectionAddressesEv+0xc2>
     54c:	41 30       	cpi	r20, 0x01	; 1
     54e:	71 f5       	brne	.+92     	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     550:	4d 81       	ldd	r20, Y+5	; 0x05
     552:	5e 81       	ldd	r21, Y+6	; 0x06
     554:	b9 01       	movw	r22, r18
     556:	65 50       	subi	r22, 0x05	; 5
     558:	71 09       	sbc	r23, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     55a:	fb 01       	movw	r30, r22
     55c:	60 81       	ld	r22, Z
     55e:	67 70       	andi	r22, 0x07	; 7
     560:	26 2e       	mov	r2, r22
     562:	6a 2d       	mov	r22, r10
     564:	77 2d       	mov	r23, r7
     566:	21 10       	cpse	r2, r1
     568:	02 c0       	rjmp	.+4      	; 0x56e <_ZN13Configuration22createSectionAddressesEv+0xa0>
     56a:	64 2d       	mov	r22, r4
     56c:	73 2d       	mov	r23, r3
     56e:	26 50       	subi	r18, 0x06	; 6
     570:	31 09       	sbc	r19, r1
     572:	f9 01       	movw	r30, r18
     574:	20 81       	ld	r18, Z
     576:	26 95       	lsr	r18
     578:	26 95       	lsr	r18
     57a:	26 95       	lsr	r18
     57c:	62 0f       	add	r22, r18
     57e:	71 1d       	adc	r23, r1
     580:	fa 01       	movw	r30, r20
     582:	21 81       	ldd	r18, Z+1	; 0x01
     584:	32 81       	ldd	r19, Z+2	; 0x02
     586:	26 0f       	add	r18, r22
     588:	37 1f       	adc	r19, r23
     58a:	34 83       	std	Z+4, r19	; 0x04
     58c:	23 83       	std	Z+3, r18	; 0x03
                    break;
     58e:	0e c0       	rjmp	.+28     	; 0x5ac <_ZN13Configuration22createSectionAddressesEv+0xde>
     590:	2b 81       	ldd	r18, Y+3	; 0x03
     592:	3c 81       	ldd	r19, Y+4	; 0x04
     594:	26 50       	subi	r18, 0x06	; 6
     596:	31 09       	sbc	r19, r1

                    case BYTE_PARAMETER:
                    blocks[i].subsectionAddress[j] = blocks[i].sectionParameters[j-1] + blocks[i].subsectionAddress[j-1];
     598:	f9 01       	movw	r30, r18
     59a:	40 81       	ld	r20, Z
     59c:	ed 81       	ldd	r30, Y+5	; 0x05
     59e:	fe 81       	ldd	r31, Y+6	; 0x06
     5a0:	21 81       	ldd	r18, Z+1	; 0x01
     5a2:	32 81       	ldd	r19, Z+2	; 0x02
     5a4:	24 0f       	add	r18, r20
     5a6:	31 1d       	adc	r19, r1
     5a8:	34 83       	std	Z+4, r19	; 0x04
     5aa:	23 83       	std	Z+3, r18	; 0x03

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	4c 91       	ld	r20, X
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	3c 83       	std	Y+4, r19	; 0x04
     5ba:	2b 83       	std	Y+3, r18	; 0x03
     5bc:	ed 81       	ldd	r30, Y+5	; 0x05
     5be:	fe 81       	ldd	r31, Y+6	; 0x06
     5c0:	32 96       	adiw	r30, 0x02	; 2
     5c2:	fe 83       	std	Y+6, r31	; 0x06
     5c4:	ed 83       	std	Y+5, r30	; 0x05
     5c6:	24 2f       	mov	r18, r20
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	0c f4       	brge	.+2      	; 0x5d2 <_ZN13Configuration22createSectionAddressesEv+0x104>
     5d0:	b0 cf       	rjmp	.-160    	; 0x532 <_ZN13Configuration22createSectionAddressesEv+0x64>
     5d2:	bd 01       	movw	r22, r26

            }

        }

        uint8_t lastSection = blocks[i].sections-1;
     5d4:	41 50       	subi	r20, 0x01	; 1

        switch(blocks[i].subsectionType[lastSection]) {
     5d6:	84 2f       	mov	r24, r20
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	b0 9e       	mul	r11, r16
     5dc:	f0 01       	movw	r30, r0
     5de:	b1 9e       	mul	r11, r17
     5e0:	f0 0d       	add	r31, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	ec 0d       	add	r30, r12
     5e6:	fd 1d       	adc	r31, r13
     5e8:	e8 0f       	add	r30, r24
     5ea:	f9 1f       	adc	r31, r25
     5ec:	25 89       	ldd	r18, Z+21	; 0x15
     5ee:	22 23       	and	r18, r18
     5f0:	41 f1       	breq	.+80     	; 0x642 <_ZN13Configuration22createSectionAddressesEv+0x174>
     5f2:	21 30       	cpi	r18, 0x01	; 1
     5f4:	e9 f5       	brne	.+122    	; 0x670 <_ZN13Configuration22createSectionAddressesEv+0x1a2>

            case BIT_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+((blocks[i].sectionParameters[lastSection]%8 != 0)+blocks[i].sectionParameters[lastSection]/8);
     5f6:	b0 9e       	mul	r11, r16
     5f8:	f0 01       	movw	r30, r0
     5fa:	b1 9e       	mul	r11, r17
     5fc:	f0 0d       	add	r31, r0
     5fe:	11 24       	eor	r1, r1
     600:	ec 0d       	add	r30, r12
     602:	fd 1d       	adc	r31, r13
     604:	e8 0f       	add	r30, r24
     606:	f9 1f       	adc	r31, r25
     608:	47 85       	ldd	r20, Z+15	; 0x0f
     60a:	54 2f       	mov	r21, r20
     60c:	57 70       	andi	r21, 0x07	; 7
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 f4       	brne	.+4      	; 0x616 <_ZN13Configuration22createSectionAddressesEv+0x148>
     612:	26 2d       	mov	r18, r6
     614:	35 2d       	mov	r19, r5
     616:	46 95       	lsr	r20
     618:	46 95       	lsr	r20
     61a:	46 95       	lsr	r20
     61c:	24 0f       	add	r18, r20
     61e:	31 1d       	adc	r19, r1
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	b0 9e       	mul	r11, r16
     626:	a0 01       	movw	r20, r0
     628:	b1 9e       	mul	r11, r17
     62a:	50 0d       	add	r21, r0
     62c:	11 24       	eor	r1, r1
     62e:	84 0f       	add	r24, r20
     630:	95 1f       	adc	r25, r21
     632:	f6 01       	movw	r30, r12
     634:	e8 0f       	add	r30, r24
     636:	f9 1f       	adc	r31, r25
     638:	83 81       	ldd	r24, Z+3	; 0x03
     63a:	94 81       	ldd	r25, Z+4	; 0x04
     63c:	28 0f       	add	r18, r24
     63e:	39 1f       	adc	r19, r25
            break;
     640:	19 c0       	rjmp	.+50     	; 0x674 <_ZN13Configuration22createSectionAddressesEv+0x1a6>

            case BYTE_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
     642:	b0 9e       	mul	r11, r16
     644:	90 01       	movw	r18, r0
     646:	b1 9e       	mul	r11, r17
     648:	30 0d       	add	r19, r0
     64a:	11 24       	eor	r1, r1
     64c:	f6 01       	movw	r30, r12
     64e:	e2 0f       	add	r30, r18
     650:	f3 1f       	adc	r31, r19
     652:	e8 0f       	add	r30, r24
     654:	f9 1f       	adc	r31, r25
     656:	47 85       	ldd	r20, Z+15	; 0x0f
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	82 0f       	add	r24, r18
     65e:	93 1f       	adc	r25, r19
     660:	f6 01       	movw	r30, r12
     662:	e8 0f       	add	r30, r24
     664:	f9 1f       	adc	r31, r25
     666:	23 81       	ldd	r18, Z+3	; 0x03
     668:	34 81       	ldd	r19, Z+4	; 0x04
     66a:	24 0f       	add	r18, r20
     66c:	31 1d       	adc	r19, r1
            break;
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN13Configuration22createSectionAddressesEv+0x1a6>

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;
     670:	26 2d       	mov	r18, r6
     672:	35 2d       	mov	r19, r5
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
            break;

        }

        if (i < NUMBER_OF_BLOCKS-1) {
     674:	04 30       	cpi	r16, 0x04	; 4
     676:	11 05       	cpc	r17, r1
     678:	54 f4       	brge	.+20     	; 0x68e <_ZN13Configuration22createSectionAddressesEv+0x1c0>

            blocks[i+1].blockStartAddress = blocks[i].blockStartAddress + memory_usage;
     67a:	db 01       	movw	r26, r22
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	8d 91       	ld	r24, X+
     680:	9c 91       	ld	r25, X
     682:	12 97       	sbiw	r26, 0x02	; 2
     684:	28 0f       	add	r18, r24
     686:	39 1f       	adc	r19, r25
     688:	f4 01       	movw	r30, r8
     68a:	37 87       	std	Z+15, r19	; 0x0f
     68c:	26 87       	std	Z+14, r18	; 0x0e

}

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     68e:	0f 5f       	subi	r16, 0xFF	; 255
     690:	1f 4f       	sbci	r17, 0xFF	; 255
     692:	f1 e2       	ldi	r31, 0x21	; 33
     694:	ef 0e       	add	r14, r31
     696:	f1 1c       	adc	r15, r1
     698:	21 e2       	ldi	r18, 0x21	; 33
     69a:	82 0e       	add	r8, r18
     69c:	91 1c       	adc	r9, r1
     69e:	05 30       	cpi	r16, 0x05	; 5
     6a0:	11 05       	cpc	r17, r1
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <_ZN13Configuration22createSectionAddressesEv+0x1e2>
     6a4:	b7 01       	movw	r22, r14

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     6a6:	d7 01       	movw	r26, r14
     6a8:	4c 91       	ld	r20, X
     6aa:	41 11       	cpse	r20, r1
     6ac:	3b cf       	rjmp	.-394    	; 0x524 <_ZN13Configuration22createSectionAddressesEv+0x56>
     6ae:	92 cf       	rjmp	.-220    	; 0x5d4 <_ZN13Configuration22createSectionAddressesEv+0x106>

        }

    }

}
     6b0:	26 96       	adiw	r28, 0x06	; 6
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	7f 90       	pop	r7
     6d6:	6f 90       	pop	r6
     6d8:	5f 90       	pop	r5
     6da:	4f 90       	pop	r4
     6dc:	3f 90       	pop	r3
     6de:	2f 90       	pop	r2
     6e0:	08 95       	ret

000006e2 <_ZN13Configuration18writeConfigurationEv>:

void Configuration::writeConfiguration()   {
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	2c 97       	sbiw	r28, 0x0c	; 12
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	1c 01       	movw	r2, r24
     718:	98 87       	std	Y+8, r25	; 0x08
     71a:	8f 83       	std	Y+7, r24	; 0x07

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     71c:	1a 86       	std	Y+10, r1	; 0x0a
     71e:	19 86       	std	Y+9, r1	; 0x09

        for (int j=0; j<blocks[i].sections; j++) {
     720:	71 2c       	mov	r7, r1
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     722:	0f 2e       	mov	r0, r31
     724:	f1 e2       	ldi	r31, 0x21	; 33
     726:	6f 2e       	mov	r6, r31
     728:	f0 2d       	mov	r31, r0
     72a:	73 c0       	rjmp	.+230    	; 0x812 <_ZN13Configuration18writeConfigurationEv+0x130>
     72c:	c8 01       	movw	r24, r16
     72e:	99 27       	eor	r25, r25
     730:	fc 01       	movw	r30, r24
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	2d 81       	ldd	r18, Y+5	; 0x05
     738:	3e 81       	ldd	r19, Y+6	; 0x06
     73a:	e2 0f       	add	r30, r18
     73c:	f3 1f       	adc	r31, r19
     73e:	e2 0d       	add	r30, r2
     740:	f3 1d       	adc	r31, r3
     742:	43 81       	ldd	r20, Z+3	; 0x03
     744:	54 81       	ldd	r21, Z+4	; 0x04
     746:	ab 81       	ldd	r26, Y+3	; 0x03
     748:	bc 81       	ldd	r27, Y+4	; 0x04
     74a:	2d 91       	ld	r18, X+
     74c:	3c 91       	ld	r19, X
     74e:	fa 01       	movw	r30, r20
     750:	e2 0f       	add	r30, r18
     752:	f3 1f       	adc	r31, r19
     754:	fc 87       	std	Y+12, r31	; 0x0c
     756:	eb 87       	std	Y+11, r30	; 0x0b

            uint16_t startAddress = getSectionAddress(i, j);
            uint8_t parameterType = getParameterType(i, j);
            uint8_t defaultValue = blocks[i].defaultValue[j];
     758:	d6 01       	movw	r26, r12
     75a:	9d 90       	ld	r9, X+
     75c:	6d 01       	movw	r12, r26
     75e:	fd 01       	movw	r30, r26
     760:	3d 97       	sbiw	r30, 0x0d	; 13
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];
     762:	20 81       	ld	r18, Z

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     764:	f2 01       	movw	r30, r4
     766:	e8 0f       	add	r30, r24
     768:	f9 1f       	adc	r31, r25

            switch(parameterType)   {
     76a:	85 89       	ldd	r24, Z+21	; 0x15
     76c:	88 23       	and	r24, r24
     76e:	79 f0       	breq	.+30     	; 0x78e <_ZN13Configuration18writeConfigurationEv+0xac>
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	c1 f5       	brne	.+112    	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     774:	26 95       	lsr	r18
     776:	26 95       	lsr	r18
     778:	26 95       	lsr	r18
     77a:	eb 84       	ldd	r14, Y+11	; 0x0b
     77c:	fc 84       	ldd	r15, Y+12	; 0x0c
     77e:	bf ef       	ldi	r27, 0xFF	; 255
     780:	eb 1a       	sub	r14, r27
     782:	fb 0a       	sbc	r15, r27
     784:	e2 0e       	add	r14, r18
     786:	f1 1c       	adc	r15, r1
     788:	ab 84       	ldd	r10, Y+11	; 0x0b
     78a:	bc 84       	ldd	r11, Y+12	; 0x0c
     78c:	03 c0       	rjmp	.+6      	; 0x794 <_ZN13Configuration18writeConfigurationEv+0xb2>
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     78e:	21 11       	cpse	r18, r1
     790:	0c c0       	rjmp	.+24     	; 0x7aa <_ZN13Configuration18writeConfigurationEv+0xc8>
     792:	28 c0       	rjmp	.+80     	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     794:	69 2d       	mov	r22, r9
     796:	c5 01       	movw	r24, r10
     798:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
     79c:	ef ef       	ldi	r30, 0xFF	; 255
     79e:	ae 1a       	sub	r10, r30
     7a0:	be 0a       	sbc	r11, r30
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     7a2:	ae 14       	cp	r10, r14
     7a4:	bf 04       	cpc	r11, r15
     7a6:	b1 f7       	brne	.-20     	; 0x794 <_ZN13Configuration18writeConfigurationEv+0xb2>
     7a8:	1d c0       	rjmp	.+58     	; 0x7e4 <_ZN13Configuration18writeConfigurationEv+0x102>
     7aa:	eb 84       	ldd	r14, Y+11	; 0x0b
     7ac:	fc 84       	ldd	r15, Y+12	; 0x0c
     7ae:	e2 0e       	add	r14, r18
     7b0:	f1 1c       	adc	r15, r1
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7b2:	ab 84       	ldd	r10, Y+11	; 0x0b
     7b4:	bc 84       	ldd	r11, Y+12	; 0x0c
     7b6:	c8 01       	movw	r24, r16
     7b8:	19 2d       	mov	r17, r9
     7ba:	4c 01       	movw	r8, r24

                    if (defaultValue == AUTO_INCREMENT)
     7bc:	1f 3f       	cpi	r17, 0xFF	; 255
     7be:	39 f4       	brne	.+14     	; 0x7ce <_ZN13Configuration18writeConfigurationEv+0xec>
     7c0:	6a 2d       	mov	r22, r10
     7c2:	3b 85       	ldd	r19, Y+11	; 0x0b
     7c4:	63 1b       	sub	r22, r19
                        eeprom_update_byte((uint8_t*)startAddress+i, i);
     7c6:	c5 01       	movw	r24, r10
     7c8:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <_ZN13Configuration18writeConfigurationEv+0xf4>
                    else eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     7ce:	61 2f       	mov	r22, r17
     7d0:	c5 01       	movw	r24, r10
     7d2:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
     7d6:	6f ef       	ldi	r22, 0xFF	; 255
     7d8:	a6 1a       	sub	r10, r22
     7da:	b6 0a       	sbc	r11, r22
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7dc:	ae 14       	cp	r10, r14
     7de:	bf 04       	cpc	r11, r15
     7e0:	69 f7       	brne	.-38     	; 0x7bc <_ZN13Configuration18writeConfigurationEv+0xda>
     7e2:	84 01       	movw	r16, r8

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        for (int j=0; j<blocks[i].sections; j++) {
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	a9 81       	ldd	r26, Y+1	; 0x01
     7ea:	ba 81       	ldd	r27, Y+2	; 0x02
     7ec:	8c 91       	ld	r24, X
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	08 17       	cp	r16, r24
     7f2:	19 07       	cpc	r17, r25
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <_ZN13Configuration18writeConfigurationEv+0x116>
     7f6:	9a cf       	rjmp	.-204    	; 0x72c <_ZN13Configuration18writeConfigurationEv+0x4a>

}

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     7f8:	e9 85       	ldd	r30, Y+9	; 0x09
     7fa:	fa 85       	ldd	r31, Y+10	; 0x0a
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	fa 87       	std	Y+10, r31	; 0x0a
     800:	e9 87       	std	Y+9, r30	; 0x09
     802:	2f 81       	ldd	r18, Y+7	; 0x07
     804:	38 85       	ldd	r19, Y+8	; 0x08
     806:	2f 5d       	subi	r18, 0xDF	; 223
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	38 87       	std	Y+8, r19	; 0x08
     80c:	2f 83       	std	Y+7, r18	; 0x07
     80e:	35 97       	sbiw	r30, 0x05	; 5
     810:	e9 f0       	breq	.+58     	; 0x84c <_ZN13Configuration18writeConfigurationEv+0x16a>
     812:	6f 81       	ldd	r22, Y+7	; 0x07
     814:	78 85       	ldd	r23, Y+8	; 0x08
     816:	7a 83       	std	Y+2, r23	; 0x02
     818:	69 83       	std	Y+1, r22	; 0x01

        for (int j=0; j<blocks[i].sections; j++) {
     81a:	db 01       	movw	r26, r22
     81c:	8c 91       	ld	r24, X
     81e:	88 23       	and	r24, r24
     820:	59 f3       	breq	.-42     	; 0x7f8 <_ZN13Configuration18writeConfigurationEv+0x116>
     822:	6b 01       	movw	r12, r22
     824:	bb e1       	ldi	r27, 0x1B	; 27
     826:	cb 0e       	add	r12, r27
     828:	d1 1c       	adc	r13, r1
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	17 2d       	mov	r17, r7
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     82e:	e9 85       	ldd	r30, Y+9	; 0x09
     830:	e6 9d       	mul	r30, r6
     832:	50 01       	movw	r10, r0
     834:	11 24       	eor	r1, r1
     836:	21 01       	movw	r4, r2
     838:	4a 0c       	add	r4, r10
     83a:	5b 1c       	adc	r5, r11
     83c:	92 01       	movw	r18, r4
     83e:	2f 5f       	subi	r18, 0xFF	; 255
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	3c 83       	std	Y+4, r19	; 0x04
     844:	2b 83       	std	Y+3, r18	; 0x03
     846:	be 82       	std	Y+6, r11	; 0x06
     848:	ad 82       	std	Y+5, r10	; 0x05
     84a:	70 cf       	rjmp	.-288    	; 0x72c <_ZN13Configuration18writeConfigurationEv+0x4a>

        }

    }

    eeprom_update_byte((uint8_t*)ID_LOCATION_0, UNIQUE_ID);
     84c:	6f e2       	ldi	r22, 0x2F	; 47
     84e:	8d ef       	ldi	r24, 0xFD	; 253
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_1, UNIQUE_ID);
     856:	6f e2       	ldi	r22, 0x2F	; 47
     858:	8e ef       	ldi	r24, 0xFE	; 254
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_2, UNIQUE_ID);
     860:	6f e2       	ldi	r22, 0x2F	; 47
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	0e 94 4d 30 	call	0x609a	; 0x609a <eeprom_update_byte>

}
     86a:	2c 96       	adiw	r28, 0x0c	; 12
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	3f 90       	pop	r3
     898:	2f 90       	pop	r2
     89a:	08 95       	ret

0000089c <_ZN13Configuration12factoryResetEv>:

    ))  factoryReset();

}

void Configuration::factoryReset()  {
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24

    clearEEPROM();
     8a2:	0e 94 90 01 	call	0x320	; 0x320 <_ZN13Configuration11clearEEPROMEv>
    writeConfiguration();
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN13Configuration18writeConfigurationEv>

}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <_ZN13Configuration4initEv>:

    //def const

}

void Configuration::init() {
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24

    createMemoryLayout();
     8b8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN13Configuration18createMemoryLayoutEv>
    createSectionAddresses();
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN13Configuration22createSectionAddressesEv>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     8c2:	8d ef       	ldi	r24, 0xFD	; 253
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    createMemoryLayout();
    createSectionAddresses();

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(
     8ca:	8f 32       	cpi	r24, 0x2F	; 47
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <_ZN13Configuration4initEv+0x34>

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
     8ce:	8e ef       	ldi	r24, 0xFE	; 254
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     8d6:	8f 32       	cpi	r24, 0x2F	; 47
     8d8:	31 f4       	brne	.+12     	; 0x8e6 <_ZN13Configuration4initEv+0x34>
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_2) == UNIQUE_ID)
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>

    ))  factoryReset();
     8e2:	8f 32       	cpi	r24, 0x2F	; 47
     8e4:	19 f0       	breq	.+6      	; 0x8ec <_ZN13Configuration4initEv+0x3a>
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN13Configuration12factoryResetEv>

}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <_ZN13Configuration18createMemoryLayoutEv>:
#include "Configuration.h"
#include "../hardware/board/Board.h"
#include "../interface/settings/MIDIsettings.h"
#include "../interface/settings/LEDsettings.h"

void Configuration::createMemoryLayout()   {
     8f2:	fc 01       	movw	r30, r24
        defaultValue        any value 0-127 or AUTO_INCREMENT (next value gets increased by 1)
        sectionParameters   number of parameters in section
    */

    {
        blocks[CONF_MIDI_BLOCK].sections = MIDI_SECTIONS;
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	80 83       	st	Z, r24

        blocks[CONF_MIDI_BLOCK].subsectionType[midiFeatureSection] = BIT_PARAMETER;
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	95 8b       	std	Z+21, r25	; 0x15
        blocks[CONF_MIDI_BLOCK].defaultValue[midiFeatureSection] = 0;
     8fc:	13 8e       	std	Z+27, r1	; 0x1b
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiFeatureSection] = MIDI_FEATURES;
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	87 87       	std	Z+15, r24	; 0x0f

        blocks[CONF_MIDI_BLOCK].subsectionType[midiChannelSection] = BYTE_PARAMETER;
     902:	16 8a       	std	Z+22, r1	; 0x16
        blocks[CONF_MIDI_BLOCK].defaultValue[midiChannelSection] = 0x01;
     904:	94 8f       	std	Z+28, r25	; 0x1c
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiChannelSection] = MIDI_CHANNELS;
     906:	34 e0       	ldi	r19, 0x04	; 4
     908:	30 8b       	std	Z+16, r19	; 0x10
    }

    {
        blocks[CONF_BUTTON_BLOCK].sections = BUTTON_SECTIONS;
     90a:	81 a3       	std	Z+33, r24	; 0x21

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonTypeSection] = BIT_PARAMETER;
     90c:	96 ab       	std	Z+54, r25	; 0x36
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonTypeSection] = 0;
     90e:	14 ae       	std	Z+60, r1	; 0x3c
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonTypeSection] = MAX_NUMBER_OF_BUTTONS;
     910:	80 e4       	ldi	r24, 0x40	; 64
     912:	80 ab       	std	Z+48, r24	; 0x30

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonProgramChangeEnabledSection] = BIT_PARAMETER;
     914:	97 ab       	std	Z+55, r25	; 0x37
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonProgramChangeEnabledSection] = 0;
     916:	15 ae       	std	Z+61, r1	; 0x3d
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonProgramChangeEnabledSection] = MAX_NUMBER_OF_BUTTONS;
     918:	81 ab       	std	Z+49, r24	; 0x31

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonMIDIidSection] = BYTE_PARAMETER;
     91a:	10 ae       	std	Z+56, r1	; 0x38
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonMIDIidSection] = AUTO_INCREMENT;
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	26 af       	std	Z+62, r18	; 0x3e
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonMIDIidSection] = MAX_NUMBER_OF_BUTTONS;
     920:	82 ab       	std	Z+50, r24	; 0x32
    }

    {
        blocks[CONF_ENCODER_BLOCK].sections = ENCODER_SECTIONS;
     922:	df 01       	movw	r26, r30
     924:	ae 5b       	subi	r26, 0xBE	; 190
     926:	bf 4f       	sbci	r27, 0xFF	; 255
     928:	3c 93       	st	X, r19

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEnabledSection] = BIT_PARAMETER;
     92a:	55 96       	adiw	r26, 0x15	; 21
     92c:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEnabledSection] = 0;
     92e:	16 96       	adiw	r26, 0x06	; 6
     930:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEnabledSection] = MAX_NUMBER_OF_ENCODERS;
     932:	1c 97       	sbiw	r26, 0x0c	; 12
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderInvertedSection] = BIT_PARAMETER;
     938:	17 96       	adiw	r26, 0x07	; 7
     93a:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderInvertedSection] = 0;
     93c:	16 96       	adiw	r26, 0x06	; 6
     93e:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderInvertedSection] = MAX_NUMBER_OF_ENCODERS;
     940:	1c 97       	sbiw	r26, 0x0c	; 12
     942:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEncodingModeSection] = BYTE_PARAMETER;
     944:	17 96       	adiw	r26, 0x07	; 7
     946:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEncodingModeSection] = enc7Fh01h;
     948:	16 96       	adiw	r26, 0x06	; 6
     94a:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEncodingModeSection] = MAX_NUMBER_OF_ENCODERS;
     94c:	1c 97       	sbiw	r26, 0x0c	; 12
     94e:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderMIDIidSection] = BYTE_PARAMETER;
     950:	17 96       	adiw	r26, 0x07	; 7
     952:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderMIDIidSection] = AUTO_INCREMENT;
     954:	16 96       	adiw	r26, 0x06	; 6
     956:	2c 93       	st	X, r18
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderMIDIidSection] = MAX_NUMBER_OF_ENCODERS;
     958:	1c 97       	sbiw	r26, 0x0c	; 12
     95a:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_ANALOG_BLOCK].sections = ANALOG_SECTIONS;
     95c:	1f 96       	adiw	r26, 0x0f	; 15
     95e:	46 e0       	ldi	r20, 0x06	; 6
     960:	4c 93       	st	X, r20

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogEnabledSection] = BIT_PARAMETER;
     962:	55 96       	adiw	r26, 0x15	; 21
     964:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogEnabledSection] = 0;
     966:	16 96       	adiw	r26, 0x06	; 6
     968:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogEnabledSection] = MAX_NUMBER_OF_ANALOG;
     96a:	1c 97       	sbiw	r26, 0x0c	; 12
     96c:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogInvertedSection] = BIT_PARAMETER;
     96e:	18 96       	adiw	r26, 0x08	; 8
     970:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogInvertedSection] = 0;
     972:	16 96       	adiw	r26, 0x06	; 6
     974:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogInvertedSection] = MAX_NUMBER_OF_ANALOG;
     976:	1c 97       	sbiw	r26, 0x0c	; 12
     978:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogTypeSection] = BYTE_PARAMETER;
     97a:	15 96       	adiw	r26, 0x05	; 5
     97c:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogTypeSection] = 0;
     97e:	16 96       	adiw	r26, 0x06	; 6
     980:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogTypeSection] = MAX_NUMBER_OF_ANALOG;
     982:	1c 97       	sbiw	r26, 0x0c	; 12
     984:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogMIDIidSection] = BYTE_PARAMETER;
     986:	18 96       	adiw	r26, 0x08	; 8
     988:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogMIDIidSection] = AUTO_INCREMENT;
     98a:	16 96       	adiw	r26, 0x06	; 6
     98c:	2c 93       	st	X, r18
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogMIDIidSection] = MAX_NUMBER_OF_ANALOG;
     98e:	1c 97       	sbiw	r26, 0x0c	; 12
     990:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCClowerLimitSection] = BYTE_PARAMETER;
     992:	17 96       	adiw	r26, 0x07	; 7
     994:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCClowerLimitSection] = 0;
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCClowerLimitSection] = MAX_NUMBER_OF_ANALOG;
     99a:	1c 97       	sbiw	r26, 0x0c	; 12
     99c:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCCupperLimitSection] = BYTE_PARAMETER;
     99e:	17 96       	adiw	r26, 0x07	; 7
     9a0:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCCupperLimitSection] = 127;
     9a2:	16 96       	adiw	r26, 0x06	; 6
     9a4:	4f e7       	ldi	r20, 0x7F	; 127
     9a6:	4c 93       	st	X, r20
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCCupperLimitSection] = MAX_NUMBER_OF_ANALOG;
     9a8:	1c 97       	sbiw	r26, 0x0c	; 12
     9aa:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_LED_BLOCK].sections = LED_SECTIONS;
     9ac:	1d 96       	adiw	r26, 0x0d	; 13
     9ae:	3c 93       	st	X, r19

        blocks[CONF_LED_BLOCK].subsectionType[ledHardwareParameterSection] = BYTE_PARAMETER;
     9b0:	55 96       	adiw	r26, 0x15	; 21
     9b2:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledHardwareParameterSection] = 0;
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledHardwareParameterSection] = LED_HARDWARE_PARAMETERS;
     9b8:	1c 97       	sbiw	r26, 0x0c	; 12
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledActivationNoteSection] = BYTE_PARAMETER;
     9be:	17 96       	adiw	r26, 0x07	; 7
     9c0:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledActivationNoteSection] = AUTO_INCREMENT;
     9c2:	16 96       	adiw	r26, 0x06	; 6
     9c4:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledActivationNoteSection] = MAX_NUMBER_OF_LEDS;
     9c6:	1c 97       	sbiw	r26, 0x0c	; 12
     9c8:	80 e3       	ldi	r24, 0x30	; 48
     9ca:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledStartUpNumberSection] = BYTE_PARAMETER;
     9cc:	17 96       	adiw	r26, 0x07	; 7
     9ce:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledStartUpNumberSection] = AUTO_INCREMENT;
     9d0:	16 96       	adiw	r26, 0x06	; 6
     9d2:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledStartUpNumberSection] = MAX_NUMBER_OF_LEDS;
     9d4:	1c 97       	sbiw	r26, 0x0c	; 12
     9d6:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledRGBenabledSection] = BIT_PARAMETER;
     9d8:	17 96       	adiw	r26, 0x07	; 7
     9da:	9c 93       	st	X, r25
        blocks[CONF_LED_BLOCK].defaultValue[ledRGBenabledSection] = 0;
     9dc:	16 96       	adiw	r26, 0x06	; 6
     9de:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledRGBenabledSection] = MAX_NUMBER_OF_LEDS;
     9e0:	ea 56       	subi	r30, 0x6A	; 106
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <_Z8setUpADCv>:
#include "ADC.h"
#include <avr/cpufunc.h>

void setUpADC() {

    ADMUX = 0x00;
     9e8:	10 92 7c 00 	sts	0x007C, r1
    ADCSRA = 0x0;
     9ec:	ea e7       	ldi	r30, 0x7A	; 122
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	10 82       	st	Z, r1

    //default ADC voltage is set to AREF

    //set prescaler to 128 and enable ADC
    ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
     9f2:	80 81       	ld	r24, Z
     9f4:	87 68       	ori	r24, 0x87	; 135
     9f6:	80 83       	st	Z, r24

    //enable high-speed mode if available
    #ifdef ADHSM
        ADCSRB |= (1<<ADHSM);
     9f8:	eb e7       	ldi	r30, 0x7B	; 123
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
     a02:	08 95       	ret

00000a04 <_Z15setADCprescalerh>:
}

void setADCprescaler(uint8_t prescaler) {

    //disable ADC before setting new prescaler
    ADCSRA &= ~(1<<ADEN);
     a04:	ea e7       	ldi	r30, 0x7A	; 122
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	90 81       	ld	r25, Z
     a0a:	9f 77       	andi	r25, 0x7F	; 127
     a0c:	90 83       	st	Z, r25

    switch(prescaler)   {
     a0e:	80 32       	cpi	r24, 0x20	; 32
     a10:	79 f0       	breq	.+30     	; 0xa30 <_Z15setADCprescalerh+0x2c>
     a12:	18 f4       	brcc	.+6      	; 0xa1a <_Z15setADCprescalerh+0x16>
     a14:	80 31       	cpi	r24, 0x10	; 16
     a16:	31 f0       	breq	.+12     	; 0xa24 <_Z15setADCprescalerh+0x20>
     a18:	08 95       	ret
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	79 f0       	breq	.+30     	; 0xa3c <_Z15setADCprescalerh+0x38>
     a1e:	80 38       	cpi	r24, 0x80	; 128
     a20:	99 f0       	breq	.+38     	; 0xa48 <_Z15setADCprescalerh+0x44>
     a22:	08 95       	ret

        case 16:
        ADCSRA |= (1<<ADPS2);
     a24:	ea e7       	ldi	r30, 0x7A	; 122
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	84 60       	ori	r24, 0x04	; 4
     a2c:	80 83       	st	Z, r24
        break;
     a2e:	11 c0       	rjmp	.+34     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 32:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS0);
     a30:	ea e7       	ldi	r30, 0x7A	; 122
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	85 60       	ori	r24, 0x05	; 5
     a38:	80 83       	st	Z, r24
        break;
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 64:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1);
     a3c:	ea e7       	ldi	r30, 0x7A	; 122
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	86 60       	ori	r24, 0x06	; 6
     a44:	80 83       	st	Z, r24
        break;
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <_Z15setADCprescalerh+0x4e>

        case 128:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     a48:	ea e7       	ldi	r30, 0x7A	; 122
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	87 60       	ori	r24, 0x07	; 7
     a50:	80 83       	st	Z, r24

        default:
        return;
        break;

    }   ADCSRA |= (1<<ADEN);
     a52:	ea e7       	ldi	r30, 0x7A	; 122
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <_Z13setADCchannelh>:
}

void setADCchannel(uint8_t adcChannel)  {

    //check for valid channel
    if ((adcChannel < 0) || (adcChannel > 7))   return;
     a5e:	88 30       	cpi	r24, 0x08	; 8
     a60:	40 f4       	brcc	.+16     	; 0xa72 <_Z13setADCchannelh+0x14>

    //select ADC channel with safety mask
    ADMUX = (ADMUX & 0xF0) | (adcChannel & 0x0F);
     a62:	ec e7       	ldi	r30, 0x7C	; 124
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	90 81       	ld	r25, Z
     a68:	8f 70       	andi	r24, 0x0F	; 15
     a6a:	90 7f       	andi	r25, 0xF0	; 240
     a6c:	89 2b       	or	r24, r25
     a6e:	80 83       	st	Z, r24

    _NOP();
     a70:	00 00       	nop
     a72:	08 95       	ret

00000a74 <_Z11getADCvaluev>:
}

int16_t getADCvalue()   {

    //single conversion mode
    ADCSRA |= (1<<ADSC);
     a74:	ea e7       	ldi	r30, 0x7A	; 122
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	80 83       	st	Z, r24

    //wait until ADC conversion is complete
    while (ADCSRA & (1<<ADSC));
     a7e:	80 81       	ld	r24, Z
     a80:	86 fd       	sbrc	r24, 6
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_Z11getADCvaluev+0xa>

    return ADC;
     a84:	80 91 78 00 	lds	r24, 0x0078
     a88:	90 91 79 00 	lds	r25, 0x0079

}
     a8c:	08 95       	ret

00000a8e <_Z22disconnectDigitalInADCh>:

void disconnectDigitalInADC(uint8_t adcChannel) {

    if (adcChannel < 6)
     a8e:	86 30       	cpi	r24, 0x06	; 6
     a90:	70 f4       	brcc	.+28     	; 0xaae <_Z22disconnectDigitalInADCh+0x20>
        DIDR0 |= (1<<adcChannel);
     a92:	ee e7       	ldi	r30, 0x7E	; 126
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	40 81       	ld	r20, Z
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	b9 01       	movw	r22, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <_Z22disconnectDigitalInADCh+0x16>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	8a 95       	dec	r24
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <_Z22disconnectDigitalInADCh+0x12>
     aa8:	cb 01       	movw	r24, r22
     aaa:	84 2b       	or	r24, r20
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret

00000ab0 <_Z15disableWatchDogv>:
//run time in milliseconds
volatile uint32_t           rTime_ms = 0;

void disableWatchDog()  {

    MCUSR &= ~(1 << WDRF);
     ab0:	84 b7       	in	r24, 0x34	; 52
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	84 bf       	out	0x34, r24	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	a8 95       	wdr
     abc:	80 91 60 00 	lds	r24, 0x0060
     ac0:	88 61       	ori	r24, 0x18	; 24
     ac2:	80 93 60 00 	sts	0x0060, r24
     ac6:	10 92 60 00 	sts	0x0060, r1
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	08 95       	ret

00000ace <_Z11rTimeMillisv>:
//timer-based functions

uint32_t rTimeMillis()    {

    uint32_t _rTime_mS;
    uint8_t interruptFlag = SREG;
     ace:	2f b7       	in	r18, 0x3f	; 63

    cli();
     ad0:	f8 94       	cli
    _rTime_mS = rTime_ms;
     ad2:	60 91 42 02 	lds	r22, 0x0242
     ad6:	70 91 43 02 	lds	r23, 0x0243
     ada:	80 91 44 02 	lds	r24, 0x0244
     ade:	90 91 45 02 	lds	r25, 0x0245
    SREG = interruptFlag;
     ae2:	2f bf       	out	0x3f, r18	; 63

    return _rTime_mS;

}
     ae4:	08 95       	ret

00000ae6 <_Z4waitm>:

void wait(uint32_t time)    {
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24

    uint32_t _delayTime = rTimeMillis() + time;
     af2:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
     af6:	c6 0e       	add	r12, r22
     af8:	d7 1e       	adc	r13, r23
     afa:	e8 1e       	adc	r14, r24
     afc:	f9 1e       	adc	r15, r25
    while (_delayTime > rTimeMillis()) {}
     afe:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
     b02:	6c 15       	cp	r22, r12
     b04:	7d 05       	cpc	r23, r13
     b06:	8e 05       	cpc	r24, r14
     b08:	9f 05       	cpc	r25, r15
     b0a:	c8 f3       	brcs	.-14     	; 0xafe <_Z4waitm+0x18>

}
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <_Z24getInputMatrixBufferSizev>:

int8_t getInputMatrixBufferSize() {

    uint8_t head, tail;

    head = digital_buffer_head;
     b16:	80 91 77 03 	lds	r24, 0x0377
    tail = digital_buffer_tail;
     b1a:	90 91 76 03 	lds	r25, 0x0376
    if (head >= tail) return head - tail;
     b1e:	89 17       	cp	r24, r25
     b20:	10 f0       	brcs	.+4      	; 0xb26 <_Z24getInputMatrixBufferSizev+0x10>
     b22:	89 1b       	sub	r24, r25
     b24:	08 95       	ret
     b26:	8c 5f       	subi	r24, 0xFC	; 252
    return DIGITAL_BUFFER_SIZE + head - tail;
     b28:	89 1b       	sub	r24, r25

}
     b2a:	08 95       	ret

00000b2c <_Z21copyInputMatrixBufferv>:

bool copyInputMatrixBuffer()    {

    int8_t bufferSize = getInputMatrixBufferSize();
     b2c:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z24getInputMatrixBufferSizev>

    if (bufferSize <= 0) return false;
     b30:	18 16       	cp	r1, r24
     b32:	dc f5       	brge	.+118    	; 0xbaa <_Z21copyInputMatrixBufferv+0x7e>

    //some data in buffer
    //copy oldest member of buffer to inputMatrixBufferCopy
    if (digital_buffer_head == digital_buffer_tail) return false;
     b34:	90 91 77 03 	lds	r25, 0x0377
     b38:	80 91 76 03 	lds	r24, 0x0376
     b3c:	98 17       	cp	r25, r24
     b3e:	b9 f1       	breq	.+110    	; 0xbae <_Z21copyInputMatrixBufferv+0x82>
    uint8_t index = digital_buffer_tail + 1;
     b40:	80 91 76 03 	lds	r24, 0x0376
     b44:	8f 5f       	subi	r24, 0xFF	; 255
    if (index >= DIGITAL_BUFFER_SIZE) index = 0;
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	08 f0       	brcs	.+2      	; 0xb4c <_Z21copyInputMatrixBufferv+0x20>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
    cli();
     b4c:	f8 94       	cli
    inputMatrixBufferCopy = inputBuffer[index];
     b4e:	e8 2f       	mov	r30, r24
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	e8 58       	subi	r30, 0x88	; 136
     b60:	fc 4f       	sbci	r31, 0xFC	; 252
     b62:	a0 81       	ld	r26, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	62 81       	ldd	r22, Z+2	; 0x02
     b68:	53 81       	ldd	r21, Z+3	; 0x03
     b6a:	44 81       	ldd	r20, Z+4	; 0x04
     b6c:	35 81       	ldd	r19, Z+5	; 0x05
     b6e:	26 81       	ldd	r18, Z+6	; 0x06
     b70:	97 81       	ldd	r25, Z+7	; 0x07
     b72:	a0 93 98 03 	sts	0x0398, r26
     b76:	70 93 99 03 	sts	0x0399, r23
     b7a:	60 93 9a 03 	sts	0x039A, r22
     b7e:	50 93 9b 03 	sts	0x039B, r21
     b82:	40 93 9c 03 	sts	0x039C, r20
     b86:	30 93 9d 03 	sts	0x039D, r19
     b8a:	20 93 9e 03 	sts	0x039E, r18
     b8e:	90 93 9f 03 	sts	0x039F, r25
    sei();
     b92:	78 94       	sei
    dmBufferCopied = true;
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	90 93 33 03 	sts	0x0333, r25
    buttonsProcessed = false;
     b9a:	10 92 35 03 	sts	0x0335, r1
    encodersProcessed = false;
     b9e:	10 92 34 03 	sts	0x0334, r1
    digital_buffer_tail = index;
     ba2:	80 93 76 03 	sts	0x0376, r24
    return true;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret

bool copyInputMatrixBuffer()    {

    int8_t bufferSize = getInputMatrixBufferSize();

    if (bufferSize <= 0) return false;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret

    //some data in buffer
    //copy oldest member of buffer to inputMatrixBufferCopy
    if (digital_buffer_head == digital_buffer_tail) return false;
     bae:	80 e0       	ldi	r24, 0x00	; 0
    buttonsProcessed = false;
    encodersProcessed = false;
    digital_buffer_tail = index;
    return true;

}
     bb0:	08 95       	ret

00000bb2 <__vector_21>:


//ISR functions
ISR(TIMER0_COMPA_vect) {
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <__vector_21+0x48>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62

    static bool updateMillisAndBlink = false;
    static uint8_t matrixSwitchCounter = 0;
    uint32_t ms;

    if (matrixSwitchCounter == 1)   {
     bfe:	80 91 40 02 	lds	r24, 0x0240
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <__vector_21+0x56>
     c06:	41 c1       	rjmp	.+642    	; 0xe8a <__vector_21+0x2d8>
}

inline void ledRowsOff()   {

    //turn off PWM
    TCCR1A &= ~(1<<COM1C1);
     c08:	e0 e8       	ldi	r30, 0x80	; 128
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	87 7f       	andi	r24, 0xF7	; 247
     c10:	80 83       	st	Z, r24
    TCCR4C &= ~(1<<COM4D1);
     c12:	a2 ec       	ldi	r26, 0xC2	; 194
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	8c 91       	ld	r24, X
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	8c 93       	st	X, r24
    TCCR1A &= ~(1<<COM1A1);
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 77       	andi	r24, 0x7F	; 127
     c20:	80 83       	st	Z, r24
    TCCR4A &= ~(1<<COM4A1);
     c22:	a0 ec       	ldi	r26, 0xC0	; 192
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	8c 91       	ld	r24, X
     c28:	8f 77       	andi	r24, 0x7F	; 127
     c2a:	8c 93       	st	X, r24
    TCCR3A &= ~(1<<COM3A1);
     c2c:	a0 e9       	ldi	r26, 0x90	; 144
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	8c 91       	ld	r24, X
     c32:	8f 77       	andi	r24, 0x7F	; 127
     c34:	8c 93       	st	X, r24
    TCCR1A &= ~(1<<COM1B1);
     c36:	80 81       	ld	r24, Z
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	80 83       	st	Z, r24

    setHighMacro(LED_ROW_1_PORT, LED_ROW_1_PIN);
     c3c:	2f 9a       	sbi	0x05, 7	; 5
    setHighMacro(LED_ROW_2_PORT, LED_ROW_2_PIN);
     c3e:	5f 9a       	sbi	0x0b, 7	; 11
    setHighMacro(LED_ROW_3_PORT, LED_ROW_3_PIN);
     c40:	2d 9a       	sbi	0x05, 5	; 5
    setHighMacro(LED_ROW_4_PORT, LED_ROW_4_PIN);
     c42:	47 9a       	sbi	0x08, 7	; 8
    setHighMacro(LED_ROW_5_PORT, LED_ROW_5_PIN);
     c44:	46 9a       	sbi	0x08, 6	; 8
    setHighMacro(LED_ROW_6_PORT, LED_ROW_6_PIN);
     c46:	2e 9a       	sbi	0x05, 6	; 5
    uint32_t ms;

    if (matrixSwitchCounter == 1)   {

        ledRowsOff();
        if (activeLEDcolumn == NUMBER_OF_LED_COLUMNS) activeLEDcolumn = 0;
     c48:	80 91 a0 03 	lds	r24, 0x03A0
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__vector_21+0xa2>
     c50:	10 92 a0 03 	sts	0x03A0, r1
        activateOutputColumn(activeLEDcolumn);
     c54:	80 91 a0 03 	lds	r24, 0x03A0

}

inline void activateOutputColumn(uint8_t column)    {

    bitRead(column, 0) ? setHighMacro(DEC_LM_A0_PORT, DEC_LM_A0_PIN) : setLowMacro(DEC_LM_A0_PORT, DEC_LM_A0_PIN);
     c58:	80 ff       	sbrs	r24, 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <__vector_21+0xae>
     c5c:	29 9a       	sbi	0x05, 1	; 5
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <__vector_21+0xb0>
     c60:	29 98       	cbi	0x05, 1	; 5
    bitRead(column, 1) ? setHighMacro(DEC_LM_A1_PORT, DEC_LM_A1_PIN) : setLowMacro(DEC_LM_A1_PORT, DEC_LM_A1_PIN);
     c62:	81 ff       	sbrs	r24, 1
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <__vector_21+0xb8>
     c66:	2a 9a       	sbi	0x05, 2	; 5
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <__vector_21+0xba>
     c6a:	2a 98       	cbi	0x05, 2	; 5
    bitRead(column, 2) ? setHighMacro(DEC_LM_A2_PORT, DEC_LM_A2_PIN) : setLowMacro(DEC_LM_A2_PORT, DEC_LM_A2_PIN);
     c6c:	82 ff       	sbrs	r24, 2
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <__vector_21+0xc2>
     c70:	2b 9a       	sbi	0x05, 3	; 5
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <__vector_21+0xc4>
     c74:	2b 98       	cbi	0x05, 3	; 5

    _NOP();
     c76:	00 00       	nop

}

inline void checkLEDs()  {

    if (blinkEnabled)   {
     c78:	80 91 32 03 	lds	r24, 0x0332
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_21+0xd0>
     c80:	34 c2       	rjmp	.+1128   	; 0x10ea <__vector_21+0x538>

        if (!blinkTimerCounter)  {
     c82:	80 91 cb 02 	lds	r24, 0x02CB
     c86:	90 91 cc 02 	lds	r25, 0x02CC
     c8a:	a0 91 cd 02 	lds	r26, 0x02CD
     c8e:	b0 91 ce 02 	lds	r27, 0x02CE
     c92:	89 2b       	or	r24, r25
     c94:	8a 2b       	or	r24, r26
     c96:	8b 2b       	or	r24, r27
     c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_21+0xea>
     c9a:	27 c2       	rjmp	.+1102   	; 0x10ea <__vector_21+0x538>
            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
     c9c:	30 91 00 01 	lds	r19, 0x0100
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
        if (!blinkTimerCounter)  {

            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {
     ca4:	fc 01       	movw	r30, r24
     ca6:	ef 5f       	subi	r30, 0xFF	; 255
     ca8:	fc 4f       	sbci	r31, 0xFC	; 252
     caa:	20 81       	ld	r18, Z
     cac:	21 ff       	sbrs	r18, 1
     cae:	0f c0       	rjmp	.+30     	; 0xcce <__vector_21+0x11c>

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
     cb0:	33 23       	and	r19, r19
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <__vector_21+0x110>
     cb4:	fc 01       	movw	r30, r24
     cb6:	ef 5f       	subi	r30, 0xFF	; 255
     cb8:	fc 4f       	sbci	r31, 0xFC	; 252
     cba:	20 81       	ld	r18, Z
     cbc:	28 60       	ori	r18, 0x08	; 8
     cbe:	20 83       	st	Z, r18
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <__vector_21+0x11c>
                    else bitWrite(ledState[i], LED_BLINK_STATE_BIT, 0);
     cc2:	fc 01       	movw	r30, r24
     cc4:	ef 5f       	subi	r30, 0xFF	; 255
     cc6:	fc 4f       	sbci	r31, 0xFC	; 252
     cc8:	20 81       	ld	r18, Z
     cca:	27 7f       	andi	r18, 0xF7	; 247
     ccc:	20 83       	st	Z, r18
    if (blinkEnabled)   {

        if (!blinkTimerCounter)  {

            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	80 33       	cpi	r24, 0x30	; 48
     cd2:	91 05       	cpc	r25, r1
     cd4:	39 f7       	brne	.-50     	; 0xca4 <__vector_21+0xf2>

                }

            }

            blinkState = !blinkState;
     cd6:	90 91 00 01 	lds	r25, 0x0100
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	89 27       	eor	r24, r25
     cde:	80 93 00 01 	sts	0x0100, r24
     ce2:	03 c2       	rjmp	.+1030   	; 0x10ea <__vector_21+0x538>

    //if there is an active LED in current column, turn on LED row
    //do fancy transitions here
        for (int i=0; i<NUMBER_OF_LED_ROWS; i++)  {

            uint8_t ledNumber = activeLEDcolumn+i*NUMBER_OF_LED_COLUMNS;
     ce4:	80 91 a0 03 	lds	r24, 0x03A0
     ce8:	86 0f       	add	r24, r22
            uint8_t ledStateSingle = ledOnLookUpTable[ledState[ledNumber]];
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	ef 5f       	subi	r30, 0xFF	; 255
     cf0:	fc 4f       	sbci	r31, 0xFC	; 252
     cf2:	e0 81       	ld	r30, Z
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e7 59       	subi	r30, 0x97	; 151
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	f0 81       	ld	r31, Z

            //don't bother with pwm if it's disabled
            if (!pwmSteps && ledStateSingle)    {
     cfc:	e0 91 31 03 	lds	r30, 0x0331
     d00:	e1 11       	cpse	r30, r1
     d02:	30 c2       	rjmp	.+1120   	; 0x1164 <__vector_21+0x5b2>
     d04:	f1 11       	cpse	r31, r1
     d06:	1a c2       	rjmp	.+1076   	; 0x113c <__vector_21+0x58a>
     d08:	33 c0       	rjmp	.+102    	; 0xd70 <__vector_21+0x1be>
inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {

        case 0:
        OCR1C = intensity;
     d0a:	f4 01       	movw	r30, r8
     d0c:	11 82       	std	Z+1, r1	; 0x01
     d0e:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1C1);
     d10:	8c 91       	ld	r24, X
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	8c 93       	st	X, r24
     d16:	ad c0       	rjmp	.+346    	; 0xe72 <__vector_21+0x2c0>
        break;

        case 1:
        OCR4D = intensity;
     d18:	f3 01       	movw	r30, r6
     d1a:	10 82       	st	Z, r1
        TCCR4C |= (1<<COM4D1);
     d1c:	f1 01       	movw	r30, r2
     d1e:	80 81       	ld	r24, Z
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	80 83       	st	Z, r24
     d24:	a6 c0       	rjmp	.+332    	; 0xe72 <__vector_21+0x2c0>
        break;

        case 2:
        OCR1A = intensity;
     d26:	f7 01       	movw	r30, r14
     d28:	11 82       	std	Z+1, r1	; 0x01
     d2a:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1A1);
     d2c:	8c 91       	ld	r24, X
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c 93       	st	X, r24
     d32:	9f c0       	rjmp	.+318    	; 0xe72 <__vector_21+0x2c0>
        break;

        case 3:
        OCR4A = intensity;
     d34:	f6 01       	movw	r30, r12
     d36:	10 82       	st	Z, r1
        TCCR4A |= (1<<COM4A1);
     d38:	f9 01       	movw	r30, r18
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	80 83       	st	Z, r24
     d40:	98 c0       	rjmp	.+304    	; 0xe72 <__vector_21+0x2c0>
        break;

        case 4:
        OCR3A = intensity;
     d42:	f8 01       	movw	r30, r16
     d44:	11 82       	std	Z+1, r1	; 0x01
     d46:	10 82       	st	Z, r1
        TCCR3A |= (1<<COM3A1);
     d48:	fa 01       	movw	r30, r20
     d4a:	80 81       	ld	r24, Z
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	80 83       	st	Z, r24
     d50:	90 c0       	rjmp	.+288    	; 0xe72 <__vector_21+0x2c0>
        break;

        case 5:
        OCR1B = intensity;
     d52:	f5 01       	movw	r30, r10
     d54:	11 82       	std	Z+1, r1	; 0x01
     d56:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1B1);
     d58:	8c 91       	ld	r24, X
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8c 93       	st	X, r24
     d5e:	89 c0       	rjmp	.+274    	; 0xe72 <__vector_21+0x2c0>
                #endif

            } else {

                if (
                (ledStateSingle && (transitionCounter[ledNumber] != (NUMBER_OF_TRANSITIONS-1))) ||
     d60:	fc 01       	movw	r30, r24
     d62:	e1 53       	subi	r30, 0x31	; 49
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	50 80       	ld	r5, Z
     d68:	ff e3       	ldi	r31, 0x3F	; 63
     d6a:	5f 12       	cpse	r5, r31
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <__vector_21+0x1cc>
     d6e:	06 c2       	rjmp	.+1036   	; 0x117c <__vector_21+0x5ca>
                (!ledStateSingle && transitionCounter[ledNumber])
     d70:	fc 01       	movw	r30, r24
     d72:	e1 53       	subi	r30, 0x31	; 49
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	40 80       	ld	r4, Z
     d78:	41 10       	cpse	r4, r1
     d7a:	0f c0       	rjmp	.+30     	; 0xd9a <__vector_21+0x1e8>
     d7c:	7a c0       	rjmp	.+244    	; 0xe72 <__vector_21+0x2c0>
                )  {

                    if (ledStateSingle) transitionCounter[ledNumber] += pwmSteps;
     d7e:	40 90 31 03 	lds	r4, 0x0331
     d82:	e4 2d       	mov	r30, r4
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	e5 0d       	add	r30, r5
     d88:	f1 1d       	adc	r31, r1
     d8a:	57 fc       	sbrc	r5, 7
     d8c:	fa 95       	dec	r31
     d8e:	2f 01       	movw	r4, r30
     d90:	fc 01       	movw	r30, r24
     d92:	e1 53       	subi	r30, 0x31	; 49
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	40 82       	st	Z, r4
     d98:	0c c0       	rjmp	.+24     	; 0xdb2 <__vector_21+0x200>
                    else transitionCounter[ledNumber] -= pwmSteps;
     d9a:	50 90 31 03 	lds	r5, 0x0331
     d9e:	e4 2d       	mov	r30, r4
     da0:	44 0c       	add	r4, r4
     da2:	ff 0b       	sbc	r31, r31
     da4:	e5 19       	sub	r30, r5
     da6:	f1 09       	sbc	r31, r1
     da8:	2f 01       	movw	r4, r30
     daa:	fc 01       	movw	r30, r24
     dac:	e1 53       	subi	r30, 0x31	; 49
     dae:	fd 4f       	sbci	r31, 0xFD	; 253
     db0:	40 82       	st	Z, r4

                    if (transitionCounter[ledNumber] >= NUMBER_OF_TRANSITIONS) transitionCounter[ledNumber] = NUMBER_OF_TRANSITIONS-1;
     db2:	fc 01       	movw	r30, r24
     db4:	e1 53       	subi	r30, 0x31	; 49
     db6:	fd 4f       	sbci	r31, 0xFD	; 253
     db8:	e0 81       	ld	r30, Z
     dba:	e0 34       	cpi	r30, 0x40	; 64
     dbc:	4c f0       	brlt	.+18     	; 0xdd0 <__vector_21+0x21e>
     dbe:	fc 01       	movw	r30, r24
     dc0:	e1 53       	subi	r30, 0x31	; 49
     dc2:	fd 4f       	sbci	r31, 0xFD	; 253
     dc4:	0f 2e       	mov	r0, r31
     dc6:	ff e3       	ldi	r31, 0x3F	; 63
     dc8:	5f 2e       	mov	r5, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	50 82       	st	Z, r5
     dce:	d6 c1       	rjmp	.+940    	; 0x117c <__vector_21+0x5ca>
                    if (transitionCounter[ledNumber] < 0) transitionCounter[ledNumber] = 0;
     dd0:	ee 23       	and	r30, r30
     dd2:	2c f4       	brge	.+10     	; 0xdde <__vector_21+0x22c>
     dd4:	fc 01       	movw	r30, r24
     dd6:	e1 53       	subi	r30, 0x31	; 49
     dd8:	fd 4f       	sbci	r31, 0xFD	; 253
     dda:	10 82       	st	Z, r1
     ddc:	4a c0       	rjmp	.+148    	; 0xe72 <__vector_21+0x2c0>

                }

                if (transitionCounter[ledNumber]) {
     dde:	fc 01       	movw	r30, r24
     de0:	e1 53       	subi	r30, 0x31	; 49
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	e0 81       	ld	r30, Z
     de6:	ee 23       	and	r30, r30
     de8:	09 f4       	brne	.+2      	; 0xdec <__vector_21+0x23a>
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <__vector_21+0x2c0>

                    #ifdef LED_INVERT
                        ledRowOn(i, 255-ledTransitionScale[transitionCounter[ledNumber]]);
     dec:	0e 2e       	mov	r0, r30
     dee:	00 0c       	add	r0, r0
     df0:	ff 0b       	sbc	r31, r31
     df2:	e7 5d       	subi	r30, 0xD7	; 215
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	80 95       	com	r24

}

inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {
     dfa:	72 30       	cpi	r23, 0x02	; 2
     dfc:	d9 f0       	breq	.+54     	; 0xe34 <__vector_21+0x282>
     dfe:	28 f4       	brcc	.+10     	; 0xe0a <__vector_21+0x258>
     e00:	77 23       	and	r23, r23
     e02:	49 f0       	breq	.+18     	; 0xe16 <__vector_21+0x264>
     e04:	71 30       	cpi	r23, 0x01	; 1
     e06:	79 f0       	breq	.+30     	; 0xe26 <__vector_21+0x274>
     e08:	34 c0       	rjmp	.+104    	; 0xe72 <__vector_21+0x2c0>
     e0a:	74 30       	cpi	r23, 0x04	; 4
     e0c:	11 f1       	breq	.+68     	; 0xe52 <__vector_21+0x2a0>
     e0e:	d0 f0       	brcs	.+52     	; 0xe44 <__vector_21+0x292>
     e10:	75 30       	cpi	r23, 0x05	; 5
     e12:	41 f1       	breq	.+80     	; 0xe64 <__vector_21+0x2b2>
     e14:	2e c0       	rjmp	.+92     	; 0xe72 <__vector_21+0x2c0>

        case 0:
        OCR1C = intensity;
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	f4 01       	movw	r30, r8
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1C1);
     e1e:	8c 91       	ld	r24, X
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	8c 93       	st	X, r24
     e24:	26 c0       	rjmp	.+76     	; 0xe72 <__vector_21+0x2c0>
        break;

        case 1:
        OCR4D = intensity;
     e26:	f3 01       	movw	r30, r6
     e28:	80 83       	st	Z, r24
        TCCR4C |= (1<<COM4D1);
     e2a:	f1 01       	movw	r30, r2
     e2c:	80 81       	ld	r24, Z
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 83       	st	Z, r24
     e32:	1f c0       	rjmp	.+62     	; 0xe72 <__vector_21+0x2c0>
        break;

        case 2:
        OCR1A = intensity;
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	f7 01       	movw	r30, r14
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1A1);
     e3c:	8c 91       	ld	r24, X
     e3e:	80 68       	ori	r24, 0x80	; 128
     e40:	8c 93       	st	X, r24
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <__vector_21+0x2c0>
        break;

        case 3:
        OCR4A = intensity;
     e44:	f6 01       	movw	r30, r12
     e46:	80 83       	st	Z, r24
        TCCR4A |= (1<<COM4A1);
     e48:	f9 01       	movw	r30, r18
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	80 83       	st	Z, r24
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <__vector_21+0x2c0>
        break;

        case 4:
        OCR3A = intensity;
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	f8 01       	movw	r30, r16
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	80 83       	st	Z, r24
        TCCR3A |= (1<<COM3A1);
     e5a:	fa 01       	movw	r30, r20
     e5c:	80 81       	ld	r24, Z
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	80 83       	st	Z, r24
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <__vector_21+0x2c0>
        break;

        case 5:
        OCR1B = intensity;
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	f5 01       	movw	r30, r10
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1B1);
     e6c:	8c 91       	ld	r24, X
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	8c 93       	st	X, r24
     e72:	68 5f       	subi	r22, 0xF8	; 248
     e74:	7f 5f       	subi	r23, 0xFF	; 255

    }

    //if there is an active LED in current column, turn on LED row
    //do fancy transitions here
        for (int i=0; i<NUMBER_OF_LED_ROWS; i++)  {
     e76:	60 33       	cpi	r22, 0x30	; 48
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_21+0x2ca>
     e7a:	34 cf       	rjmp	.-408    	; 0xce4 <__vector_21+0x132>

        ledRowsOff();
        if (activeLEDcolumn == NUMBER_OF_LED_COLUMNS) activeLEDcolumn = 0;
        activateOutputColumn(activeLEDcolumn);
        checkLEDs();
        activeLEDcolumn++;
     e7c:	80 91 a0 03 	lds	r24, 0x03A0
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 a0 03 	sts	0x03A0, r24
        matrixSwitchCounter = 0;
     e86:	10 92 40 02 	sts	0x0240, r1

    }

    if (updateMillisAndBlink)   {
     e8a:	90 91 3f 02 	lds	r25, 0x023F
     e8e:	99 23       	and	r25, r25
     e90:	d1 f0       	breq	.+52     	; 0xec6 <__vector_21+0x314>

        ms = rTime_ms;
     e92:	40 91 42 02 	lds	r20, 0x0242
     e96:	50 91 43 02 	lds	r21, 0x0243
     e9a:	60 91 44 02 	lds	r22, 0x0244
     e9e:	70 91 45 02 	lds	r23, 0x0245
        ms++;
     ea2:	4f 5f       	subi	r20, 0xFF	; 255
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	6f 4f       	sbci	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
        //update run time
        rTime_ms = ms;
     eaa:	40 93 42 02 	sts	0x0242, r20
     eae:	50 93 43 02 	sts	0x0243, r21
     eb2:	60 93 44 02 	sts	0x0244, r22
     eb6:	70 93 45 02 	sts	0x0245, r23

        matrixSwitchCounter++;
     eba:	80 91 40 02 	lds	r24, 0x0240
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 40 02 	sts	0x0240, r24
     ec4:	33 c0       	rjmp	.+102    	; 0xf2c <__vector_21+0x37a>

    }   else {

        if (blinkEnabled) {
     ec6:	80 91 32 03 	lds	r24, 0x0332
     eca:	88 23       	and	r24, r24
     ecc:	79 f1       	breq	.+94     	; 0xf2c <__vector_21+0x37a>

            blinkTimerCounter++;
     ece:	40 91 cb 02 	lds	r20, 0x02CB
     ed2:	50 91 cc 02 	lds	r21, 0x02CC
     ed6:	60 91 cd 02 	lds	r22, 0x02CD
     eda:	70 91 ce 02 	lds	r23, 0x02CE
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	6f 4f       	sbci	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	40 93 cb 02 	sts	0x02CB, r20
     eea:	50 93 cc 02 	sts	0x02CC, r21
     eee:	60 93 cd 02 	sts	0x02CD, r22
     ef2:	70 93 ce 02 	sts	0x02CE, r23
            if (blinkTimerCounter >= ledBlinkTime) blinkTimerCounter = 0;
     ef6:	00 91 cb 02 	lds	r16, 0x02CB
     efa:	10 91 cc 02 	lds	r17, 0x02CC
     efe:	20 91 cd 02 	lds	r18, 0x02CD
     f02:	30 91 ce 02 	lds	r19, 0x02CE
     f06:	40 91 ff 02 	lds	r20, 0x02FF
     f0a:	50 91 00 03 	lds	r21, 0x0300
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	04 17       	cp	r16, r20
     f14:	15 07       	cpc	r17, r21
     f16:	26 07       	cpc	r18, r22
     f18:	37 07       	cpc	r19, r23
     f1a:	40 f0       	brcs	.+16     	; 0xf2c <__vector_21+0x37a>
     f1c:	10 92 cb 02 	sts	0x02CB, r1
     f20:	10 92 cc 02 	sts	0x02CC, r1
     f24:	10 92 cd 02 	sts	0x02CD, r1
     f28:	10 92 ce 02 	sts	0x02CE, r1

        }

    }

    updateMillisAndBlink = !updateMillisAndBlink;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 27       	eor	r24, r25
     f30:	80 93 3f 02 	sts	0x023F, r24

    //read input matrix
    uint8_t bufferIndex = digital_buffer_head + 1;
     f34:	80 91 77 03 	lds	r24, 0x0377
     f38:	8f 5f       	subi	r24, 0xFF	; 255
    if (bufferIndex >= DIGITAL_BUFFER_SIZE) bufferIndex = 0;
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__vector_21+0x38e>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
    if (digital_buffer_tail == bufferIndex) return; //buffer full, exit
     f40:	90 91 76 03 	lds	r25, 0x0376
     f44:	89 17       	cp	r24, r25
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_21+0x398>
     f48:	1e c1       	rjmp	.+572    	; 0x1186 <__vector_21+0x5d4>
    inputBuffer[bufferIndex] = 0;
     f4a:	e8 2f       	mov	r30, r24
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	df 01       	movw	r26, r30
     f50:	aa 0f       	add	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	aa 0f       	add	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	aa 0f       	add	r26, r26
     f5a:	bb 1f       	adc	r27, r27
     f5c:	a8 58       	subi	r26, 0x88	; 136
     f5e:	bc 4f       	sbci	r27, 0xFC	; 252
     f60:	1c 92       	st	X, r1
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	1c 92       	st	X, r1
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	1c 92       	st	X, r1
     f6c:	12 97       	sbiw	r26, 0x02	; 2
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	1c 92       	st	X, r1
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	14 96       	adiw	r26, 0x04	; 4
     f76:	1c 92       	st	X, r1
     f78:	14 97       	sbiw	r26, 0x04	; 4
     f7a:	15 96       	adiw	r26, 0x05	; 5
     f7c:	1c 92       	st	X, r1
     f7e:	15 97       	sbiw	r26, 0x05	; 5
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	1c 92       	st	X, r1
     f84:	16 97       	sbiw	r26, 0x06	; 6
     f86:	17 96       	adiw	r26, 0x07	; 7
     f88:	1c 92       	st	X, r1
     f8a:	17 97       	sbiw	r26, 0x07	; 7
    digital_buffer_head = bufferIndex;
     f8c:	80 93 77 03 	sts	0x0377, r24

    for (int i=0; i<NUMBER_OF_BUTTON_COLUMNS; i++)  {
     f90:	1a 82       	std	Y+2, r1	; 0x02
     f92:	19 82       	std	Y+1, r1	; 0x01

    uint8_t data = 0;
    uint8_t dataReorder = 0;

    //make room for new data
    inputBuffer[bufferIndex] <<= 8;
     f94:	fd 01       	movw	r30, r26

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);
     f96:	68 94       	set
     f98:	cc 24       	eor	r12, r12
     f9a:	c3 f8       	bld	r12, 3
     f9c:	d1 2c       	mov	r13, r1

}

inline void storeDigitalIn(uint8_t column, uint8_t bufferIndex)  {

    uint8_t data = 0;
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	0f 2e       	mov	r0, r31
     fa2:	f1 e9       	ldi	r31, 0x91	; 145
     fa4:	ef 2e       	mov	r14, r31
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	ff 2e       	mov	r15, r31
     faa:	f0 2d       	mov	r31, r0
    inputBuffer[bufferIndex] <<= 8;

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {
     fac:	31 2c       	mov	r3, r1

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));
     fae:	81 2c       	mov	r8, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	54 01       	movw	r10, r8
     fb4:	83 94       	inc	r8

}

inline void activateInputColumn(uint8_t column)   {

    bitRead(dmColumnArray[column], 0) ? setHighMacro(DEC_DM_A0_PORT, DEC_DM_A0_PIN) : setLowMacro(DEC_DM_A0_PORT, DEC_DM_A0_PIN);
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	99 27       	eor	r25, r25
     fbc:	dc 01       	movw	r26, r24
     fbe:	a7 57       	subi	r26, 0x77	; 119
     fc0:	be 4f       	sbci	r27, 0xFE	; 254
     fc2:	2c 91       	ld	r18, X
     fc4:	20 ff       	sbrs	r18, 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <__vector_21+0x41a>
     fc8:	2c 9a       	sbi	0x05, 4	; 5
     fca:	01 c0       	rjmp	.+2      	; 0xfce <__vector_21+0x41c>
     fcc:	2c 98       	cbi	0x05, 4	; 5
    bitRead(dmColumnArray[column], 1) ? setHighMacro(DEC_DM_A1_PORT, DEC_DM_A1_PIN) : setLowMacro(DEC_DM_A1_PORT, DEC_DM_A1_PIN);
     fce:	dc 01       	movw	r26, r24
     fd0:	a7 57       	subi	r26, 0x77	; 119
     fd2:	be 4f       	sbci	r27, 0xFE	; 254
     fd4:	2c 91       	ld	r18, X
     fd6:	21 ff       	sbrs	r18, 1
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__vector_21+0x42c>
     fda:	5e 9a       	sbi	0x0b, 6	; 11
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__vector_21+0x42e>
     fde:	5e 98       	cbi	0x0b, 6	; 11
    bitRead(dmColumnArray[column], 2) ? setHighMacro(DEC_DM_A2_PORT, DEC_DM_A2_PIN) : setLowMacro(DEC_DM_A2_PORT, DEC_DM_A2_PIN);
     fe0:	dc 01       	movw	r26, r24
     fe2:	a7 57       	subi	r26, 0x77	; 119
     fe4:	be 4f       	sbci	r27, 0xFE	; 254
     fe6:	8c 91       	ld	r24, X
     fe8:	82 ff       	sbrs	r24, 2
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <__vector_21+0x43e>
     fec:	5c 9a       	sbi	0x0b, 4	; 11
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <__vector_21+0x440>
     ff0:	5c 98       	cbi	0x0b, 4	; 11

    _NOP();
     ff2:	00 00       	nop

    uint8_t data = 0;
    uint8_t dataReorder = 0;

    //make room for new data
    inputBuffer[bufferIndex] <<= 8;
     ff4:	20 81       	ld	r18, Z
     ff6:	31 81       	ldd	r19, Z+1	; 0x01
     ff8:	42 81       	ldd	r20, Z+2	; 0x02
     ffa:	53 81       	ldd	r21, Z+3	; 0x03
     ffc:	64 81       	ldd	r22, Z+4	; 0x04
     ffe:	75 81       	ldd	r23, Z+5	; 0x05
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	97 81       	ldd	r25, Z+7	; 0x07
    1004:	08 e0       	ldi	r16, 0x08	; 8
    1006:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <__ashldi3>
    100a:	20 83       	st	Z, r18
    100c:	31 83       	std	Z+1, r19	; 0x01
    100e:	42 83       	std	Z+2, r20	; 0x02
    1010:	53 83       	std	Z+3, r21	; 0x03
    1012:	64 83       	std	Z+4, r22	; 0x04
    1014:	75 83       	std	Z+5, r23	; 0x05
    1016:	86 83       	std	Z+6, r24	; 0x06
    1018:	97 83       	std	Z+7, r25	; 0x07

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);
    101a:	59 98       	cbi	0x0b, 1	; 11
    101c:	00 00       	nop
    101e:	59 9a       	sbi	0x0b, 1	; 11
    1020:	2c 2d       	mov	r18, r12
    1022:	3d 2d       	mov	r19, r13

}

inline void storeDigitalIn(uint8_t column, uint8_t bufferIndex)  {

    uint8_t data = 0;
    1024:	81 2f       	mov	r24, r17
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {

        data <<= 1;
        data |= ((SR_DIN_PIN_REGISTER >> SR_DIN_PIN) & 0x01);
    1026:	99 b1       	in	r25, 0x09	; 9
    1028:	95 fb       	bst	r25, 5
    102a:	99 27       	eor	r25, r25
    102c:	90 f9       	bld	r25, 0
    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {

        data <<= 1;
    102e:	88 0f       	add	r24, r24
        data |= ((SR_DIN_PIN_REGISTER >> SR_DIN_PIN) & 0x01);
    1030:	89 2b       	or	r24, r25
        //pulse clock pin
        pulseHightToLow(SR_CLK_PORT, SR_CLK_PIN);
    1032:	58 9a       	sbi	0x0b, 0	; 11
    1034:	00 00       	nop
    1036:	58 98       	cbi	0x0b, 0	; 11
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	31 09       	sbc	r19, r1
    inputBuffer[bufferIndex] <<= 8;

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {
    103c:	a1 f7       	brne	.-24     	; 0x1026 <__vector_21+0x474>
    103e:	d7 01       	movw	r26, r14
    1040:	61 2f       	mov	r22, r17
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	33 2d       	mov	r19, r3

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	ac 01       	movw	r20, r24
    104a:	0d 90       	ld	r0, X+
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <__vector_21+0x4a0>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <__vector_21+0x49c>
    1056:	40 ff       	sbrs	r20, 0
    1058:	0c c0       	rjmp	.+24     	; 0x1072 <__vector_21+0x4c0>
    105a:	24 01       	movw	r4, r8
    105c:	35 01       	movw	r6, r10
    105e:	02 2e       	mov	r0, r18
    1060:	04 c0       	rjmp	.+8      	; 0x106a <__vector_21+0x4b8>
    1062:	44 0c       	add	r4, r4
    1064:	55 1c       	adc	r5, r5
    1066:	66 1c       	adc	r6, r6
    1068:	77 1c       	adc	r7, r7
    106a:	0a 94       	dec	r0
    106c:	d2 f7       	brpl	.-12     	; 0x1062 <__vector_21+0x4b0>
    106e:	64 29       	or	r22, r4
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__vector_21+0x4da>
    1072:	24 01       	movw	r4, r8
    1074:	35 01       	movw	r6, r10
    1076:	02 2e       	mov	r0, r18
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <__vector_21+0x4d0>
    107a:	44 0c       	add	r4, r4
    107c:	55 1c       	adc	r5, r5
    107e:	66 1c       	adc	r6, r6
    1080:	77 1c       	adc	r7, r7
    1082:	0a 94       	dec	r0
    1084:	d2 f7       	brpl	.-12     	; 0x107a <__vector_21+0x4c8>
    1086:	24 2c       	mov	r2, r4
    1088:	20 94       	com	r2
    108a:	62 21       	and	r22, r2
        pulseHightToLow(SR_CLK_PORT, SR_CLK_PIN);

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	28 30       	cpi	r18, 0x08	; 8
    1092:	31 05       	cpc	r19, r1
    1094:	c9 f6       	brne	.-78     	; 0x1048 <__vector_21+0x496>
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));

    inputBuffer[bufferIndex] |= (uint64_t)dataReorder;
    1096:	80 81       	ld	r24, Z
    1098:	a1 81       	ldd	r26, Z+1	; 0x01
    109a:	72 81       	ldd	r23, Z+2	; 0x02
    109c:	53 81       	ldd	r21, Z+3	; 0x03
    109e:	44 81       	ldd	r20, Z+4	; 0x04
    10a0:	35 81       	ldd	r19, Z+5	; 0x05
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	68 2b       	or	r22, r24
    10a8:	60 83       	st	Z, r22
    10aa:	a1 83       	std	Z+1, r26	; 0x01
    10ac:	72 83       	std	Z+2, r23	; 0x02
    10ae:	53 83       	std	Z+3, r21	; 0x03
    10b0:	44 83       	std	Z+4, r20	; 0x04
    10b2:	35 83       	std	Z+5, r19	; 0x05
    10b4:	26 83       	std	Z+6, r18	; 0x06
    10b6:	97 83       	std	Z+7, r25	; 0x07
    if (bufferIndex >= DIGITAL_BUFFER_SIZE) bufferIndex = 0;
    if (digital_buffer_tail == bufferIndex) return; //buffer full, exit
    inputBuffer[bufferIndex] = 0;
    digital_buffer_head = bufferIndex;

    for (int i=0; i<NUMBER_OF_BUTTON_COLUMNS; i++)  {
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	08 97       	sbiw	r24, 0x08	; 8
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_21+0x516>
    10c6:	77 cf       	rjmp	.-274    	; 0xfb6 <__vector_21+0x404>
        activateInputColumn(i);
        storeDigitalIn(i, bufferIndex);

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {
    10c8:	80 91 ca 02 	lds	r24, 0x02CA
    10cc:	81 11       	cpse	r24, r1
    10ce:	5b c0       	rjmp	.+182    	; 0x1186 <__vector_21+0x5d4>
    10d0:	80 91 7a 00 	lds	r24, 0x007A
    10d4:	86 ff       	sbrs	r24, 6
    10d6:	49 c0       	rjmp	.+146    	; 0x116a <__vector_21+0x5b8>
    10d8:	56 c0       	rjmp	.+172    	; 0x1186 <__vector_21+0x5d4>

        adcDelayCounter++;
        if (adcDelayCounter == 2)   {

            adcDelayCounter = 0;
    10da:	10 92 46 02 	sts	0x0246, r1
            startADCconversion();
    10de:	ea e7       	ldi	r30, 0x7A	; 122
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 83       	st	Z, r24
    10e8:	4e c0       	rjmp	.+156    	; 0x1186 <__vector_21+0x5d4>
            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
        OCR4D = intensity;
        TCCR4C |= (1<<COM4D1);
        break;

        case 2:
        OCR1A = intensity;
    10ee:	0f 2e       	mov	r0, r31
    10f0:	f8 e8       	ldi	r31, 0x88	; 136
    10f2:	ef 2e       	mov	r14, r31
    10f4:	f1 2c       	mov	r15, r1
    10f6:	f0 2d       	mov	r31, r0
        TCCR1A |= (1<<COM1A1);
    10f8:	a0 e8       	ldi	r26, 0x80	; 128
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
        OCR4A = intensity;
        TCCR4A |= (1<<COM4A1);
        break;

        case 4:
        OCR3A = intensity;
    10fc:	08 e9       	ldi	r16, 0x98	; 152
    10fe:	10 e0       	ldi	r17, 0x00	; 0
        TCCR3A |= (1<<COM3A1);
    1100:	40 e9       	ldi	r20, 0x90	; 144
    1102:	50 e0       	ldi	r21, 0x00	; 0
        OCR1A = intensity;
        TCCR1A |= (1<<COM1A1);
        break;

        case 3:
        OCR4A = intensity;
    1104:	0f 2e       	mov	r0, r31
    1106:	ff ec       	ldi	r31, 0xCF	; 207
    1108:	cf 2e       	mov	r12, r31
    110a:	d1 2c       	mov	r13, r1
    110c:	f0 2d       	mov	r31, r0
        TCCR4A |= (1<<COM4A1);
    110e:	20 ec       	ldi	r18, 0xC0	; 192
    1110:	30 e0       	ldi	r19, 0x00	; 0
        OCR3A = intensity;
        TCCR3A |= (1<<COM3A1);
        break;

        case 5:
        OCR1B = intensity;
    1112:	0f 2e       	mov	r0, r31
    1114:	fa e8       	ldi	r31, 0x8A	; 138
    1116:	af 2e       	mov	r10, r31
    1118:	b1 2c       	mov	r11, r1
    111a:	f0 2d       	mov	r31, r0
inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {

        case 0:
        OCR1C = intensity;
    111c:	0f 2e       	mov	r0, r31
    111e:	fc e8       	ldi	r31, 0x8C	; 140
    1120:	8f 2e       	mov	r8, r31
    1122:	91 2c       	mov	r9, r1
    1124:	f0 2d       	mov	r31, r0
        TCCR1A |= (1<<COM1C1);
        break;

        case 1:
        OCR4D = intensity;
    1126:	0f 2e       	mov	r0, r31
    1128:	f2 ed       	ldi	r31, 0xD2	; 210
    112a:	6f 2e       	mov	r6, r31
    112c:	71 2c       	mov	r7, r1
    112e:	f0 2d       	mov	r31, r0
        TCCR4C |= (1<<COM4D1);
    1130:	0f 2e       	mov	r0, r31
    1132:	f2 ec       	ldi	r31, 0xC2	; 194
    1134:	2f 2e       	mov	r2, r31
    1136:	31 2c       	mov	r3, r1
    1138:	f0 2d       	mov	r31, r0
    113a:	d4 cd       	rjmp	.-1112   	; 0xce4 <__vector_21+0x132>

}

inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {
    113c:	72 30       	cpi	r23, 0x02	; 2
    113e:	09 f4       	brne	.+2      	; 0x1142 <__vector_21+0x590>
    1140:	f2 cd       	rjmp	.-1052   	; 0xd26 <__vector_21+0x174>
    1142:	38 f4       	brcc	.+14     	; 0x1152 <__vector_21+0x5a0>
    1144:	77 23       	and	r23, r23
    1146:	09 f4       	brne	.+2      	; 0x114a <__vector_21+0x598>
    1148:	e0 cd       	rjmp	.-1088   	; 0xd0a <__vector_21+0x158>
    114a:	71 30       	cpi	r23, 0x01	; 1
    114c:	09 f4       	brne	.+2      	; 0x1150 <__vector_21+0x59e>
    114e:	e4 cd       	rjmp	.-1080   	; 0xd18 <__vector_21+0x166>
    1150:	90 ce       	rjmp	.-736    	; 0xe72 <__vector_21+0x2c0>
    1152:	74 30       	cpi	r23, 0x04	; 4
    1154:	09 f4       	brne	.+2      	; 0x1158 <__vector_21+0x5a6>
    1156:	f5 cd       	rjmp	.-1046   	; 0xd42 <__vector_21+0x190>
    1158:	08 f4       	brcc	.+2      	; 0x115c <__vector_21+0x5aa>
    115a:	ec cd       	rjmp	.-1064   	; 0xd34 <__vector_21+0x182>
    115c:	75 30       	cpi	r23, 0x05	; 5
    115e:	09 f4       	brne	.+2      	; 0x1162 <__vector_21+0x5b0>
    1160:	f8 cd       	rjmp	.-1040   	; 0xd52 <__vector_21+0x1a0>
    1162:	87 ce       	rjmp	.-754    	; 0xe72 <__vector_21+0x2c0>
                    ledRowOn(i, 255);
                #endif

            } else {

                if (
    1164:	f1 11       	cpse	r31, r1
    1166:	fc cd       	rjmp	.-1032   	; 0xd60 <__vector_21+0x1ae>
    1168:	03 ce       	rjmp	.-1018   	; 0xd70 <__vector_21+0x1be>

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {

        adcDelayCounter++;
    116a:	80 91 46 02 	lds	r24, 0x0246
    116e:	8f 5f       	subi	r24, 0xFF	; 255
        if (adcDelayCounter == 2)   {
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	09 f4       	brne	.+2      	; 0x1176 <__vector_21+0x5c4>
    1174:	b2 cf       	rjmp	.-156    	; 0x10da <__vector_21+0x528>

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {

        adcDelayCounter++;
    1176:	80 93 46 02 	sts	0x0246, r24
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <__vector_21+0x5d4>
                    if (transitionCounter[ledNumber] >= NUMBER_OF_TRANSITIONS) transitionCounter[ledNumber] = NUMBER_OF_TRANSITIONS-1;
                    if (transitionCounter[ledNumber] < 0) transitionCounter[ledNumber] = 0;

                }

                if (transitionCounter[ledNumber]) {
    117c:	fc 01       	movw	r30, r24
    117e:	e1 53       	subi	r30, 0x31	; 49
    1180:	fd 4f       	sbci	r31, 0xFD	; 253
    1182:	e0 81       	ld	r30, Z
    1184:	33 ce       	rjmp	.-922    	; 0xdec <__vector_21+0x23a>

        }

    }

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	3f 90       	pop	r3
    11c4:	2f 90       	pop	r2
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_29>:

ISR(ADC_vect)   {
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31

    analogBuffer[analogBufferCounter] = ADC;
    11e6:	80 91 c7 02 	lds	r24, 0x02C7
    11ea:	e8 2f       	mov	r30, r24
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	20 91 78 00 	lds	r18, 0x0078
    11f2:	30 91 79 00 	lds	r19, 0x0079
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e9 57       	subi	r30, 0x79	; 121
    11fc:	fd 4f       	sbci	r31, 0xFD	; 253
    11fe:	31 83       	std	Z+1, r19	; 0x01
    1200:	20 83       	st	Z, r18
    analogBufferCounter++;
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 c7 02 	sts	0x02C7, r24

    activeMuxInput++;
    1208:	90 91 c8 02 	lds	r25, 0x02C8
    120c:	9f 5f       	subi	r25, 0xFF	; 255

    bool switchMux = (activeMuxInput == NUMBER_OF_MUX_INPUTS);
    bool bufferFull = (analogBufferCounter == MAX_NUMBER_OF_ANALOG);
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	80 32       	cpi	r24, 0x20	; 32
    1212:	09 f0       	breq	.+2      	; 0x1216 <__vector_29+0x46>
    1214:	20 e0       	ldi	r18, 0x00	; 0

    if (switchMux)  {
    1216:	90 31       	cpi	r25, 0x10	; 16
    1218:	19 f0       	breq	.+6      	; 0x1220 <__vector_29+0x50>
ISR(ADC_vect)   {

    analogBuffer[analogBufferCounter] = ADC;
    analogBufferCounter++;

    activeMuxInput++;
    121a:	90 93 c8 02 	sts	0x02C8, r25
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <__vector_29+0x84>
    bool switchMux = (activeMuxInput == NUMBER_OF_MUX_INPUTS);
    bool bufferFull = (analogBufferCounter == MAX_NUMBER_OF_ANALOG);

    if (switchMux)  {

        activeMuxInput = 0;
    1220:	10 92 c8 02 	sts	0x02C8, r1
        activeMux++;
    1224:	80 91 c9 02 	lds	r24, 0x02C9
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 c9 02 	sts	0x02C9, r24
        if (activeMux == NUMBER_OF_MUX) activeMux = 0;
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	21 f4       	brne	.+8      	; 0x123a <__vector_29+0x6a>
    1232:	10 92 c9 02 	sts	0x02C9, r1
    uint8_t analogPin;

    switch(muxNumber) {

        case 0:
        analogPin = MUX_1_IN_PIN;
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <__vector_29+0x78>

inline void setAnalogPin(uint8_t muxNumber)   {

    uint8_t analogPin;

    switch(muxNumber) {
    123a:	88 23       	and	r24, r24
    123c:	21 f0       	breq	.+8      	; 0x1246 <__vector_29+0x76>
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	49 f4       	brne	.+18     	; 0x1254 <__vector_29+0x84>
        case 0:
        analogPin = MUX_1_IN_PIN;
        break;

        case 1:
        analogPin = MUX_2_IN_PIN;
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <__vector_29+0x78>
    uint8_t analogPin;

    switch(muxNumber) {

        case 0:
        analogPin = MUX_1_IN_PIN;
    1246:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;

    }

    ADMUX = (ADMUX & 0xF0) | (analogPin & 0x0F);
    1248:	ec e7       	ldi	r30, 0x7C	; 124
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	89 2b       	or	r24, r25
    1252:	80 83       	st	Z, r24
        if (activeMux == NUMBER_OF_MUX) activeMux = 0;
        setAnalogPin(activeMux);

    }

    if (bufferFull)   {
    1254:	22 23       	and	r18, r18
    1256:	29 f0       	breq	.+10     	; 0x1262 <__vector_29+0x92>

        analogBufferCounter = 0;
    1258:	10 92 c7 02 	sts	0x02C7, r1
         _analogDataAvailable = true;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 ca 02 	sts	0x02CA, r24

    //according to datasheet, propagation delay between setting Sn pins
    //and output appearing on Yn is around 150ns
    //add three NOPs to compensate

    bitRead(muxPinOrderArray[muxInput], 0) ? setHighMacro(MUX_S0_PORT, MUX_S0_PIN) : setLowMacro(MUX_S0_PORT, MUX_S0_PIN);
    1262:	80 91 c8 02 	lds	r24, 0x02C8
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	e7 58       	subi	r30, 0x87	; 135
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	30 81       	ld	r19, Z
    1270:	30 ff       	sbrs	r19, 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_29+0xa8>
    1274:	8d 9a       	sbi	0x11, 5	; 17
    1276:	01 c0       	rjmp	.+2      	; 0x127a <__vector_29+0xaa>
    1278:	8d 98       	cbi	0x11, 5	; 17
    bitRead(muxPinOrderArray[muxInput], 1) ? setHighMacro(MUX_S1_PORT, MUX_S1_PIN) : setLowMacro(MUX_S1_PORT, MUX_S1_PIN);
    127a:	fc 01       	movw	r30, r24
    127c:	e7 58       	subi	r30, 0x87	; 135
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	30 81       	ld	r19, Z
    1282:	31 ff       	sbrs	r19, 1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <__vector_29+0xba>
    1286:	8f 9a       	sbi	0x11, 7	; 17
    1288:	01 c0       	rjmp	.+2      	; 0x128c <__vector_29+0xbc>
    128a:	8f 98       	cbi	0x11, 7	; 17
    bitRead(muxPinOrderArray[muxInput], 2) ? setHighMacro(MUX_S2_PORT, MUX_S2_PIN) : setLowMacro(MUX_S2_PORT, MUX_S2_PIN);
    128c:	fc 01       	movw	r30, r24
    128e:	e7 58       	subi	r30, 0x87	; 135
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	30 81       	ld	r19, Z
    1294:	32 ff       	sbrs	r19, 2
    1296:	02 c0       	rjmp	.+4      	; 0x129c <__vector_29+0xcc>
    1298:	8c 9a       	sbi	0x11, 4	; 17
    129a:	01 c0       	rjmp	.+2      	; 0x129e <__vector_29+0xce>
    129c:	8c 98       	cbi	0x11, 4	; 17
    bitRead(muxPinOrderArray[muxInput], 3) ? setHighMacro(MUX_S3_PORT, MUX_S3_PIN) : setLowMacro(MUX_S3_PORT, MUX_S3_PIN);
    129e:	fc 01       	movw	r30, r24
    12a0:	e7 58       	subi	r30, 0x87	; 135
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	80 81       	ld	r24, Z
    12a6:	83 ff       	sbrs	r24, 3
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <__vector_29+0xde>
    12aa:	8e 9a       	sbi	0x11, 6	; 17
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <__vector_29+0xe0>
    12ae:	8e 98       	cbi	0x11, 6	; 17

    _NOP(); _NOP(); _NOP();
    12b0:	00 00       	nop
    12b2:	00 00       	nop
    12b4:	00 00       	nop

    }

    //always set mux input
    setMuxInput(activeMuxInput);
    if (!bufferFull) startADCconversion();
    12b6:	21 11       	cpse	r18, r1
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__vector_29+0xf4>
    12ba:	ea e7       	ldi	r30, 0x7A	; 122
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	80 83       	st	Z, r24

}
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <_ZN5Board8initPinsEv>:

void Board::initPins() {

    //configure input matrix
    //shift register
    setInputMacro(SR_DIN_DDR, SR_DIN_PIN);
    12da:	55 98       	cbi	0x0a, 5	; 10
    setOutputMacro(SR_CLK_DDR, SR_CLK_PIN);
    12dc:	50 9a       	sbi	0x0a, 0	; 10
    setOutputMacro(SR_LATCH_DDR, SR_LATCH_PIN);
    12de:	51 9a       	sbi	0x0a, 1	; 10

    //decoder
    setOutputMacro(DEC_DM_A0_DDR, DEC_DM_A0_PIN);
    12e0:	24 9a       	sbi	0x04, 4	; 4
    setOutputMacro(DEC_DM_A1_DDR, DEC_DM_A1_PIN);
    12e2:	56 9a       	sbi	0x0a, 6	; 10
    setOutputMacro(DEC_DM_A1_DDR, DEC_DM_A2_PIN);
    12e4:	54 9a       	sbi	0x0a, 4	; 10

    //configure led matrix
    //rows

    setHighMacro(LED_ROW_1_PORT, LED_ROW_1_PIN);
    12e6:	2f 9a       	sbi	0x05, 7	; 5
    setHighMacro(LED_ROW_2_PORT, LED_ROW_2_PIN);
    12e8:	5f 9a       	sbi	0x0b, 7	; 11
    setHighMacro(LED_ROW_3_PORT, LED_ROW_3_PIN);
    12ea:	2d 9a       	sbi	0x05, 5	; 5
    setHighMacro(LED_ROW_4_PORT, LED_ROW_4_PIN);
    12ec:	47 9a       	sbi	0x08, 7	; 8
    setHighMacro(LED_ROW_5_PORT, LED_ROW_5_PIN);
    12ee:	46 9a       	sbi	0x08, 6	; 8
    setHighMacro(LED_ROW_6_PORT, LED_ROW_6_PIN);
    12f0:	2e 9a       	sbi	0x05, 6	; 5

    setOutputMacro(LED_ROW_1_DDR, LED_ROW_1_PIN);
    12f2:	27 9a       	sbi	0x04, 7	; 4
    setOutputMacro(LED_ROW_2_DDR, LED_ROW_2_PIN);
    12f4:	57 9a       	sbi	0x0a, 7	; 10
    setOutputMacro(LED_ROW_3_DDR, LED_ROW_3_PIN);
    12f6:	25 9a       	sbi	0x04, 5	; 4
    setOutputMacro(LED_ROW_4_DDR, LED_ROW_4_PIN);
    12f8:	3f 9a       	sbi	0x07, 7	; 7
    setOutputMacro(LED_ROW_5_DDR, LED_ROW_5_PIN);
    12fa:	3e 9a       	sbi	0x07, 6	; 7
    setOutputMacro(LED_ROW_6_DDR, LED_ROW_6_PIN);
    12fc:	26 9a       	sbi	0x04, 6	; 4

    //decoder
    setOutputMacro(DEC_LM_A0_DDR, DEC_LM_A0_PIN);
    12fe:	21 9a       	sbi	0x04, 1	; 4
    setOutputMacro(DEC_LM_A1_DDR, DEC_LM_A1_PIN);
    1300:	22 9a       	sbi	0x04, 2	; 4
    setOutputMacro(DEC_LM_A2_DDR, DEC_LM_A2_PIN);
    1302:	23 9a       	sbi	0x04, 3	; 4

    //configure analog
    //select pins
    setOutputMacro(MUX_S0_DDR, MUX_S0_PIN);
    1304:	85 9a       	sbi	0x10, 5	; 16
    setOutputMacro(MUX_S1_DDR, MUX_S1_PIN);
    1306:	87 9a       	sbi	0x10, 7	; 16
    setOutputMacro(MUX_S2_DDR, MUX_S2_PIN);
    1308:	84 9a       	sbi	0x10, 4	; 16
    setOutputMacro(MUX_S3_DDR, MUX_S3_PIN);
    130a:	86 9a       	sbi	0x10, 6	; 16

    //mux inputs
    setInputMacro(MUX_1_IN_DDR, MUX_1_IN_PIN);
    130c:	80 98       	cbi	0x10, 0	; 16
    setInputMacro(MUX_2_IN_DDR, MUX_2_IN_PIN);
    130e:	81 98       	cbi	0x10, 1	; 16

    //bootloader led
    setOutputMacro(BTLDR_LED_DDR, BTLDR_LED_PIN);
    1310:	6e 9a       	sbi	0x0d, 6	; 13
    1312:	08 95       	ret

00001314 <_ZN5Board10initAnalogEv>:

}

void Board::initAnalog()    {

    setUpADC();
    1314:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_Z8setUpADCv>
    setADCprescaler(128);
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z15setADCprescalerh>

    //according to datasheet, propagation delay between setting Sn pins
    //and output appearing on Yn is around 150ns
    //add three NOPs to compensate

    bitRead(muxPinOrderArray[muxInput], 0) ? setHighMacro(MUX_S0_PORT, MUX_S0_PIN) : setLowMacro(MUX_S0_PORT, MUX_S0_PIN);
    131e:	80 91 c8 02 	lds	r24, 0x02C8
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	e7 58       	subi	r30, 0x87	; 135
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	20 81       	ld	r18, Z
    132c:	20 ff       	sbrs	r18, 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <_ZN5Board10initAnalogEv+0x20>
    1330:	8d 9a       	sbi	0x11, 5	; 17
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <_ZN5Board10initAnalogEv+0x22>
    1334:	8d 98       	cbi	0x11, 5	; 17
    bitRead(muxPinOrderArray[muxInput], 1) ? setHighMacro(MUX_S1_PORT, MUX_S1_PIN) : setLowMacro(MUX_S1_PORT, MUX_S1_PIN);
    1336:	fc 01       	movw	r30, r24
    1338:	e7 58       	subi	r30, 0x87	; 135
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	20 81       	ld	r18, Z
    133e:	21 ff       	sbrs	r18, 1
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <_ZN5Board10initAnalogEv+0x32>
    1342:	8f 9a       	sbi	0x11, 7	; 17
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <_ZN5Board10initAnalogEv+0x34>
    1346:	8f 98       	cbi	0x11, 7	; 17
    bitRead(muxPinOrderArray[muxInput], 2) ? setHighMacro(MUX_S2_PORT, MUX_S2_PIN) : setLowMacro(MUX_S2_PORT, MUX_S2_PIN);
    1348:	fc 01       	movw	r30, r24
    134a:	e7 58       	subi	r30, 0x87	; 135
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	20 81       	ld	r18, Z
    1350:	22 ff       	sbrs	r18, 2
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <_ZN5Board10initAnalogEv+0x44>
    1354:	8c 9a       	sbi	0x11, 4	; 17
    1356:	01 c0       	rjmp	.+2      	; 0x135a <_ZN5Board10initAnalogEv+0x46>
    1358:	8c 98       	cbi	0x11, 4	; 17
    bitRead(muxPinOrderArray[muxInput], 3) ? setHighMacro(MUX_S3_PORT, MUX_S3_PIN) : setLowMacro(MUX_S3_PORT, MUX_S3_PIN);
    135a:	fc 01       	movw	r30, r24
    135c:	e7 58       	subi	r30, 0x87	; 135
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
    1360:	80 81       	ld	r24, Z
    1362:	83 ff       	sbrs	r24, 3
    1364:	02 c0       	rjmp	.+4      	; 0x136a <_ZN5Board10initAnalogEv+0x56>
    1366:	8e 9a       	sbi	0x11, 6	; 17
    1368:	01 c0       	rjmp	.+2      	; 0x136c <_ZN5Board10initAnalogEv+0x58>
    136a:	8e 98       	cbi	0x11, 6	; 17

    _NOP(); _NOP(); _NOP();
    136c:	00 00       	nop
    136e:	00 00       	nop
    1370:	00 00       	nop

    setUpADC();
    setADCprescaler(128);

    setMuxInput(activeMuxInput);
    setADCchannel(MUX_1_IN_PIN);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z13setADCchannelh>

    disconnectDigitalInADC(MUX_1_IN_PIN);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 47 05 	call	0xa8e	; 0xa8e <_Z22disconnectDigitalInADCh>
    disconnectDigitalInADC(MUX_2_IN_PIN);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 47 05 	call	0xa8e	; 0xa8e <_Z22disconnectDigitalInADCh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1384:	8f e3       	ldi	r24, 0x3F	; 63
    1386:	9f e1       	ldi	r25, 0x1F	; 31
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <_ZN5Board10initAnalogEv+0x74>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <_ZN5Board10initAnalogEv+0x7a>
    138e:	00 00       	nop

    _delay_ms(2);
    for (int i=0; i<5; i++)
        getADCvalue();  //few dummy reads to init ADC
    1390:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    1394:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    1398:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    139c:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    13a0:	0e 94 3a 05 	call	0xa74	; 0xa74 <_Z11getADCvaluev>
    adcInterruptEnable();
    13a4:	ea e7       	ldi	r30, 0x7A	; 122
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 60       	ori	r24, 0x08	; 8
    13ac:	80 83       	st	Z, r24
    startADCconversion();
    13ae:	80 81       	ld	r24, Z
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 83       	st	Z, r24
    13b4:	08 95       	ret

000013b6 <_ZN5Board15configureTimersEv>:

}

void Board::configureTimers()   {
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29

    //clear timer0 conf
    TCCR0A = 0;
    13c8:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
    13ca:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0;
    13cc:	0f 2e       	mov	r0, r31
    13ce:	fe e6       	ldi	r31, 0x6E	; 110
    13d0:	af 2e       	mov	r10, r31
    13d2:	b1 2c       	mov	r11, r1
    13d4:	f0 2d       	mov	r31, r0
    13d6:	d5 01       	movw	r26, r10
    13d8:	1c 92       	st	X, r1

    //clear timer1 conf
    TCCR1A = 0;
    13da:	68 94       	set
    13dc:	ee 24       	eor	r14, r14
    13de:	e7 f8       	bld	r14, 7
    13e0:	f1 2c       	mov	r15, r1
    13e2:	f7 01       	movw	r30, r14
    13e4:	10 82       	st	Z, r1
    TCCR1B = 0;
    13e6:	01 e8       	ldi	r16, 0x81	; 129
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	d8 01       	movw	r26, r16
    13ec:	1c 92       	st	X, r1

    //clear timer3 conf
    TCCR3A = 0;
    13ee:	60 e9       	ldi	r22, 0x90	; 144
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	fb 01       	movw	r30, r22
    13f4:	10 82       	st	Z, r1
    TCCR3B = 0;
    13f6:	41 e9       	ldi	r20, 0x91	; 145
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	da 01       	movw	r26, r20
    13fc:	1c 92       	st	X, r1

    //clear timer4 conf
    TCCR4A = 0;
    13fe:	20 ec       	ldi	r18, 0xC0	; 192
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	10 82       	st	Z, r1
    TCCR4B = 0;
    1406:	81 ec       	ldi	r24, 0xC1	; 193
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	dc 01       	movw	r26, r24
    140c:	1c 92       	st	X, r1
    TCCR4C = 0;
    140e:	c2 ec       	ldi	r28, 0xC2	; 194
    1410:	d0 e0       	ldi	r29, 0x00	; 0
    1412:	18 82       	st	Y, r1
    TCCR4D = 0;
    1414:	a3 ec       	ldi	r26, 0xC3	; 195
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	1c 92       	st	X, r1
    TCCR4E = 0;
    141a:	10 92 c4 00 	sts	0x00C4, r1

    //set timer1, timer3 and timer4 to phase correct pwm mode
    //timer 1
    TCCR1A |= (1<<WGM10);           //phase correct PWM
    141e:	f7 01       	movw	r30, r14
    1420:	d0 80       	ld	r13, Z
    1422:	fd 2d       	mov	r31, r13
    1424:	f1 60       	ori	r31, 0x01	; 1
    1426:	df 2e       	mov	r13, r31
    1428:	f7 01       	movw	r30, r14
    142a:	d0 82       	st	Z, r13
    TCCR1B |= (1<<CS10);            //prescaler 1
    142c:	f8 01       	movw	r30, r16
    142e:	f0 80       	ld	r15, Z
    1430:	ff 2d       	mov	r31, r15
    1432:	f1 60       	ori	r31, 0x01	; 1
    1434:	ff 2e       	mov	r15, r31
    1436:	f8 01       	movw	r30, r16
    1438:	f0 82       	st	Z, r15
    //timer 3
    TCCR3A |= (1<<WGM30);           //phase correct PWM
    143a:	fb 01       	movw	r30, r22
    143c:	10 81       	ld	r17, Z
    143e:	11 60       	ori	r17, 0x01	; 1
    1440:	10 83       	st	Z, r17
    TCCR3B |= (1<<CS30);            //prescaler 1
    1442:	fa 01       	movw	r30, r20
    1444:	60 81       	ld	r22, Z
    1446:	61 60       	ori	r22, 0x01	; 1
    1448:	60 83       	st	Z, r22
    //OCR3A = 10000;
    //TIMSK3 |= (1<<OCIE3A);
    //timer 4
    TCCR4A |= (1<<PWM4A);           //Pulse Width Modulator A Enable
    144a:	f9 01       	movw	r30, r18
    144c:	40 81       	ld	r20, Z
    144e:	42 60       	ori	r20, 0x02	; 2
    1450:	40 83       	st	Z, r20
    TCCR4B |= (1<<CS40);            //prescaler 1
    1452:	fc 01       	movw	r30, r24
    1454:	20 81       	ld	r18, Z
    1456:	21 60       	ori	r18, 0x01	; 1
    1458:	20 83       	st	Z, r18
    TCCR4C |= (1<<PWM4D);           //Pulse Width Modulator D Enable
    145a:	88 81       	ld	r24, Y
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	88 83       	st	Y, r24
    TCCR4D |= (1<<WGM40);           //phase correct PWM
    1460:	8c 91       	ld	r24, X
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	8c 93       	st	X, r24

    //set timer0 to ctc, used for millis/led matrix
    TCCR0A |= (1<<WGM01);           //CTC mode
    1466:	84 b5       	in	r24, 0x24	; 36
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS01)|(1<<CS00);  //prescaler 64
    146c:	85 b5       	in	r24, 0x25	; 37
    146e:	83 60       	ori	r24, 0x03	; 3
    1470:	85 bd       	out	0x25, r24	; 37
    OCR0A = 124;                    //500uS
    1472:	8c e7       	ldi	r24, 0x7C	; 124
    1474:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);          //compare match interrupt
    1476:	d5 01       	movw	r26, r10
    1478:	8c 91       	ld	r24, X
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	8c 93       	st	X, r24

}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	08 95       	ret

00001492 <_ZN5Board4initEv>:

    //default constructor

}

void Board::init()  {
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24

    cli();
    1498:	f8 94       	cli
    disableWatchDog();
    149a:	0e 94 58 05 	call	0xab0	; 0xab0 <_Z15disableWatchDogv>
    initPins();
    149e:	ce 01       	movw	r24, r28
    14a0:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN5Board8initPinsEv>
    initAnalog();
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN5Board10initAnalogEv>
    14aa:	e6 e3       	ldi	r30, 0x36	; 54
    14ac:	f3 e0       	ldi	r31, 0x03	; 3
    14ae:	46 e7       	ldi	r20, 0x76	; 118
    14b0:	53 e0       	ldi	r21, 0x03	; 3

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {

        encoderData[i] |= ((uint16_t)encStopped << 8);
        encoderData[i] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);   //set number of pulses to 8
    14b2:	20 81       	ld	r18, Z
    14b4:	31 81       	ldd	r19, Z+1	; 0x01
    14b6:	20 68       	ori	r18, 0x80	; 128
    14b8:	21 93       	st	Z+, r18
    14ba:	31 93       	st	Z+, r19
    cli();
    disableWatchDog();
    initPins();
    initAnalog();

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {
    14bc:	e4 17       	cp	r30, r20
    14be:	f5 07       	cpc	r31, r21
    14c0:	c1 f7       	brne	.-16     	; 0x14b2 <_ZN5Board4initEv+0x20>
    14c2:	8f e1       	ldi	r24, 0x1F	; 31
    14c4:	9e e4       	ldi	r25, 0x4E	; 78
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <_ZN5Board4initEv+0x34>
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <_ZN5Board4initEv+0x3a>
    14cc:	00 00       	nop

    }

    _delay_ms(5);

    configureTimers();
    14ce:	ce 01       	movw	r24, r28
    14d0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN5Board15configureTimersEv>

    //enable global interrupts
    sei();
    14d4:	78 94       	sei

}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <_ZN5Board11getLEDstateEh>:
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    14dc:	e6 2f       	mov	r30, r22
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	ef 5f       	subi	r30, 0xFF	; 255
    14e2:	fc 4f       	sbci	r31, 0xFC	; 252
    14e4:	80 81       	ld	r24, Z
    return returnValue;

}
    14e6:	08 95       	ret

000014e8 <_ZN5Board15setLEDblinkTimeEj>:

void Board::setLEDblinkTime(uint16_t blinkTime)  {

    cli();
    14e8:	f8 94       	cli
    ledBlinkTime = blinkTime*100;
    14ea:	24 e6       	ldi	r18, 0x64	; 100
    14ec:	26 9f       	mul	r18, r22
    14ee:	c0 01       	movw	r24, r0
    14f0:	27 9f       	mul	r18, r23
    14f2:	90 0d       	add	r25, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	90 93 00 03 	sts	0x0300, r25
    14fa:	80 93 ff 02 	sts	0x02FF, r24
    blinkTimerCounter = 0;
    14fe:	10 92 cb 02 	sts	0x02CB, r1
    1502:	10 92 cc 02 	sts	0x02CC, r1
    1506:	10 92 cd 02 	sts	0x02CD, r1
    150a:	10 92 ce 02 	sts	0x02CE, r1
    sei();
    150e:	78 94       	sei
    1510:	08 95       	ret

00001512 <_ZN5Board21setLEDTransitionSpeedEh>:
}

void Board::setLEDTransitionSpeed(uint8_t transitionSteps) {

    //reset transition counter
    cli();
    1512:	f8 94       	cli
    1514:	ef ec       	ldi	r30, 0xCF	; 207
    1516:	f2 e0       	ldi	r31, 0x02	; 2
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	92 e0       	ldi	r25, 0x02	; 2
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)
        transitionCounter[i] = 0;
    151c:	11 92       	st	Z+, r1

void Board::setLEDTransitionSpeed(uint8_t transitionSteps) {

    //reset transition counter
    cli();
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)
    151e:	e8 17       	cp	r30, r24
    1520:	f9 07       	cpc	r31, r25
    1522:	e1 f7       	brne	.-8      	; 0x151c <_ZN5Board21setLEDTransitionSpeedEh+0xa>
        transitionCounter[i] = 0;
    sei();
    1524:	78 94       	sei

    pwmSteps = transitionSteps;
    1526:	60 93 31 03 	sts	0x0331, r22
    152a:	08 95       	ret

0000152c <_ZN5Board16ledBlinkingStartEv>:

}

void Board::ledBlinkingStart() {

    if (!blinkEnabled)  {
    152c:	80 91 32 03 	lds	r24, 0x0332
    1530:	81 11       	cpse	r24, r1
    1532:	0d c0       	rjmp	.+26     	; 0x154e <_ZN5Board16ledBlinkingStartEv+0x22>

        blinkEnabled = true;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 32 03 	sts	0x0332, r24
        blinkState = true;
    153a:	80 93 00 01 	sts	0x0100, r24
        blinkTimerCounter = 0;
    153e:	10 92 cb 02 	sts	0x02CB, r1
    1542:	10 92 cc 02 	sts	0x02CC, r1
    1546:	10 92 cd 02 	sts	0x02CD, r1
    154a:	10 92 ce 02 	sts	0x02CE, r1
    154e:	08 95       	ret

00001550 <_ZN5Board15ledBlinkingStopEv>:

}

void Board::ledBlinkingStop()   {

    blinkState = true;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 00 01 	sts	0x0100, r24
    cli();
    1556:	f8 94       	cli
    blinkTimerCounter = 0;
    1558:	10 92 cb 02 	sts	0x02CB, r1
    155c:	10 92 cc 02 	sts	0x02CC, r1
    1560:	10 92 cd 02 	sts	0x02CD, r1
    1564:	10 92 ce 02 	sts	0x02CE, r1
    sei();
    1568:	78 94       	sei
    blinkEnabled = false;
    156a:	10 92 32 03 	sts	0x0332, r1
    156e:	08 95       	ret

00001570 <_ZN5Board14checkBlinkLEDsEv>:
    state = blinkEnabled;
    return state;

}

void Board::checkBlinkLEDs() {
    1570:	ac 01       	movw	r20, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1572:	90 91 01 03 	lds	r25, 0x0301
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    1576:	91 fd       	sbrc	r25, 1
    1578:	13 c0       	rjmp	.+38     	; 0x15a0 <_ZN5Board14checkBlinkLEDsEv+0x30>
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	30 e0       	ldi	r19, 0x00	; 0
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    157e:	f9 01       	movw	r30, r18
    1580:	ff 27       	eor	r31, r31
    1582:	ef 5f       	subi	r30, 0xFF	; 255
    1584:	fc 4f       	sbci	r31, 0xFC	; 252
    1586:	90 81       	ld	r25, Z
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    1588:	91 fd       	sbrc	r25, 1
    158a:	0a c0       	rjmp	.+20     	; 0x15a0 <_ZN5Board14checkBlinkLEDsEv+0x30>

    bool _blinkEnabled = false;
    uint8_t ledState;

    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	20 33       	cpi	r18, 0x30	; 48
    1592:	31 05       	cpc	r19, r1
    1594:	a1 f7       	brne	.-24     	; 0x157e <_ZN5Board14checkBlinkLEDsEv+0xe>
    }

    if (_blinkEnabled)  ledBlinkingStart();

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {
    1596:	80 91 32 03 	lds	r24, 0x0332
    159a:	81 11       	cpse	r24, r1
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <_ZN5Board14checkBlinkLEDsEv+0x38>
    159e:	08 95       	ret

        }

    }

    if (_blinkEnabled)  ledBlinkingStart();
    15a0:	ca 01       	movw	r24, r20
    15a2:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN5Board16ledBlinkingStartEv>
    15a6:	08 95       	ret

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {

        //reset blinkState to default value
        ledBlinkingStop();
    15a8:	ca 01       	movw	r24, r20
    15aa:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Board15ledBlinkingStopEv>
    15ae:	08 95       	ret

000015b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>:
    return column + NUMBER_OF_LED_COLUMNS*row;

}


void Board::handleLED(uint8_t ledNumber, ledColor_t color, bool blinkMode, ledType_t type) {
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	00 d0       	rcall	.+0      	; 0x15be <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xe>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x10>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x12>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62

    uint8_t currentState[3];
    bool newLEDstate[3];
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
    15c6:	48 30       	cpi	r20, 0x08	; 8
    15c8:	09 f0       	breq	.+2      	; 0x15cc <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x1c>
    15ca:	8f c0       	rjmp	.+286    	; 0x16ea <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x13a>
    15cc:	01 30       	cpi	r16, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x22>
    15d0:	8c c0       	rjmp	.+280    	; 0x16ea <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x13a>
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    15d2:	e6 2f       	mov	r30, r22
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	ef 5f       	subi	r30, 0xFF	; 255
    15d8:	fc 4f       	sbci	r31, 0xFC	; 252
    15da:	80 81       	ld	r24, Z

    switch(type)    {

        case singleLED:
        loops = 1;
        currentState[0] = getLEDstate(ledNumber);
    15dc:	8c 83       	std	Y+4, r24	; 0x04
        newLEDstate[0] = (color != colorOff);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	41 11       	cpse	r20, r1
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x36>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	89 83       	std	Y+1, r24	; 0x01
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {

        case singleLED:
        loops = 1;
    15e8:	01 e0       	ldi	r16, 0x01	; 1
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;
    15ea:	86 c0       	rjmp	.+268    	; 0x16f8 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x148>
}

inline uint8_t getRGBfirstID(uint8_t rgbID)    {

    //get first RGB LED address (out of three)
    uint8_t column = rgbID % NUMBER_OF_LED_COLUMNS;
    15ec:	86 2f       	mov	r24, r22
    15ee:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (rgbID/NUMBER_OF_BUTTON_COLUMNS)*3;
    15f0:	66 95       	lsr	r22
    15f2:	66 95       	lsr	r22
    15f4:	66 95       	lsr	r22

    return column + NUMBER_OF_LED_COLUMNS*row;
    15f6:	98 e1       	ldi	r25, 0x18	; 24
    15f8:	69 9f       	mul	r22, r25
    15fa:	80 0d       	add	r24, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	68 2f       	mov	r22, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1600:	e8 2f       	mov	r30, r24
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	ef 5f       	subi	r30, 0xFF	; 255
    1606:	fc 4f       	sbci	r31, 0xFC	; 252
    1608:	80 81       	ld	r24, Z
        break;

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
    160a:	8c 83       	std	Y+4, r24	; 0x04
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    160c:	e8 e0       	ldi	r30, 0x08	; 8
    160e:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	ef 5f       	subi	r30, 0xFF	; 255
    1614:	fc 4f       	sbci	r31, 0xFC	; 252
    1616:	80 81       	ld	r24, Z

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    1618:	8d 83       	std	Y+5, r24	; 0x05
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    161a:	e0 e1       	ldi	r30, 0x10	; 16
    161c:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	ef 5f       	subi	r30, 0xFF	; 255
    1622:	fc 4f       	sbci	r31, 0xFC	; 252
    1624:	80 81       	ld	r24, Z
        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    1626:	8e 83       	std	Y+6, r24	; 0x06

        newLEDstate[0] = rgbColors[color][0];
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	fa 01       	movw	r30, r20
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e4 0f       	add	r30, r20
    1632:	f5 1f       	adc	r31, r21
    1634:	ef 5e       	subi	r30, 0xEF	; 239
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 81       	ld	r25, Z
    163c:	91 11       	cpse	r25, r1
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x92>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	89 83       	std	Y+1, r24	; 0x01
        newLEDstate[1] = rgbColors[color][1];
    1644:	fa 01       	movw	r30, r20
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	e4 0f       	add	r30, r20
    164c:	f5 1f       	adc	r31, r21
    164e:	ef 5e       	subi	r30, 0xEF	; 239
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	91 11       	cpse	r25, r1
    1658:	01 c0       	rjmp	.+2      	; 0x165c <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xac>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	8a 83       	std	Y+2, r24	; 0x02
        newLEDstate[2] = rgbColors[color][2];
    165e:	fa 01       	movw	r30, r20
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	4e 0f       	add	r20, r30
    1666:	5f 1f       	adc	r21, r31
    1668:	fa 01       	movw	r30, r20
    166a:	ef 5e       	subi	r30, 0xEF	; 239
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	92 81       	ldd	r25, Z+2	; 0x02
    1672:	91 11       	cpse	r25, r1
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xc8>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	8b 83       	std	Y+3, r24	; 0x03
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;

        case rgbLED:
        loops = 3;
    167a:	03 e0       	ldi	r16, 0x03	; 3
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);

        newLEDstate[0] = rgbColors[color][0];
        newLEDstate[1] = rgbColors[color][1];
        newLEDstate[2] = rgbColors[color][2];
        break;
    167c:	3d c0       	rjmp	.+122    	; 0x16f8 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x148>

    }

    for (int i=0; i<loops; i++) {
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	de 01       	movw	r26, r28
    1684:	14 96       	adiw	r26, 0x04	; 4
    1686:	ae 01       	movw	r20, r28
    1688:	4f 5f       	subi	r20, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255

        ledNumber += 8*(bool)i;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	68 94       	set
    1694:	ff 24       	eor	r15, r15
    1696:	f3 f8       	bld	r15, 3
    1698:	e1 2c       	mov	r14, r1
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf6>
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	11 f4       	brne	.+4      	; 0x16a4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf4>
    16a0:	3e 2d       	mov	r19, r14
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xf6>
    16a4:	3f 2d       	mov	r19, r15
    16a6:	63 0f       	add	r22, r19

        switch (newLEDstate[i]) {
    16a8:	fa 01       	movw	r30, r20
    16aa:	31 91       	ld	r19, Z+
    16ac:	af 01       	movw	r20, r30
    16ae:	31 30       	cpi	r19, 0x01	; 1
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x106>

            case false:
            //turn off the led
            currentState[i] = 0;
    16b2:	1c 92       	st	X, r1
            break;
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x124>
    16b6:	fd 01       	movw	r30, r26

            case true:
            //turn on the led
            //if led was already active, clear the on bits before setting new state
            if (bitRead(currentState[i], LED_ACTIVE_BIT))
    16b8:	3c 91       	ld	r19, X
    16ba:	32 fd       	sbrc	r19, 2
                currentState[i] = 0;
    16bc:	1c 92       	st	X, r1

            bitWrite(currentState[i], LED_ACTIVE_BIT, 1);
    16be:	30 81       	ld	r19, Z
    16c0:	73 2f       	mov	r23, r19
    16c2:	74 60       	ori	r23, 0x04	; 4
    16c4:	70 83       	st	Z, r23
            if (blinkMode)  {
    16c6:	22 23       	and	r18, r18
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x120>

                bitWrite(currentState[i], LED_BLINK_ON_BIT, 1);
                //this will turn the led immediately no matter how little time it's
                //going to blink first time
                bitWrite(currentState[i], LED_BLINK_STATE_BIT, 1);
    16ca:	3e 60       	ori	r19, 0x0E	; 14
    16cc:	30 83       	st	Z, r19
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x124>

            }   else bitWrite(currentState[i], LED_CONSTANT_ON_BIT, 1);
    16d0:	35 60       	ori	r19, 0x05	; 5
    16d2:	30 83       	st	Z, r19
            break;

        }   ledState[ledNumber] = currentState[i];
    16d4:	e6 2f       	mov	r30, r22
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	3d 91       	ld	r19, X+
    16da:	ef 5f       	subi	r30, 0xFF	; 255
    16dc:	fc 4f       	sbci	r31, 0xFC	; 252
    16de:	30 83       	st	Z, r19
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	80 17       	cp	r24, r16
    16e4:	91 07       	cpc	r25, r17
    16e6:	d4 f2       	brlt	.-76     	; 0x169c <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xec>
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x14c>
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {
    16ea:	00 23       	and	r16, r16
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x140>
    16ee:	71 cf       	rjmp	.-286    	; 0x15d2 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x22>
    16f0:	01 30       	cpi	r16, 0x01	; 1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x146>
    16f4:	7b cf       	rjmp	.-266    	; 0x15ec <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0x3c>
    16f6:	c3 cf       	rjmp	.-122    	; 0x167e <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xce>
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	c3 cf       	rjmp	.-122    	; 0x1682 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t+0xd2>

        }   ledState[ledNumber] = currentState[i];

    }

}
    16fc:	26 96       	adiw	r28, 0x06	; 6
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	08 95       	ret

00001716 <_ZN5Board11setLEDstateEh10ledColor_tb>:

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;

}

void Board::setLEDstate(uint8_t ledNumber, ledColor_t color, bool blinkMode)   {
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	e6 2e       	mov	r14, r22
    1728:	f4 2e       	mov	r15, r20
    172a:	d2 2e       	mov	r13, r18

//LEDs

inline uint8_t getRGBIDFromLEDID(uint8_t ledID) {

    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;
    172c:	96 2f       	mov	r25, r22
    172e:	96 95       	lsr	r25
    1730:	96 95       	lsr	r25
    1732:	96 95       	lsr	r25

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    1734:	eb ea       	ldi	r30, 0xAB	; 171
    1736:	9e 9f       	mul	r25, r30
    1738:	e1 2d       	mov	r30, r1
    173a:	11 24       	eor	r1, r1
    173c:	e6 95       	lsr	r30
    173e:	8e 2f       	mov	r24, r30
    1740:	88 0f       	add	r24, r24
    row -= mod;
    1742:	e8 0f       	add	r30, r24

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	cf 01       	movw	r24, r30
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__divmodhi4>
    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    row -= mod;

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;
    175c:	1e 2d       	mov	r17, r14
    175e:	17 70       	andi	r17, 0x07	; 7

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    1760:	16 0f       	add	r17, r22
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    1762:	20 91 27 02 	lds	r18, 0x0227
    1766:	30 91 28 02 	lds	r19, 0x0228
    176a:	80 91 1f 02 	lds	r24, 0x021F
    176e:	90 91 20 02 	lds	r25, 0x0220
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    1776:	20 91 36 02 	lds	r18, 0x0236
    177a:	22 23       	and	r18, r18
    177c:	a1 f0       	breq	.+40     	; 0x17a6 <_ZN5Board11setLEDstateEh10ledColor_tb+0x90>
    177e:	21 30       	cpi	r18, 0x01	; 1
    1780:	b9 f4       	brne	.+46     	; 0x17b0 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    1782:	21 2f       	mov	r18, r17
    1784:	26 95       	lsr	r18
    1786:	26 95       	lsr	r18
    1788:	26 95       	lsr	r18
    178a:	82 0f       	add	r24, r18
    178c:	91 1d       	adc	r25, r1
    178e:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	21 2f       	mov	r18, r17
    1796:	27 70       	andi	r18, 0x07	; 7
    1798:	02 c0       	rjmp	.+4      	; 0x179e <_ZN5Board11setLEDstateEh10ledColor_tb+0x88>
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	2a 95       	dec	r18
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <_ZN5Board11setLEDstateEh10ledColor_tb+0x84>
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    17a6:	81 0f       	add	r24, r17
    17a8:	91 1d       	adc	r25, r1
    17aa:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <_ZN5Board11setLEDstateEh10ledColor_tb+0x9c>
            break;

        }   return 0;
    17b0:	80 e0       	ldi	r24, 0x00	; 0
void Board::setLEDstate(uint8_t ledNumber, ledColor_t color, bool blinkMode)   {

    uint8_t rgbID = getRGBIDFromLEDID(ledNumber);
    bool rgbEnabled = configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, rgbID);

    if (!rgbEnabled)    {
    17b2:	81 11       	cpse	r24, r1
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <_ZN5Board11setLEDstateEh10ledColor_tb+0xba>

        if (color != colorOff)
    17b6:	ff 20       	and	r15, r15
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <_ZN5Board11setLEDstateEh10ledColor_tb+0xaa>
            color = colorOnDefault;
    17ba:	68 94       	set
    17bc:	ff 24       	eor	r15, r15
    17be:	f3 f8       	bld	r15, 3
        handleLED(ledNumber, color, blinkMode, singleLED);
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	2d 2d       	mov	r18, r13
    17c4:	4f 2d       	mov	r20, r15
    17c6:	6e 2d       	mov	r22, r14
    17c8:	ce 01       	movw	r24, r28
    17ca:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <_ZN5Board11setLEDstateEh10ledColor_tb+0xc8>

    }   else handleLED(rgbID, color, blinkMode, rgbLED);
    17d0:	01 e0       	ldi	r16, 0x01	; 1
    17d2:	2d 2d       	mov	r18, r13
    17d4:	4f 2d       	mov	r20, r15
    17d6:	61 2f       	mov	r22, r17
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN5Board9handleLEDEh10ledColor_tb9ledType_t>

    if (blinkMode && (color != colorOff)) ledBlinkingStart();
    17de:	dd 20       	and	r13, r13
    17e0:	31 f0       	breq	.+12     	; 0x17ee <_ZN5Board11setLEDstateEh10ledColor_tb+0xd8>
    17e2:	ff 20       	and	r15, r15
    17e4:	21 f0       	breq	.+8      	; 0x17ee <_ZN5Board11setLEDstateEh10ledColor_tb+0xd8>
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN5Board16ledBlinkingStartEv>
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <_ZN5Board11setLEDstateEh10ledColor_tb+0xde>
    else    checkBlinkLEDs();
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN5Board14checkBlinkLEDsEv>

}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	08 95       	ret

00001804 <_ZN5Board19analogDataAvailableEv>:
//analog

bool Board::analogDataAvailable() {

    bool state;
    state = _analogDataAvailable;
    1804:	80 91 ca 02 	lds	r24, 0x02CA
    if (state) {
    1808:	88 23       	and	r24, r24
    180a:	b9 f0       	breq	.+46     	; 0x183a <_ZN5Board19analogDataAvailableEv+0x36>
    180c:	a7 e4       	ldi	r26, 0x47	; 71
    180e:	b2 e0       	ldi	r27, 0x02	; 2
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
            analogBufferCopy[i] = analogBuffer[i];
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	e9 57       	subi	r30, 0x79	; 121
    181c:	fd 4f       	sbci	r31, 0xFD	; 253
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	2d 93       	st	X+, r18
    1824:	3d 93       	st	X+, r19
    bool state;
    state = _analogDataAvailable;
    if (state) {

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	80 32       	cpi	r24, 0x20	; 32
    182a:	91 05       	cpc	r25, r1
    182c:	99 f7       	brne	.-26     	; 0x1814 <_ZN5Board19analogDataAvailableEv+0x10>
            analogBufferCopy[i] = analogBuffer[i];

        _analogDataAvailable = false;
    182e:	10 92 ca 02 	sts	0x02CA, r1
        adcDelayCounter = 0;
    1832:	10 92 46 02 	sts	0x0246, r1
        return true;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret

    } return false;
    183a:	80 e0       	ldi	r24, 0x00	; 0

}
    183c:	08 95       	ret

0000183e <_ZN5Board14getAnalogValueEh>:

int16_t Board::getAnalogValue(uint8_t analogID) {

    return analogBufferCopy[analogID];
    183e:	e6 2f       	mov	r30, r22
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	e9 5b       	subi	r30, 0xB9	; 185
    1848:	fd 4f       	sbci	r31, 0xFD	; 253

}
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	08 95       	ret

00001850 <_ZN5Board15getEncoderStateEh>:
}


//encoders

encoderPosition_t Board::getEncoderState(uint8_t encoderNumber)  {
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	e6 2f       	mov	r30, r22

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    1856:	86 2f       	mov	r24, r22
    1858:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    185a:	07 e0       	ldi	r16, 0x07	; 7
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	08 1b       	sub	r16, r24
    1860:	11 09       	sbc	r17, r1
    1862:	00 0f       	add	r16, r16
    1864:	00 0f       	add	r16, r16
    1866:	00 0f       	add	r16, r16
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    1868:	20 91 98 03 	lds	r18, 0x0398
    186c:	30 91 99 03 	lds	r19, 0x0399
    1870:	40 91 9a 03 	lds	r20, 0x039A
    1874:	50 91 9b 03 	lds	r21, 0x039B
    1878:	60 91 9c 03 	lds	r22, 0x039C
    187c:	70 91 9d 03 	lds	r23, 0x039D
    1880:	80 91 9e 03 	lds	r24, 0x039E
    1884:	90 91 9f 03 	lds	r25, 0x039F
    1888:	0e 94 15 30 	call	0x602a	; 0x602a <__lshrdi3>
    pairState = ((pairState >> row) & 0x03);
    188c:	30 e0       	ldi	r19, 0x00	; 0
//encoders

encoderPosition_t Board::getEncoderState(uint8_t encoderNumber)  {

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    188e:	8e 2f       	mov	r24, r30
    1890:	86 95       	lsr	r24
    1892:	86 95       	lsr	r24
    1894:	86 95       	lsr	r24
    1896:	88 0f       	add	r24, r24
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    1898:	02 c0       	rjmp	.+4      	; 0x189e <_ZN5Board15getEncoderStateEh+0x4e>
    189a:	35 95       	asr	r19
    189c:	27 95       	ror	r18
    189e:	8a 95       	dec	r24
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <_ZN5Board15getEncoderStateEh+0x4a>

inline encoderPosition_t readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    18a2:	6e 2f       	mov	r22, r30
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	fb 01       	movw	r30, r22
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	ea 5c       	subi	r30, 0xCA	; 202
    18ae:	fc 4f       	sbci	r31, 0xFC	; 252
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    18b4:	23 70       	andi	r18, 0x03	; 3

inline encoderPosition_t readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    18b6:	38 2f       	mov	r19, r24
    18b8:	33 0f       	add	r19, r19
    18ba:	33 0f       	add	r19, r19
    18bc:	3f 70       	andi	r19, 0x0F	; 15
    18be:	23 2b       	or	r18, r19

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;
    18c2:	80 7f       	andi	r24, 0xF0	; 240

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    18c4:	82 2b       	or	r24, r18
    18c6:	93 2b       	or	r25, r19
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24

    int8_t encRead = encoderLookUpTable[newPairData];
    18cc:	f9 01       	movw	r30, r18
    18ce:	ef 5f       	subi	r30, 0xFF	; 255
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	20 81       	ld	r18, Z

    if (!encRead) return encStopped;
    18d4:	22 23       	and	r18, r18
    18d6:	09 f4       	brne	.+2      	; 0x18da <_ZN5Board15getEncoderStateEh+0x8a>
    18d8:	45 c0       	rjmp	.+138    	; 0x1964 <_ZN5Board15getEncoderStateEh+0x114>

    bool newEncoderDirection = encRead > 0;
    18da:	31 e0       	ldi	r19, 0x01	; 1
    18dc:	12 16       	cp	r1, r18
    18de:	0c f0       	brlt	.+2      	; 0x18e2 <_ZN5Board15getEncoderStateEh+0x92>
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    18e2:	ac 01       	movw	r20, r24
    18e4:	52 95       	swap	r21
    18e6:	42 95       	swap	r20
    18e8:	4f 70       	andi	r20, 0x0F	; 15
    18ea:	45 27       	eor	r20, r21
    18ec:	5f 70       	andi	r21, 0x0F	; 15
    18ee:	45 27       	eor	r20, r21
    18f0:	4f 70       	andi	r20, 0x0F	; 15
    currentPulses += encRead;
    18f2:	24 0f       	add	r18, r20
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    18f4:	e0 e1       	ldi	r30, 0x10	; 16
    18f6:	2e 02       	muls	r18, r30
    18f8:	a0 01       	movw	r20, r0
    18fa:	11 24       	eor	r1, r1
    bool newEncoderDirection = encRead > 0;
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    currentPulses += encRead;
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    18fc:	8f 70       	andi	r24, 0x0F	; 15
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    18fe:	84 2b       	or	r24, r20
    1900:	95 2b       	or	r25, r21
    1902:	fb 01       	movw	r30, r22
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	ea 5c       	subi	r30, 0xCA	; 202
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    1910:	49 2f       	mov	r20, r25
    1912:	44 1f       	adc	r20, r20
    1914:	44 27       	eor	r20, r20
    1916:	44 1f       	adc	r20, r20
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);
    1918:	33 23       	and	r19, r19
    191a:	49 f0       	breq	.+18     	; 0x192e <_ZN5Board15getEncoderStateEh+0xde>
    191c:	fb 01       	movw	r30, r22
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	ea 5c       	subi	r30, 0xCA	; 202
    1924:	fc 4f       	sbci	r31, 0xFC	; 252
    1926:	90 68       	ori	r25, 0x80	; 128
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	08 c0       	rjmp	.+16     	; 0x193e <_ZN5Board15getEncoderStateEh+0xee>
    192e:	fb 01       	movw	r30, r22
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ea 5c       	subi	r30, 0xCA	; 202
    1936:	fc 4f       	sbci	r31, 0xFC	; 252
    1938:	9f 77       	andi	r25, 0x7F	; 127
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    193e:	34 13       	cpse	r19, r20
    1940:	13 c0       	rjmp	.+38     	; 0x1968 <_ZN5Board15getEncoderStateEh+0x118>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    1942:	23 70       	andi	r18, 0x03	; 3
    1944:	99 f4       	brne	.+38     	; 0x196c <_ZN5Board15getEncoderStateEh+0x11c>

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	fb 01       	movw	r30, r22
    194c:	ea 5c       	subi	r30, 0xCA	; 202
    194e:	fc 4f       	sbci	r31, 0xFC	; 252

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    if (currentPulses % PULSES_PER_STEP) return encStopped;

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	8f 70       	andi	r24, 0x0F	; 15

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    1956:	80 68       	ori	r24, 0x80	; 128
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    195c:	31 11       	cpse	r19, r1
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <_ZN5Board15getEncoderStateEh+0x120>
    else return encMoveLeft;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;

    int8_t encRead = encoderLookUpTable[newPairData];

    if (!encRead) return encStopped;
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <_ZN5Board15getEncoderStateEh+0x122>
    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    1970:	82 e0       	ldi	r24, 0x02	; 2
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);

    return readEncoder(encoderNumber, pairState);

}
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <_ZN5Board20encoderDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    1978:	80 91 35 03 	lds	r24, 0x0335
    197c:	88 23       	and	r24, r24
    197e:	71 f0       	breq	.+28     	; 0x199c <_ZN5Board20encoderDataAvailableEv+0x24>
    1980:	80 91 34 03 	lds	r24, 0x0334
    1984:	88 23       	and	r24, r24
    1986:	51 f0       	breq	.+20     	; 0x199c <_ZN5Board20encoderDataAvailableEv+0x24>
    1988:	80 91 33 03 	lds	r24, 0x0333
    198c:	88 23       	and	r24, r24
    198e:	51 f0       	breq	.+20     	; 0x19a4 <_ZN5Board20encoderDataAvailableEv+0x2c>

        dmBufferCopied = false;
    1990:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    1994:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    1998:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    199c:	80 91 33 03 	lds	r24, 0x0333
    19a0:	81 11       	cpse	r24, r1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <_ZN5Board20encoderDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    19a4:	0e 94 96 05 	call	0xb2c	; 0xb2c <_Z21copyInputMatrixBufferv>
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <_ZN5Board20encoderDataAvailableEv+0x34>

bool Board::encoderDataAvailable()  {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    19aa:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    encodersProcessed = true;
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	90 93 34 03 	sts	0x0334, r25
    return returnValue;

}
    19b2:	08 95       	ret

000019b4 <_ZN5Board19buttonDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    19b4:	80 91 35 03 	lds	r24, 0x0335
    19b8:	88 23       	and	r24, r24
    19ba:	71 f0       	breq	.+28     	; 0x19d8 <_ZN5Board19buttonDataAvailableEv+0x24>
    19bc:	80 91 34 03 	lds	r24, 0x0334
    19c0:	88 23       	and	r24, r24
    19c2:	51 f0       	breq	.+20     	; 0x19d8 <_ZN5Board19buttonDataAvailableEv+0x24>
    19c4:	80 91 33 03 	lds	r24, 0x0333
    19c8:	88 23       	and	r24, r24
    19ca:	51 f0       	breq	.+20     	; 0x19e0 <_ZN5Board19buttonDataAvailableEv+0x2c>

        dmBufferCopied = false;
    19cc:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    19d0:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    19d4:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    19d8:	80 91 33 03 	lds	r24, 0x0333
    19dc:	81 11       	cpse	r24, r1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <_ZN5Board19buttonDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    19e0:	0e 94 96 05 	call	0xb2c	; 0xb2c <_Z21copyInputMatrixBufferv>
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <_ZN5Board19buttonDataAvailableEv+0x34>

bool Board::buttonDataAvailable()   {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    19e6:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    buttonsProcessed = true;
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	90 93 35 03 	sts	0x0335, r25
    return returnValue;

}
    19ee:	08 95       	ret

000019f0 <_ZN5Board14getButtonStateEh>:

bool Board::getButtonState(uint8_t buttonIndex) {
    19f0:	0f 93       	push	r16
    19f2:	cf 93       	push	r28
    19f4:	c6 2f       	mov	r28, r22

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    19f6:	06 2f       	mov	r16, r22
    19f8:	06 95       	lsr	r16
    19fa:	06 95       	lsr	r16
    19fc:	06 95       	lsr	r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    19fe:	00 ff       	sbrs	r16, 0
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <_ZN5Board14getButtonStateEh+0x18>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	80 0f       	add	r24, r16
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <_ZN5Board14getButtonStateEh+0x1a>

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    1a08:	80 2f       	mov	r24, r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a0a:	28 e0       	ldi	r18, 0x08	; 8
    1a0c:	82 9f       	mul	r24, r18
    1a0e:	c0 01       	movw	r24, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    1a16:	6c 2f       	mov	r22, r28
    1a18:	67 70       	andi	r22, 0x07	; 7
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a1a:	68 0f       	add	r22, r24
}

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
    1a1c:	89 ef       	ldi	r24, 0xF9	; 249
    1a1e:	96 e0       	ldi	r25, 0x06	; 6
    1a20:	0e 94 95 22 	call	0x452a	; 0x452a <_ZN8Encoders17getEncoderEnabledEh>
    1a24:	81 11       	cpse	r24, r1
    1a26:	1c c0       	rjmp	.+56     	; 0x1a60 <_ZN5Board14getButtonStateEh+0x70>
        return false;   //button is member of encoder pair, return "not pressed" state

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    1a28:	c0 95       	com	r28
    1a2a:	c7 70       	andi	r28, 0x07	; 7
    buttonIndex = column*8 + row;
    1a2c:	cc 0f       	add	r28, r28
    1a2e:	cc 0f       	add	r28, r28
    1a30:	cc 0f       	add	r28, r28
    1a32:	0c 0f       	add	r16, r28

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);
    1a34:	20 91 98 03 	lds	r18, 0x0398
    1a38:	30 91 99 03 	lds	r19, 0x0399
    1a3c:	40 91 9a 03 	lds	r20, 0x039A
    1a40:	50 91 9b 03 	lds	r21, 0x039B
    1a44:	60 91 9c 03 	lds	r22, 0x039C
    1a48:	70 91 9d 03 	lds	r23, 0x039D
    1a4c:	80 91 9e 03 	lds	r24, 0x039E
    1a50:	90 91 9f 03 	lds	r25, 0x039F
    1a54:	0e 94 15 30 	call	0x602a	; 0x602a <__lshrdi3>
    1a58:	82 2f       	mov	r24, r18
    1a5a:	80 95       	com	r24
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <_ZN5Board14getButtonStateEh+0x72>

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
        return false;   //button is member of encoder pair, return "not pressed" state
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    buttonIndex = column*8 + row;

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);

}
    1a62:	cf 91       	pop	r28
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <_ZN6HWmidiC1Ev>:
//library modified by Igor Petrovic

#include "MIDI.h"
#include "../board/Board.h"

HWmidi::HWmidi()   {
    1a68:	fc 01       	movw	r30, r24

    //default constructor

    mRunningStatus_TX = midiMessageInvalidType;
    1a6a:	15 82       	std	Z+5, r1	; 0x05
    mRunningStatus_RX = midiMessageInvalidType;
    1a6c:	14 82       	std	Z+4, r1	; 0x04

    dinPendingMessageIndex            = 0;
    1a6e:	15 86       	std	Z+13, r1	; 0x0d
    1a70:	14 86       	std	Z+12, r1	; 0x0c
    dinPendingMessageExpectedLenght   = 0;
    1a72:	13 86       	std	Z+11, r1	; 0x0b
    1a74:	12 86       	std	Z+10, r1	; 0x0a

    dinMessage.valid                = false;
    1a76:	dc 01       	movw	r26, r24
    1a78:	ac 59       	subi	r26, 0x9C	; 156
    1a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7c:	1c 92       	st	X, r1
    dinMessage.type                 = midiMessageInvalidType;
    1a7e:	11 8a       	std	Z+17, r1	; 0x11
    dinMessage.channel              = 0;
    1a80:	10 8a       	std	Z+16, r1	; 0x10
    dinMessage.data1                = 0;
    1a82:	12 8a       	std	Z+18, r1	; 0x12
    dinMessage.data2                = 0;
    1a84:	13 8a       	std	Z+19, r1	; 0x13

    usbMessage.valid                = false;
    1a86:	ab 5a       	subi	r26, 0xAB	; 171
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	1c 92       	st	X, r1
    usbMessage.type                 = midiMessageInvalidType;
    1a8c:	a3 55       	subi	r26, 0x53	; 83
    1a8e:	b1 09       	sbc	r27, r1
    1a90:	1c 92       	st	X, r1
    usbMessage.channel              = 0;
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	1c 92       	st	X, r1
    usbMessage.data1                = 0;
    1a96:	12 96       	adiw	r26, 0x02	; 2
    1a98:	1c 92       	st	X, r1
    usbMessage.data2                = 0;
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	1c 92       	st	X, r1

    mThruFilterMode                 = Off;
    1a9e:	11 82       	std	Z+1, r1	; 0x01
    mThruActivated                  = false;
    1aa0:	10 82       	st	Z, r1
    useRunningStatus                = false;
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    use1byteParsing                 = true;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	83 83       	std	Z+3, r24	; 0x03
    1aa8:	08 95       	ret

00001aaa <_ZN6HWmidi4initEhbb19midiInterfaceType_t>:

}

bool HWmidi::init(uint8_t inChannel, bool inputEnabled, bool outputEnabled, midiInterfaceType_t type) {
    1aaa:	0f 93       	push	r16

    switch(type)    {
    1aac:	00 23       	and	r16, r16
    1aae:	19 f0       	breq	.+6      	; 0x1ab6 <_ZN6HWmidi4initEhbb19midiInterfaceType_t+0xc>
    1ab0:	01 30       	cpi	r16, 0x01	; 1
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <_ZN6HWmidi4initEhbb19midiInterfaceType_t+0x24>
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <_ZN6HWmidi4initEhbb19midiInterfaceType_t+0x2c>

        case dinInterface:
        USE_SERIAL_PORT.begin(31250, inputEnabled, outputEnabled);
    1ab6:	02 2f       	mov	r16, r18
    1ab8:	24 2f       	mov	r18, r20
    1aba:	42 e1       	ldi	r20, 0x12	; 18
    1abc:	5a e7       	ldi	r21, 0x7A	; 122
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	8b e5       	ldi	r24, 0x5B	; 91
    1ac4:	94 e0       	ldi	r25, 0x04	; 4
    1ac6:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZN4UART5beginEmbb>
        return true;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <_ZN6HWmidi4initEhbb19midiInterfaceType_t+0x2e>
        break;

        case usbInterface:
        USB_Init();
    1ace:	0e 94 71 18 	call	0x30e2	; 0x30e2 <USB_Init>
        return true;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <_ZN6HWmidi4initEhbb19midiInterfaceType_t+0x2e>
        break;

        default:
        return false;
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }

}
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>:
    const unsigned bend = inPitchValue - MIDI_PITCHBEND_MIN;
    send(midiMessagePitchBend, (bend & 0x7f), (bend >> 7) & 0x7f, inChannel, type);

}

void HWmidi::sendSysEx(uint16_t inLength, const uint8_t* inArray, bool inArrayContainsBoundaries, midiInterfaceType_t type)   {
    1adc:	7f 92       	push	r7
    1ade:	8f 92       	push	r8
    1ae0:	9f 92       	push	r9
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1c>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1e>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	5c 01       	movw	r10, r24
    1b00:	6b 01       	movw	r12, r22
    1b02:	7a 01       	movw	r14, r20
    1b04:	92 2e       	mov	r9, r18
                                    //(start & stop SysEx) will NOT be sent
                                    //(and therefore must be included in the array)

    MIDI_EventPacket_t MIDIEvent;

    switch(type)    {
    1b06:	00 23       	and	r16, r16
    1b08:	19 f0       	breq	.+6      	; 0x1b10 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x34>
    1b0a:	01 30       	cpi	r16, 0x01	; 1
    1b0c:	39 f1       	breq	.+78     	; 0x1b5c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x80>
    1b0e:	e3 c1       	rjmp	.+966    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

        case dinInterface:
        if (!inArrayContainsBoundaries)
    1b10:	21 11       	cpse	r18, r1
    1b12:	d3 c1       	rjmp	.+934    	; 0x1eba <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3de>
            USE_SERIAL_PORT.write(0xf0);
    1b14:	60 ef       	ldi	r22, 0xF0	; 240
    1b16:	8b e5       	ldi	r24, 0x5B	; 91
    1b18:	94 e0       	ldi	r25, 0x04	; 4
    1b1a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>

        for (unsigned i = 0; i < inLength; ++i)
    1b1e:	c1 14       	cp	r12, r1
    1b20:	d1 04       	cpc	r13, r1
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x68>
    const unsigned bend = inPitchValue - MIDI_PITCHBEND_MIN;
    send(midiMessagePitchBend, (bend & 0x7f), (bend >> 7) & 0x7f, inChannel, type);

}

void HWmidi::sendSysEx(uint16_t inLength, const uint8_t* inArray, bool inArrayContainsBoundaries, midiInterfaceType_t type)   {
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	10 e0       	ldi	r17, 0x00	; 0
        case dinInterface:
        if (!inArrayContainsBoundaries)
            USE_SERIAL_PORT.write(0xf0);

        for (unsigned i = 0; i < inLength; ++i)
            USE_SERIAL_PORT.write(inArray[i]);
    1b28:	f7 01       	movw	r30, r14
    1b2a:	61 91       	ld	r22, Z+
    1b2c:	7f 01       	movw	r14, r30
    1b2e:	8b e5       	ldi	r24, 0x5B	; 91
    1b30:	94 e0       	ldi	r25, 0x04	; 4
    1b32:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>

        case dinInterface:
        if (!inArrayContainsBoundaries)
            USE_SERIAL_PORT.write(0xf0);

        for (unsigned i = 0; i < inLength; ++i)
    1b36:	0f 5f       	subi	r16, 0xFF	; 255
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	0c 15       	cp	r16, r12
    1b3c:	1d 05       	cpc	r17, r13
    1b3e:	a0 f3       	brcs	.-24     	; 0x1b28 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x4c>
            USE_SERIAL_PORT.write(inArray[i]);

        if (!inArrayContainsBoundaries)
    1b40:	91 10       	cpse	r9, r1
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>
            USE_SERIAL_PORT.write(0xf7);
    1b44:	67 ef       	ldi	r22, 0xF7	; 247
    1b46:	8b e5       	ldi	r24, 0x5B	; 91
    1b48:	94 e0       	ldi	r25, 0x04	; 4
    1b4a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>

        if (useRunningStatus)
    1b4e:	f5 01       	movw	r30, r10
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	88 23       	and	r24, r24
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x7c>
    1b56:	bf c1       	rjmp	.+894    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
            mRunningStatus_TX = midiMessageInvalidType;
    1b58:	15 82       	std	Z+5, r1	; 0x05
    1b5a:	bd c1       	rjmp	.+890    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b62:	80 91 e8 00 	lds	r24, 0x00E8
        break;

        case usbInterface:
        Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
        if (!Endpoint_IsINReady()) return;
    1b66:	80 ff       	sbrs	r24, 0
    1b68:	b6 c1       	rjmp	.+876    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
        if (!inArrayContainsBoundaries)   {
    1b6a:	22 23       	and	r18, r18
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x9c>

            }

        }   else {

            while (inLength > 3) {
    1b6e:	64 30       	cpi	r22, 0x04	; 4
    1b70:	71 05       	cpc	r23, r1
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x9a>
    1b74:	27 c1       	rjmp	.+590    	; 0x1dc4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2e8>
    1b76:	54 c1       	rjmp	.+680    	; 0x1e20 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x344>
            //append sysex start (0xF0) and stop (0xF7) bytes to array

            bool firstByte = true;
            bool startSent = false;

            while (inLength > 3) {
    1b78:	64 30       	cpi	r22, 0x04	; 4
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	08 f4       	brcc	.+2      	; 0x1b80 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xa4>
    1b7e:	a1 c1       	rjmp	.+834    	; 0x1ec2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3e6>
    1b80:	71 2c       	mov	r7, r1
    1b82:	81 e0       	ldi	r24, 0x01	; 1
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = inArray[0],
                        .Data2       = inArray[1],
                        .Data3       = inArray[2],
                    };
    1b84:	68 94       	set
    1b86:	aa 24       	eor	r10, r10
    1b88:	a2 f8       	bld	r10, 2
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b8a:	08 ee       	ldi	r16, 0xE8	; 232
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = midiMessageSystemExclusive,
                        .Data2       = inArray[0],
                        .Data3       = inArray[1],
                    };
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	f0 ef       	ldi	r31, 0xF0	; 240
    1b92:	8f 2e       	mov	r8, r31
    1b94:	f0 2d       	mov	r31, r0

                    //send the data in the endpoint to the host
                    Endpoint_ClearIN();

                    firstByte = false;
                    startSent = true;
    1b96:	99 24       	eor	r9, r9
    1b98:	93 94       	inc	r9
    1b9a:	b1 2c       	mov	r11, r1
            bool firstByte = true;
            bool startSent = false;

            while (inLength > 3) {

                if (firstByte)  {
    1b9c:	88 23       	and	r24, r24
    1b9e:	d9 f0       	breq	.+54     	; 0x1bd6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xfa>
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = midiMessageSystemExclusive,
                        .Data2       = inArray[0],
                        .Data3       = inArray[1],
                    };
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	90 81       	ld	r25, Z
    1ba4:	81 81       	ldd	r24, Z+1	; 0x01
    1ba6:	a9 82       	std	Y+1, r10	; 0x01
    1ba8:	8a 82       	std	Y+2, r8	; 0x02
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	64 e0       	ldi	r22, 0x04	; 4
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8e 77       	andi	r24, 0x7E	; 126
    1bc4:	80 83       	st	Z, r24
                    //send the data in the endpoint to the host
                    Endpoint_ClearIN();

                    firstByte = false;
                    startSent = true;
                    inArray += 2;
    1bc6:	f2 e0       	ldi	r31, 0x02	; 2
    1bc8:	ef 0e       	add	r14, r31
    1bca:	f1 1c       	adc	r15, r1
                    inLength -= 2;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	c8 1a       	sub	r12, r24
    1bd0:	d1 08       	sbc	r13, r1

                    //send the data in the endpoint to the host
                    Endpoint_ClearIN();

                    firstByte = false;
                    startSent = true;
    1bd2:	79 2c       	mov	r7, r9
    1bd4:	1a c0       	rjmp	.+52     	; 0x1c0a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x12e>
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = inArray[0],
                        .Data2       = inArray[1],
                        .Data3       = inArray[2],
                    };
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	20 81       	ld	r18, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	a9 82       	std	Y+1, r10	; 0x01
    1be0:	2a 83       	std	Y+2, r18	; 0x02
    1be2:	9b 83       	std	Y+3, r25	; 0x03
    1be4:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	64 e0       	ldi	r22, 0x04	; 4
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8e 77       	andi	r24, 0x7E	; 126
    1bfc:	80 83       	st	Z, r24

                    //send the data in the endpoint to the host
                    Endpoint_ClearIN();

                    inArray += 3;
    1bfe:	f3 e0       	ldi	r31, 0x03	; 3
    1c00:	ef 0e       	add	r14, r31
    1c02:	f1 1c       	adc	r15, r1
                    inLength -= 3;
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	c8 1a       	sub	r12, r24
    1c08:	d1 08       	sbc	r13, r1
    1c0a:	8b 2d       	mov	r24, r11
            //append sysex start (0xF0) and stop (0xF7) bytes to array

            bool firstByte = true;
            bool startSent = false;

            while (inLength > 3) {
    1c0c:	94 e0       	ldi	r25, 0x04	; 4
    1c0e:	c9 16       	cp	r12, r25
    1c10:	d1 04       	cpc	r13, r1
    1c12:	20 f6       	brcc	.-120    	; 0x1b9c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xc0>
    1c14:	f7 01       	movw	r30, r14

                }

            }

            if (inLength == 3)    {
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	c9 16       	cp	r12, r25
    1c1a:	d1 04       	cpc	r13, r1
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x144>
    1c1e:	57 c0       	rjmp	.+174    	; 0x1cce <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1f2>

                if (startSent)  {
    1c20:	77 20       	and	r7, r7
    1c22:	49 f1       	breq	.+82     	; 0x1c76 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x19a>
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = inArray[0],
                        .Data2       = inArray[1],
                        .Data3       = inArray[2],
                    };
    1c24:	20 81       	ld	r18, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	34 e0       	ldi	r19, 0x04	; 4
    1c2c:	39 83       	std	Y+1, r19	; 0x01
    1c2e:	2a 83       	std	Y+2, r18	; 0x02
    1c30:	9b 83       	std	Y+3, r25	; 0x03
    1c32:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1c44:	08 ee       	ldi	r16, 0xE8	; 232
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8e 77       	andi	r24, 0x7E	; 126
    1c4e:	80 83       	st	Z, r24
                        .Event       = MIDI_EVENT(0, sysExStop1byteCin),

                        .Data1       = 0xF7,
                        .Data2       = 0,
                        .Data3       = 0,
                    };
    1c50:	85 e0       	ldi	r24, 0x05	; 5
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	87 ef       	ldi	r24, 0xF7	; 247
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	1b 82       	std	Y+3, r1	; 0x03
    1c5a:	1c 82       	std	Y+4, r1	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	64 e0       	ldi	r22, 0x04	; 4
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	ce 01       	movw	r24, r28
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 77       	andi	r24, 0x7E	; 126
    1c72:	80 83       	st	Z, r24
    1c74:	30 c1       	rjmp	.+608    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = midiMessageSystemExclusive,
                        .Data2       = inArray[0],
                        .Data3       = inArray[1],
                    };
    1c76:	f7 01       	movw	r30, r14
    1c78:	90 81       	ld	r25, Z
    1c7a:	81 81       	ldd	r24, Z+1	; 0x01
    1c7c:	24 e0       	ldi	r18, 0x04	; 4
    1c7e:	29 83       	std	Y+1, r18	; 0x01
    1c80:	20 ef       	ldi	r18, 0xF0	; 240
    1c82:	2a 83       	std	Y+2, r18	; 0x02
    1c84:	9b 83       	std	Y+3, r25	; 0x03
    1c86:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	64 e0       	ldi	r22, 0x04	; 4
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	ce 01       	movw	r24, r28
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1c98:	08 ee       	ldi	r16, 0xE8	; 232
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8e 77       	andi	r24, 0x7E	; 126
    1ca2:	80 83       	st	Z, r24
                        .Event       = MIDI_EVENT(0, sysExStop2byteCin),

                        .Data1       = inArray[2],
                        .Data2       = 0xF7,
                        .Data3       = 0,
                    };
    1ca4:	f7 01       	movw	r30, r14
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	96 e0       	ldi	r25, 0x06	; 6
    1caa:	99 83       	std	Y+1, r25	; 0x01
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	87 ef       	ldi	r24, 0xF7	; 247
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	1c 82       	std	Y+4, r1	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8e 77       	andi	r24, 0x7E	; 126
    1cca:	80 83       	st	Z, r24
    1ccc:	04 c1       	rjmp	.+520    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

                }

            }

            else if (inLength == 2) {
    1cce:	f2 e0       	ldi	r31, 0x02	; 2
    1cd0:	cf 16       	cp	r12, r31
    1cd2:	d1 04       	cpc	r13, r1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1fc>
    1cd6:	43 c0       	rjmp	.+134    	; 0x1d5e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x282>

                if (startSent)  {
    1cd8:	77 20       	and	r7, r7
    1cda:	b9 f0       	breq	.+46     	; 0x1d0a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x22e>
                        .Event       = MIDI_EVENT(0, sysExStop3byteCin),

                        .Data1       = inArray[0],
                        .Data2       = inArray[1],
                        .Data3       = 0xF7,
                    };
    1cdc:	f7 01       	movw	r30, r14
    1cde:	90 81       	ld	r25, Z
    1ce0:	81 81       	ldd	r24, Z+1	; 0x01
    1ce2:	27 e0       	ldi	r18, 0x07	; 7
    1ce4:	29 83       	std	Y+1, r18	; 0x01
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	87 ef       	ldi	r24, 0xF7	; 247
    1cec:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1cfe:	e8 ee       	ldi	r30, 0xE8	; 232
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	8e 77       	andi	r24, 0x7E	; 126
    1d06:	80 83       	st	Z, r24
    1d08:	e6 c0       	rjmp	.+460    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
                        .Event       = MIDI_EVENT(0, sysExStartCin),

                        .Data1       = midiMessageSystemExclusive,
                        .Data2       = inArray[0],
                        .Data3       = inArray[1],
                    };
    1d0a:	f7 01       	movw	r30, r14
    1d0c:	90 81       	ld	r25, Z
    1d0e:	81 81       	ldd	r24, Z+1	; 0x01
    1d10:	24 e0       	ldi	r18, 0x04	; 4
    1d12:	29 83       	std	Y+1, r18	; 0x01
    1d14:	20 ef       	ldi	r18, 0xF0	; 240
    1d16:	2a 83       	std	Y+2, r18	; 0x02
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	64 e0       	ldi	r22, 0x04	; 4
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	ce 01       	movw	r24, r28
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1d2c:	08 ee       	ldi	r16, 0xE8	; 232
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	f8 01       	movw	r30, r16
    1d32:	80 81       	ld	r24, Z
    1d34:	8e 77       	andi	r24, 0x7E	; 126
    1d36:	80 83       	st	Z, r24
                        .Event       = MIDI_EVENT(0, sysExStop1byteCin),

                        .Data1       = 0xF7,
                        .Data2       = 0,
                        .Data3       = 0,
                    };
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	87 ef       	ldi	r24, 0xF7	; 247
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    1d40:	1b 82       	std	Y+3, r1	; 0x03
    1d42:	1c 82       	std	Y+4, r1	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	64 e0       	ldi	r22, 0x04	; 4
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1d54:	f8 01       	movw	r30, r16
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 77       	andi	r24, 0x7E	; 126
    1d5a:	80 83       	st	Z, r24
    1d5c:	bc c0       	rjmp	.+376    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

                }

            }

            else if (inLength == 1) {
    1d5e:	ca 94       	dec	r12
    1d60:	cd 28       	or	r12, r13
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x28a>
    1d64:	b8 c0       	rjmp	.+368    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

                if (startSent)  {
    1d66:	77 20       	and	r7, r7
    1d68:	b1 f0       	breq	.+44     	; 0x1d96 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2ba>
                        .Event       = MIDI_EVENT(0, sysExStop2byteCin),

                        .Data1       = inArray[0],
                        .Data2       = 0xF7,
                        .Data3       = 0,
                    };
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	80 81       	ld	r24, Z
    1d6e:	96 e0       	ldi	r25, 0x06	; 6
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	8a 83       	std	Y+2, r24	; 0x02
    1d74:	87 ef       	ldi	r24, 0xF7	; 247
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	1c 82       	std	Y+4, r1	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	64 e0       	ldi	r22, 0x04	; 4
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	ce 01       	movw	r24, r28
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1d8a:	e8 ee       	ldi	r30, 0xE8	; 232
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8e 77       	andi	r24, 0x7E	; 126
    1d92:	80 83       	st	Z, r24
    1d94:	a0 c0       	rjmp	.+320    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
                        .Event       = MIDI_EVENT(0, sysExStop3byteCin),

                        .Data1       = 0xF0,
                        .Data2       = inArray[0],
                        .Data3       = 0xF7,
                    };
    1d96:	f7 01       	movw	r30, r14
    1d98:	80 81       	ld	r24, Z
    1d9a:	97 e0       	ldi	r25, 0x07	; 7
    1d9c:	99 83       	std	Y+1, r25	; 0x01
    1d9e:	90 ef       	ldi	r25, 0xF0	; 240
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	87 ef       	ldi	r24, 0xF7	; 247
    1da6:	8c 83       	std	Y+4, r24	; 0x04

                    //write the MIDI event packet to the endpoint
                    Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	64 e0       	ldi	r22, 0x04	; 4
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1db8:	e8 ee       	ldi	r30, 0xE8	; 232
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8e 77       	andi	r24, 0x7E	; 126
    1dc0:	80 83       	st	Z, r24
    1dc2:	89 c0       	rjmp	.+274    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
    1dc4:	8a 01       	movw	r16, r20
    1dc6:	0e 5f       	subi	r16, 0xFE	; 254
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
                    .Event       = MIDI_EVENT(0, sysExStartCin),

                    .Data1       = inArray[0],
                    .Data2       = inArray[1],
                    .Data3       = inArray[2],
                };
    1dca:	68 94       	set
    1dcc:	99 24       	eor	r9, r9
    1dce:	92 f8       	bld	r9, 2
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	f8 ee       	ldi	r31, 0xE8	; 232
    1dd4:	af 2e       	mov	r10, r31
    1dd6:	b1 2c       	mov	r11, r1
    1dd8:	f0 2d       	mov	r31, r0
    1dda:	f7 01       	movw	r30, r14
    1ddc:	20 81       	ld	r18, Z
    1dde:	f8 01       	movw	r30, r16
    1de0:	31 97       	sbiw	r30, 0x01	; 1
    1de2:	90 81       	ld	r25, Z
    1de4:	f8 01       	movw	r30, r16
    1de6:	80 81       	ld	r24, Z
    1de8:	99 82       	std	Y+1, r9	; 0x01
    1dea:	2a 83       	std	Y+2, r18	; 0x02
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	8c 83       	std	Y+4, r24	; 0x04

                //write the MIDI event packet to the endpoint
                Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	64 e0       	ldi	r22, 0x04	; 4
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	ce 01       	movw	r24, r28
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1e00:	f5 01       	movw	r30, r10
    1e02:	80 81       	ld	r24, Z
    1e04:	8e 77       	andi	r24, 0x7E	; 126
    1e06:	80 83       	st	Z, r24

                //send the data in the endpoint to the host
                Endpoint_ClearIN();

                inArray += 3;
    1e08:	f3 e0       	ldi	r31, 0x03	; 3
    1e0a:	ef 0e       	add	r14, r31
    1e0c:	f1 1c       	adc	r15, r1
                inLength -= 3;
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	c8 1a       	sub	r12, r24
    1e12:	d1 08       	sbc	r13, r1
    1e14:	0d 5f       	subi	r16, 0xFD	; 253
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255

            }

        }   else {

            while (inLength > 3) {
    1e18:	94 e0       	ldi	r25, 0x04	; 4
    1e1a:	c9 16       	cp	r12, r25
    1e1c:	d1 04       	cpc	r13, r1
    1e1e:	e8 f6       	brcc	.-70     	; 0x1dda <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x2fe>
                inArray += 3;
                inLength -= 3;

            }

            if (inLength == 3)  {
    1e20:	e3 e0       	ldi	r30, 0x03	; 3
    1e22:	ce 16       	cp	r12, r30
    1e24:	d1 04       	cpc	r13, r1
    1e26:	b9 f4       	brne	.+46     	; 0x1e56 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x37a>
                    .Event       = MIDI_EVENT(0, sysExStop3byteCin),

                    .Data1       = inArray[0],
                    .Data2       = inArray[1],
                    .Data3       = inArray[2],
                };
    1e28:	f7 01       	movw	r30, r14
    1e2a:	20 81       	ld	r18, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	37 e0       	ldi	r19, 0x07	; 7
    1e32:	39 83       	std	Y+1, r19	; 0x01
    1e34:	2a 83       	std	Y+2, r18	; 0x02
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8c 83       	std	Y+4, r24	; 0x04

                //write the MIDI event packet to the endpoint
                Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	64 e0       	ldi	r22, 0x04	; 4
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	ce 01       	movw	r24, r28
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1e4a:	e8 ee       	ldi	r30, 0xE8	; 232
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 77       	andi	r24, 0x7E	; 126
    1e52:	80 83       	st	Z, r24
    1e54:	40 c0       	rjmp	.+128    	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

                //send the data in the endpoint to the host
                Endpoint_ClearIN();

            }   else if (inLength == 2) {
    1e56:	f2 e0       	ldi	r31, 0x02	; 2
    1e58:	cf 16       	cp	r12, r31
    1e5a:	d1 04       	cpc	r13, r1
    1e5c:	b1 f4       	brne	.+44     	; 0x1e8a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ae>
                    .Event       = MIDI_EVENT(0, sysExStop2byteCin),

                    .Data1       = inArray[0],
                    .Data2       = inArray[1],
                    .Data3       = 0,
                };
    1e5e:	f7 01       	movw	r30, r14
    1e60:	90 81       	ld	r25, Z
    1e62:	81 81       	ldd	r24, Z+1	; 0x01
    1e64:	26 e0       	ldi	r18, 0x06	; 6
    1e66:	29 83       	std	Y+1, r18	; 0x01
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	1c 82       	std	Y+4, r1	; 0x04

                //write the MIDI event packet to the endpoint
                Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	64 e0       	ldi	r22, 0x04	; 4
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	ce 01       	movw	r24, r28
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1e7e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8e 77       	andi	r24, 0x7E	; 126
    1e86:	80 83       	st	Z, r24
    1e88:	26 c0       	rjmp	.+76     	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

                //send the data in the endpoint to the host
                Endpoint_ClearIN();

            }   else if (inLength == 1) {
    1e8a:	ca 94       	dec	r12
    1e8c:	cd 28       	or	r12, r13
    1e8e:	19 f5       	brne	.+70     	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>
                    .Event       = MIDI_EVENT(0, sysExStop1byteCin),

                    .Data1       = inArray[0],
                    .Data2       = 0,
                    .Data3       = 0,
                };
    1e90:	f7 01       	movw	r30, r14
    1e92:	80 81       	ld	r24, Z
    1e94:	95 e0       	ldi	r25, 0x05	; 5
    1e96:	99 83       	std	Y+1, r25	; 0x01
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	1b 82       	std	Y+3, r1	; 0x03
    1e9c:	1c 82       	std	Y+4, r1	; 0x04

                //write the MIDI event packet to the endpoint
                Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	64 e0       	ldi	r22, 0x04	; 4
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
    1eae:	e8 ee       	ldi	r30, 0xE8	; 232
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e 77       	andi	r24, 0x7E	; 126
    1eb6:	80 83       	st	Z, r24
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3fa>

        case dinInterface:
        if (!inArrayContainsBoundaries)
            USE_SERIAL_PORT.write(0xf0);

        for (unsigned i = 0; i < inLength; ++i)
    1eba:	67 2b       	or	r22, r23
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3e4>
    1ebe:	32 ce       	rjmp	.-924    	; 0x1b24 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x48>
    1ec0:	46 ce       	rjmp	.-884    	; 0x1b4e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>

                }

            }

            if (inLength == 3)    {
    1ec2:	63 30       	cpi	r22, 0x03	; 3
    1ec4:	71 05       	cpc	r23, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3ee>
    1ec8:	d6 ce       	rjmp	.-596    	; 0x1c76 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x19a>

                }

            }

            else if (inLength == 2) {
    1eca:	62 30       	cpi	r22, 0x02	; 2
    1ecc:	71 05       	cpc	r23, r1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x3f6>
    1ed0:	1c cf       	rjmp	.-456    	; 0x1d0a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x22e>
    1ed2:	71 2c       	mov	r7, r1
    1ed4:	44 cf       	rjmp	.-376    	; 0x1d5e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x282>
        }
        break;

    }

}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	cf 90       	pop	r12
    1eee:	bf 90       	pop	r11
    1ef0:	af 90       	pop	r10
    1ef2:	9f 90       	pop	r9
    1ef4:	8f 90       	pop	r8
    1ef6:	7f 90       	pop	r7
    1ef8:	08 95       	ret

00001efa <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>:
    if (useRunningStatus)
        mRunningStatus_TX = midiMessageInvalidType;

}

void HWmidi::sendRealTime(midiMessageType_t inType, midiInterfaceType_t type)   {
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	8c 01       	movw	r16, r24
    1f02:	c6 2f       	mov	r28, r22

     //inType:  The available Real Time types are:
                //Start, Stop, Continue, Clock, ActiveSensing and SystemReset
                //You can also send a Tune Request with this method

    switch (inType) {
    1f04:	6d 3f       	cpi	r22, 0xFD	; 253
    1f06:	38 f4       	brcc	.+14     	; 0x1f16 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x1c>
    1f08:	6a 3f       	cpi	r22, 0xFA	; 250
    1f0a:	38 f4       	brcc	.+14     	; 0x1f1a <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f0c:	66 3f       	cpi	r22, 0xF6	; 246
    1f0e:	29 f0       	breq	.+10     	; 0x1f1a <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f10:	68 3f       	cpi	r22, 0xF8	; 248
    1f12:	41 f4       	brne	.+16     	; 0x1f24 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    1f16:	6e 3f       	cpi	r22, 0xFE	; 254
    1f18:	28 f0       	brcs	.+10     	; 0x1f24 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
        case midiMessageStart:
        case midiMessageStop:
        case midiMessageContinue:
        case midiMessageActiveSensing:
        case midiMessageSystemReset:
        USE_SERIAL_PORT.write((uint8_t)inType);
    1f1a:	6c 2f       	mov	r22, r28
    1f1c:	8b e5       	ldi	r24, 0x5B	; 91
    1f1e:	94 e0       	ldi	r25, 0x04	; 4
    1f20:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>

    //do not cancel Running Status for real-time messages as they can be
    //interleaved within any message
    //tuneRequest can be sent here, and as it is a System Common message,
    //it must reset Running Status
    if (useRunningStatus && inType == midiMessageTuneRequest)
    1f24:	f8 01       	movw	r30, r16
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	88 23       	and	r24, r24
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
    1f2c:	c6 3f       	cpi	r28, 0xF6	; 246
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
        mRunningStatus_TX = midiMessageInvalidType;
    1f30:	15 82       	std	Z+5, r1	; 0x05

}
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>:

    }

}

void HWmidi::send(midiMessageType_t inType, uint8_t inData1, uint8_t inData2, uint8_t inChannel, midiInterfaceType_t type)  {
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x10>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x12>
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    //inData1:      The first data byte
    //inData2:      The second data byte (if the message contains only 1 data byte, set this one to 0)
    //inChannel:    The output channel on which the message will be sent (values from 1 to 16)

    //test if channel is valid
    if (inChannel >= MIDI_CHANNEL_OFF  ||
    1f50:	01 50       	subi	r16, 0x01	; 1
    1f52:	00 31       	cpi	r16, 0x10	; 16
    1f54:	10 f4       	brcc	.+4      	; 0x1f5a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x20>
    inChannel == MIDI_CHANNEL_OMNI ||
    1f56:	66 23       	and	r22, r22
    1f58:	4c f0       	brlt	.+18     	; 0x1f6c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x32>
    inType < 0x80)  {

        if (useRunningStatus && (type == dinInterface))
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	22 81       	ldd	r18, Z+2	; 0x02
    1f5e:	22 23       	and	r18, r18
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x2a>
    1f62:	67 c0       	rjmp	.+206    	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
    1f64:	e1 10       	cpse	r14, r1
    1f66:	65 c0       	rjmp	.+202    	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
            mRunningStatus_TX = midiMessageInvalidType;
    1f68:	15 82       	std	Z+5, r1	; 0x05
    1f6a:	63 c0       	rjmp	.+198    	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
    1f6c:	16 2f       	mov	r17, r22
    1f6e:	fc 01       	movw	r30, r24

        return; //don't send anything

    }

    if (inType <= midiMessagePitchBend) {
    1f70:	61 3e       	cpi	r22, 0xE1	; 225
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x3c>
    1f74:	59 c0       	rjmp	.+178    	; 0x2028 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xee>

        //channel messages

        //protection: remove MSBs on data
        inData1 &= 0x7f;
    1f76:	4f 77       	andi	r20, 0x7F	; 127
    1f78:	d4 2e       	mov	r13, r20
        inData2 &= 0x7f;
    1f7a:	2f 77       	andi	r18, 0x7F	; 127
    1f7c:	f2 2e       	mov	r15, r18

}

uint8_t HWmidi::getStatus(midiMessageType_t inType, uint8_t inChannel) const  {

    return ((uint8_t)inType | ((inChannel - 1) & 0x0f));
    1f7e:	0f 70       	andi	r16, 0x0F	; 15
    1f80:	06 2b       	or	r16, r22
        inData1 &= 0x7f;
        inData2 &= 0x7f;

        const uint8_t status = getStatus(inType, inChannel);

        if (useRunningStatus && (type == dinInterface))   {
    1f82:	22 81       	ldd	r18, Z+2	; 0x02
    1f84:	22 23       	and	r18, r18
    1f86:	61 f0       	breq	.+24     	; 0x1fa0 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>
    1f88:	e1 10       	cpse	r14, r1
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>

            if (mRunningStatus_TX != status)    {
    1f8c:	25 81       	ldd	r18, Z+5	; 0x05
    1f8e:	20 17       	cp	r18, r16
    1f90:	89 f0       	breq	.+34     	; 0x1fb4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>

                //new message, memorize and send header
                mRunningStatus_TX = status;
    1f92:	05 83       	std	Z+5, r16	; 0x05
                USE_SERIAL_PORT.write(mRunningStatus_TX);
    1f94:	60 2f       	mov	r22, r16
    1f96:	8b e5       	ldi	r24, 0x5B	; 91
    1f98:	94 e0       	ldi	r25, 0x04	; 4
    1f9a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>

            }

        }   else {

            switch(type)    {
    1fa0:	e1 10       	cpse	r14, r1
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x76>

                case dinInterface:
                //don't care about running status, send the status byte
                USE_SERIAL_PORT.write(status);
    1fa4:	60 2f       	mov	r22, r16
    1fa6:	8b e5       	ldi	r24, 0x5B	; 91
    1fa8:	94 e0       	ldi	r25, 0x04	; 4
    1faa:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>
                break;
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
            }

        }

        //send data
        switch(type)    {
    1fb0:	e1 10       	cpse	r14, r1
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8a>

            case dinInterface:
            USE_SERIAL_PORT.write(inData1);
    1fb4:	6d 2d       	mov	r22, r13
    1fb6:	8b e5       	ldi	r24, 0x5B	; 91
    1fb8:	94 e0       	ldi	r25, 0x04	; 4
    1fba:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>
            default:
            break;

        }

        if ((inType != midiMessageProgramChange) && (inType != midiMessageAfterTouchChannel))   {
    1fbe:	10 3c       	cpi	r17, 0xC0	; 192
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8e>
    1fc2:	37 c0       	rjmp	.+110    	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
    1fc4:	10 3c       	cpi	r17, 0xC0	; 192
    1fc6:	51 f0       	breq	.+20     	; 0x1fdc <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    1fc8:	10 3d       	cpi	r17, 0xD0	; 208
    1fca:	41 f0       	breq	.+16     	; 0x1fdc <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>

            switch(type)    {
    1fcc:	e1 10       	cpse	r14, r1
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>

                case dinInterface:
                USE_SERIAL_PORT.write(inData2);
    1fd0:	6f 2d       	mov	r22, r15
    1fd2:	8b e5       	ldi	r24, 0x5B	; 91
    1fd4:	94 e0       	ldi	r25, 0x04	; 4
    1fd6:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN4UART5writeEh>
    1fda:	2b c0       	rjmp	.+86     	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>

            }

        }

        if (type == usbInterface)   {
    1fdc:	f1 e0       	ldi	r31, 0x01	; 1
    1fde:	ef 12       	cpse	r14, r31
    1fe0:	28 c0       	rjmp	.+80     	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fe8:	80 91 e8 00 	lds	r24, 0x00E8

            Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);

            if (Endpoint_IsINReady())   {
    1fec:	80 ff       	sbrs	r24, 0
    1fee:	21 c0       	rjmp	.+66     	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>

                uint8_t midiEvent = (uint8_t)inType >> 4;
    1ff0:	61 2f       	mov	r22, r17
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	75 95       	asr	r23
    1ff6:	67 95       	ror	r22
    1ff8:	75 95       	asr	r23
    1ffa:	67 95       	ror	r22
    1ffc:	75 95       	asr	r23
    1ffe:	67 95       	ror	r22
    2000:	75 95       	asr	r23
    2002:	67 95       	ror	r22
    2004:	69 83       	std	Y+1, r22	; 0x01
                    .Event       = midiEvent,

                    .Data1       = data1,
                    .Data2       = inData1,
                    .Data3       = inData2,
                };
    2006:	0a 83       	std	Y+2, r16	; 0x02
    2008:	db 82       	std	Y+3, r13	; 0x03
    200a:	fc 82       	std	Y+4, r15	; 0x04

                //write the MIDI event packet to the endpoint
                Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    201c:	e8 ee       	ldi	r30, 0xE8	; 232
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8e 77       	andi	r24, 0x7E	; 126
    2024:	80 83       	st	Z, r24
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>

            }

        }

    }   else if (inType >= midiMessageTuneRequest && inType <= midiMessageSystemReset)
    2028:	66 3f       	cpi	r22, 0xF6	; 246
    202a:	18 f0       	brcs	.+6      	; 0x2032 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xf8>
            sendRealTime(inType, type); //system real-time and 1 byte
    202c:	4e 2d       	mov	r20, r14
    202e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>

}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	08 95       	ret

0000204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>:

void HWmidi::sendNoteOn(uint8_t inNoteNumber, uint8_t inVelocity, uint8_t inChannel, midiInterfaceType_t type)    {
    204a:	ef 92       	push	r14
    204c:	0f 93       	push	r16

    //inNoteNumber:   Pitch value in the MIDI format (0 to 127)
    //inVelocity:     Note attack velocity (0 to 127)
    //inChannel:      The channel on which the message will be sent (1 to 16).

    send(midiMessageNoteOn, inNoteNumber, inVelocity, inChannel, type);
    204e:	e0 2e       	mov	r14, r16
    2050:	02 2f       	mov	r16, r18
    2052:	24 2f       	mov	r18, r20
    2054:	46 2f       	mov	r20, r22
    2056:	60 e9       	ldi	r22, 0x90	; 144
    2058:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    205c:	0f 91       	pop	r16
    205e:	ef 90       	pop	r14
    2060:	08 95       	ret

00002062 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>:

void HWmidi::sendNoteOff(uint8_t inNoteNumber, uint8_t inVelocity, uint8_t inChannel, midiInterfaceType_t type)   {
    2062:	ef 92       	push	r14
    2064:	0f 93       	push	r16

    //inNoteNumber:    Pitch value in the MIDI format (0 to 127)
    //inVelocity:      Release velocity (0 to 127)
    //inChannel:       The channel on which the message will be sent (1 to 16)

    send(midiMessageNoteOff, inNoteNumber, inVelocity, inChannel, type);
    2066:	e0 2e       	mov	r14, r16
    2068:	02 2f       	mov	r16, r18
    206a:	24 2f       	mov	r18, r20
    206c:	46 2f       	mov	r20, r22
    206e:	60 e8       	ldi	r22, 0x80	; 128
    2070:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    2074:	0f 91       	pop	r16
    2076:	ef 90       	pop	r14
    2078:	08 95       	ret

0000207a <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>:

void HWmidi::sendProgramChange(uint8_t inProgramNumber, uint8_t inChannel, midiInterfaceType_t type)  {
    207a:	ef 92       	push	r14
    207c:	0f 93       	push	r16

    //inProgramNumber:    The Program to select (0 to 127)
    //inChannel:          The channel on which the message will be sent (1 to 16)

    send(midiMessageProgramChange, inProgramNumber, 0, inChannel, type);
    207e:	e2 2e       	mov	r14, r18
    2080:	04 2f       	mov	r16, r20
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	46 2f       	mov	r20, r22
    2086:	60 ec       	ldi	r22, 0xC0	; 192
    2088:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    208c:	0f 91       	pop	r16
    208e:	ef 90       	pop	r14
    2090:	08 95       	ret

00002092 <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>:

void HWmidi::sendControlChange(uint8_t inControlNumber, uint8_t inControlValue, uint8_t inChannel, midiInterfaceType_t type)  {
    2092:	ef 92       	push	r14
    2094:	0f 93       	push	r16

    //inControlNumber:    The controller number (0 to 127)
    //inControlValue:     The value for the specified controller (0 to 127)
    //inChannel:          The channel on which the message will be sent (1 to 16)

    send(midiMessageControlChange, inControlNumber, inControlValue, inChannel, type);
    2096:	e0 2e       	mov	r14, r16
    2098:	02 2f       	mov	r16, r18
    209a:	24 2f       	mov	r18, r20
    209c:	46 2f       	mov	r20, r22
    209e:	60 eb       	ldi	r22, 0xB0	; 176
    20a0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    20a4:	0f 91       	pop	r16
    20a6:	ef 90       	pop	r14
    20a8:	08 95       	ret

000020aa <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>:

void HWmidi::sendPolyPressure(uint8_t inNoteNumber, uint8_t inPressure, uint8_t inChannel, midiInterfaceType_t type)  {
    20aa:	ef 92       	push	r14
    20ac:	0f 93       	push	r16

     //inNoteNumber:    The note to apply AfterTouch to (0 to 127)
     //inPressure:      The amount of AfterTouch to apply (0 to 127)
     //inChannel:       The channel on which the message will be sent (1 to 16)

    send(midiMessageAfterTouchPoly, inNoteNumber, inPressure, inChannel, type);
    20ae:	e0 2e       	mov	r14, r16
    20b0:	02 2f       	mov	r16, r18
    20b2:	24 2f       	mov	r18, r20
    20b4:	46 2f       	mov	r20, r22
    20b6:	60 ea       	ldi	r22, 0xA0	; 160
    20b8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    20bc:	0f 91       	pop	r16
    20be:	ef 90       	pop	r14
    20c0:	08 95       	ret

000020c2 <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>:

void HWmidi::sendAfterTouch(uint8_t inPressure, uint8_t inChannel, midiInterfaceType_t type)  {
    20c2:	ef 92       	push	r14
    20c4:	0f 93       	push	r16

     //inPressure:  The amount of AfterTouch to apply to all notes
     //inChannel:   The channel on which the message will be sent (1 to 16)

    send(midiMessageAfterTouchChannel, inPressure, 0, inChannel, type);
    20c6:	e2 2e       	mov	r14, r18
    20c8:	04 2f       	mov	r16, r20
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	46 2f       	mov	r20, r22
    20ce:	60 ed       	ldi	r22, 0xD0	; 208
    20d0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>

}
    20d4:	0f 91       	pop	r16
    20d6:	ef 90       	pop	r14
    20d8:	08 95       	ret

000020da <_ZN6HWmidi19enableRunningStatusEv>:

}

void HWmidi::enableRunningStatus()  {

    useRunningStatus = true;
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	fc 01       	movw	r30, r24
    20de:	22 83       	std	Z+2, r18	; 0x02
    20e0:	08 95       	ret

000020e2 <_ZN6HWmidi20disableRunningStatusEv>:

}

void HWmidi::disableRunningStatus() {

    useRunningStatus = false;
    20e2:	fc 01       	movw	r30, r24
    20e4:	12 82       	std	Z+2, r1	; 0x02
    20e6:	08 95       	ret

000020e8 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>:

bool HWmidi::inputFilter(uint8_t inChannel, midiInterfaceType_t type) {

    //check if the received message is on the listened channel

    switch(type)    {
    20e8:	44 23       	and	r20, r20
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0xa>
    20ec:	41 30       	cpi	r20, 0x01	; 1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x28>
    20f0:	21 c0       	rjmp	.+66     	; 0x2134 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x4c>

        case dinInterface:
        if (dinMessage.type == midiMessageInvalidType)
    20f2:	fc 01       	movw	r30, r24
    20f4:	21 89       	ldd	r18, Z+17	; 0x11
    20f6:	22 23       	and	r18, r18
    20f8:	f9 f0       	breq	.+62     	; 0x2138 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x50>
        return false;

        //first, check if the received message is Channel
        if (dinMessage.type >= midiMessageNoteOff && dinMessage.type <= midiMessagePitchBend)   {
    20fa:	20 58       	subi	r18, 0x80	; 128
    20fc:	21 36       	cpi	r18, 0x61	; 97
    20fe:	f0 f4       	brcc	.+60     	; 0x213c <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x54>

            //then we need to know if we listen to it
            if ((dinMessage.channel == inChannel) ||
    2100:	80 89       	ldd	r24, Z+16	; 0x10
    2102:	86 17       	cp	r24, r22
    2104:	e9 f0       	breq	.+58     	; 0x2140 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x58>
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	66 23       	and	r22, r22
    210a:	09 f1       	breq	.+66     	; 0x214e <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x66>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret

        }
        break;

        case usbInterface:
        if (usbMessage.type == midiMessageInvalidType)
    2110:	fc 01       	movw	r30, r24
    2112:	ea 59       	subi	r30, 0x9A	; 154
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	20 81       	ld	r18, Z
    2118:	22 23       	and	r18, r18
    211a:	a1 f0       	breq	.+40     	; 0x2144 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x5c>
            return false;

        //first, check if the received message is Channel
        if (usbMessage.type >= midiMessageNoteOff && usbMessage.type <= midiMessagePitchBend)   {
    211c:	20 58       	subi	r18, 0x80	; 128
    211e:	21 36       	cpi	r18, 0x61	; 97
    2120:	98 f4       	brcc	.+38     	; 0x2148 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x60>

            //then we need to know if we listen to it
            if ((usbMessage.channel == inChannel) ||
    2122:	31 97       	sbiw	r30, 0x01	; 1
    2124:	80 81       	ld	r24, Z
    2126:	86 17       	cp	r24, r22
    2128:	89 f0       	breq	.+34     	; 0x214c <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x64>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	66 23       	and	r22, r22
    212e:	79 f0       	breq	.+30     	; 0x214e <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x66>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	08 95       	ret

        }
        break;

        default:
        return false;
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	08 95       	ret

    switch(type)    {

        case dinInterface:
        if (dinMessage.type == midiMessageInvalidType)
        return false;
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	08 95       	ret
            }

            }   else {

            //system messages are always received
            return true;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	08 95       	ret
        if (dinMessage.type >= midiMessageNoteOff && dinMessage.type <= midiMessagePitchBend)   {

            //then we need to know if we listen to it
            if ((dinMessage.channel == inChannel) ||
            (inChannel == MIDI_CHANNEL_OMNI))
            return true;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	08 95       	ret
        }
        break;

        case usbInterface:
        if (usbMessage.type == midiMessageInvalidType)
            return false;
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	08 95       	ret
            }

            }   else {

            //system messages are always received
            return true;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	08 95       	ret
        if (usbMessage.type >= midiMessageNoteOff && usbMessage.type <= midiMessagePitchBend)   {

            //then we need to know if we listen to it
            if ((usbMessage.channel == inChannel) ||
                (inChannel == MIDI_CHANNEL_OMNI))
            return true;
    214c:	81 e0       	ldi	r24, 0x01	; 1
        return false;
        break;

    }

}
    214e:	08 95       	ret

00002150 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>:

midiMessageType_t HWmidi::getType(midiInterfaceType_t type) const {

    //get the last received message's type

    switch(type)    {
    2150:	66 23       	and	r22, r22
    2152:	19 f0       	breq	.+6      	; 0x215a <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0xa>
    2154:	61 30       	cpi	r22, 0x01	; 1
    2156:	21 f0       	breq	.+8      	; 0x2160 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x10>
    2158:	08 c0       	rjmp	.+16     	; 0x216a <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x1a>

        case dinInterface:
        return dinMessage.type;
    215a:	fc 01       	movw	r30, r24
    215c:	81 89       	ldd	r24, Z+17	; 0x11
    215e:	08 95       	ret
        break;

        case usbInterface:
        return usbMessage.type;
    2160:	fc 01       	movw	r30, r24
    2162:	ea 59       	subi	r30, 0x9A	; 154
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	08 95       	ret
        break;

    }   return midiMessageInvalidType;
    216a:	80 e0       	ldi	r24, 0x00	; 0

}
    216c:	08 95       	ret

0000216e <_ZNK6HWmidi8getData1E19midiInterfaceType_t>:
}

uint8_t HWmidi::getData1(midiInterfaceType_t type) const    {

    //get the first data byte of the last received message
    switch(type)    {
    216e:	66 23       	and	r22, r22
    2170:	19 f0       	breq	.+6      	; 0x2178 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0xa>
    2172:	61 30       	cpi	r22, 0x01	; 1
    2174:	21 f0       	breq	.+8      	; 0x217e <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x10>
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x1a>

        case dinInterface:
        return dinMessage.data1;
    2178:	fc 01       	movw	r30, r24
    217a:	82 89       	ldd	r24, Z+18	; 0x12
    217c:	08 95       	ret
        break;

        case usbInterface:
        return usbMessage.data1;
    217e:	fc 01       	movw	r30, r24
    2180:	e9 59       	subi	r30, 0x99	; 153
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	08 95       	ret
        break;

    }   return 0;
    2188:	80 e0       	ldi	r24, 0x00	; 0

}
    218a:	08 95       	ret

0000218c <_ZNK6HWmidi8getData2E19midiInterfaceType_t>:

uint8_t HWmidi::getData2(midiInterfaceType_t type) const    {

    //get the second data byte of the last received message
    //get the first data byte of the last received message
    switch(type)    {
    218c:	66 23       	and	r22, r22
    218e:	19 f0       	breq	.+6      	; 0x2196 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0xa>
    2190:	61 30       	cpi	r22, 0x01	; 1
    2192:	21 f0       	breq	.+8      	; 0x219c <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x10>
    2194:	08 c0       	rjmp	.+16     	; 0x21a6 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x1a>

        case dinInterface:
        return dinMessage.data2;
    2196:	fc 01       	movw	r30, r24
    2198:	83 89       	ldd	r24, Z+19	; 0x13
    219a:	08 95       	ret
        break;

        case usbInterface:
        return usbMessage.data2;
    219c:	fc 01       	movw	r30, r24
    219e:	e8 59       	subi	r30, 0x98	; 152
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	08 95       	ret
        break;

    }   return 0;
    21a6:	80 e0       	ldi	r24, 0x00	; 0

}
    21a8:	08 95       	ret

000021aa <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>:

uint8_t* HWmidi::getSysExArray(midiInterfaceType_t type)    {

    //get the System Exclusive byte array
    switch(type)    {
    21aa:	66 23       	and	r22, r22
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xa>
    21ae:	61 30       	cpi	r22, 0x01	; 1
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xe>
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0x14>

        case dinInterface:
        return dinMessage.sysexArray;
    21b4:	44 96       	adiw	r24, 0x14	; 20
    21b6:	08 95       	ret
        break;

        case usbInterface:
        return usbMessage.sysexArray;
    21b8:	87 59       	subi	r24, 0x97	; 151
    21ba:	9f 4f       	sbci	r25, 0xFF	; 255
    21bc:	08 95       	ret
        break;

    }   return 0;
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0

}
    21c2:	08 95       	ret

000021c4 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>:
    //get the length of the System Exclusive array
    //it is coded using data1 as LSB and data2 as MSB

    uint16_t size = 0;

    switch(type)    {
    21c4:	66 23       	and	r22, r22
    21c6:	19 f0       	breq	.+6      	; 0x21ce <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0xa>
    21c8:	61 30       	cpi	r22, 0x01	; 1
    21ca:	59 f0       	breq	.+22     	; 0x21e2 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x1e>
    21cc:	0e c0       	rjmp	.+28     	; 0x21ea <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x26>

        case dinInterface:
        size = unsigned(dinMessage.data2) << 8 | dinMessage.data1;
    21ce:	fc 01       	movw	r30, r24
    21d0:	23 89       	ldd	r18, Z+19	; 0x13
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	32 2f       	mov	r19, r18
    21d6:	22 27       	eor	r18, r18
    21d8:	82 89       	ldd	r24, Z+18	; 0x12
    21da:	a9 01       	movw	r20, r18
    21dc:	48 2b       	or	r20, r24
    21de:	ca 01       	movw	r24, r20
        break;
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x2a>

        case usbInterface:
        return sysExArrayLength;
    21e2:	fc 01       	movw	r30, r24
    21e4:	86 85       	ldd	r24, Z+14	; 0x0e
    21e6:	97 85       	ldd	r25, Z+15	; 0x0f
    21e8:	08 95       	ret
uint16_t HWmidi::getSysExArrayLength(midiInterfaceType_t type)  {

    //get the length of the System Exclusive array
    //it is coded using data1 as LSB and data2 as MSB

    uint16_t size = 0;
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
        return sysExArrayLength;
        break;

    }

    return size > MIDI_SYSEX_ARRAY_SIZE ? MIDI_SYSEX_ARRAY_SIZE : size;
    21ee:	81 35       	cpi	r24, 0x51	; 81
    21f0:	91 05       	cpc	r25, r1
    21f2:	10 f0       	brcs	.+4      	; 0x21f8 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x34>
    21f4:	80 e5       	ldi	r24, 0x50	; 80
    21f6:	90 e0       	ldi	r25, 0x00	; 0

}
    21f8:	08 95       	ret

000021fa <_ZN6HWmidi15setInputChannelEh>:

    //set the value for the input MIDI channel
    //inChannel:    The channel value
                    //Valid values are 1 to 16, MIDI_CHANNEL_OMNI

    mInputChannel = inChannel;
    21fa:	fc 01       	movw	r30, r24
    21fc:	66 83       	std	Z+6, r22	; 0x06
    21fe:	08 95       	ret

00002200 <_ZN6HWmidi21getTypeFromStatusByteEh>:

midiMessageType_t HWmidi::getTypeFromStatusByte(uint8_t inStatus) {

    //extract an enumerated MIDI type from a status byte

    if ((inStatus  < 0x80) ||
    2200:	66 23       	and	r22, r22
    2202:	6c f4       	brge	.+26     	; 0x221e <_ZN6HWmidi21getTypeFromStatusByteEh+0x1e>
    2204:	8c e0       	ldi	r24, 0x0C	; 12
    2206:	86 0f       	add	r24, r22
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	58 f0       	brcs	.+22     	; 0x2222 <_ZN6HWmidi21getTypeFromStatusByteEh+0x22>
        (inStatus == 0xf4) ||
        (inStatus == 0xf5) ||
    220c:	86 2f       	mov	r24, r22
    220e:	8b 7f       	andi	r24, 0xFB	; 251
    2210:	89 3f       	cpi	r24, 0xF9	; 249
    2212:	49 f0       	breq	.+18     	; 0x2226 <_ZN6HWmidi21getTypeFromStatusByteEh+0x26>
        //data bytes and undefined
        return midiMessageInvalidType;

    }

    if (inStatus < 0xf0)    {
    2214:	60 3f       	cpi	r22, 0xF0	; 240
    2216:	48 f4       	brcc	.+18     	; 0x222a <_ZN6HWmidi21getTypeFromStatusByteEh+0x2a>

        //channel message, remove channel nibble
        return midiMessageType_t(inStatus & 0xf0);
    2218:	86 2f       	mov	r24, r22
    221a:	80 7f       	andi	r24, 0xF0	; 240
    221c:	08 95       	ret
        (inStatus == 0xf5) ||
        (inStatus == 0xf9) ||
        (inStatus == 0xfD)) {

        //data bytes and undefined
        return midiMessageInvalidType;
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	08 95       	ret
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	08 95       	ret
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	08 95       	ret
        //channel message, remove channel nibble
        return midiMessageType_t(inStatus & 0xf0);

    }

    return midiMessageType_t(inStatus);
    222a:	86 2f       	mov	r24, r22

}
    222c:	08 95       	ret

0000222e <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>:
    return (inType == midiMessageNoteOff           ||
            inType == midiMessageNoteOn            ||
            inType == midiMessageControlChange     ||
            inType == midiMessageAfterTouchPoly    ||
            inType == midiMessageAfterTouchChannel ||
            inType == midiMessagePitchBend         ||
    222e:	86 2f       	mov	r24, r22
    2230:	8f 7e       	andi	r24, 0xEF	; 239
    2232:	80 38       	cpi	r24, 0x80	; 128
    2234:	59 f0       	breq	.+22     	; 0x224c <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x1e>

bool HWmidi::isChannelMessage(midiMessageType_t inType)   {

    return (inType == midiMessageNoteOff           ||
            inType == midiMessageNoteOn            ||
            inType == midiMessageControlChange     ||
    2236:	80 3a       	cpi	r24, 0xA0	; 160
    2238:	59 f0       	breq	.+22     	; 0x2250 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x22>
            inType == midiMessageAfterTouchPoly    ||
    223a:	60 3d       	cpi	r22, 0xD0	; 208
    223c:	59 f0       	breq	.+22     	; 0x2254 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x26>
            inType == midiMessageAfterTouchChannel ||
    223e:	60 3e       	cpi	r22, 0xE0	; 224
    2240:	59 f0       	breq	.+22     	; 0x2258 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2a>
            inType == midiMessagePitchBend         ||
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	60 3c       	cpi	r22, 0xC0	; 192
    2246:	49 f0       	breq	.+18     	; 0x225a <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2c>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	08 95       	ret
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	08 95       	ret
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	08 95       	ret
    2258:	81 e0       	ldi	r24, 0x01	; 1
            inType == midiMessageProgramChange);

}
    225a:	08 95       	ret

0000225c <_ZN6HWmidi5parseE19midiInterfaceType_t>:

    return channelMatch;

}

bool HWmidi::parse(midiInterfaceType_t type)    {
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	00 d0       	rcall	.+0      	; 0x226e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x12>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	8c 01       	movw	r16, r24

    if (type == dinInterface)   {
    2276:	61 11       	cpse	r22, r1
    2278:	57 c1       	rjmp	.+686    	; 0x2528 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2cc>
        //look for other bytes in buffer, call parser recursively,
        //until the message is assembled or the buffer is empty
        //else, add the extracted byte to the pending message, and check validity
        //when the message is done, store it

        if (USE_SERIAL_PORT.available() == 0)
    227a:	8b e5       	ldi	r24, 0x5B	; 91
    227c:	94 e0       	ldi	r25, 0x04	; 4
    227e:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN4UART9availableEv>
    2282:	88 23       	and	r24, r24
    2284:	09 f4       	brne	.+2      	; 0x2288 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2c>
    2286:	50 c2       	rjmp	.+1184   	; 0x2728 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4cc>
            //no data available
            return false;

        const uint8_t extracted = USE_SERIAL_PORT.read();
    2288:	8b e5       	ldi	r24, 0x5B	; 91
    228a:	94 e0       	ldi	r25, 0x04	; 4
    228c:	0e 94 ba 14 	call	0x2974	; 0x2974 <_ZN4UART4readEv>
    2290:	f8 2e       	mov	r15, r24
    2292:	28 2f       	mov	r18, r24

        if (dinPendingMessageIndex == 0)  {
    2294:	f8 01       	movw	r30, r16
    2296:	84 85       	ldd	r24, Z+12	; 0x0c
    2298:	95 85       	ldd	r25, Z+13	; 0x0d
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	09 f0       	breq	.+2      	; 0x22a0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x44>
    229e:	90 c0       	rjmp	.+288    	; 0x23c0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x164>

            //start a new pending message
            mPendingMessage[0] = extracted;
    22a0:	f7 82       	std	Z+7, r15	; 0x07

            //check for running status first (din only)
            if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
    22a2:	e4 80       	ldd	r14, Z+4	; 0x04
    22a4:	6e 2d       	mov	r22, r14
    22a6:	c8 01       	movw	r24, r16
    22a8:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN6HWmidi21getTypeFromStatusByteEh>
    22ac:	68 2f       	mov	r22, r24
    22ae:	c8 01       	movw	r24, r16
    22b0:	0e 94 17 11 	call	0x222e	; 0x222e <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    22b4:	88 23       	and	r24, r24
    22b6:	49 f0       	breq	.+18     	; 0x22ca <_ZN6HWmidi5parseE19midiInterfaceType_t+0x6e>

                //only channel messages allow Running Status
                //if the status byte is not received, prepend it to the pending message
                if (extracted < 0x80)   {
    22b8:	ff 20       	and	r15, r15
    22ba:	3c f0       	brlt	.+14     	; 0x22ca <_ZN6HWmidi5parseE19midiInterfaceType_t+0x6e>

                    mPendingMessage[0]   = mRunningStatus_RX;
    22bc:	f8 01       	movw	r30, r16
    22be:	e7 82       	std	Z+7, r14	; 0x07
                    mPendingMessage[1]   = extracted;
    22c0:	f0 86       	std	Z+8, r15	; 0x08
                    dinPendingMessageIndex = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	95 87       	std	Z+13, r25	; 0x0d
    22c8:	84 87       	std	Z+12, r24	; 0x0c
                //so the running status does not apply here
                //it will be updated upon completion of this message

            }

            switch (getTypeFromStatusByte(mPendingMessage[0]))  {
    22ca:	f8 01       	movw	r30, r16
    22cc:	f7 80       	ldd	r15, Z+7	; 0x07
    22ce:	6f 2d       	mov	r22, r15
    22d0:	c8 01       	movw	r24, r16
    22d2:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN6HWmidi21getTypeFromStatusByteEh>
    22d6:	48 2f       	mov	r20, r24
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	fa 01       	movw	r30, r20
    22dc:	e0 58       	subi	r30, 0x80	; 128
    22de:	f1 09       	sbc	r31, r1
    22e0:	e0 38       	cpi	r30, 0x80	; 128
    22e2:	f1 05       	cpc	r31, r1
    22e4:	c8 f5       	brcc	.+114    	; 0x2358 <_ZN6HWmidi5parseE19midiInterfaceType_t+0xfc>
    22e6:	ea 5a       	subi	r30, 0xAA	; 170
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__tablejump2__>
                case midiMessageClock:
                case midiMessageActiveSensing:
                case midiMessageSystemReset:
                case midiMessageTuneRequest:
                //handle the message type directly here.
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    22ee:	f8 01       	movw	r30, r16
    22f0:	81 8b       	std	Z+17, r24	; 0x11
                dinMessage.channel = 0;
    22f2:	10 8a       	std	Z+16, r1	; 0x10
                dinMessage.data1   = 0;
    22f4:	12 8a       	std	Z+18, r1	; 0x12
                dinMessage.data2   = 0;
    22f6:	13 8a       	std	Z+19, r1	; 0x13
                dinMessage.valid   = true;
    22f8:	ec 59       	subi	r30, 0x9C	; 156
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 83       	st	Z, r24
                // \fix Running Status broken when receiving Clock messages.
                // Do not reset all input attributes, Running Status must remain unchanged.
                //resetInput();

                //we still need to reset these
                dinPendingMessageIndex = 0;
    2300:	f8 01       	movw	r30, r16
    2302:	15 86       	std	Z+13, r1	; 0x0d
    2304:	14 86       	std	Z+12, r1	; 0x0c
                dinPendingMessageExpectedLenght = 0;
    2306:	13 86       	std	Z+11, r1	; 0x0b
    2308:	12 86       	std	Z+10, r1	; 0x0a

                return true;
    230a:	28 c2       	rjmp	.+1104   	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                //2 bytes messages
                case midiMessageProgramChange:
                case midiMessageAfterTouchChannel:
                case midiMessageTimeCodeQuarterFrame:
                case midiMessageSongSelect:
                dinPendingMessageExpectedLenght = 2;
    230c:	22 e0       	ldi	r18, 0x02	; 2
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	f8 01       	movw	r30, r16
    2312:	33 87       	std	Z+11, r19	; 0x0b
    2314:	22 87       	std	Z+10, r18	; 0x0a
                return false;
                break;

            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {
    2316:	24 85       	ldd	r18, Z+12	; 0x0c
    2318:	35 85       	ldd	r19, Z+13	; 0x0d
    231a:	21 15       	cp	r18, r1
    231c:	31 05       	cpc	r19, r1
    231e:	09 f0       	breq	.+2      	; 0x2322 <_ZN6HWmidi5parseE19midiInterfaceType_t+0xc6>
    2320:	14 c2       	rjmp	.+1064   	; 0x274a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4ee>
    2322:	41 c0       	rjmp	.+130    	; 0x23a6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>
                case midiMessageNoteOff:
                case midiMessageControlChange:
                case midiMessagePitchBend:
                case midiMessageAfterTouchPoly:
                case midiMessageSongPosition:
                dinPendingMessageExpectedLenght = 3;
    2324:	23 e0       	ldi	r18, 0x03	; 3
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f8 01       	movw	r30, r16
    232a:	33 87       	std	Z+11, r19	; 0x0b
    232c:	22 87       	std	Z+10, r18	; 0x0a
                return false;
                break;

            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {
    232e:	24 85       	ldd	r18, Z+12	; 0x0c
    2330:	35 85       	ldd	r19, Z+13	; 0x0d
    2332:	22 30       	cpi	r18, 0x02	; 2
    2334:	31 05       	cpc	r19, r1
    2336:	08 f0       	brcs	.+2      	; 0x233a <_ZN6HWmidi5parseE19midiInterfaceType_t+0xde>
    2338:	ff c1       	rjmp	.+1022   	; 0x2738 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4dc>
    233a:	35 c0       	rjmp	.+106    	; 0x23a6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>
                dinPendingMessageExpectedLenght = 3;
                break;

                case midiMessageSystemExclusive:
                //the message can be any length between 3 and MIDI_SYSEX_ARRAY_SIZE
                dinPendingMessageExpectedLenght = MIDI_SYSEX_ARRAY_SIZE;
    233c:	80 e5       	ldi	r24, 0x50	; 80
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	f8 01       	movw	r30, r16
    2342:	93 87       	std	Z+11, r25	; 0x0b
    2344:	82 87       	std	Z+10, r24	; 0x0a
                mRunningStatus_RX = midiMessageInvalidType;
    2346:	14 82       	std	Z+4, r1	; 0x04
                dinMessage.sysexArray[0] = midiMessageSystemExclusive;
    2348:	80 ef       	ldi	r24, 0xF0	; 240
    234a:	84 8b       	std	Z+20, r24	; 0x14
                return false;
                break;

            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {
    234c:	24 85       	ldd	r18, Z+12	; 0x0c
    234e:	35 85       	ldd	r19, Z+13	; 0x0d
    2350:	2f 34       	cpi	r18, 0x4F	; 79
    2352:	31 05       	cpc	r19, r1
    2354:	48 f4       	brcc	.+18     	; 0x2368 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x10c>
    2356:	27 c0       	rjmp	.+78     	; 0x23a6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14a>

void HWmidi::resetInput()   {

    //reset input attributes

    dinPendingMessageIndex = 0;
    2358:	f8 01       	movw	r30, r16
    235a:	15 86       	std	Z+13, r1	; 0x0d
    235c:	14 86       	std	Z+12, r1	; 0x0c
    dinPendingMessageExpectedLenght = 0;
    235e:	13 86       	std	Z+11, r1	; 0x0b
    2360:	12 86       	std	Z+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    2362:	14 82       	std	Z+4, r1	; 0x04
                case midiMessageInvalidType:
                default:
                //this is obviously wrong
                //let's get the hell out'a here
                resetInput();
                return false;
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	fa c1       	rjmp	.+1012   	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    2368:	80 ef       	ldi	r24, 0xF0	; 240
    236a:	f8 01       	movw	r30, r16
    236c:	81 8b       	std	Z+17, r24	; 0x11
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    236e:	8f 2d       	mov	r24, r15
    2370:	8f 70       	andi	r24, 0x0F	; 15
    2372:	ff 24       	eor	r15, r15
    2374:	f3 94       	inc	r15
    2376:	f8 0e       	add	r15, r24

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
                dinMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    2378:	f0 8a       	std	Z+16, r15	; 0x10
                dinMessage.data1   = mPendingMessage[1];
    237a:	80 85       	ldd	r24, Z+8	; 0x08
    237c:	82 8b       	std	Z+18, r24	; 0x12

                //save data2 only if applicable
                if (dinPendingMessageExpectedLenght == 3)
    237e:	80 e5       	ldi	r24, 0x50	; 80
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	03 97       	sbiw	r24, 0x03	; 3
    2384:	21 f4       	brne	.+8      	; 0x238e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x132>
                dinMessage.data2 = mPendingMessage[2];
    2386:	f8 01       	movw	r30, r16
    2388:	81 85       	ldd	r24, Z+9	; 0x09
    238a:	83 8b       	std	Z+19, r24	; 0x13
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x136>
                else dinMessage.data2 = 0;
    238e:	f8 01       	movw	r30, r16
    2390:	13 8a       	std	Z+19, r1	; 0x13

                dinPendingMessageIndex = 0;
    2392:	f8 01       	movw	r30, r16
    2394:	15 86       	std	Z+13, r1	; 0x0d
    2396:	14 86       	std	Z+12, r1	; 0x0c
                dinPendingMessageExpectedLenght = 0;
    2398:	13 86       	std	Z+11, r1	; 0x0b
    239a:	12 86       	std	Z+10, r1	; 0x0a
                dinMessage.valid = true;
    239c:	ec 59       	subi	r30, 0x9C	; 156
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 83       	st	Z, r24
                return true;
    23a4:	db c1       	rjmp	.+950    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

            }   else {

                //waiting for more data
                dinPendingMessageIndex++;
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	f8 01       	movw	r30, r16
    23ac:	35 87       	std	Z+13, r19	; 0x0d
    23ae:	24 87       	std	Z+12, r18	; 0x0c

            }

            if (use1byteParsing)    {
    23b0:	83 81       	ldd	r24, Z+3	; 0x03
    23b2:	81 11       	cpse	r24, r1
    23b4:	bb c1       	rjmp	.+886    	; 0x272c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d0>

            } else {

                //call the parser recursively
                //to parse the rest of the message.
                return parse(dinInterface);
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	c8 01       	movw	r24, r16
    23ba:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6HWmidi5parseE19midiInterfaceType_t>
    23be:	ce c1       	rjmp	.+924    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
            }

        }   else {

            //first, test if this is a status byte
            if (extracted >= 0x80)  {
    23c0:	ff 20       	and	r15, r15
    23c2:	cc f5       	brge	.+114    	; 0x2436 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>

                //reception of status bytes in the middle of an uncompleted message
                //are allowed only for interleaved Real Time message or EOX
                switch (extracted)  {
    23c4:	2d 3f       	cpi	r18, 0xFD	; 253
    23c6:	38 f4       	brcc	.+14     	; 0x23d6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17a>
    23c8:	2a 3f       	cpi	r18, 0xFA	; 250
    23ca:	38 f4       	brcc	.+14     	; 0x23da <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17e>
    23cc:	27 3f       	cpi	r18, 0xF7	; 247
    23ce:	79 f0       	breq	.+30     	; 0x23ee <_ZN6HWmidi5parseE19midiInterfaceType_t+0x192>
    23d0:	28 3f       	cpi	r18, 0xF8	; 248
    23d2:	89 f5       	brne	.+98     	; 0x2436 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <_ZN6HWmidi5parseE19midiInterfaceType_t+0x17e>
    23d6:	2e 3f       	cpi	r18, 0xFE	; 254
    23d8:	70 f1       	brcs	.+92     	; 0x2436 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1da>
                    //pass it to the structure for being read outside
                    //the MIDI class, and recompose the message it was
                    //interleaved into without killing the running status..
                    //this is done by leaving the pending message as is,
                    //it will be completed on next calls
                    dinMessage.type    = (midiMessageType_t)extracted;
    23da:	f8 01       	movw	r30, r16
    23dc:	f1 8a       	std	Z+17, r15	; 0x11
                    dinMessage.data1   = 0;
    23de:	12 8a       	std	Z+18, r1	; 0x12
                    dinMessage.data2   = 0;
    23e0:	13 8a       	std	Z+19, r1	; 0x13
                    dinMessage.channel = 0;
    23e2:	10 8a       	std	Z+16, r1	; 0x10
                    dinMessage.valid   = true;
    23e4:	ec 59       	subi	r30, 0x9C	; 156
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 83       	st	Z, r24
                    return true;
    23ec:	b7 c1       	rjmp	.+878    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                    break;

                    //end of sysex
                    case 0xf7:
                    if (dinMessage.sysexArray[0] == midiMessageSystemExclusive)   {
    23ee:	f8 01       	movw	r30, r16
    23f0:	24 89       	ldd	r18, Z+20	; 0x14
    23f2:	20 3f       	cpi	r18, 0xF0	; 240
    23f4:	c1 f4       	brne	.+48     	; 0x2426 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ca>

                        //store the last byte (EOX)
                        dinMessage.sysexArray[dinPendingMessageIndex++] = 0xf7;
    23f6:	9c 01       	movw	r18, r24
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	e8 0f       	add	r30, r24
    23fe:	f9 1f       	adc	r31, r25
    2400:	47 ef       	ldi	r20, 0xF7	; 247
    2402:	44 8b       	std	Z+20, r20	; 0x14
                        dinMessage.type = midiMessageSystemExclusive;
    2404:	80 ef       	ldi	r24, 0xF0	; 240
    2406:	f8 01       	movw	r30, r16
    2408:	81 8b       	std	Z+17, r24	; 0x11

                        //get length
                        dinMessage.data1   = dinPendingMessageIndex & 0xff; //LSB
    240a:	22 8b       	std	Z+18, r18	; 0x12
                        dinMessage.data2   = dinPendingMessageIndex >> 8;   //MSB
    240c:	33 8b       	std	Z+19, r19	; 0x13
                        dinMessage.channel = 0;
    240e:	10 8a       	std	Z+16, r1	; 0x10
                        dinMessage.valid   = true;
    2410:	ec 59       	subi	r30, 0x9C	; 156
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	80 83       	st	Z, r24

void HWmidi::resetInput()   {

    //reset input attributes

    dinPendingMessageIndex = 0;
    2418:	f8 01       	movw	r30, r16
    241a:	15 86       	std	Z+13, r1	; 0x0d
    241c:	14 86       	std	Z+12, r1	; 0x0c
    dinPendingMessageExpectedLenght = 0;
    241e:	13 86       	std	Z+11, r1	; 0x0b
    2420:	12 86       	std	Z+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    2422:	14 82       	std	Z+4, r1	; 0x04
    2424:	9b c1       	rjmp	.+822    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

void HWmidi::resetInput()   {

    //reset input attributes

    dinPendingMessageIndex = 0;
    2426:	f8 01       	movw	r30, r16
    2428:	15 86       	std	Z+13, r1	; 0x0d
    242a:	14 86       	std	Z+12, r1	; 0x0c
    dinPendingMessageExpectedLenght = 0;
    242c:	13 86       	std	Z+11, r1	; 0x0b
    242e:	12 86       	std	Z+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    2430:	14 82       	std	Z+4, r1	; 0x04

                    }   else {

                        //error
                        resetInput();
                        return false;
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	93 c1       	rjmp	.+806    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                }

            }

            //add extracted data byte to pending message
            if (mPendingMessage[0] == midiMessageSystemExclusive)
    2436:	f8 01       	movw	r30, r16
    2438:	27 81       	ldd	r18, Z+7	; 0x07
    243a:	20 3f       	cpi	r18, 0xF0	; 240
    243c:	21 f4       	brne	.+8      	; 0x2446 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ea>
                dinMessage.sysexArray[dinPendingMessageIndex] = extracted;
    243e:	e8 0f       	add	r30, r24
    2440:	f9 1f       	adc	r31, r25
    2442:	f4 8a       	std	Z+20, r15	; 0x14
    2444:	04 c0       	rjmp	.+8      	; 0x244e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1f2>
            else mPendingMessage[dinPendingMessageIndex] = extracted;
    2446:	f8 01       	movw	r30, r16
    2448:	e8 0f       	add	r30, r24
    244a:	f9 1f       	adc	r31, r25
    244c:	f7 82       	std	Z+7, r15	; 0x07

            //now we are going to check if we have reached the end of the message
            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {
    244e:	f8 01       	movw	r30, r16
    2450:	c2 84       	ldd	r12, Z+10	; 0x0a
    2452:	d3 84       	ldd	r13, Z+11	; 0x0b
    2454:	96 01       	movw	r18, r12
    2456:	21 50       	subi	r18, 0x01	; 1
    2458:	31 09       	sbc	r19, r1
    245a:	82 17       	cp	r24, r18
    245c:	93 07       	cpc	r25, r19
    245e:	08 f4       	brcc	.+2      	; 0x2462 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x206>
    2460:	57 c0       	rjmp	.+174    	; 0x2510 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2b4>

                //"FML" case: fall down here with an overflown SysEx..
                //this means we received the last possible data byte that can fit the buffer
                //if this happens, try increasing MIDI_SYSEX_ARRAY_SIZE
                if (mPendingMessage[0] == midiMessageSystemExclusive)   {
    2462:	e7 80       	ldd	r14, Z+7	; 0x07
    2464:	f0 ef       	ldi	r31, 0xF0	; 240
    2466:	ef 12       	cpse	r14, r31
    2468:	08 c0       	rjmp	.+16     	; 0x247a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x21e>

void HWmidi::resetInput()   {

    //reset input attributes

    dinPendingMessageIndex = 0;
    246a:	f8 01       	movw	r30, r16
    246c:	15 86       	std	Z+13, r1	; 0x0d
    246e:	14 86       	std	Z+12, r1	; 0x0c
    dinPendingMessageExpectedLenght = 0;
    2470:	13 86       	std	Z+11, r1	; 0x0b
    2472:	12 86       	std	Z+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    2474:	14 82       	std	Z+4, r1	; 0x04
                //this means we received the last possible data byte that can fit the buffer
                //if this happens, try increasing MIDI_SYSEX_ARRAY_SIZE
                if (mPendingMessage[0] == midiMessageSystemExclusive)   {

                    resetInput();
                    return false;
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	71 c1       	rjmp	.+738    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

                }

                dinMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    247a:	6e 2d       	mov	r22, r14
    247c:	c8 01       	movw	r24, r16
    247e:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN6HWmidi21getTypeFromStatusByteEh>
    2482:	f8 2e       	mov	r15, r24
    2484:	f8 01       	movw	r30, r16
    2486:	81 8b       	std	Z+17, r24	; 0x11

                if (isChannelMessage(dinMessage.type))
    2488:	68 2f       	mov	r22, r24
    248a:	c8 01       	movw	r24, r16
    248c:	0e 94 17 11 	call	0x222e	; 0x222e <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    2490:	88 23       	and	r24, r24
    2492:	31 f0       	breq	.+12     	; 0x24a0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x244>
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    2494:	8e 2d       	mov	r24, r14
    2496:	8f 70       	andi	r24, 0x0F	; 15
    2498:	8f 5f       	subi	r24, 0xFF	; 255
                }

                dinMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

                if (isChannelMessage(dinMessage.type))
                    dinMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    249a:	f8 01       	movw	r30, r16
    249c:	80 8b       	std	Z+16, r24	; 0x10
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x248>
                else dinMessage.channel = 0;
    24a0:	f8 01       	movw	r30, r16
    24a2:	10 8a       	std	Z+16, r1	; 0x10

                dinMessage.data1 = mPendingMessage[1];
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 85       	ldd	r24, Z+8	; 0x08
    24a8:	82 8b       	std	Z+18, r24	; 0x12

                //save data2 only if applicable
                if (dinPendingMessageExpectedLenght == 3)
    24aa:	f3 e0       	ldi	r31, 0x03	; 3
    24ac:	cf 16       	cp	r12, r31
    24ae:	d1 04       	cpc	r13, r1
    24b0:	21 f4       	brne	.+8      	; 0x24ba <_ZN6HWmidi5parseE19midiInterfaceType_t+0x25e>
                    dinMessage.data2 = mPendingMessage[2];
    24b2:	f8 01       	movw	r30, r16
    24b4:	81 85       	ldd	r24, Z+9	; 0x09
    24b6:	83 8b       	std	Z+19, r24	; 0x13
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <_ZN6HWmidi5parseE19midiInterfaceType_t+0x262>
                else dinMessage.data2 = 0;
    24ba:	f8 01       	movw	r30, r16
    24bc:	13 8a       	std	Z+19, r1	; 0x13

                //reset local variables
                dinPendingMessageIndex = 0;
    24be:	f8 01       	movw	r30, r16
    24c0:	15 86       	std	Z+13, r1	; 0x0d
    24c2:	14 86       	std	Z+12, r1	; 0x0c
                dinPendingMessageExpectedLenght = 0;
    24c4:	13 86       	std	Z+11, r1	; 0x0b
    24c6:	12 86       	std	Z+10, r1	; 0x0a

                dinMessage.valid = true;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	ec 59       	subi	r30, 0x9C	; 156
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 83       	st	Z, r24

                //activate running status (if enabled for the received type)
                switch (dinMessage.type)  {
    24d0:	f0 eb       	ldi	r31, 0xB0	; 176
    24d2:	ff 16       	cp	r15, r31
    24d4:	a9 f0       	breq	.+42     	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24d6:	ff 15       	cp	r31, r15
    24d8:	50 f0       	brcs	.+20     	; 0x24ee <_ZN6HWmidi5parseE19midiInterfaceType_t+0x292>
    24da:	80 e9       	ldi	r24, 0x90	; 144
    24dc:	f8 16       	cp	r15, r24
    24de:	81 f0       	breq	.+32     	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24e0:	e0 ea       	ldi	r30, 0xA0	; 160
    24e2:	fe 16       	cp	r15, r30
    24e4:	69 f0       	breq	.+26     	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24e6:	f0 e8       	ldi	r31, 0x80	; 128
    24e8:	ff 12       	cpse	r15, r31
    24ea:	0e c0       	rjmp	.+28     	; 0x2508 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2ac>
    24ec:	09 c0       	rjmp	.+18     	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24ee:	80 ed       	ldi	r24, 0xD0	; 208
    24f0:	f8 16       	cp	r15, r24
    24f2:	31 f0       	breq	.+12     	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24f4:	e0 ee       	ldi	r30, 0xE0	; 224
    24f6:	fe 16       	cp	r15, r30
    24f8:	19 f0       	breq	.+6      	; 0x2500 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a4>
    24fa:	f0 ec       	ldi	r31, 0xC0	; 192
    24fc:	ff 12       	cpse	r15, r31
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2ac>
                    case midiMessageControlChange:
                    case midiMessageProgramChange:
                    case midiMessageAfterTouchChannel:
                    case midiMessagePitchBend:
                    //running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
    2500:	f8 01       	movw	r30, r16
    2502:	e4 82       	std	Z+4, r14	; 0x04
                    mRunningStatus_RX = midiMessageInvalidType;
                    break;

                }

                return true;
    2504:	81 e0       	ldi	r24, 0x01	; 1
                    case midiMessageProgramChange:
                    case midiMessageAfterTouchChannel:
                    case midiMessagePitchBend:
                    //running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
                    break;
    2506:	2a c1       	rjmp	.+596    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

                    default:
                    //no running status
                    mRunningStatus_RX = midiMessageInvalidType;
    2508:	f8 01       	movw	r30, r16
    250a:	14 82       	std	Z+4, r1	; 0x04
                    break;

                }

                return true;
    250c:	81 e0       	ldi	r24, 0x01	; 1
                    break;

                    default:
                    //no running status
                    mRunningStatus_RX = midiMessageInvalidType;
                    break;
    250e:	26 c1       	rjmp	.+588    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                return true;

            }   else {

                //update the index of the pending message
                dinPendingMessageIndex++;
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	f8 01       	movw	r30, r16
    2514:	95 87       	std	Z+13, r25	; 0x0d
    2516:	84 87       	std	Z+12, r24	; 0x0c

                if (use1byteParsing)    {
    2518:	83 81       	ldd	r24, Z+3	; 0x03
    251a:	81 11       	cpse	r24, r1
    251c:	09 c1       	rjmp	.+530    	; 0x2730 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d4>
                    return false;

                }   else {

                    //call the parser recursively to parse the rest of the message.
                    return parse(dinInterface);
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	c8 01       	movw	r24, r16
    2522:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6HWmidi5parseE19midiInterfaceType_t>
    2526:	1a c1       	rjmp	.+564    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

            }

        }

    }   else if (type == usbInterface)  {
    2528:	61 30       	cpi	r22, 0x01	; 1
    252a:	09 f0       	breq	.+2      	; 0x252e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2d2>
    252c:	03 c1       	rjmp	.+518    	; 0x2734 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4d8>

            MIDI_EventPacket_t MIDIEvent;

            //device must be connected and configured for the task to run
            if (USB_DeviceState != DEVICE_STATE_Configured) return false;
    252e:	80 91 e3 07 	lds	r24, 0x07E3
    2532:	84 30       	cpi	r24, 0x04	; 4
    2534:	09 f0       	breq	.+2      	; 0x2538 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2dc>
    2536:	f2 c0       	rjmp	.+484    	; 0x271c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    253e:	80 91 e8 00 	lds	r24, 0x00E8

            //select the MIDI OUT stream
            Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);

            //check if a MIDI command has been received
            if (Endpoint_IsOUTReceived())   {
    2542:	82 ff       	sbrs	r24, 2
    2544:	ed c0       	rjmp	.+474    	; 0x2720 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c4>

                //read the MIDI event packet from the endpoint
                Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	64 e0       	ldi	r22, 0x04	; 4
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	ce 01       	movw	r24, r28
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <Endpoint_Read_Stream_LE>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2556:	20 91 f3 00 	lds	r18, 0x00F3
    255a:	80 91 f2 00 	lds	r24, 0x00F2
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	92 2b       	or	r25, r18

                //if the endpoint is now empty, clear the bank
                if (!(Endpoint_BytesInEndpoint()))  {
    2562:	89 2b       	or	r24, r25
    2564:	29 f4       	brne	.+10     	; 0x2570 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x314>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2566:	e8 ee       	ldi	r30, 0xE8	; 232
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	8b 77       	andi	r24, 0x7B	; 123
    256e:	80 83       	st	Z, r24
            }   else return false;

            //we already have entire message here
            //MIDIEvent.Event is CIN, see midi10.pdf
            //shift cin four bytes left to get midiMessageType_t
            uint8_t midiMessage = MIDIEvent.Event << 4;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	82 95       	swap	r24
    2574:	80 7f       	andi	r24, 0xF0	; 240

            switch(midiMessage) {
    2576:	80 38       	cpi	r24, 0x80	; 128
    2578:	09 f4       	brne	.+2      	; 0x257c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x320>
    257a:	61 c0       	rjmp	.+194    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    257c:	88 f4       	brcc	.+34     	; 0x25a0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x344>
    257e:	80 35       	cpi	r24, 0x50	; 80
    2580:	09 f1       	breq	.+66     	; 0x25c4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x368>
    2582:	38 f4       	brcc	.+14     	; 0x2592 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x336>
    2584:	80 32       	cpi	r24, 0x20	; 32
    2586:	09 f4       	brne	.+2      	; 0x258a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x32e>
    2588:	47 c0       	rjmp	.+142    	; 0x2618 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3bc>
    258a:	80 34       	cpi	r24, 0x40	; 64
    258c:	09 f4       	brne	.+2      	; 0x2590 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x334>
    258e:	6b c0       	rjmp	.+214    	; 0x2666 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x40a>
    2590:	c9 c0       	rjmp	.+402    	; 0x2724 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    2592:	80 36       	cpi	r24, 0x60	; 96
    2594:	09 f4       	brne	.+2      	; 0x2598 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x33c>
    2596:	84 c0       	rjmp	.+264    	; 0x26a0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x444>
    2598:	80 37       	cpi	r24, 0x70	; 112
    259a:	09 f4       	brne	.+2      	; 0x259e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x342>
    259c:	9e c0       	rjmp	.+316    	; 0x26da <_ZN6HWmidi5parseE19midiInterfaceType_t+0x47e>
    259e:	c2 c0       	rjmp	.+388    	; 0x2724 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    25a0:	80 3b       	cpi	r24, 0xB0	; 176
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x34a>
    25a4:	4c c0       	rjmp	.+152    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25a6:	38 f4       	brcc	.+14     	; 0x25b6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x35a>
    25a8:	80 39       	cpi	r24, 0x90	; 144
    25aa:	09 f4       	brne	.+2      	; 0x25ae <_ZN6HWmidi5parseE19midiInterfaceType_t+0x352>
    25ac:	48 c0       	rjmp	.+144    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25ae:	80 3a       	cpi	r24, 0xA0	; 160
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x358>
    25b2:	b8 c0       	rjmp	.+368    	; 0x2724 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    25b4:	44 c0       	rjmp	.+136    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25b6:	80 3e       	cpi	r24, 0xE0	; 224
    25b8:	09 f4       	brne	.+2      	; 0x25bc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x360>
    25ba:	41 c0       	rjmp	.+130    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>
    25bc:	82 3f       	cpi	r24, 0xF2	; 242
    25be:	09 f0       	breq	.+2      	; 0x25c2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x366>
    25c0:	b1 c0       	rjmp	.+354    	; 0x2724 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x4c8>
    25c2:	3d c0       	rjmp	.+122    	; 0x263e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3e2>

                //1 byte messages
                case sysCommon1byteCin:
                if (MIDIEvent.Data1 != 0xF7)   {
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	87 3f       	cpi	r24, 0xF7	; 247
    25c8:	79 f0       	breq	.+30     	; 0x25e8 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x38c>
                    //case midiMessageStart:
                    //case midiMessageContinue:
                    //case midiMessageStop:
                    //case midiMessageActiveSensing:
                    //case midiMessageSystemReset:
                    usbMessage.type    = (midiMessageType_t)MIDIEvent.Data1;
    25ca:	f8 01       	movw	r30, r16
    25cc:	ea 59       	subi	r30, 0x9A	; 154
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 83       	st	Z, r24
                    usbMessage.channel = 0;
    25d2:	31 97       	sbiw	r30, 0x01	; 1
    25d4:	10 82       	st	Z, r1
                    usbMessage.data1   = 0;
    25d6:	32 96       	adiw	r30, 0x02	; 2
    25d8:	10 82       	st	Z, r1
                    usbMessage.data2   = 0;
    25da:	31 96       	adiw	r30, 0x01	; 1
    25dc:	10 82       	st	Z, r1
                    usbMessage.valid   = true;
    25de:	ef 5a       	subi	r30, 0xAF	; 175
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 83       	st	Z, r24
                    return true;
    25e6:	ba c0       	rjmp	.+372    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>

                }   else {

                    //end of sysex
                    usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data1;
    25e8:	f8 01       	movw	r30, r16
    25ea:	86 85       	ldd	r24, Z+14	; 0x0e
    25ec:	97 85       	ldd	r25, Z+15	; 0x0f
    25ee:	e8 0f       	add	r30, r24
    25f0:	f9 1f       	adc	r31, r25
    25f2:	e7 59       	subi	r30, 0x97	; 151
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	27 ef       	ldi	r18, 0xF7	; 247
    25f8:	20 83       	st	Z, r18
                    sysExArrayLength++;
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	f8 01       	movw	r30, r16
    25fe:	97 87       	std	Z+15, r25	; 0x0f
    2600:	86 87       	std	Z+14, r24	; 0x0e
                    usbMessage.type    = (midiMessageType_t)midiMessageSystemExclusive;
    2602:	ea 59       	subi	r30, 0x9A	; 154
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 ef       	ldi	r24, 0xF0	; 240
    2608:	80 83       	st	Z, r24
                    usbMessage.channel = 0;
    260a:	31 97       	sbiw	r30, 0x01	; 1
    260c:	10 82       	st	Z, r1
                    usbMessage.valid   = true;
    260e:	ec 5a       	subi	r30, 0xAC	; 172
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	80 83       	st	Z, r24
                    return true;
    2616:	a2 c0       	rjmp	.+324    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                case sysCommon2byteCin:
                //case midiMessageProgramChange:
                //case midiMessageAfterTouchChannel:
                //case midiMessageTimeCodeQuarterFrame:
                //case midiMessageSongSelect:
                usbMessage.type    = (midiMessageType_t)MIDIEvent.Data1;
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	f8 01       	movw	r30, r16
    261c:	ea 59       	subi	r30, 0x9A	; 154
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 83       	st	Z, r24
                usbMessage.channel = (MIDIEvent.Data1 & 0x0F) + 1;
    2622:	31 97       	sbiw	r30, 0x01	; 1
    2624:	8f 70       	andi	r24, 0x0F	; 15
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	80 83       	st	Z, r24
                usbMessage.data1   = MIDIEvent.Data2;
    262a:	32 96       	adiw	r30, 0x02	; 2
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	80 83       	st	Z, r24
                usbMessage.data2   = 0;
    2630:	31 96       	adiw	r30, 0x01	; 1
    2632:	10 82       	st	Z, r1
                usbMessage.valid   = true;
    2634:	ef 5a       	subi	r30, 0xAF	; 175
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	80 83       	st	Z, r24
                return true;
    263c:	8f c0       	rjmp	.+286    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                case midiMessageNoteOff:
                case midiMessageControlChange:
                case midiMessagePitchBend:
                case midiMessageAfterTouchPoly:
                case midiMessageSongPosition:
                usbMessage.type    = (midiMessageType_t)midiMessage;
    263e:	f8 01       	movw	r30, r16
    2640:	ea 59       	subi	r30, 0x9A	; 154
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 83       	st	Z, r24
                usbMessage.channel = (MIDIEvent.Data1 & 0x0F) + 1;
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	8f 70       	andi	r24, 0x0F	; 15
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	80 83       	st	Z, r24
                usbMessage.data1   = MIDIEvent.Data2;
    2650:	32 96       	adiw	r30, 0x02	; 2
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	80 83       	st	Z, r24
                usbMessage.data2   = MIDIEvent.Data3;
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	80 83       	st	Z, r24
                usbMessage.valid   = true;
    265c:	ef 5a       	subi	r30, 0xAF	; 175
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	80 83       	st	Z, r24
                return true;
    2664:	7b c0       	rjmp	.+246    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                break;

                //sysex
                case sysExStartCin:
                //the message can be any length between 3 and MIDI_SYSEX_ARRAY_SIZE
                if (MIDIEvent.Data1 == 0xF0) {
    2666:	4a 81       	ldd	r20, Y+2	; 0x02
    2668:	40 3f       	cpi	r20, 0xF0	; 240
    266a:	19 f4       	brne	.+6      	; 0x2672 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x416>

                    //this is a new sysex message, reset length
                    sysExArrayLength = 0;
    266c:	f8 01       	movw	r30, r16
    266e:	17 86       	std	Z+15, r1	; 0x0f
    2670:	16 86       	std	Z+14, r1	; 0x0e

                }
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data1;
    2672:	f8 01       	movw	r30, r16
    2674:	26 85       	ldd	r18, Z+14	; 0x0e
    2676:	37 85       	ldd	r19, Z+15	; 0x0f
    2678:	c8 01       	movw	r24, r16
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	fc 01       	movw	r30, r24
    2680:	e7 59       	subi	r30, 0x97	; 151
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	40 83       	st	Z, r20
                sysExArrayLength++;
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data2;
    2686:	31 96       	adiw	r30, 0x01	; 1
    2688:	4b 81       	ldd	r20, Y+3	; 0x03
    268a:	40 83       	st	Z, r20
                sysExArrayLength++;
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data3;
    268c:	31 96       	adiw	r30, 0x01	; 1
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	80 83       	st	Z, r24
                sysExArrayLength++;
    2692:	2d 5f       	subi	r18, 0xFD	; 253
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	f8 01       	movw	r30, r16
    2698:	37 87       	std	Z+15, r19	; 0x0f
    269a:	26 87       	std	Z+14, r18	; 0x0e
                return false;
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	5e c0       	rjmp	.+188    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                break;

                case sysExStop2byteCin:
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data1;
    26a0:	f8 01       	movw	r30, r16
    26a2:	86 85       	ldd	r24, Z+14	; 0x0e
    26a4:	97 85       	ldd	r25, Z+15	; 0x0f
    26a6:	98 01       	movw	r18, r16
    26a8:	28 0f       	add	r18, r24
    26aa:	39 1f       	adc	r19, r25
    26ac:	f9 01       	movw	r30, r18
    26ae:	e7 59       	subi	r30, 0x97	; 151
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	4a 81       	ldd	r20, Y+2	; 0x02
    26b4:	40 83       	st	Z, r20
                sysExArrayLength++;
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data2;
    26b6:	31 96       	adiw	r30, 0x01	; 1
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	20 83       	st	Z, r18
                sysExArrayLength++;
    26bc:	02 96       	adiw	r24, 0x02	; 2
    26be:	f8 01       	movw	r30, r16
    26c0:	97 87       	std	Z+15, r25	; 0x0f
    26c2:	86 87       	std	Z+14, r24	; 0x0e
                usbMessage.type    = midiMessageSystemExclusive;
    26c4:	ea 59       	subi	r30, 0x9A	; 154
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 ef       	ldi	r24, 0xF0	; 240
    26ca:	80 83       	st	Z, r24
                usbMessage.channel = 0;
    26cc:	31 97       	sbiw	r30, 0x01	; 1
    26ce:	10 82       	st	Z, r1
                usbMessage.valid   = true;
    26d0:	ec 5a       	subi	r30, 0xAC	; 172
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 83       	st	Z, r24
                return true;
    26d8:	41 c0       	rjmp	.+130    	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                break;

                case sysExStop3byteCin:
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data1;
    26da:	f8 01       	movw	r30, r16
    26dc:	26 85       	ldd	r18, Z+14	; 0x0e
    26de:	37 85       	ldd	r19, Z+15	; 0x0f
    26e0:	c8 01       	movw	r24, r16
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	fc 01       	movw	r30, r24
    26e8:	e7 59       	subi	r30, 0x97	; 151
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	4a 81       	ldd	r20, Y+2	; 0x02
    26ee:	40 83       	st	Z, r20
                sysExArrayLength++;
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data2;
    26f0:	31 96       	adiw	r30, 0x01	; 1
    26f2:	4b 81       	ldd	r20, Y+3	; 0x03
    26f4:	40 83       	st	Z, r20
                sysExArrayLength++;
                usbMessage.sysexArray[sysExArrayLength] = MIDIEvent.Data3;
    26f6:	31 96       	adiw	r30, 0x01	; 1
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	80 83       	st	Z, r24
                sysExArrayLength++;
    26fc:	2d 5f       	subi	r18, 0xFD	; 253
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	f8 01       	movw	r30, r16
    2702:	37 87       	std	Z+15, r19	; 0x0f
    2704:	26 87       	std	Z+14, r18	; 0x0e
                usbMessage.type    = midiMessageSystemExclusive;
    2706:	ea 59       	subi	r30, 0x9A	; 154
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 ef       	ldi	r24, 0xF0	; 240
    270c:	80 83       	st	Z, r24
                usbMessage.channel = 0;
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	10 82       	st	Z, r1
                usbMessage.valid   = true;
    2712:	ec 5a       	subi	r30, 0xAC	; 172
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	80 83       	st	Z, r24
                return true;
    271a:	20 c0       	rjmp	.+64     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
    }   else if (type == usbInterface)  {

            MIDI_EventPacket_t MIDIEvent;

            //device must be connected and configured for the task to run
            if (USB_DeviceState != DEVICE_STATE_Configured) return false;
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	1e c0       	rjmp	.+60     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                    //clear the endpoint ready for new packet
                    Endpoint_ClearOUT();

                }

            }   else return false;
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	1c c0       	rjmp	.+56     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                usbMessage.valid   = true;
                return true;
                break;

                default:
                return false;
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	1a c0       	rjmp	.+52     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
        //else, add the extracted byte to the pending message, and check validity
        //when the message is done, store it

        if (USE_SERIAL_PORT.available() == 0)
            //no data available
            return false;
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	18 c0       	rjmp	.+48     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
            }

            if (use1byteParsing)    {

                //message is not complete.
                return false;
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	16 c0       	rjmp	.+44     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                dinPendingMessageIndex++;

                if (use1byteParsing)    {

                    //message is not complete.
                    return false;
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	14 c0       	rjmp	.+40     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
                return false;
                break;

            }

    }   else return false;
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	12 c0       	rjmp	.+36     	; 0x275c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x500>
            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    2738:	f8 01       	movw	r30, r16
    273a:	81 8b       	std	Z+17, r24	; 0x11
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    273c:	8f 2d       	mov	r24, r15
    273e:	8f 70       	andi	r24, 0x0F	; 15
    2740:	8f 5f       	subi	r24, 0xFF	; 255

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
                dinMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    2742:	80 8b       	std	Z+16, r24	; 0x10
                dinMessage.data1   = mPendingMessage[1];
    2744:	80 85       	ldd	r24, Z+8	; 0x08
    2746:	82 8b       	std	Z+18, r24	; 0x12
    2748:	1e ce       	rjmp	.-964    	; 0x2386 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x12a>
            }

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    274a:	f8 01       	movw	r30, r16
    274c:	81 8b       	std	Z+17, r24	; 0x11
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    274e:	8f 2d       	mov	r24, r15
    2750:	8f 70       	andi	r24, 0x0F	; 15
    2752:	8f 5f       	subi	r24, 0xFF	; 255

            if (dinPendingMessageIndex >= (dinPendingMessageExpectedLenght - 1))    {

                //reception complete
                dinMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
                dinMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    2754:	80 8b       	std	Z+16, r24	; 0x10
                dinMessage.data1   = mPendingMessage[1];
    2756:	80 85       	ldd	r24, Z+8	; 0x08
    2758:	82 8b       	std	Z+18, r24	; 0x12
    275a:	19 ce       	rjmp	.-974    	; 0x238e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x132>

            }

    }   else return false;

}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	df 90       	pop	r13
    2772:	cf 90       	pop	r12
    2774:	08 95       	ret

00002776 <_ZN6HWmidi4readEh19midiInterfaceType_t>:

    return read(mInputChannel, type);

}

bool HWmidi::read(uint8_t inChannel, midiInterfaceType_t type)    {
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29

    if (inChannel >= MIDI_CHANNEL_OFF)
    277e:	61 31       	cpi	r22, 0x11	; 17
    2780:	70 f4       	brcc	.+28     	; 0x279e <_ZN6HWmidi4readEh19midiInterfaceType_t+0x28>
    2782:	d4 2f       	mov	r29, r20
    2784:	c6 2f       	mov	r28, r22
    2786:	8c 01       	movw	r16, r24
        return false; //MIDI Input disabled

    if (!parse(type)) return false;
    2788:	64 2f       	mov	r22, r20
    278a:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6HWmidi5parseE19midiInterfaceType_t>
    278e:	88 23       	and	r24, r24
    2790:	39 f0       	breq	.+14     	; 0x27a0 <_ZN6HWmidi4readEh19midiInterfaceType_t+0x2a>

    const bool channelMatch = inputFilter(inChannel, type);
    2792:	4d 2f       	mov	r20, r29
    2794:	6c 2f       	mov	r22, r28
    2796:	c8 01       	movw	r24, r16
    2798:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>

    //thruFilter(inChannel, type);

    return channelMatch;
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <_ZN6HWmidi4readEh19midiInterfaceType_t+0x2a>
}

bool HWmidi::read(uint8_t inChannel, midiInterfaceType_t type)    {

    if (inChannel >= MIDI_CHANNEL_OFF)
        return false; //MIDI Input disabled
    279e:	80 e0       	ldi	r24, 0x00	; 0

    //thruFilter(inChannel, type);

    return channelMatch;

}
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	08 95       	ret

000027aa <_ZN6HWmidi4readE19midiInterfaceType_t>:

    return ((uint8_t)inType | ((inChannel - 1) & 0x0f));

}

bool HWmidi::read(midiInterfaceType_t type) {
    27aa:	46 2f       	mov	r20, r22
    //returns true if a valid message has been stored in the structure, false if not
    //a valid message is a message that matches the input channel
    //if the Thru is enabled and the message matches the filter,
    //it is sent back on the MIDI output

    return read(mInputChannel, type);
    27ac:	fc 01       	movw	r30, r24
    27ae:	66 81       	ldd	r22, Z+6	; 0x06
    27b0:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZN6HWmidi4readEh19midiInterfaceType_t>

}
    27b4:	08 95       	ret

000027b6 <EVENT_USB_Device_ConfigurationChanged>:
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
    27b6:	42 e3       	ldi	r20, 0x32	; 50
    27b8:	61 e8       	ldi	r22, 0x81	; 129
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <Endpoint_ConfigureEndpoint_Prv>
    27c0:	42 e3       	ldi	r20, 0x32	; 50
    27c2:	60 e8       	ldi	r22, 0x80	; 128
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <Endpoint_ConfigureEndpoint_Prv>
    27ca:	08 95       	ret

000027cc <_GLOBAL__sub_I__ZN6HWmidiC2Ev>:
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);

}

    27cc:	81 ea       	ldi	r24, 0xA1	; 161
    27ce:	93 e0       	ldi	r25, 0x03	; 3
    27d0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_ZN6HWmidiC1Ev>
    27d4:	08 95       	ret

000027d6 <_Z18disablePeripheralsv>:
}

void disablePeripherals(void)   {

    //disable eeprom
    EECR = 0;
    27d6:	1f ba       	out	0x1f, r1	; 31

    //disable analog comparator
    ACSR = 0;
    27d8:	10 be       	out	0x30, r1	; 48

    //disable SPI
    SPCR = 0;
    27da:	1c bc       	out	0x2c, r1	; 44

    //disable external interrupts
    EIMSK = 0;
    27dc:	1d ba       	out	0x1d, r1	; 29

    //disable pin change interrupts
    PCICR = 0;
    27de:	10 92 68 00 	sts	0x0068, r1

    //disable ADC
    ADCSRA = 0;
    27e2:	10 92 7a 00 	sts	0x007A, r1

    //disable timers
    TIMSK0 = 0;
    27e6:	10 92 6e 00 	sts	0x006E, r1
    TIMSK1 = 0;
    27ea:	10 92 6f 00 	sts	0x006F, r1
    TIMSK3 = 0;
    27ee:	10 92 71 00 	sts	0x0071, r1
    TIMSK4 = 0;
    27f2:	10 92 72 00 	sts	0x0072, r1

    //disable USART
    UCSR1B = 0;
    27f6:	10 92 c9 00 	sts	0x00C9, r1

    //disable I2C
    TWCR = 0;
    27fa:	10 92 bc 00 	sts	0x00BC, r1

    //write low to all pins
    PORTB = 0;
    27fe:	15 b8       	out	0x05, r1	; 5
    PORTC = 0;
    2800:	18 b8       	out	0x08, r1	; 8
    PORTD = 0;
    2802:	1b b8       	out	0x0b, r1	; 11
    PORTE = 0;
    2804:	1e b8       	out	0x0e, r1	; 14
    PORTF = 0;
    2806:	11 ba       	out	0x11, r1	; 17

    //set all pins to inputs
    DDRB = 0;
    2808:	14 b8       	out	0x04, r1	; 4
    DDRC = 0;
    280a:	17 b8       	out	0x07, r1	; 7
    DDRD = 0;
    280c:	1a b8       	out	0x0a, r1	; 10
    DDRE = 0;
    280e:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0;
    2810:	10 ba       	out	0x10, r1	; 16
    2812:	08 95       	ret

00002814 <_Z6rebooth>:

}

void reboot(uint8_t mode)    {
    2814:	cf 93       	push	r28
    2816:	c8 2f       	mov	r28, r24

    cli();
    2818:	f8 94       	cli
    //stop watchdog timer, if running
    MCUSR &= ~(1<<WDFR);
    281a:	94 b7       	in	r25, 0x34	; 52
    281c:	97 7f       	andi	r25, 0xF7	; 247
    281e:	94 bf       	out	0x34, r25	; 52
    WDTCSR |= (1<<WDCE);
    2820:	e0 e6       	ldi	r30, 0x60	; 96
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	90 81       	ld	r25, Z
    2826:	90 61       	ori	r25, 0x10	; 16
    2828:	90 83       	st	Z, r25
    WDTCSR = 0;
    282a:	10 82       	st	Z, r1
    282c:	8f e1       	ldi	r24, 0x1F	; 31
    282e:	9e e4       	ldi	r25, 0x4E	; 78
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <_Z6rebooth+0x1c>
    2834:	00 c0       	rjmp	.+0      	; 0x2836 <_Z6rebooth+0x22>
    2836:	00 00       	nop
    _delay_ms(5);
    UDCON = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	80 93 e0 00 	sts	0x00E0, r24
    USBCON = (1<<FRZCLK);
    283e:	80 e2       	ldi	r24, 0x20	; 32
    2840:	80 93 d8 00 	sts	0x00D8, r24
    2844:	9f ef       	ldi	r25, 0xFF	; 255
    2846:	27 ea       	ldi	r18, 0xA7	; 167
    2848:	81 e6       	ldi	r24, 0x61	; 97
    284a:	91 50       	subi	r25, 0x01	; 1
    284c:	20 40       	sbci	r18, 0x00	; 0
    284e:	80 40       	sbci	r24, 0x00	; 0
    2850:	e1 f7       	brne	.-8      	; 0x284a <_Z6rebooth+0x36>
    2852:	00 c0       	rjmp	.+0      	; 0x2854 <_Z6rebooth+0x40>
    2854:	00 00       	nop
    _delay_ms(2000);
    disablePeripherals();
    2856:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_Z18disablePeripheralsv>

    switch(mode)    {
    285a:	cc 23       	and	r28, r28
    285c:	19 f0       	breq	.+6      	; 0x2864 <_Z6rebooth+0x50>
    285e:	c1 30       	cpi	r28, 0x01	; 1
    2860:	61 f0       	breq	.+24     	; 0x287a <_Z6rebooth+0x66>
    2862:	22 c0       	rjmp	.+68     	; 0x28a8 <_Z6rebooth+0x94>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    2864:	9c e0       	ldi	r25, 0x0C	; 12
    2866:	88 e1       	ldi	r24, 0x18	; 24
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	a8 95       	wdr
    286e:	80 93 60 00 	sts	0x0060, r24
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	90 93 60 00 	sts	0x0060, r25
    2878:	ff cf       	rjmp	.-2      	; 0x2878 <_Z6rebooth+0x64>
        for (;;);
        break;

        case BTLDR_REBOOT:
        //set the bootloader key to the magic value and force a reset
        Boot_Key = MAGIC_BOOT_KEY;
    287a:	8a ec       	ldi	r24, 0xCA	; 202
    287c:	9c ea       	ldi	r25, 0xAC	; 172
    287e:	a2 e4       	ldi	r26, 0x42	; 66
    2880:	bc ed       	ldi	r27, 0xDC	; 220
    2882:	80 93 ec 07 	sts	0x07EC, r24
    2886:	90 93 ed 07 	sts	0x07ED, r25
    288a:	a0 93 ee 07 	sts	0x07EE, r26
    288e:	b0 93 ef 07 	sts	0x07EF, r27
    2892:	9c e0       	ldi	r25, 0x0C	; 12
    2894:	88 e1       	ldi	r24, 0x18	; 24
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	a8 95       	wdr
    289c:	80 93 60 00 	sts	0x0060, r24
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	90 93 60 00 	sts	0x0060, r25
    UDCON = 1;
    USBCON = (1<<FRZCLK);
    _delay_ms(2000);
    disablePeripherals();

    switch(mode)    {
    28a6:	ff cf       	rjmp	.-2      	; 0x28a6 <_Z6rebooth+0x92>
        for (;;);
        break;

    }

    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <__vector_25>:
bool    rxEnabled,
        txEnabled;

//isr functions

ISR(USART1_RX_vect) {
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	2f 93       	push	r18
    28b8:	8f 93       	push	r24
    28ba:	9f 93       	push	r25
    28bc:	ef 93       	push	r30
    28be:	ff 93       	push	r31

    uint8_t data, bufferIndex;

    data = UDR1;
    28c0:	20 91 ce 00 	lds	r18, 0x00CE
    bufferIndex = rx_buffer_head + 1;
    28c4:	80 91 61 04 	lds	r24, 0x0461
    28c8:	8f 5f       	subi	r24, 0xFF	; 255

    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    28ca:	80 35       	cpi	r24, 0x50	; 80
    28cc:	08 f0       	brcs	.+2      	; 0x28d0 <__vector_25+0x24>
    28ce:	80 e0       	ldi	r24, 0x00	; 0

    if (bufferIndex != rx_buffer_tail) {
    28d0:	90 91 60 04 	lds	r25, 0x0460
    28d4:	89 17       	cp	r24, r25
    28d6:	39 f0       	breq	.+14     	; 0x28e6 <__vector_25+0x3a>

        rx_buffer[bufferIndex] = data;
    28d8:	e8 2f       	mov	r30, r24
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	ee 59       	subi	r30, 0x9E	; 158
    28de:	fb 4f       	sbci	r31, 0xFB	; 251
    28e0:	20 83       	st	Z, r18
        rx_buffer_head = bufferIndex;
    28e2:	80 93 61 04 	sts	0x0461, r24

    }

}
    28e6:	ff 91       	pop	r31
    28e8:	ef 91       	pop	r30
    28ea:	9f 91       	pop	r25
    28ec:	8f 91       	pop	r24
    28ee:	2f 91       	pop	r18
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <__vector_26>:

ISR(USART1_UDRE_vect)   {
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	0f 92       	push	r0
    2902:	11 24       	eor	r1, r1
    2904:	8f 93       	push	r24
    2906:	9f 93       	push	r25
    2908:	ef 93       	push	r30
    290a:	ff 93       	push	r31

    uint8_t bufferIndex;

    if (tx_buffer_head == tx_buffer_tail) {
    290c:	90 91 5f 04 	lds	r25, 0x045F
    2910:	80 91 5e 04 	lds	r24, 0x045E
    2914:	98 13       	cpse	r25, r24
    2916:	0c c0       	rjmp	.+24     	; 0x2930 <__vector_26+0x36>

        // buffer is empty, disable transmit interrupt
        if (!rxEnabled)
    2918:	80 91 5d 04 	lds	r24, 0x045D
    291c:	81 11       	cpse	r24, r1
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <__vector_26+0x2e>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    2920:	88 e4       	ldi	r24, 0x48	; 72
    2922:	80 93 c9 00 	sts	0x00C9, r24
    2926:	13 c0       	rjmp	.+38     	; 0x294e <__vector_26+0x54>
        else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    2928:	88 ed       	ldi	r24, 0xD8	; 216
    292a:	80 93 c9 00 	sts	0x00C9, r24
    292e:	0f c0       	rjmp	.+30     	; 0x294e <__vector_26+0x54>

    } else {

        bufferIndex = tx_buffer_tail + 1;
    2930:	80 91 5e 04 	lds	r24, 0x045E
    2934:	8f 5f       	subi	r24, 0xFF	; 255
        if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    2936:	80 35       	cpi	r24, 0x50	; 80
    2938:	08 f0       	brcs	.+2      	; 0x293c <__vector_26+0x42>
    293a:	80 e0       	ldi	r24, 0x00	; 0
        UDR1 = tx_buffer[bufferIndex];
    293c:	e8 2f       	mov	r30, r24
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	ee 54       	subi	r30, 0x4E	; 78
    2942:	fb 4f       	sbci	r31, 0xFB	; 251
    2944:	90 81       	ld	r25, Z
    2946:	90 93 ce 00 	sts	0x00CE, r25
        tx_buffer_tail = bufferIndex;
    294a:	80 93 5e 04 	sts	0x045E, r24

    }

}
    294e:	ff 91       	pop	r31
    2950:	ef 91       	pop	r30
    2952:	9f 91       	pop	r25
    2954:	8f 91       	pop	r24
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_27>:

ISR(USART1_TX_vect) {}
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	0f 90       	pop	r0
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	0f 90       	pop	r0
    2970:	1f 90       	pop	r1
    2972:	18 95       	reti

00002974 <_ZN4UART4readEv>:

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    2974:	90 91 61 04 	lds	r25, 0x0461
    2978:	80 91 60 04 	lds	r24, 0x0460
    297c:	98 17       	cp	r25, r24
    297e:	71 f0       	breq	.+28     	; 0x299c <_ZN4UART4readEv+0x28>
    bufferIndex = rx_buffer_tail + 1;
    2980:	90 91 60 04 	lds	r25, 0x0460
    2984:	9f 5f       	subi	r25, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    2986:	90 35       	cpi	r25, 0x50	; 80
    2988:	08 f0       	brcs	.+2      	; 0x298c <_ZN4UART4readEv+0x18>
    298a:	90 e0       	ldi	r25, 0x00	; 0
    data = rx_buffer[bufferIndex];
    298c:	e9 2f       	mov	r30, r25
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	ee 59       	subi	r30, 0x9E	; 158
    2992:	fb 4f       	sbci	r31, 0xFB	; 251
    2994:	80 81       	ld	r24, Z
    rx_buffer_tail = bufferIndex;
    2996:	90 93 60 04 	sts	0x0460, r25
    return data;
    299a:	08 95       	ret

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    299c:	8f ef       	ldi	r24, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    data = rx_buffer[bufferIndex];
    rx_buffer_tail = bufferIndex;
    return data;

}
    299e:	08 95       	ret

000029a0 <_ZN4UART5writeEh>:

void UART::write(uint8_t data)  {

    if (!txEnabled) return;
    29a0:	80 91 5c 04 	lds	r24, 0x045C
    29a4:	88 23       	and	r24, r24
    29a6:	01 f1       	breq	.+64     	; 0x29e8 <_ZN4UART5writeEh+0x48>

    uint8_t bufferIndex;

    if (!(UCSR1B & (1<<TXEN1))) return;
    29a8:	80 91 c9 00 	lds	r24, 0x00C9
    29ac:	83 ff       	sbrs	r24, 3
    29ae:	1c c0       	rjmp	.+56     	; 0x29e8 <_ZN4UART5writeEh+0x48>

    bufferIndex = tx_buffer_head + 1;
    29b0:	90 91 5f 04 	lds	r25, 0x045F
    29b4:	9f 5f       	subi	r25, 0xFF	; 255

    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    29b6:	90 35       	cpi	r25, 0x50	; 80
    29b8:	08 f0       	brcs	.+2      	; 0x29bc <_ZN4UART5writeEh+0x1c>
    29ba:	90 e0       	ldi	r25, 0x00	; 0

    while (tx_buffer_tail == bufferIndex); // wait until space in buffer
    29bc:	80 91 5e 04 	lds	r24, 0x045E
    29c0:	98 17       	cp	r25, r24
    29c2:	e1 f3       	breq	.-8      	; 0x29bc <_ZN4UART5writeEh+0x1c>

    tx_buffer[bufferIndex] = data;
    29c4:	e9 2f       	mov	r30, r25
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	ee 54       	subi	r30, 0x4E	; 78
    29ca:	fb 4f       	sbci	r31, 0xFB	; 251
    29cc:	60 83       	st	Z, r22

    tx_buffer_head = bufferIndex;
    29ce:	90 93 5f 04 	sts	0x045F, r25

    if (!rxEnabled)
    29d2:	80 91 5d 04 	lds	r24, 0x045D
    29d6:	81 11       	cpse	r24, r1
    29d8:	04 c0       	rjmp	.+8      	; 0x29e2 <_ZN4UART5writeEh+0x42>
        UCSR1B = (1<<TXCIE1) | (1<<TXEN1) | (1<<UDRIE1);
    29da:	88 e6       	ldi	r24, 0x68	; 104
    29dc:	80 93 c9 00 	sts	0x00C9, r24
    29e0:	08 95       	ret
    else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
    29e2:	88 ef       	ldi	r24, 0xF8	; 248
    29e4:	80 93 c9 00 	sts	0x00C9, r24
    29e8:	08 95       	ret

000029ea <_ZN4UART5beginEmbb>:

}

void UART::begin(uint32_t baudRate, bool enableRX, bool enableTX)   {
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	cf 93       	push	r28
    29f6:	6a 01       	movw	r12, r20
    29f8:	7b 01       	movw	r14, r22
    29fa:	c2 2f       	mov	r28, r18

    rxEnabled = enableRX;
    29fc:	20 93 5d 04 	sts	0x045D, r18
    txEnabled = enableTX;
    2a00:	00 93 5c 04 	sts	0x045C, r16

    int16_t baud_count = ((F_CPU / 8) + (baudRate / 2)) / baudRate;
    2a04:	db 01       	movw	r26, r22
    2a06:	ca 01       	movw	r24, r20
    2a08:	b6 95       	lsr	r27
    2a0a:	a7 95       	ror	r26
    2a0c:	97 95       	ror	r25
    2a0e:	87 95       	ror	r24
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	60 58       	subi	r22, 0x80	; 128
    2a16:	7b 47       	sbci	r23, 0x7B	; 123
    2a18:	81 4e       	sbci	r24, 0xE1	; 225
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	a7 01       	movw	r20, r14
    2a1e:	96 01       	movw	r18, r12
    2a20:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__udivmodsi4>

    if ((baud_count & 1) && baud_count <= 4096) {
    2a24:	c9 01       	movw	r24, r18
    2a26:	81 70       	andi	r24, 0x01	; 1
    2a28:	99 27       	eor	r25, r25
    2a2a:	89 2b       	or	r24, r25
    2a2c:	71 f0       	breq	.+28     	; 0x2a4a <_ZN4UART5beginEmbb+0x60>
    2a2e:	21 30       	cpi	r18, 0x01	; 1
    2a30:	80 e1       	ldi	r24, 0x10	; 16
    2a32:	38 07       	cpc	r19, r24
    2a34:	54 f4       	brge	.+20     	; 0x2a4a <_ZN4UART5beginEmbb+0x60>

        UCSR1A = (1<<U2X1); //double speed uart
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	80 93 c8 00 	sts	0x00C8, r24
        UBRR1 = baud_count - 1;
    2a3c:	21 50       	subi	r18, 0x01	; 1
    2a3e:	31 09       	sbc	r19, r1
    2a40:	30 93 cd 00 	sts	0x00CD, r19
    2a44:	20 93 cc 00 	sts	0x00CC, r18
    2a48:	0a c0       	rjmp	.+20     	; 0x2a5e <_ZN4UART5beginEmbb+0x74>

    }   else {

        UCSR1A = 0;
    2a4a:	10 92 c8 00 	sts	0x00C8, r1
        UBRR1 = (baud_count >> 1) - 1;
    2a4e:	35 95       	asr	r19
    2a50:	27 95       	ror	r18
    2a52:	21 50       	subi	r18, 0x01	; 1
    2a54:	31 09       	sbc	r19, r1
    2a56:	30 93 cd 00 	sts	0x00CD, r19
    2a5a:	20 93 cc 00 	sts	0x00CC, r18

    }

    if (!(UCSR1B & (1<<TXEN1))) {
    2a5e:	80 91 c9 00 	lds	r24, 0x00C9
    2a62:	83 fd       	sbrc	r24, 3
    2a64:	1c c0       	rjmp	.+56     	; 0x2a9e <_ZN4UART5beginEmbb+0xb4>

        rx_buffer_head = 0;
    2a66:	10 92 61 04 	sts	0x0461, r1
        rx_buffer_tail = 0;
    2a6a:	10 92 60 04 	sts	0x0460, r1
        tx_buffer_head = 0;
    2a6e:	10 92 5f 04 	sts	0x045F, r1
        tx_buffer_tail = 0;
    2a72:	10 92 5e 04 	sts	0x045E, r1

        UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); //8 bit, no parity, 1 stop bit
    2a76:	86 e0       	ldi	r24, 0x06	; 6
    2a78:	80 93 ca 00 	sts	0x00CA, r24

        if (enableRX && enableTX)   //enable both rx and tx
    2a7c:	cc 23       	and	r28, r28
    2a7e:	51 f0       	breq	.+20     	; 0x2a94 <_ZN4UART5beginEmbb+0xaa>
    2a80:	00 23       	and	r16, r16
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <_ZN4UART5beginEmbb+0xa2>
            UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    2a84:	88 ed       	ldi	r24, 0xD8	; 216
    2a86:	80 93 c9 00 	sts	0x00C9, r24
    2a8a:	09 c0       	rjmp	.+18     	; 0x2a9e <_ZN4UART5beginEmbb+0xb4>
        else if (enableRX && !enableTX) //enable only receive
            UCSR1B = (1<<RXEN1) | (1<<RXCIE1);
    2a8c:	80 e9       	ldi	r24, 0x90	; 144
    2a8e:	80 93 c9 00 	sts	0x00C9, r24
    2a92:	05 c0       	rjmp	.+10     	; 0x2a9e <_ZN4UART5beginEmbb+0xb4>
        else if (enableTX & !enableRX)  //enable only transmit
    2a94:	00 23       	and	r16, r16
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <_ZN4UART5beginEmbb+0xb4>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    2a98:	88 e4       	ldi	r24, 0x48	; 72
    2a9a:	80 93 c9 00 	sts	0x00C9, r24

    }

}
    2a9e:	cf 91       	pop	r28
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	08 95       	ret

00002aac <_ZN4UART9availableEv>:

    //return available number of bytes in incoming buffer

    uint8_t head, tail;

    head = rx_buffer_head;
    2aac:	80 91 61 04 	lds	r24, 0x0461
    tail = rx_buffer_tail;
    2ab0:	90 91 60 04 	lds	r25, 0x0460

    if (head >= tail) return head - tail;
    2ab4:	89 17       	cp	r24, r25
    2ab6:	10 f0       	brcs	.+4      	; 0x2abc <_ZN4UART9availableEv+0x10>
    2ab8:	89 1b       	sub	r24, r25
    2aba:	08 95       	ret
    2abc:	80 5b       	subi	r24, 0xB0	; 176
    return SERIAL_BUFFER_SIZE + head - tail;
    2abe:	89 1b       	sub	r24, r25

}
    2ac0:	08 95       	ret

00002ac2 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    2ac2:	29 2f       	mov	r18, r25
    2ac4:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    2ac6:	22 30       	cpi	r18, 0x02	; 2
    2ac8:	31 05       	cpc	r19, r1
    2aca:	59 f0       	breq	.+22     	; 0x2ae2 <CALLBACK_USB_GetDescriptor+0x20>
    2acc:	23 30       	cpi	r18, 0x03	; 3
    2ace:	31 05       	cpc	r19, r1
    2ad0:	69 f0       	breq	.+26     	; 0x2aec <CALLBACK_USB_GetDescriptor+0x2a>
    2ad2:	21 30       	cpi	r18, 0x01	; 1
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	29 f5       	brne	.+74     	; 0x2b22 <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    2ad8:	82 e1       	ldi	r24, 0x12	; 18
    2ada:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    2adc:	2f e7       	ldi	r18, 0x7F	; 127
    2ade:	32 e0       	ldi	r19, 0x02	; 2
    2ae0:	29 c0       	rjmp	.+82     	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    2ae2:	85 e6       	ldi	r24, 0x65	; 101
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    2ae6:	2a e1       	ldi	r18, 0x1A	; 26
    2ae8:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    2aea:	24 c0       	rjmp	.+72     	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
    2aec:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	91 05       	cpc	r25, r1
    2af2:	59 f0       	breq	.+22     	; 0x2b0a <CALLBACK_USB_GetDescriptor+0x48>
    2af4:	82 30       	cpi	r24, 0x02	; 2
    2af6:	91 05       	cpc	r25, r1
    2af8:	71 f0       	breq	.+28     	; 0x2b16 <CALLBACK_USB_GetDescriptor+0x54>
    2afa:	89 2b       	or	r24, r25
    2afc:	b9 f4       	brne	.+46     	; 0x2b2c <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    2afe:	e6 e1       	ldi	r30, 0x16	; 22
    2b00:	f2 e0       	ldi	r31, 0x02	; 2
    2b02:	84 91       	lpm	r24, Z
    2b04:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    2b06:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    2b08:	15 c0       	rjmp	.+42     	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2b0a:	e2 ef       	ldi	r30, 0xF2	; 242
    2b0c:	f1 e0       	ldi	r31, 0x01	; 1
    2b0e:	84 91       	lpm	r24, Z
    2b10:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    2b12:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    2b14:	0f c0       	rjmp	.+30     	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2b16:	ee ed       	ldi	r30, 0xDE	; 222
    2b18:	f1 e0       	ldi	r31, 0x01	; 1
    2b1a:	84 91       	lpm	r24, Z
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    2b1e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    2b20:	09 c0       	rjmp	.+18     	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    2b34:	fa 01       	movw	r30, r20
    2b36:	31 83       	std	Z+1, r19	; 0x01
    2b38:	20 83       	st	Z, r18
	return Size;
}
    2b3a:	08 95       	ret

00002b3c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	af 92       	push	r10
    2b42:	bf 92       	push	r11
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	8c 01       	movw	r16, r24
    2b56:	eb 01       	movw	r28, r22
    2b58:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2b5a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <Endpoint_WaitUntilReady>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	3e c0       	rjmp	.+124    	; 0x2bde <Endpoint_Write_Stream_LE+0xa2>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2b62:	c1 14       	cp	r12, r1
    2b64:	d1 04       	cpc	r13, r1
    2b66:	39 f0       	breq	.+14     	; 0x2b76 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
    2b68:	f6 01       	movw	r30, r12
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	c8 1b       	sub	r28, r24
    2b70:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2b72:	08 0f       	add	r16, r24
    2b74:	19 1f       	adc	r17, r25
	}

	while (Length)
    2b76:	20 97       	sbiw	r28, 0x00	; 0
    2b78:	89 f1       	breq	.+98     	; 0x2bdc <Endpoint_Write_Stream_LE+0xa0>
    2b7a:	e1 2c       	mov	r14, r1
    2b7c:	f1 2c       	mov	r15, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2b7e:	0f 2e       	mov	r0, r31
    2b80:	f8 ee       	ldi	r31, 0xE8	; 232
    2b82:	8f 2e       	mov	r8, r31
    2b84:	91 2c       	mov	r9, r1
    2b86:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2b88:	0f 2e       	mov	r0, r31
    2b8a:	f1 ef       	ldi	r31, 0xF1	; 241
    2b8c:	af 2e       	mov	r10, r31
    2b8e:	b1 2c       	mov	r11, r1
    2b90:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2b92:	f4 01       	movw	r30, r8
    2b94:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2b96:	85 fd       	sbrc	r24, 5
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <Endpoint_Write_Stream_LE+0x86>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8e 77       	andi	r24, 0x7E	; 126
    2b9e:	80 83       	st	Z, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2ba0:	c1 14       	cp	r12, r1
    2ba2:	d1 04       	cpc	r13, r1
    2ba4:	49 f0       	breq	.+18     	; 0x2bb8 <Endpoint_Write_Stream_LE+0x7c>
			{
				*BytesProcessed += BytesInTransfer;
    2ba6:	f6 01       	movw	r30, r12
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	e8 0e       	add	r14, r24
    2bae:	f9 1e       	adc	r15, r25
    2bb0:	f1 82       	std	Z+1, r15	; 0x01
    2bb2:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    2bb4:	85 e0       	ldi	r24, 0x05	; 5
    2bb6:	13 c0       	rjmp	.+38     	; 0x2bde <Endpoint_Write_Stream_LE+0xa2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2bb8:	0e 94 ed 17 	call	0x2fda	; 0x2fda <Endpoint_WaitUntilReady>
    2bbc:	88 23       	and	r24, r24
    2bbe:	51 f0       	breq	.+20     	; 0x2bd4 <Endpoint_Write_Stream_LE+0x98>
    2bc0:	0e c0       	rjmp	.+28     	; 0x2bde <Endpoint_Write_Stream_LE+0xa2>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	81 91       	ld	r24, Z+
    2bc6:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2bc8:	f5 01       	movw	r30, r10
    2bca:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2bcc:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    2bce:	ff ef       	ldi	r31, 0xFF	; 255
    2bd0:	ef 1a       	sub	r14, r31
    2bd2:	ff 0a       	sbc	r15, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2bd4:	20 97       	sbiw	r28, 0x00	; 0
    2bd6:	e9 f6       	brne	.-70     	; 0x2b92 <Endpoint_Write_Stream_LE+0x56>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	01 c0       	rjmp	.+2      	; 0x2bde <Endpoint_Write_Stream_LE+0xa2>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
}
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	ff 90       	pop	r15
    2be8:	ef 90       	pop	r14
    2bea:	df 90       	pop	r13
    2bec:	cf 90       	pop	r12
    2bee:	bf 90       	pop	r11
    2bf0:	af 90       	pop	r10
    2bf2:	9f 90       	pop	r9
    2bf4:	8f 90       	pop	r8
    2bf6:	08 95       	ret

00002bf8 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2bf8:	8f 92       	push	r8
    2bfa:	9f 92       	push	r9
    2bfc:	af 92       	push	r10
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	8c 01       	movw	r16, r24
    2c12:	eb 01       	movw	r28, r22
    2c14:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2c16:	0e 94 ed 17 	call	0x2fda	; 0x2fda <Endpoint_WaitUntilReady>
    2c1a:	81 11       	cpse	r24, r1
    2c1c:	3e c0       	rjmp	.+124    	; 0x2c9a <Endpoint_Read_Stream_LE+0xa2>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2c1e:	c1 14       	cp	r12, r1
    2c20:	d1 04       	cpc	r13, r1
    2c22:	39 f0       	breq	.+14     	; 0x2c32 <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
    2c24:	f6 01       	movw	r30, r12
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	c8 1b       	sub	r28, r24
    2c2c:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2c2e:	08 0f       	add	r16, r24
    2c30:	19 1f       	adc	r17, r25
	}

	while (Length)
    2c32:	20 97       	sbiw	r28, 0x00	; 0
    2c34:	89 f1       	breq	.+98     	; 0x2c98 <Endpoint_Read_Stream_LE+0xa0>
    2c36:	e1 2c       	mov	r14, r1
    2c38:	f1 2c       	mov	r15, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2c3a:	0f 2e       	mov	r0, r31
    2c3c:	f8 ee       	ldi	r31, 0xE8	; 232
    2c3e:	8f 2e       	mov	r8, r31
    2c40:	91 2c       	mov	r9, r1
    2c42:	f0 2d       	mov	r31, r0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c44:	0f 2e       	mov	r0, r31
    2c46:	f1 ef       	ldi	r31, 0xF1	; 241
    2c48:	af 2e       	mov	r10, r31
    2c4a:	b1 2c       	mov	r11, r1
    2c4c:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2c4e:	f4 01       	movw	r30, r8
    2c50:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2c52:	85 fd       	sbrc	r24, 5
    2c54:	14 c0       	rjmp	.+40     	; 0x2c7e <Endpoint_Read_Stream_LE+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c56:	80 81       	ld	r24, Z
    2c58:	8b 77       	andi	r24, 0x7B	; 123
    2c5a:	80 83       	st	Z, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2c5c:	c1 14       	cp	r12, r1
    2c5e:	d1 04       	cpc	r13, r1
    2c60:	49 f0       	breq	.+18     	; 0x2c74 <Endpoint_Read_Stream_LE+0x7c>
			{
				*BytesProcessed += BytesInTransfer;
    2c62:	f6 01       	movw	r30, r12
    2c64:	80 81       	ld	r24, Z
    2c66:	91 81       	ldd	r25, Z+1	; 0x01
    2c68:	e8 0e       	add	r14, r24
    2c6a:	f9 1e       	adc	r15, r25
    2c6c:	f1 82       	std	Z+1, r15	; 0x01
    2c6e:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    2c70:	85 e0       	ldi	r24, 0x05	; 5
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <Endpoint_Read_Stream_LE+0xa2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2c74:	0e 94 ed 17 	call	0x2fda	; 0x2fda <Endpoint_WaitUntilReady>
    2c78:	88 23       	and	r24, r24
    2c7a:	51 f0       	breq	.+20     	; 0x2c90 <Endpoint_Read_Stream_LE+0x98>
    2c7c:	0e c0       	rjmp	.+28     	; 0x2c9a <Endpoint_Read_Stream_LE+0xa2>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c7e:	f5 01       	movw	r30, r10
    2c80:	80 81       	ld	r24, Z
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2c82:	f8 01       	movw	r30, r16
    2c84:	81 93       	st	Z+, r24
    2c86:	8f 01       	movw	r16, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2c88:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    2c8a:	ff ef       	ldi	r31, 0xFF	; 255
    2c8c:	ef 1a       	sub	r14, r31
    2c8e:	ff 0a       	sbc	r15, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2c90:	20 97       	sbiw	r28, 0x00	; 0
    2c92:	e9 f6       	brne	.-70     	; 0x2c4e <Endpoint_Read_Stream_LE+0x56>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <Endpoint_Read_Stream_LE+0xa2>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	bf 90       	pop	r11
    2cac:	af 90       	pop	r10
    2cae:	9f 90       	pop	r9
    2cb0:	8f 90       	pop	r8
    2cb2:	08 95       	ret

00002cb4 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2cc2:	20 91 ea 07 	lds	r18, 0x07EA
    2cc6:	30 91 eb 07 	lds	r19, 0x07EB
    2cca:	26 17       	cp	r18, r22
    2ccc:	37 07       	cpc	r19, r23
    2cce:	58 f0       	brcs	.+22     	; 0x2ce6 <Endpoint_Write_Control_Stream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2cd0:	61 15       	cp	r22, r1
    2cd2:	71 05       	cpc	r23, r1
    2cd4:	39 f4       	brne	.+14     	; 0x2ce4 <Endpoint_Write_Control_Stream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2cd6:	e8 ee       	ldi	r30, 0xE8	; 232
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	20 81       	ld	r18, Z
    2cdc:	2e 77       	andi	r18, 0x7E	; 126
    2cde:	20 83       	st	Z, r18
    2ce0:	9b 01       	movw	r18, r22
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <Endpoint_Write_Control_Stream_LE+0x32>
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	a8 2f       	mov	r26, r24
    2ce8:	b9 2f       	mov	r27, r25
    2cea:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2cec:	e8 ee       	ldi	r30, 0xE8	; 232
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2cf0:	63 ef       	ldi	r22, 0xF3	; 243
    2cf2:	70 e0       	ldi	r23, 0x00	; 0
    2cf4:	42 ef       	ldi	r20, 0xF2	; 242
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2cf8:	0f 2e       	mov	r0, r31
    2cfa:	f1 ef       	ldi	r31, 0xF1	; 241
    2cfc:	cf 2e       	mov	r12, r31
    2cfe:	d1 2c       	mov	r13, r1
    2d00:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2d02:	01 e0       	ldi	r16, 0x01	; 1
    2d04:	f1 2c       	mov	r15, r1
    2d06:	30 c0       	rjmp	.+96     	; 0x2d68 <Endpoint_Write_Control_Stream_LE+0xb4>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2d08:	80 91 e3 07 	lds	r24, 0x07E3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2d0c:	88 23       	and	r24, r24
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <Endpoint_Write_Control_Stream_LE+0x5e>
    2d10:	42 c0       	rjmp	.+132    	; 0x2d96 <Endpoint_Write_Control_Stream_LE+0xe2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2d12:	85 30       	cpi	r24, 0x05	; 5
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <Endpoint_Write_Control_Stream_LE+0x64>
    2d16:	41 c0       	rjmp	.+130    	; 0x2d9a <Endpoint_Write_Control_Stream_LE+0xe6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2d18:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2d1a:	83 fd       	sbrc	r24, 3
    2d1c:	40 c0       	rjmp	.+128    	; 0x2d9e <Endpoint_Write_Control_Stream_LE+0xea>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2d1e:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2d20:	82 fd       	sbrc	r24, 2
    2d22:	32 c0       	rjmp	.+100    	; 0x2d88 <Endpoint_Write_Control_Stream_LE+0xd4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2d24:	80 81       	ld	r24, Z
		  break;

		if (Endpoint_IsINReady())
    2d26:	80 ff       	sbrs	r24, 0
    2d28:	1f c0       	rjmp	.+62     	; 0x2d68 <Endpoint_Write_Control_Stream_LE+0xb4>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2d2a:	eb 01       	movw	r28, r22
    2d2c:	18 81       	ld	r17, Y
    2d2e:	ea 01       	movw	r28, r20
    2d30:	88 81       	ld	r24, Y
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2d36:	21 15       	cp	r18, r1
    2d38:	31 05       	cpc	r19, r1
    2d3a:	79 f0       	breq	.+30     	; 0x2d5a <Endpoint_Write_Control_Stream_LE+0xa6>
    2d3c:	88 30       	cpi	r24, 0x08	; 8
    2d3e:	91 05       	cpc	r25, r1
    2d40:	60 f4       	brcc	.+24     	; 0x2d5a <Endpoint_Write_Control_Stream_LE+0xa6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2d42:	1d 91       	ld	r17, X+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2d44:	e6 01       	movw	r28, r12
    2d46:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2d48:	21 50       	subi	r18, 0x01	; 1
    2d4a:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    2d4c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2d4e:	21 15       	cp	r18, r1
    2d50:	31 05       	cpc	r19, r1
    2d52:	19 f0       	breq	.+6      	; 0x2d5a <Endpoint_Write_Control_Stream_LE+0xa6>
    2d54:	88 30       	cpi	r24, 0x08	; 8
    2d56:	91 05       	cpc	r25, r1
    2d58:	a1 f7       	brne	.-24     	; 0x2d42 <Endpoint_Write_Control_Stream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2d5a:	10 2f       	mov	r17, r16
    2d5c:	08 97       	sbiw	r24, 0x08	; 8
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <Endpoint_Write_Control_Stream_LE+0xae>
    2d60:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2d62:	80 81       	ld	r24, Z
    2d64:	8e 77       	andi	r24, 0x7E	; 126
    2d66:	80 83       	st	Z, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2d68:	21 15       	cp	r18, r1
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	69 f6       	brne	.-102    	; 0x2d08 <Endpoint_Write_Control_Stream_LE+0x54>
    2d6e:	11 11       	cpse	r17, r1
    2d70:	cb cf       	rjmp	.-106    	; 0x2d08 <Endpoint_Write_Control_Stream_LE+0x54>
    2d72:	0a c0       	rjmp	.+20     	; 0x2d88 <Endpoint_Write_Control_Stream_LE+0xd4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2d74:	80 91 e3 07 	lds	r24, 0x07E3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2d78:	88 23       	and	r24, r24
    2d7a:	99 f0       	breq	.+38     	; 0x2da2 <Endpoint_Write_Control_Stream_LE+0xee>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2d7c:	85 30       	cpi	r24, 0x05	; 5
    2d7e:	99 f0       	breq	.+38     	; 0x2da6 <Endpoint_Write_Control_Stream_LE+0xf2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2d80:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2d82:	83 ff       	sbrs	r24, 3
    2d84:	03 c0       	rjmp	.+6      	; 0x2d8c <Endpoint_Write_Control_Stream_LE+0xd8>
    2d86:	11 c0       	rjmp	.+34     	; 0x2daa <Endpoint_Write_Control_Stream_LE+0xf6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2d88:	e8 ee       	ldi	r30, 0xE8	; 232
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2d8e:	82 ff       	sbrs	r24, 2
    2d90:	f1 cf       	rjmp	.-30     	; 0x2d74 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0b c0       	rjmp	.+22     	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	09 c0       	rjmp	.+18     	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2d9a:	83 e0       	ldi	r24, 0x03	; 3
    2d9c:	07 c0       	rjmp	.+14     	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	05 c0       	rjmp	.+10     	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	03 c0       	rjmp	.+6      	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2da6:	83 e0       	ldi	r24, 0x03	; 3
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <Endpoint_Write_Control_Stream_LE+0xf8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	df 90       	pop	r13
    2db8:	cf 90       	pop	r12
    2dba:	08 95       	ret

00002dbc <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2dca:	20 91 ea 07 	lds	r18, 0x07EA
    2dce:	30 91 eb 07 	lds	r19, 0x07EB
    2dd2:	26 17       	cp	r18, r22
    2dd4:	37 07       	cpc	r19, r23
    2dd6:	58 f0       	brcs	.+22     	; 0x2dee <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2dd8:	61 15       	cp	r22, r1
    2dda:	71 05       	cpc	r23, r1
    2ddc:	39 f4       	brne	.+14     	; 0x2dec <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2dde:	e8 ee       	ldi	r30, 0xE8	; 232
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	20 81       	ld	r18, Z
    2de4:	2e 77       	andi	r18, 0x7E	; 126
    2de6:	20 83       	st	Z, r18
    2de8:	9b 01       	movw	r18, r22
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <Endpoint_Write_Control_PStream_LE+0x32>
    2dec:	9b 01       	movw	r18, r22
    2dee:	e8 2f       	mov	r30, r24
    2df0:	f9 2f       	mov	r31, r25
    2df2:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2df4:	a8 ee       	ldi	r26, 0xE8	; 232
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2df8:	63 ef       	ldi	r22, 0xF3	; 243
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	42 ef       	ldi	r20, 0xF2	; 242
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e00:	0f 2e       	mov	r0, r31
    2e02:	f1 ef       	ldi	r31, 0xF1	; 241
    2e04:	cf 2e       	mov	r12, r31
    2e06:	d1 2c       	mov	r13, r1
    2e08:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2e0a:	01 e0       	ldi	r16, 0x01	; 1
    2e0c:	f1 2c       	mov	r15, r1
    2e0e:	31 c0       	rjmp	.+98     	; 0x2e72 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e10:	80 91 e3 07 	lds	r24, 0x07E3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e14:	88 23       	and	r24, r24
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <Endpoint_Write_Control_PStream_LE+0x5e>
    2e18:	43 c0       	rjmp	.+134    	; 0x2ea0 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e1a:	85 30       	cpi	r24, 0x05	; 5
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <Endpoint_Write_Control_PStream_LE+0x64>
    2e1e:	42 c0       	rjmp	.+132    	; 0x2ea4 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e20:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2e22:	83 fd       	sbrc	r24, 3
    2e24:	41 c0       	rjmp	.+130    	; 0x2ea8 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e26:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2e28:	82 fd       	sbrc	r24, 2
    2e2a:	33 c0       	rjmp	.+102    	; 0x2e92 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2e2c:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    2e2e:	80 ff       	sbrs	r24, 0
    2e30:	20 c0       	rjmp	.+64     	; 0x2e72 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2e32:	eb 01       	movw	r28, r22
    2e34:	18 81       	ld	r17, Y
    2e36:	ea 01       	movw	r28, r20
    2e38:	88 81       	ld	r24, Y
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2e3e:	21 15       	cp	r18, r1
    2e40:	31 05       	cpc	r19, r1
    2e42:	81 f0       	breq	.+32     	; 0x2e64 <Endpoint_Write_Control_PStream_LE+0xa8>
    2e44:	88 30       	cpi	r24, 0x08	; 8
    2e46:	91 05       	cpc	r25, r1
    2e48:	68 f4       	brcc	.+26     	; 0x2e64 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2e4a:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e4c:	e6 01       	movw	r28, r12
    2e4e:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2e50:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2e52:	21 50       	subi	r18, 0x01	; 1
    2e54:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    2e56:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2e58:	21 15       	cp	r18, r1
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <Endpoint_Write_Control_PStream_LE+0xa8>
    2e5e:	88 30       	cpi	r24, 0x08	; 8
    2e60:	91 05       	cpc	r25, r1
    2e62:	99 f7       	brne	.-26     	; 0x2e4a <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2e64:	10 2f       	mov	r17, r16
    2e66:	08 97       	sbiw	r24, 0x08	; 8
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <Endpoint_Write_Control_PStream_LE+0xb0>
    2e6a:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e6c:	8c 91       	ld	r24, X
    2e6e:	8e 77       	andi	r24, 0x7E	; 126
    2e70:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2e72:	21 15       	cp	r18, r1
    2e74:	31 05       	cpc	r19, r1
    2e76:	61 f6       	brne	.-104    	; 0x2e10 <Endpoint_Write_Control_PStream_LE+0x54>
    2e78:	11 11       	cpse	r17, r1
    2e7a:	ca cf       	rjmp	.-108    	; 0x2e10 <Endpoint_Write_Control_PStream_LE+0x54>
    2e7c:	0a c0       	rjmp	.+20     	; 0x2e92 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e7e:	80 91 e3 07 	lds	r24, 0x07E3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e82:	88 23       	and	r24, r24
    2e84:	99 f0       	breq	.+38     	; 0x2eac <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e86:	85 30       	cpi	r24, 0x05	; 5
    2e88:	99 f0       	breq	.+38     	; 0x2eb0 <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e8a:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2e8c:	83 ff       	sbrs	r24, 3
    2e8e:	03 c0       	rjmp	.+6      	; 0x2e96 <Endpoint_Write_Control_PStream_LE+0xda>
    2e90:	11 c0       	rjmp	.+34     	; 0x2eb4 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e92:	e8 ee       	ldi	r30, 0xE8	; 232
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2e98:	82 ff       	sbrs	r24, 2
    2e9a:	f1 cf       	rjmp	.-30     	; 0x2e7e <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	0b c0       	rjmp	.+22     	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	09 c0       	rjmp	.+18     	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2ea4:	83 e0       	ldi	r24, 0x03	; 3
    2ea6:	07 c0       	rjmp	.+14     	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2eac:	82 e0       	ldi	r24, 0x02	; 2
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2eb0:	83 e0       	ldi	r24, 0x03	; 3
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	1f 91       	pop	r17
    2ebc:	0f 91       	pop	r16
    2ebe:	ff 90       	pop	r15
    2ec0:	df 90       	pop	r13
    2ec2:	cf 90       	pop	r12
    2ec4:	08 95       	ret

00002ec6 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    2ec6:	8f 92       	push	r8
    2ec8:	9f 92       	push	r9
    2eca:	bf 92       	push	r11
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2edc:	87 30       	cpi	r24, 0x07	; 7
    2ede:	70 f1       	brcs	.+92     	; 0x2f3c <Endpoint_ConfigureEndpoint_Prv+0x76>
    2ee0:	26 c0       	rjmp	.+76     	; 0x2f2e <Endpoint_ConfigureEndpoint_Prv+0x68>
    2ee2:	29 2f       	mov	r18, r25
    2ee4:	2f 70       	andi	r18, 0x0F	; 15
    2ee6:	e7 01       	movw	r28, r14
    2ee8:	28 83       	st	Y, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    2eea:	89 17       	cp	r24, r25
    2eec:	31 f0       	breq	.+12     	; 0x2efa <Endpoint_ConfigureEndpoint_Prv+0x34>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    2eee:	e8 01       	movw	r28, r16
    2ef0:	78 81       	ld	r23, Y
			UECFG1XTemp = UECFG1X;
    2ef2:	20 81       	ld	r18, Z
			UEIENXTemp  = UEIENX;
    2ef4:	e4 01       	movw	r28, r8
    2ef6:	58 81       	ld	r21, Y
    2ef8:	03 c0       	rjmp	.+6      	; 0x2f00 <Endpoint_ConfigureEndpoint_Prv+0x3a>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    2efa:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    2efc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    2efe:	5b 2d       	mov	r21, r11
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    2f00:	21 ff       	sbrs	r18, 1
    2f02:	12 c0       	rjmp	.+36     	; 0x2f28 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    2f04:	3c 91       	ld	r19, X
    2f06:	3e 7f       	andi	r19, 0xFE	; 254
    2f08:	3c 93       	st	X, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    2f0a:	30 81       	ld	r19, Z
    2f0c:	3d 7f       	andi	r19, 0xFD	; 253
    2f0e:	30 83       	st	Z, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2f10:	3c 91       	ld	r19, X
    2f12:	31 60       	ori	r19, 0x01	; 1
    2f14:	3c 93       	st	X, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2f16:	e8 01       	movw	r28, r16
    2f18:	78 83       	st	Y, r23
		UECFG1X = UECFG1XTemp;
    2f1a:	20 83       	st	Z, r18
		UEIENX  = UEIENXTemp;
    2f1c:	e4 01       	movw	r28, r8
    2f1e:	58 83       	st	Y, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2f20:	e6 01       	movw	r28, r12
    2f22:	28 81       	ld	r18, Y

		if (!(Endpoint_IsConfigured()))
    2f24:	22 23       	and	r18, r18
    2f26:	44 f4       	brge	.+16     	; 0x2f38 <Endpoint_ConfigureEndpoint_Prv+0x72>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2f28:	9f 5f       	subi	r25, 0xFF	; 255
    2f2a:	97 30       	cpi	r25, 0x07	; 7
    2f2c:	d1 f6       	brne	.-76     	; 0x2ee2 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f2e:	8f 70       	andi	r24, 0x0F	; 15
    2f30:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	21 c0       	rjmp	.+66     	; 0x2f7a <Endpoint_ConfigureEndpoint_Prv+0xb4>
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	1f c0       	rjmp	.+62     	; 0x2f7a <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	9f 70       	andi	r25, 0x0F	; 15
    2f40:	90 93 e9 00 	sts	0x00E9, r25
    2f44:	98 2f       	mov	r25, r24
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    2f46:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    2f48:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    2f4c:	ab ee       	ldi	r26, 0xEB	; 235
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    2f50:	ed ee       	ldi	r30, 0xED	; 237
    2f52:	f0 e0       	ldi	r31, 0x00	; 0

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2f54:	0c ee       	ldi	r16, 0xEC	; 236
    2f56:	10 e0       	ldi	r17, 0x00	; 0
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;
    2f58:	0f 2e       	mov	r0, r31
    2f5a:	f0 ef       	ldi	r31, 0xF0	; 240
    2f5c:	8f 2e       	mov	r8, r31
    2f5e:	91 2c       	mov	r9, r1
    2f60:	f0 2d       	mov	r31, r0
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2f62:	0f 2e       	mov	r0, r31
    2f64:	fe ee       	ldi	r31, 0xEE	; 238
    2f66:	cf 2e       	mov	r12, r31
    2f68:	d1 2c       	mov	r13, r1
    2f6a:	f0 2d       	mov	r31, r0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f6c:	0f 2e       	mov	r0, r31
    2f6e:	f9 ee       	ldi	r31, 0xE9	; 233
    2f70:	ef 2e       	mov	r14, r31
    2f72:	f1 2c       	mov	r15, r1
    2f74:	f0 2d       	mov	r31, r0

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    2f76:	b1 2c       	mov	r11, r1
    2f78:	c3 cf       	rjmp	.-122    	; 0x2f00 <Endpoint_ConfigureEndpoint_Prv+0x3a>
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	ff 90       	pop	r15
    2f84:	ef 90       	pop	r14
    2f86:	df 90       	pop	r13
    2f88:	cf 90       	pop	r12
    2f8a:	bf 90       	pop	r11
    2f8c:	9f 90       	pop	r9
    2f8e:	8f 90       	pop	r8
    2f90:	08 95       	ret

00002f92 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2f92:	80 91 e4 07 	lds	r24, 0x07E4
    2f96:	88 23       	and	r24, r24
    2f98:	44 f0       	brlt	.+16     	; 0x2faa <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f9a:	e8 ee       	ldi	r30, 0xE8	; 232
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2fa0:	80 91 e3 07 	lds	r24, 0x07E3
    2fa4:	81 11       	cpse	r24, r1
    2fa6:	03 c0       	rjmp	.+6      	; 0x2fae <Endpoint_ClearStatusStage+0x1c>
    2fa8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2faa:	e8 ee       	ldi	r30, 0xE8	; 232
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2fb0:	82 ff       	sbrs	r24, 2
    2fb2:	f6 cf       	rjmp	.-20     	; 0x2fa0 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2fb4:	e8 ee       	ldi	r30, 0xE8	; 232
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	8b 77       	andi	r24, 0x7B	; 123
    2fbc:	80 83       	st	Z, r24
    2fbe:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2fc0:	80 91 e3 07 	lds	r24, 0x07E3
    2fc4:	88 23       	and	r24, r24
    2fc6:	41 f0       	breq	.+16     	; 0x2fd8 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2fc8:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2fca:	80 ff       	sbrs	r24, 0
    2fcc:	f9 cf       	rjmp	.-14     	; 0x2fc0 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2fce:	e8 ee       	ldi	r30, 0xE8	; 232
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	8e 77       	andi	r24, 0x7E	; 126
    2fd6:	80 83       	st	Z, r24
    2fd8:	08 95       	ret

00002fda <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2fe2:	20 91 e4 00 	lds	r18, 0x00E4
    2fe6:	30 91 e5 00 	lds	r19, 0x00E5
    2fea:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2fec:	ac ee       	ldi	r26, 0xEC	; 236
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ff0:	e8 ee       	ldi	r30, 0xE8	; 232
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2ff4:	0b ee       	ldi	r16, 0xEB	; 235
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
    2ff8:	44 ee       	ldi	r20, 0xE4	; 228
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <Endpoint_WaitUntilReady+0x26>
    2ffe:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3000:	9c 91       	ld	r25, X
    3002:	89 2f       	mov	r24, r25
    3004:	81 70       	andi	r24, 0x01	; 1
    3006:	90 fd       	sbrc	r25, 0
    3008:	1d c0       	rjmp	.+58     	; 0x3044 <Endpoint_WaitUntilReady+0x6a>
    300a:	20 c0       	rjmp	.+64     	; 0x304c <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    300c:	80 91 e3 07 	lds	r24, 0x07E3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3010:	88 23       	and	r24, r24
    3012:	81 f0       	breq	.+32     	; 0x3034 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3014:	85 30       	cpi	r24, 0x05	; 5
    3016:	81 f0       	breq	.+32     	; 0x3038 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3018:	e8 01       	movw	r28, r16
    301a:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    301c:	85 fd       	sbrc	r24, 5
    301e:	0e c0       	rjmp	.+28     	; 0x303c <Endpoint_WaitUntilReady+0x62>
    3020:	ea 01       	movw	r28, r20
    3022:	88 81       	ld	r24, Y
    3024:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3026:	28 17       	cp	r18, r24
    3028:	39 07       	cpc	r19, r25
    302a:	51 f3       	breq	.-44     	; 0x3000 <Endpoint_WaitUntilReady+0x26>
    302c:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    302e:	39 f7       	brne	.-50     	; 0x2ffe <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    3030:	84 e0       	ldi	r24, 0x04	; 4
    3032:	0f c0       	rjmp	.+30     	; 0x3052 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	0d c0       	rjmp	.+26     	; 0x3052 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	0b c0       	rjmp	.+22     	; 0x3052 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	09 c0       	rjmp	.+18     	; 0x3052 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	07 c0       	rjmp	.+14     	; 0x3052 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3044:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3046:	80 ff       	sbrs	r24, 0
    3048:	e1 cf       	rjmp	.-62     	; 0x300c <Endpoint_WaitUntilReady+0x32>
    304a:	fa cf       	rjmp	.-12     	; 0x3040 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    304c:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    304e:	92 ff       	sbrs	r25, 2
    3050:	dd cf       	rjmp	.-70     	; 0x300c <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	08 95       	ret

0000305c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3064:	0e 94 83 18 	call	0x3106	; 0x3106 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3068:	0e 94 8b 18 	call	0x3116	; 0x3116 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    306c:	c8 ed       	ldi	r28, 0xD8	; 216
    306e:	d0 e0       	ldi	r29, 0x00	; 0
    3070:	88 81       	ld	r24, Y
    3072:	8f 77       	andi	r24, 0x7F	; 127
    3074:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    3076:	88 81       	ld	r24, Y
    3078:	80 68       	ori	r24, 0x80	; 128
    307a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    307c:	88 81       	ld	r24, Y
    307e:	8f 7d       	andi	r24, 0xDF	; 223
    3080:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3082:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3084:	10 92 e3 07 	sts	0x07E3, r1
	USB_Device_ConfigurationNumber  = 0;
    3088:	10 92 df 07 	sts	0x07DF, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    308c:	10 92 e1 07 	sts	0x07E1, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3090:	10 92 e0 07 	sts	0x07E0, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3094:	00 ee       	ldi	r16, 0xE0	; 224
    3096:	10 e0       	ldi	r17, 0x00	; 0
    3098:	f8 01       	movw	r30, r16
    309a:	80 81       	ld	r24, Z
    309c:	8b 7f       	andi	r24, 0xFB	; 251
    309e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    30a0:	88 81       	ld	r24, Y
    30a2:	81 60       	ori	r24, 0x01	; 1
    30a4:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    30a6:	42 e0       	ldi	r20, 0x02	; 2
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    30b0:	e1 ee       	ldi	r30, 0xE1	; 225
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	8e 7f       	andi	r24, 0xFE	; 254
    30b8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    30ba:	e2 ee       	ldi	r30, 0xE2	; 226
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	81 60       	ori	r24, 0x01	; 1
    30c2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    30c4:	80 81       	ld	r24, Z
    30c6:	88 60       	ori	r24, 0x08	; 8
    30c8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 81       	ld	r24, Z
    30ce:	8e 7f       	andi	r24, 0xFE	; 254
    30d0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    30d2:	88 81       	ld	r24, Y
    30d4:	80 61       	ori	r24, 0x10	; 16
    30d6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    30e2:	e8 ed       	ldi	r30, 0xD8	; 216
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8f 7e       	andi	r24, 0xEF	; 239
    30ea:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    30ec:	e7 ed       	ldi	r30, 0xD7	; 215
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	81 60       	ori	r24, 0x01	; 1
    30f4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    30f6:	84 e0       	ldi	r24, 0x04	; 4
    30f8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	80 93 e2 07 	sts	0x07E2, r24

	USB_ResetInterface();
    3100:	0e 94 2e 18 	call	0x305c	; 0x305c <USB_ResetInterface>
    3104:	08 95       	ret

00003106 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3106:	e8 ed       	ldi	r30, 0xD8	; 216
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	8e 7f       	andi	r24, 0xFE	; 254
    310e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3110:	10 92 e2 00 	sts	0x00E2, r1
    3114:	08 95       	ret

00003116 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3116:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    311a:	10 92 e1 00 	sts	0x00E1, r1
    311e:	08 95       	ret

00003120 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3120:	1f 92       	push	r1
    3122:	0f 92       	push	r0
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	0f 92       	push	r0
    3128:	11 24       	eor	r1, r1
    312a:	2f 93       	push	r18
    312c:	3f 93       	push	r19
    312e:	4f 93       	push	r20
    3130:	5f 93       	push	r21
    3132:	6f 93       	push	r22
    3134:	7f 93       	push	r23
    3136:	8f 93       	push	r24
    3138:	9f 93       	push	r25
    313a:	af 93       	push	r26
    313c:	bf 93       	push	r27
    313e:	ef 93       	push	r30
    3140:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3142:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3146:	82 ff       	sbrs	r24, 2
    3148:	0b c0       	rjmp	.+22     	; 0x3160 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    314a:	80 91 e2 00 	lds	r24, 0x00E2
    314e:	82 ff       	sbrs	r24, 2
    3150:	07 c0       	rjmp	.+14     	; 0x3160 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3152:	e1 ee       	ldi	r30, 0xE1	; 225
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	8b 7f       	andi	r24, 0xFB	; 251
    315a:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    315c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3160:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3164:	80 ff       	sbrs	r24, 0
    3166:	1f c0       	rjmp	.+62     	; 0x31a6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3168:	80 91 d8 00 	lds	r24, 0x00D8
    316c:	80 ff       	sbrs	r24, 0
    316e:	1b c0       	rjmp	.+54     	; 0x31a6 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3170:	ea ed       	ldi	r30, 0xDA	; 218
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	8e 7f       	andi	r24, 0xFE	; 254
    3178:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    317a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    317e:	80 ff       	sbrs	r24, 0
    3180:	0d c0       	rjmp	.+26     	; 0x319c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3182:	80 e1       	ldi	r24, 0x10	; 16
    3184:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3186:	82 e1       	ldi	r24, 0x12	; 18
    3188:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    318a:	09 b4       	in	r0, 0x29	; 41
    318c:	00 fe       	sbrs	r0, 0
    318e:	fd cf       	rjmp	.-6      	; 0x318a <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	80 93 e3 07 	sts	0x07E3, r24
			EVENT_USB_Device_Connect();
    3196:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
    319a:	05 c0       	rjmp	.+10     	; 0x31a6 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    319c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    319e:	10 92 e3 07 	sts	0x07E3, r1
			EVENT_USB_Device_Disconnect();
    31a2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    31a6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    31aa:	80 ff       	sbrs	r24, 0
    31ac:	17 c0       	rjmp	.+46     	; 0x31dc <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    31ae:	80 91 e2 00 	lds	r24, 0x00E2
    31b2:	80 ff       	sbrs	r24, 0
    31b4:	13 c0       	rjmp	.+38     	; 0x31dc <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    31b6:	e2 ee       	ldi	r30, 0xE2	; 226
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8e 7f       	andi	r24, 0xFE	; 254
    31be:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    31c0:	80 81       	ld	r24, Z
    31c2:	80 61       	ori	r24, 0x10	; 16
    31c4:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    31c6:	e8 ed       	ldi	r30, 0xD8	; 216
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	80 62       	ori	r24, 0x20	; 32
    31ce:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    31d0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    31d2:	85 e0       	ldi	r24, 0x05	; 5
    31d4:	80 93 e3 07 	sts	0x07E3, r24
		EVENT_USB_Device_Suspend();
    31d8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    31dc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    31e0:	84 ff       	sbrs	r24, 4
    31e2:	30 c0       	rjmp	.+96     	; 0x3244 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    31e4:	80 91 e2 00 	lds	r24, 0x00E2
    31e8:	84 ff       	sbrs	r24, 4
    31ea:	2c c0       	rjmp	.+88     	; 0x3244 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    31ec:	80 e1       	ldi	r24, 0x10	; 16
    31ee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    31f0:	82 e1       	ldi	r24, 0x12	; 18
    31f2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    31f4:	09 b4       	in	r0, 0x29	; 41
    31f6:	00 fe       	sbrs	r0, 0
    31f8:	fd cf       	rjmp	.-6      	; 0x31f4 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    31fa:	e8 ed       	ldi	r30, 0xD8	; 216
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	8f 7d       	andi	r24, 0xDF	; 223
    3202:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3204:	e1 ee       	ldi	r30, 0xE1	; 225
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	8f 7e       	andi	r24, 0xEF	; 239
    320c:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    320e:	e2 ee       	ldi	r30, 0xE2	; 226
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	8f 7e       	andi	r24, 0xEF	; 239
    3216:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3218:	80 81       	ld	r24, Z
    321a:	81 60       	ori	r24, 0x01	; 1
    321c:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    321e:	80 91 df 07 	lds	r24, 0x07DF
    3222:	88 23       	and	r24, r24
    3224:	21 f0       	breq	.+8      	; 0x322e <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3226:	84 e0       	ldi	r24, 0x04	; 4
    3228:	80 93 e3 07 	sts	0x07E3, r24
    322c:	09 c0       	rjmp	.+18     	; 0x3240 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    322e:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3232:	88 23       	and	r24, r24
    3234:	14 f0       	brlt	.+4      	; 0x323a <__vector_10+0x11a>
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	01 c0       	rjmp	.+2      	; 0x323c <__vector_10+0x11c>
    323a:	83 e0       	ldi	r24, 0x03	; 3
    323c:	80 93 e3 07 	sts	0x07E3, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3240:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3244:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3248:	83 ff       	sbrs	r24, 3
    324a:	25 c0       	rjmp	.+74     	; 0x3296 <__vector_10+0x176>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    324c:	80 91 e2 00 	lds	r24, 0x00E2
    3250:	83 ff       	sbrs	r24, 3
    3252:	21 c0       	rjmp	.+66     	; 0x3296 <__vector_10+0x176>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3254:	e1 ee       	ldi	r30, 0xE1	; 225
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	87 7f       	andi	r24, 0xF7	; 247
    325c:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    325e:	82 e0       	ldi	r24, 0x02	; 2
    3260:	80 93 e3 07 	sts	0x07E3, r24
		USB_Device_ConfigurationNumber = 0;
    3264:	10 92 df 07 	sts	0x07DF, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3268:	80 81       	ld	r24, Z
    326a:	8e 7f       	andi	r24, 0xFE	; 254
    326c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    326e:	e2 ee       	ldi	r30, 0xE2	; 226
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	8e 7f       	andi	r24, 0xFE	; 254
    3276:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3278:	80 81       	ld	r24, Z
    327a:	80 61       	ori	r24, 0x10	; 16
    327c:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    327e:	42 e0       	ldi	r20, 0x02	; 2
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3288:	e0 ef       	ldi	r30, 0xF0	; 240
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	88 60       	ori	r24, 0x08	; 8
    3290:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3292:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3296:	ff 91       	pop	r31
    3298:	ef 91       	pop	r30
    329a:	bf 91       	pop	r27
    329c:	af 91       	pop	r26
    329e:	9f 91       	pop	r25
    32a0:	8f 91       	pop	r24
    32a2:	7f 91       	pop	r23
    32a4:	6f 91       	pop	r22
    32a6:	5f 91       	pop	r21
    32a8:	4f 91       	pop	r20
    32aa:	3f 91       	pop	r19
    32ac:	2f 91       	pop	r18
    32ae:	0f 90       	pop	r0
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	0f 90       	pop	r0
    32b4:	1f 90       	pop	r1
    32b6:	18 95       	reti

000032b8 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    32b8:	1f 92       	push	r1
    32ba:	0f 92       	push	r0
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	0f 92       	push	r0
    32c0:	11 24       	eor	r1, r1
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	2f 93       	push	r18
    32cc:	3f 93       	push	r19
    32ce:	4f 93       	push	r20
    32d0:	5f 93       	push	r21
    32d2:	6f 93       	push	r22
    32d4:	7f 93       	push	r23
    32d6:	8f 93       	push	r24
    32d8:	9f 93       	push	r25
    32da:	af 93       	push	r26
    32dc:	bf 93       	push	r27
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	ef 93       	push	r30
    32e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    32e6:	c0 91 e9 00 	lds	r28, 0x00E9
    32ea:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    32ec:	80 91 ec 00 	lds	r24, 0x00EC
    32f0:	d8 2f       	mov	r29, r24
    32f2:	d1 70       	andi	r29, 0x01	; 1
    32f4:	80 fd       	sbrc	r24, 0
    32f6:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    32f8:	0f 2e       	mov	r0, r31
    32fa:	f9 ee       	ldi	r31, 0xE9	; 233
    32fc:	ef 2e       	mov	r14, r31
    32fe:	f1 2c       	mov	r15, r1
    3300:	f0 2d       	mov	r31, r0
    3302:	f7 01       	movw	r30, r14
    3304:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3306:	00 ef       	ldi	r16, 0xF0	; 240
    3308:	10 e0       	ldi	r17, 0x00	; 0
    330a:	f8 01       	movw	r30, r16
    330c:	80 81       	ld	r24, Z
    330e:	87 7f       	andi	r24, 0xF7	; 247
    3310:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3312:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3314:	0e 94 ad 19 	call	0x335a	; 0x335a <USB_Device_ProcessControlRequest>
    3318:	f7 01       	movw	r30, r14
    331a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    331c:	f8 01       	movw	r30, r16
    331e:	80 81       	ld	r24, Z
    3320:	88 60       	ori	r24, 0x08	; 8
    3322:	80 83       	st	Z, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3324:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3326:	cf 70       	andi	r28, 0x0F	; 15
    3328:	f7 01       	movw	r30, r14
    332a:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    332c:	ff 91       	pop	r31
    332e:	ef 91       	pop	r30
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	bf 91       	pop	r27
    3336:	af 91       	pop	r26
    3338:	9f 91       	pop	r25
    333a:	8f 91       	pop	r24
    333c:	7f 91       	pop	r23
    333e:	6f 91       	pop	r22
    3340:	5f 91       	pop	r21
    3342:	4f 91       	pop	r20
    3344:	3f 91       	pop	r19
    3346:	2f 91       	pop	r18
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	0f 90       	pop	r0
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	0f 90       	pop	r0
    3356:	1f 90       	pop	r1
    3358:	18 95       	reti

0000335a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	aa 97       	sbiw	r28, 0x2a	; 42
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	e4 ee       	ldi	r30, 0xE4	; 228
    3374:	f7 e0       	ldi	r31, 0x07	; 7
    3376:	2c ee       	ldi	r18, 0xEC	; 236
    3378:	37 e0       	ldi	r19, 0x07	; 7
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    337a:	a1 ef       	ldi	r26, 0xF1	; 241
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3380:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3382:	e2 17       	cp	r30, r18
    3384:	f3 07       	cpc	r31, r19
    3386:	d9 f7       	brne	.-10     	; 0x337e <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3388:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    338c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3390:	83 ff       	sbrs	r24, 3
    3392:	2c c1       	rjmp	.+600    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3394:	e4 ee       	ldi	r30, 0xE4	; 228
    3396:	f7 e0       	ldi	r31, 0x07	; 7
    3398:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    339a:	31 81       	ldd	r19, Z+1	; 0x01
    339c:	83 2f       	mov	r24, r19
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	8a 30       	cpi	r24, 0x0A	; 10
    33a2:	91 05       	cpc	r25, r1
    33a4:	08 f0       	brcs	.+2      	; 0x33a8 <USB_Device_ProcessControlRequest+0x4e>
    33a6:	22 c1       	rjmp	.+580    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
    33a8:	fc 01       	movw	r30, r24
    33aa:	ea 52       	subi	r30, 0x2A	; 42
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    33b2:	20 38       	cpi	r18, 0x80	; 128
    33b4:	21 f0       	breq	.+8      	; 0x33be <USB_Device_ProcessControlRequest+0x64>
    33b6:	22 38       	cpi	r18, 0x82	; 130
    33b8:	09 f0       	breq	.+2      	; 0x33bc <USB_Device_ProcessControlRequest+0x62>
    33ba:	18 c1       	rjmp	.+560    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
    33bc:	08 c0       	rjmp	.+16     	; 0x33ce <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    33be:	80 91 e0 07 	lds	r24, 0x07E0
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    33c2:	90 91 e1 07 	lds	r25, 0x07E1
    33c6:	99 23       	and	r25, r25
    33c8:	71 f0       	breq	.+28     	; 0x33e6 <USB_Device_ProcessControlRequest+0x8c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    33ca:	82 60       	ori	r24, 0x02	; 2
    33cc:	0c c0       	rjmp	.+24     	; 0x33e6 <USB_Device_ProcessControlRequest+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    33ce:	80 91 e8 07 	lds	r24, 0x07E8
    33d2:	8f 70       	andi	r24, 0x0F	; 15
    33d4:	e9 ee       	ldi	r30, 0xE9	; 233
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    33da:	80 91 eb 00 	lds	r24, 0x00EB
    33de:	85 fb       	bst	r24, 5
    33e0:	88 27       	eor	r24, r24
    33e2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    33e4:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    33e6:	e8 ee       	ldi	r30, 0xE8	; 232
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	90 81       	ld	r25, Z
    33ec:	97 7f       	andi	r25, 0xF7	; 247
    33ee:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    33f0:	a1 ef       	ldi	r26, 0xF1	; 241
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    33f6:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    33f8:	80 81       	ld	r24, Z
    33fa:	8e 77       	andi	r24, 0x7E	; 126
    33fc:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    33fe:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Endpoint_ClearStatusStage>
    3402:	f4 c0       	rjmp	.+488    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3404:	22 23       	and	r18, r18
    3406:	09 f4       	brne	.+2      	; 0x340a <USB_Device_ProcessControlRequest+0xb0>
    3408:	00 c1       	rjmp	.+512    	; 0x360a <USB_Device_ProcessControlRequest+0x2b0>
    340a:	22 30       	cpi	r18, 0x02	; 2
    340c:	09 f0       	breq	.+2      	; 0x3410 <USB_Device_ProcessControlRequest+0xb6>
    340e:	ee c0       	rjmp	.+476    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
    3410:	01 c1       	rjmp	.+514    	; 0x3614 <USB_Device_ProcessControlRequest+0x2ba>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	33 30       	cpi	r19, 0x03	; 3
    3416:	09 f0       	breq	.+2      	; 0x341a <USB_Device_ProcessControlRequest+0xc0>
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	80 93 e1 07 	sts	0x07E1, r24
    341e:	29 c0       	rjmp	.+82     	; 0x3472 <USB_Device_ProcessControlRequest+0x118>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3420:	80 91 e8 07 	lds	r24, 0x07E8
    3424:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3426:	09 f4       	brne	.+2      	; 0x342a <USB_Device_ProcessControlRequest+0xd0>
    3428:	e1 c0       	rjmp	.+450    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    342a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    342e:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3432:	90 ff       	sbrs	r25, 0
    3434:	1e c0       	rjmp	.+60     	; 0x3472 <USB_Device_ProcessControlRequest+0x118>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3436:	90 91 e5 07 	lds	r25, 0x07E5
    343a:	93 30       	cpi	r25, 0x03	; 3
    343c:	31 f4       	brne	.+12     	; 0x344a <USB_Device_ProcessControlRequest+0xf0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    343e:	eb ee       	ldi	r30, 0xEB	; 235
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	80 62       	ori	r24, 0x20	; 32
    3446:	80 83       	st	Z, r24
    3448:	14 c0       	rjmp	.+40     	; 0x3472 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    344a:	eb ee       	ldi	r30, 0xEB	; 235
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	90 81       	ld	r25, Z
    3450:	90 61       	ori	r25, 0x10	; 16
    3452:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	a9 01       	movw	r20, r18
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <USB_Device_ProcessControlRequest+0x106>
    345c:	44 0f       	add	r20, r20
    345e:	55 1f       	adc	r21, r21
    3460:	8a 95       	dec	r24
    3462:	e2 f7       	brpl	.-8      	; 0x345c <USB_Device_ProcessControlRequest+0x102>
    3464:	aa ee       	ldi	r26, 0xEA	; 234
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	4c 93       	st	X, r20
				UERST = 0;
    346a:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    346c:	80 81       	ld	r24, Z
    346e:	88 60       	ori	r24, 0x08	; 8
    3470:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3472:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3476:	e8 ee       	ldi	r30, 0xE8	; 232
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	87 7f       	andi	r24, 0xF7	; 247
    347e:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3480:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Endpoint_ClearStatusStage>
    3484:	b3 c0       	rjmp	.+358    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3486:	21 11       	cpse	r18, r1
    3488:	b1 c0       	rjmp	.+354    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    348a:	10 91 e6 07 	lds	r17, 0x07E6
    348e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3490:	e3 ee       	ldi	r30, 0xE3	; 227
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	80 78       	andi	r24, 0x80	; 128
    3498:	81 2b       	or	r24, r17
    349a:	80 83       	st	Z, r24
    349c:	e8 ee       	ldi	r30, 0xE8	; 232
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	87 7f       	andi	r24, 0xF7	; 247
    34a4:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    34a6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    34aa:	e8 ee       	ldi	r30, 0xE8	; 232
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    34b0:	80 ff       	sbrs	r24, 0
    34b2:	fd cf       	rjmp	.-6      	; 0x34ae <USB_Device_ProcessControlRequest+0x154>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    34b4:	e3 ee       	ldi	r30, 0xE3	; 227
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 68       	ori	r24, 0x80	; 128
    34bc:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    34be:	11 11       	cpse	r17, r1
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <USB_Device_ProcessControlRequest+0x16c>
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <USB_Device_ProcessControlRequest+0x16e>
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	80 93 e3 07 	sts	0x07E3, r24
    34cc:	8f c0       	rjmp	.+286    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    34ce:	20 58       	subi	r18, 0x80	; 128
    34d0:	22 30       	cpi	r18, 0x02	; 2
    34d2:	08 f0       	brcs	.+2      	; 0x34d6 <USB_Device_ProcessControlRequest+0x17c>
    34d4:	8b c0       	rjmp	.+278    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    34d6:	80 91 e6 07 	lds	r24, 0x07E6
    34da:	90 91 e7 07 	lds	r25, 0x07E7
    34de:	8c 3d       	cpi	r24, 0xDC	; 220
    34e0:	53 e0       	ldi	r21, 0x03	; 3
    34e2:	95 07       	cpc	r25, r21
    34e4:	a1 f5       	brne	.+104    	; 0x354e <USB_Device_ProcessControlRequest+0x1f4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    34e6:	83 e0       	ldi	r24, 0x03	; 3
    34e8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    34ea:	8a e2       	ldi	r24, 0x2A	; 42
    34ec:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    34ee:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    34f0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    34f2:	de 01       	movw	r26, r28
    34f4:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    34f6:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    34f8:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    34fa:	41 e2       	ldi	r20, 0x21	; 33
    34fc:	e3 2f       	mov	r30, r19
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	40 93 57 00 	sts	0x0057, r20
    3504:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    3506:	20 ff       	sbrs	r18, 0
    3508:	03 c0       	rjmp	.+6      	; 0x3510 <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
    350a:	82 95       	swap	r24
    350c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    350e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3510:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3512:	8a 30       	cpi	r24, 0x0A	; 10
    3514:	18 f0       	brcs	.+6      	; 0x351c <USB_Device_ProcessControlRequest+0x1c2>
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	c7 96       	adiw	r24, 0x37	; 55
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <USB_Device_ProcessControlRequest+0x1c6>
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	c0 96       	adiw	r24, 0x30	; 48
    3520:	8d 93       	st	X+, r24
    3522:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3524:	2f 5f       	subi	r18, 0xFF	; 255
    3526:	24 31       	cpi	r18, 0x14	; 20
    3528:	49 f7       	brne	.-46     	; 0x34fc <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    352a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    352c:	08 ee       	ldi	r16, 0xE8	; 232
    352e:	10 e0       	ldi	r17, 0x00	; 0
    3530:	f8 01       	movw	r30, r16
    3532:	80 81       	ld	r24, Z
    3534:	87 7f       	andi	r24, 0xF7	; 247
    3536:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3538:	6a e2       	ldi	r22, 0x2A	; 42
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	ce 01       	movw	r24, r28
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3544:	f8 01       	movw	r30, r16
    3546:	80 81       	ld	r24, Z
    3548:	8b 77       	andi	r24, 0x7B	; 123
    354a:	80 83       	st	Z, r24
    354c:	4f c0       	rjmp	.+158    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    354e:	ae 01       	movw	r20, r28
    3550:	4f 5f       	subi	r20, 0xFF	; 255
    3552:	5f 4f       	sbci	r21, 0xFF	; 255
    3554:	60 91 e8 07 	lds	r22, 0x07E8
    3558:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <CALLBACK_USB_GetDescriptor>
    355c:	bc 01       	movw	r22, r24
    355e:	89 2b       	or	r24, r25
    3560:	09 f4       	brne	.+2      	; 0x3564 <USB_Device_ProcessControlRequest+0x20a>
    3562:	44 c0       	rjmp	.+136    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3564:	08 ee       	ldi	r16, 0xE8	; 232
    3566:	10 e0       	ldi	r17, 0x00	; 0
    3568:	f8 01       	movw	r30, r16
    356a:	90 81       	ld	r25, Z
    356c:	97 7f       	andi	r25, 0xF7	; 247
    356e:	90 83       	st	Z, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3578:	f8 01       	movw	r30, r16
    357a:	80 81       	ld	r24, Z
    357c:	8b 77       	andi	r24, 0x7B	; 123
    357e:	80 83       	st	Z, r24
    3580:	35 c0       	rjmp	.+106    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3582:	20 38       	cpi	r18, 0x80	; 128
    3584:	99 f5       	brne	.+102    	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3586:	e8 ee       	ldi	r30, 0xE8	; 232
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	87 7f       	andi	r24, 0xF7	; 247
    358e:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3590:	80 91 df 07 	lds	r24, 0x07DF
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3594:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3598:	80 81       	ld	r24, Z
    359a:	8e 77       	andi	r24, 0x7E	; 126
    359c:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    359e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Endpoint_ClearStatusStage>
    35a2:	24 c0       	rjmp	.+72     	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    35a4:	21 11       	cpse	r18, r1
    35a6:	22 c0       	rjmp	.+68     	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    35a8:	80 91 e6 07 	lds	r24, 0x07E6
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	f0 f4       	brcc	.+60     	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35b0:	e8 ee       	ldi	r30, 0xE8	; 232
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	87 7f       	andi	r24, 0xF7	; 247
    35b8:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    35ba:	80 91 e6 07 	lds	r24, 0x07E6
    35be:	80 93 df 07 	sts	0x07DF, r24

	Endpoint_ClearStatusStage();
    35c2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    35c6:	80 91 df 07 	lds	r24, 0x07DF
    35ca:	88 23       	and	r24, r24
    35cc:	21 f0       	breq	.+8      	; 0x35d6 <USB_Device_ProcessControlRequest+0x27c>
	  USB_DeviceState = DEVICE_STATE_Configured;
    35ce:	84 e0       	ldi	r24, 0x04	; 4
    35d0:	80 93 e3 07 	sts	0x07E3, r24
    35d4:	09 c0       	rjmp	.+18     	; 0x35e8 <USB_Device_ProcessControlRequest+0x28e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    35d6:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    35da:	88 23       	and	r24, r24
    35dc:	14 f0       	brlt	.+4      	; 0x35e2 <USB_Device_ProcessControlRequest+0x288>
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	01 c0       	rjmp	.+2      	; 0x35e4 <USB_Device_ProcessControlRequest+0x28a>
    35e2:	84 e0       	ldi	r24, 0x04	; 4
    35e4:	80 93 e3 07 	sts	0x07E3, r24

	EVENT_USB_Device_ConfigurationChanged();
    35e8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    35ec:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    35f0:	83 ff       	sbrs	r24, 3
    35f2:	16 c0       	rjmp	.+44     	; 0x3620 <USB_Device_ProcessControlRequest+0x2c6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35f4:	e8 ee       	ldi	r30, 0xE8	; 232
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	87 7f       	andi	r24, 0xF7	; 247
    35fc:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    35fe:	eb ee       	ldi	r30, 0xEB	; 235
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	80 62       	ori	r24, 0x20	; 32
    3606:	80 83       	st	Z, r24
    3608:	0b c0       	rjmp	.+22     	; 0x3620 <USB_Device_ProcessControlRequest+0x2c6>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    360a:	80 91 e6 07 	lds	r24, 0x07E6
    360e:	81 30       	cpi	r24, 0x01	; 1
    3610:	69 f7       	brne	.-38     	; 0x35ec <USB_Device_ProcessControlRequest+0x292>
    3612:	ff ce       	rjmp	.-514    	; 0x3412 <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3614:	80 91 e6 07 	lds	r24, 0x07E6
    3618:	88 23       	and	r24, r24
    361a:	09 f4       	brne	.+2      	; 0x361e <USB_Device_ProcessControlRequest+0x2c4>
    361c:	01 cf       	rjmp	.-510    	; 0x3420 <USB_Device_ProcessControlRequest+0xc6>
    361e:	29 cf       	rjmp	.-430    	; 0x3472 <USB_Device_ProcessControlRequest+0x118>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3620:	aa 96       	adiw	r28, 0x2a	; 42
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3636:	08 95       	ret

00003638 <_ZN6Analog4initEv>:

    //def const

}

void Analog::init() {
    3638:	cf 92       	push	r12
    363a:	df 92       	push	r13
    363c:	ef 92       	push	r14
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	6e 97       	sbiw	r28, 0x1e	; 30
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61

    const subtype analogEnabledSubtype       = { MAX_NUMBER_OF_ANALOG, 0, 1 };
    3656:	80 e2       	ldi	r24, 0x20	; 32
    3658:	8c 8f       	std	Y+28, r24	; 0x1c
    365a:	1d 8e       	std	Y+29, r1	; 0x1d
    365c:	91 e0       	ldi	r25, 0x01	; 1
    365e:	9e 8f       	std	Y+30, r25	; 0x1e
    const subtype analogInvertedSubtype      = { MAX_NUMBER_OF_ANALOG, 0, 1 };
    3660:	89 8f       	std	Y+25, r24	; 0x19
    3662:	1a 8e       	std	Y+26, r1	; 0x1a
    3664:	9b 8f       	std	Y+27, r25	; 0x1b
    const subtype analogTypeSubtype          = { MAX_NUMBER_OF_ANALOG, 0, ANALOG_TYPES-1 };
    3666:	8e 8b       	std	Y+22, r24	; 0x16
    3668:	1f 8a       	std	Y+23, r1	; 0x17
    366a:	92 e0       	ldi	r25, 0x02	; 2
    366c:	98 8f       	std	Y+24, r25	; 0x18
    const subtype analogMIDIidSubtype        = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    366e:	8b 8b       	std	Y+19, r24	; 0x13
    3670:	1c 8a       	std	Y+20, r1	; 0x14
    3672:	9f e7       	ldi	r25, 0x7F	; 127
    3674:	9d 8b       	std	Y+21, r25	; 0x15
    const subtype analogCClowerLimitSubtype  = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    3676:	88 8b       	std	Y+16, r24	; 0x10
    3678:	19 8a       	std	Y+17, r1	; 0x11
    367a:	9a 8b       	std	Y+18, r25	; 0x12
    const subtype analogCCupperLimitSubtype  = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    367c:	8d 87       	std	Y+13, r24	; 0x0d
    367e:	1e 86       	std	Y+14, r1	; 0x0e
    3680:	9f 87       	std	Y+15, r25	; 0x0f
        &analogInvertedSubtype,
        &analogMIDIidSubtype,
        &analogCClowerLimitSubtype,
        &analogCCupperLimitSubtype

    };
    3682:	ce 01       	movw	r24, r28
    3684:	4c 96       	adiw	r24, 0x1c	; 28
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	06 97       	sbiw	r24, 0x06	; 6
    368c:	9c 83       	std	Y+4, r25	; 0x04
    368e:	8b 83       	std	Y+3, r24	; 0x03
    3690:	03 96       	adiw	r24, 0x03	; 3
    3692:	9e 83       	std	Y+6, r25	; 0x06
    3694:	8d 83       	std	Y+5, r24	; 0x05
    3696:	06 97       	sbiw	r24, 0x06	; 6
    3698:	98 87       	std	Y+8, r25	; 0x08
    369a:	8f 83       	std	Y+7, r24	; 0x07
    369c:	03 97       	sbiw	r24, 0x03	; 3
    369e:	9a 87       	std	Y+10, r25	; 0x0a
    36a0:	89 87       	std	Y+9, r24	; 0x09
    36a2:	03 97       	sbiw	r24, 0x03	; 3
    36a4:	9c 87       	std	Y+12, r25	; 0x0c
    36a6:	8b 87       	std	Y+11, r24	; 0x0b

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ANALOG_BLOCK, ANALOG_SUBTYPES);
    36a8:	46 e0       	ldi	r20, 0x06	; 6
    36aa:	63 e0       	ldi	r22, 0x03	; 3
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	97 e0       	ldi	r25, 0x07	; 7
    36b0:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5SysEx14addMessageTypeEhh>
    36b4:	ce 01       	movw	r24, r28
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	6c 01       	movw	r12, r24
    36ba:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<ANALOG_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_ANALOG_BLOCK, i, analogSubtypeArray[i]->parameters, analogSubtypeArray[i]->lowValue, analogSubtypeArray[i]->highValue);
    36bc:	d6 01       	movw	r26, r12
    36be:	ed 91       	ld	r30, X+
    36c0:	fd 91       	ld	r31, X+
    36c2:	6d 01       	movw	r12, r26
    36c4:	e2 80       	ldd	r14, Z+2	; 0x02
    36c6:	01 81       	ldd	r16, Z+1	; 0x01
    36c8:	20 81       	ld	r18, Z
    36ca:	41 2f       	mov	r20, r17
    36cc:	63 e0       	ldi	r22, 0x03	; 3
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	97 e0       	ldi	r25, 0x07	; 7
    36d2:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN5SysEx17addMessageSubTypeEhhhhh>
    36d6:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ANALOG_BLOCK, ANALOG_SUBTYPES);

    for (int i=0; i<ANALOG_SUBTYPES; i++)   {
    36d8:	16 30       	cpi	r17, 0x06	; 6
    36da:	81 f7       	brne	.-32     	; 0x36bc <_ZN6Analog4initEv+0x84>
        //define subtype messages
        sysEx.addMessageSubType(CONF_ANALOG_BLOCK, i, analogSubtypeArray[i]->parameters, analogSubtypeArray[i]->lowValue, analogSubtypeArray[i]->highValue);

    }

}
    36dc:	6e 96       	adiw	r28, 0x1e	; 30
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	ef 90       	pop	r14
    36f2:	df 90       	pop	r13
    36f4:	cf 90       	pop	r12
    36f6:	08 95       	ret

000036f8 <_ZN6Analog14getMedianValueEh>:

    }   return false;

}

int16_t Analog::getMedianValue(uint8_t analogID)  {
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29

    int16_t medianValue = 0;

    if ((analogSample[analogID][0] <= analogSample[analogID][1]) && (analogSample[analogID][0] <= analogSample[analogID][2]))
    36fc:	46 2f       	mov	r20, r22
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	9c 01       	movw	r18, r24
    3702:	78 e0       	ldi	r23, 0x08	; 8
    3704:	67 9f       	mul	r22, r23
    3706:	20 0d       	add	r18, r0
    3708:	31 1d       	adc	r19, r1
    370a:	11 24       	eor	r1, r1
    370c:	f9 01       	movw	r30, r18
    370e:	eb 59       	subi	r30, 0x9B	; 155
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	32 96       	adiw	r30, 0x02	; 2
    3718:	a0 81       	ld	r26, Z
    371a:	b1 81       	ldd	r27, Z+1	; 0x01
    371c:	a6 17       	cp	r26, r22
    371e:	b7 07       	cpc	r27, r23
    3720:	cc f0       	brlt	.+50     	; 0x3754 <_ZN6Analog14getMedianValueEh+0x5c>
    3722:	ea 01       	movw	r28, r20
    3724:	cc 0f       	add	r28, r28
    3726:	dd 1f       	adc	r29, r29
    3728:	cc 0f       	add	r28, r28
    372a:	dd 1f       	adc	r29, r29
    372c:	cc 0f       	add	r28, r28
    372e:	dd 1f       	adc	r29, r29
    3730:	c8 0f       	add	r28, r24
    3732:	d9 1f       	adc	r29, r25
    3734:	c7 59       	subi	r28, 0x97	; 151
    3736:	df 4f       	sbci	r29, 0xFF	; 255
    3738:	28 81       	ld	r18, Y
    373a:	39 81       	ldd	r19, Y+1	; 0x01
    373c:	26 17       	cp	r18, r22
    373e:	37 07       	cpc	r19, r23
    3740:	34 f0       	brlt	.+12     	; 0x374e <_ZN6Analog14getMedianValueEh+0x56>
    3742:	c9 01       	movw	r24, r18
    3744:	a2 17       	cp	r26, r18
    3746:	b3 07       	cpc	r27, r19
    3748:	fc f4       	brge	.+62     	; 0x3788 <_ZN6Analog14getMedianValueEh+0x90>
    374a:	cd 01       	movw	r24, r26
    374c:	1d c0       	rjmp	.+58     	; 0x3788 <_ZN6Analog14getMedianValueEh+0x90>
    medianValue = (analogSample[analogID][1] <= analogSample[analogID][2]) ? analogSample[analogID][1] : analogSample[analogID][2];

    else if ((analogSample[analogID][1] <= analogSample[analogID][0]) && (analogSample[analogID][1] <= analogSample[analogID][2]))
    374e:	6a 17       	cp	r22, r26
    3750:	7b 07       	cpc	r23, r27
    3752:	ac f0       	brlt	.+42     	; 0x377e <_ZN6Analog14getMedianValueEh+0x86>
    3754:	44 0f       	add	r20, r20
    3756:	55 1f       	adc	r21, r21
    3758:	44 0f       	add	r20, r20
    375a:	55 1f       	adc	r21, r21
    375c:	44 0f       	add	r20, r20
    375e:	55 1f       	adc	r21, r21
    3760:	84 0f       	add	r24, r20
    3762:	95 1f       	adc	r25, r21
    3764:	fc 01       	movw	r30, r24
    3766:	e7 59       	subi	r30, 0x97	; 151
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	8a 17       	cp	r24, r26
    3770:	9b 07       	cpc	r25, r27
    3772:	2c f0       	brlt	.+10     	; 0x377e <_ZN6Analog14getMedianValueEh+0x86>
    3774:	68 17       	cp	r22, r24
    3776:	79 07       	cpc	r23, r25
    3778:	3c f4       	brge	.+14     	; 0x3788 <_ZN6Analog14getMedianValueEh+0x90>
    377a:	cb 01       	movw	r24, r22
    377c:	05 c0       	rjmp	.+10     	; 0x3788 <_ZN6Analog14getMedianValueEh+0x90>
    377e:	cd 01       	movw	r24, r26
    3780:	6a 17       	cp	r22, r26
    3782:	7b 07       	cpc	r23, r27
    3784:	0c f4       	brge	.+2      	; 0x3788 <_ZN6Analog14getMedianValueEh+0x90>
    3786:	cb 01       	movw	r24, r22
    medianValue = (analogSample[analogID][0] <= analogSample[analogID][1]) ? analogSample[analogID][0] : analogSample[analogID][1];


    return medianValue;

}
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	08 95       	ret

0000378e <_ZN6Analog16getAnalogEnabledEh>:

bool Analog::getAnalogEnabled(uint8_t analogID) {
    378e:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3790:	20 91 00 02 	lds	r18, 0x0200
    3794:	30 91 01 02 	lds	r19, 0x0201
    3798:	80 91 fe 01 	lds	r24, 0x01FE
    379c:	90 91 ff 01 	lds	r25, 0x01FF
    37a0:	82 0f       	add	r24, r18
    37a2:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    37a4:	20 91 12 02 	lds	r18, 0x0212
    37a8:	22 23       	and	r18, r18
    37aa:	a9 f0       	breq	.+42     	; 0x37d6 <_ZN6Analog16getAnalogEnabledEh+0x48>
    37ac:	21 30       	cpi	r18, 0x01	; 1
    37ae:	c9 f4       	brne	.+50     	; 0x37e2 <_ZN6Analog16getAnalogEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    37b0:	26 2f       	mov	r18, r22
    37b2:	26 95       	lsr	r18
    37b4:	26 95       	lsr	r18
    37b6:	26 95       	lsr	r18
    37b8:	c6 2f       	mov	r28, r22
    37ba:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    37bc:	82 0f       	add	r24, r18
    37be:	91 1d       	adc	r25, r1
    37c0:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <_ZN6Analog16getAnalogEnabledEh+0x3e>
    37c8:	95 95       	asr	r25
    37ca:	87 95       	ror	r24
    37cc:	ca 95       	dec	r28
    37ce:	e2 f7       	brpl	.-8      	; 0x37c8 <_ZN6Analog16getAnalogEnabledEh+0x3a>
    37d0:	98 2f       	mov	r25, r24
    37d2:	91 70       	andi	r25, 0x01	; 1
    37d4:	07 c0       	rjmp	.+14     	; 0x37e4 <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    37d6:	86 0f       	add	r24, r22
    37d8:	91 1d       	adc	r25, r1
    37da:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    37de:	98 2f       	mov	r25, r24
    37e0:	01 c0       	rjmp	.+2      	; 0x37e4 <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

        }   return 0;
    37e2:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	91 11       	cpse	r25, r1
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <_ZN6Analog16getAnalogEnabledEh+0x5e>
    37ea:	80 e0       	ldi	r24, 0x00	; 0

}
    37ec:	cf 91       	pop	r28
    37ee:	08 95       	ret

000037f0 <_ZN6Analog20getAnalogInvertStateEh>:

bool Analog::getAnalogInvertState(uint8_t analogID) {
    37f0:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    37f2:	20 91 04 02 	lds	r18, 0x0204
    37f6:	30 91 05 02 	lds	r19, 0x0205
    37fa:	80 91 fe 01 	lds	r24, 0x01FE
    37fe:	90 91 ff 01 	lds	r25, 0x01FF
    3802:	82 0f       	add	r24, r18
    3804:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3806:	20 91 14 02 	lds	r18, 0x0214
    380a:	22 23       	and	r18, r18
    380c:	a9 f0       	breq	.+42     	; 0x3838 <_ZN6Analog20getAnalogInvertStateEh+0x48>
    380e:	21 30       	cpi	r18, 0x01	; 1
    3810:	c9 f4       	brne	.+50     	; 0x3844 <_ZN6Analog20getAnalogInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3812:	26 2f       	mov	r18, r22
    3814:	26 95       	lsr	r18
    3816:	26 95       	lsr	r18
    3818:	26 95       	lsr	r18
    381a:	c6 2f       	mov	r28, r22
    381c:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    381e:	82 0f       	add	r24, r18
    3820:	91 1d       	adc	r25, r1
    3822:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	02 c0       	rjmp	.+4      	; 0x382e <_ZN6Analog20getAnalogInvertStateEh+0x3e>
    382a:	95 95       	asr	r25
    382c:	87 95       	ror	r24
    382e:	ca 95       	dec	r28
    3830:	e2 f7       	brpl	.-8      	; 0x382a <_ZN6Analog20getAnalogInvertStateEh+0x3a>
    3832:	98 2f       	mov	r25, r24
    3834:	91 70       	andi	r25, 0x01	; 1
    3836:	07 c0       	rjmp	.+14     	; 0x3846 <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3838:	86 0f       	add	r24, r22
    383a:	91 1d       	adc	r25, r1
    383c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3840:	98 2f       	mov	r25, r24
    3842:	01 c0       	rjmp	.+2      	; 0x3846 <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

        }   return 0;
    3844:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID);
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	91 11       	cpse	r25, r1
    384a:	01 c0       	rjmp	.+2      	; 0x384e <_ZN6Analog20getAnalogInvertStateEh+0x5e>
    384c:	80 e0       	ldi	r24, 0x00	; 0

}
    384e:	cf 91       	pop	r28
    3850:	08 95       	ret

00003852 <_ZN6Analog13getAnalogTypeEh>:

analogType_t Analog::getAnalogType(uint8_t analogID) {
    3852:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3854:	20 91 02 02 	lds	r18, 0x0202
    3858:	30 91 03 02 	lds	r19, 0x0203
    385c:	80 91 fe 01 	lds	r24, 0x01FE
    3860:	90 91 ff 01 	lds	r25, 0x01FF
    3864:	82 0f       	add	r24, r18
    3866:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3868:	20 91 13 02 	lds	r18, 0x0213
    386c:	22 23       	and	r18, r18
    386e:	a1 f0       	breq	.+40     	; 0x3898 <_ZN6Analog13getAnalogTypeEh+0x46>
    3870:	21 30       	cpi	r18, 0x01	; 1
    3872:	b9 f4       	brne	.+46     	; 0x38a2 <_ZN6Analog13getAnalogTypeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3874:	26 2f       	mov	r18, r22
    3876:	26 95       	lsr	r18
    3878:	26 95       	lsr	r18
    387a:	26 95       	lsr	r18
    387c:	c6 2f       	mov	r28, r22
    387e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3880:	82 0f       	add	r24, r18
    3882:	91 1d       	adc	r25, r1
    3884:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <_ZN6Analog13getAnalogTypeEh+0x3e>
    388c:	95 95       	asr	r25
    388e:	87 95       	ror	r24
    3890:	ca 95       	dec	r28
    3892:	e2 f7       	brpl	.-8      	; 0x388c <_ZN6Analog13getAnalogTypeEh+0x3a>
    3894:	81 70       	andi	r24, 0x01	; 1
    3896:	06 c0       	rjmp	.+12     	; 0x38a4 <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3898:	86 0f       	add	r24, r22
    389a:	91 1d       	adc	r25, r1
    389c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    38a0:	01 c0       	rjmp	.+2      	; 0x38a4 <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

        }   return 0;
    38a2:	80 e0       	ldi	r24, 0x00	; 0

    return (analogType_t)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}
    38a4:	cf 91       	pop	r28
    38a6:	08 95       	ret

000038a8 <_ZN6Analog6updateEv>:

    }

}

void Analog::update()   {
    38a8:	df 92       	push	r13
    38aa:	ef 92       	push	r14
    38ac:	ff 92       	push	r15
    38ae:	0f 93       	push	r16
    38b0:	1f 93       	push	r17
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	8c 01       	movw	r16, r24

    if (!board.analogDataAvailable()) return;
    38b8:	81 e4       	ldi	r24, 0x41	; 65
    38ba:	92 e0       	ldi	r25, 0x02	; 2
    38bc:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN5Board19analogDataAvailableEv>
    38c0:	88 23       	and	r24, r24
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <_ZN6Analog6updateEv+0x1e>
    38c4:	4e c0       	rjmp	.+156    	; 0x3962 <_ZN6Analog6updateEv+0xba>
    38c6:	c0 e0       	ldi	r28, 0x00	; 0
    38c8:	d0 e0       	ldi	r29, 0x00	; 0
    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {

        analogData = board.getAnalogValue(i); //get raw analog reading
    38ca:	6c 2f       	mov	r22, r28
    38cc:	81 e4       	ldi	r24, 0x41	; 65
    38ce:	92 e0       	ldi	r25, 0x02	; 2
    38d0:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN5Board14getAnalogValueEh>
    38d4:	7c 01       	movw	r14, r24
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
    38d6:	6c 2f       	mov	r22, r28
    38d8:	c8 01       	movw	r24, r16
    38da:	0e 94 c7 1b 	call	0x378e	; 0x378e <_ZN6Analog16getAnalogEnabledEh>
    38de:	88 23       	and	r24, r24
    38e0:	d9 f1       	breq	.+118    	; 0x3958 <_ZN6Analog6updateEv+0xb0>

}

void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];
    38e2:	ce 01       	movw	r24, r28
    38e4:	99 27       	eor	r25, r25
    38e6:	f8 01       	movw	r30, r16
    38e8:	e8 0f       	add	r30, r24
    38ea:	f9 1f       	adc	r31, r25
    38ec:	20 81       	ld	r18, Z

    analogSample[analogID][sampleIndex] = sample;
    38ee:	fc 01       	movw	r30, r24
    38f0:	ee 0f       	add	r30, r30
    38f2:	ff 1f       	adc	r31, r31
    38f4:	ee 0f       	add	r30, r30
    38f6:	ff 1f       	adc	r31, r31
    38f8:	e2 0f       	add	r30, r18
    38fa:	f1 1d       	adc	r31, r1
    38fc:	ee 0f       	add	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	e0 0f       	add	r30, r16
    3902:	f1 1f       	adc	r31, r17
    3904:	eb 59       	subi	r30, 0x9B	; 155
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	f1 82       	std	Z+1, r15	; 0x01
    390a:	e0 82       	st	Z, r14
    analogDebounceCounter[analogID]++;
    390c:	2f 5f       	subi	r18, 0xFF	; 255

}

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {
    390e:	23 30       	cpi	r18, 0x03	; 3
    3910:	29 f0       	breq	.+10     	; 0x391c <_ZN6Analog6updateEv+0x74>
void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];

    analogSample[analogID][sampleIndex] = sample;
    analogDebounceCounter[analogID]++;
    3912:	f8 01       	movw	r30, r16
    3914:	e8 0f       	add	r30, r24
    3916:	f9 1f       	adc	r31, r25
    3918:	20 83       	st	Z, r18
    391a:	1e c0       	rjmp	.+60     	; 0x3958 <_ZN6Analog6updateEv+0xb0>

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {

        analogDebounceCounter[analogID] = 0;
    391c:	f8 01       	movw	r30, r16
    391e:	e8 0f       	add	r30, r24
    3920:	f9 1f       	adc	r31, r25
    3922:	10 82       	st	Z, r1

        analogData = board.getAnalogValue(i); //get raw analog reading
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
        addAnalogSample(i, analogData);
        if (!analogValueSampled(i)) continue;  //three samples are needed
        analogData = getMedianValue(i);  //get median value from three analog samples for better accuracy
    3924:	6c 2f       	mov	r22, r28
    3926:	c8 01       	movw	r24, r16
    3928:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <_ZN6Analog14getMedianValueEh>
    392c:	7c 01       	movw	r14, r24
        analogType_t type = getAnalogType(i);
    392e:	6c 2f       	mov	r22, r28
    3930:	c8 01       	movw	r24, r16
    3932:	0e 94 29 1c 	call	0x3852	; 0x3852 <_ZN6Analog13getAnalogTypeEh>

        switch(type) {
    3936:	81 30       	cpi	r24, 0x01	; 1
    3938:	51 f0       	breq	.+20     	; 0x394e <_ZN6Analog6updateEv+0xa6>
    393a:	18 f0       	brcs	.+6      	; 0x3942 <_ZN6Analog6updateEv+0x9a>
    393c:	82 30       	cpi	r24, 0x02	; 2
    393e:	61 f0       	breq	.+24     	; 0x3958 <_ZN6Analog6updateEv+0xb0>
    3940:	10 c0       	rjmp	.+32     	; 0x3962 <_ZN6Analog6updateEv+0xba>

            case potentiometer:
            checkPotentiometerValue(i, analogData);
    3942:	a7 01       	movw	r20, r14
    3944:	6c 2f       	mov	r22, r28
    3946:	c8 01       	movw	r24, r16
    3948:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6Analog23checkPotentiometerValueEhi>
            break;
    394c:	05 c0       	rjmp	.+10     	; 0x3958 <_ZN6Analog6updateEv+0xb0>

            case fsr:
            checkFSRvalue(i, analogData);
    394e:	a7 01       	movw	r20, r14
    3950:	6c 2f       	mov	r22, r28
    3952:	c8 01       	movw	r24, r16
    3954:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN6Analog13checkFSRvalueEhi>
    if (!board.analogDataAvailable()) return;

    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {
    3958:	21 96       	adiw	r28, 0x01	; 1
    395a:	c0 32       	cpi	r28, 0x20	; 32
    395c:	d1 05       	cpc	r29, r1
    395e:	09 f0       	breq	.+2      	; 0x3962 <_ZN6Analog6updateEv+0xba>
    3960:	b4 cf       	rjmp	.-152    	; 0x38ca <_ZN6Analog6updateEv+0x22>

        }

    }

}
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	ff 90       	pop	r15
    396c:	ef 90       	pop	r14
    396e:	df 90       	pop	r13
    3970:	08 95       	ret

00003972 <_ZN6Analog9getMIDIidEh>:

    return (analogType_t)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}

uint8_t Analog::getMIDIid(uint8_t analogID)    {
    3972:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3974:	20 91 06 02 	lds	r18, 0x0206
    3978:	30 91 07 02 	lds	r19, 0x0207
    397c:	80 91 fe 01 	lds	r24, 0x01FE
    3980:	90 91 ff 01 	lds	r25, 0x01FF
    3984:	82 0f       	add	r24, r18
    3986:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3988:	20 91 15 02 	lds	r18, 0x0215
    398c:	22 23       	and	r18, r18
    398e:	a1 f0       	breq	.+40     	; 0x39b8 <_ZN6Analog9getMIDIidEh+0x46>
    3990:	21 30       	cpi	r18, 0x01	; 1
    3992:	b9 f4       	brne	.+46     	; 0x39c2 <_ZN6Analog9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3994:	26 2f       	mov	r18, r22
    3996:	26 95       	lsr	r18
    3998:	26 95       	lsr	r18
    399a:	26 95       	lsr	r18
    399c:	c6 2f       	mov	r28, r22
    399e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    39a0:	82 0f       	add	r24, r18
    39a2:	91 1d       	adc	r25, r1
    39a4:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <_ZN6Analog9getMIDIidEh+0x3e>
    39ac:	95 95       	asr	r25
    39ae:	87 95       	ror	r24
    39b0:	ca 95       	dec	r28
    39b2:	e2 f7       	brpl	.-8      	; 0x39ac <_ZN6Analog9getMIDIidEh+0x3a>
    39b4:	81 70       	andi	r24, 0x01	; 1
    39b6:	06 c0       	rjmp	.+12     	; 0x39c4 <_ZN6Analog9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    39b8:	86 0f       	add	r24, r22
    39ba:	91 1d       	adc	r25, r1
    39bc:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    39c0:	01 c0       	rjmp	.+2      	; 0x39c4 <_ZN6Analog9getMIDIidEh+0x52>
            break;

        }   return 0;
    39c2:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID);

}
    39c4:	cf 91       	pop	r28
    39c6:	08 95       	ret

000039c8 <_ZN6Analog10getCClimitEh13ccLimitType_t>:

uint8_t Analog::getCClimit(uint8_t analogID, ccLimitType_t type)  {
    39c8:	cf 93       	push	r28

    switch(type)    {
    39ca:	44 23       	and	r20, r20
    39cc:	19 f0       	breq	.+6      	; 0x39d4 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xc>
    39ce:	41 30       	cpi	r20, 0x01	; 1
    39d0:	49 f1       	breq	.+82     	; 0x3a24 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x5c>
    39d2:	4f c0       	rjmp	.+158    	; 0x3a72 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xaa>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    39d4:	20 91 08 02 	lds	r18, 0x0208
    39d8:	30 91 09 02 	lds	r19, 0x0209
    39dc:	80 91 fe 01 	lds	r24, 0x01FE
    39e0:	90 91 ff 01 	lds	r25, 0x01FF
    39e4:	82 0f       	add	r24, r18
    39e6:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    39e8:	20 91 16 02 	lds	r18, 0x0216
    39ec:	22 23       	and	r18, r18
    39ee:	a9 f0       	breq	.+42     	; 0x3a1a <_ZN6Analog10getCClimitEh13ccLimitType_t+0x52>
    39f0:	21 30       	cpi	r18, 0x01	; 1
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x2e>
    39f4:	40 c0       	rjmp	.+128    	; 0x3a76 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xae>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    39f6:	26 2f       	mov	r18, r22
    39f8:	26 95       	lsr	r18
    39fa:	26 95       	lsr	r18
    39fc:	26 95       	lsr	r18
    39fe:	c6 2f       	mov	r28, r22
    3a00:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3a02:	82 0f       	add	r24, r18
    3a04:	91 1d       	adc	r25, r1
    3a06:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x4a>
    3a0e:	95 95       	asr	r25
    3a10:	87 95       	ror	r24
    3a12:	ca 95       	dec	r28
    3a14:	e2 f7       	brpl	.-8      	; 0x3a0e <_ZN6Analog10getCClimitEh13ccLimitType_t+0x46>
    3a16:	81 70       	andi	r24, 0x01	; 1
    3a18:	31 c0       	rjmp	.+98     	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3a1a:	86 0f       	add	r24, r22
    3a1c:	91 1d       	adc	r25, r1
    3a1e:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3a22:	2c c0       	rjmp	.+88     	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3a24:	20 91 0a 02 	lds	r18, 0x020A
    3a28:	30 91 0b 02 	lds	r19, 0x020B
    3a2c:	80 91 fe 01 	lds	r24, 0x01FE
    3a30:	90 91 ff 01 	lds	r25, 0x01FF
    3a34:	82 0f       	add	r24, r18
    3a36:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3a38:	20 91 17 02 	lds	r18, 0x0217
    3a3c:	22 23       	and	r18, r18
    3a3e:	a1 f0       	breq	.+40     	; 0x3a68 <_ZN6Analog10getCClimitEh13ccLimitType_t+0xa0>
    3a40:	21 30       	cpi	r18, 0x01	; 1
    3a42:	d9 f4       	brne	.+54     	; 0x3a7a <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb2>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3a44:	26 2f       	mov	r18, r22
    3a46:	26 95       	lsr	r18
    3a48:	26 95       	lsr	r18
    3a4a:	26 95       	lsr	r18
    3a4c:	c6 2f       	mov	r28, r22
    3a4e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3a50:	82 0f       	add	r24, r18
    3a52:	91 1d       	adc	r25, r1
    3a54:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <_ZN6Analog10getCClimitEh13ccLimitType_t+0x98>
    3a5c:	95 95       	asr	r25
    3a5e:	87 95       	ror	r24
    3a60:	ca 95       	dec	r28
    3a62:	e2 f7       	brpl	.-8      	; 0x3a5c <_ZN6Analog10getCClimitEh13ccLimitType_t+0x94>
    3a64:	81 70       	andi	r24, 0x01	; 1
    3a66:	0a c0       	rjmp	.+20     	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3a68:	86 0f       	add	r24, r22
    3a6a:	91 1d       	adc	r25, r1
    3a6c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>

        case ccLimitHigh:
        return configuration.readParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID);
        break;

    }   return 0;
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
            break;

        }   return 0;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	01 c0       	rjmp	.+2      	; 0x3a7c <_ZN6Analog10getCClimitEh13ccLimitType_t+0xb4>
    3a7a:	80 e0       	ldi	r24, 0x00	; 0

}
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <_ZN6Analog12getParameterEhh>:

uint8_t Analog::getParameter(uint8_t messageType, uint8_t parameter) {
    3a80:	24 2f       	mov	r18, r20

    switch(messageType) {
    3a82:	62 30       	cpi	r22, 0x02	; 2
    3a84:	a1 f0       	breq	.+40     	; 0x3aae <_ZN6Analog12getParameterEhh+0x2e>
    3a86:	28 f4       	brcc	.+10     	; 0x3a92 <_ZN6Analog12getParameterEhh+0x12>
    3a88:	66 23       	and	r22, r22
    3a8a:	49 f0       	breq	.+18     	; 0x3a9e <_ZN6Analog12getParameterEhh+0x1e>
    3a8c:	61 30       	cpi	r22, 0x01	; 1
    3a8e:	59 f0       	breq	.+22     	; 0x3aa6 <_ZN6Analog12getParameterEhh+0x26>
    3a90:	20 c0       	rjmp	.+64     	; 0x3ad2 <_ZN6Analog12getParameterEhh+0x52>
    3a92:	64 30       	cpi	r22, 0x04	; 4
    3a94:	a1 f0       	breq	.+40     	; 0x3abe <_ZN6Analog12getParameterEhh+0x3e>
    3a96:	78 f0       	brcs	.+30     	; 0x3ab6 <_ZN6Analog12getParameterEhh+0x36>
    3a98:	65 30       	cpi	r22, 0x05	; 5
    3a9a:	b1 f0       	breq	.+44     	; 0x3ac8 <_ZN6Analog12getParameterEhh+0x48>
    3a9c:	1a c0       	rjmp	.+52     	; 0x3ad2 <_ZN6Analog12getParameterEhh+0x52>

        case analogEnabledConf:
        return getAnalogEnabled(parameter);
    3a9e:	64 2f       	mov	r22, r20
    3aa0:	0e 94 c7 1b 	call	0x378e	; 0x378e <_ZN6Analog16getAnalogEnabledEh>
    3aa4:	08 95       	ret
        break;

        case analogInvertedConf:
        return getAnalogInvertState(parameter);
    3aa6:	64 2f       	mov	r22, r20
    3aa8:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <_ZN6Analog20getAnalogInvertStateEh>
    3aac:	08 95       	ret
        break;

        case analogTypeConf:
        return getAnalogType(parameter);
    3aae:	64 2f       	mov	r22, r20
    3ab0:	0e 94 29 1c 	call	0x3852	; 0x3852 <_ZN6Analog13getAnalogTypeEh>
    3ab4:	08 95       	ret
        break;

        case analogMIDIidConf:
        return getMIDIid(parameter);
    3ab6:	64 2f       	mov	r22, r20
    3ab8:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN6Analog9getMIDIidEh>
    3abc:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return getCClimit(parameter, ccLimitLow);
    3abe:	40 e0       	ldi	r20, 0x00	; 0
    3ac0:	62 2f       	mov	r22, r18
    3ac2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3ac6:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return getCClimit(parameter, ccLimitHigh);
    3ac8:	41 e0       	ldi	r20, 0x01	; 1
    3aca:	62 2f       	mov	r22, r18
    3acc:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3ad0:	08 95       	ret
        break;

    }   return 0;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0

}
    3ad4:	08 95       	ret

00003ad6 <_ZN6Analog16setAnalogEnabledEhb>:


bool Analog::setAnalogEnabled(uint8_t analogID, bool state)    {
    3ad6:	0f 93       	push	r16
    3ad8:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID, state);
    3ada:	04 2f       	mov	r16, r20
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	63 e0       	ldi	r22, 0x03	; 3
    3ae0:	8a e9       	ldi	r24, 0x9A	; 154
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3ae8:	0f 91       	pop	r16
    3aea:	08 95       	ret

00003aec <_ZN6Analog20setAnalogInvertStateEhh>:

bool Analog::setAnalogInvertState(uint8_t analogID, uint8_t state) {
    3aec:	0f 93       	push	r16
    3aee:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID, state);
    3af0:	04 2f       	mov	r16, r20
    3af2:	42 e0       	ldi	r20, 0x02	; 2
    3af4:	63 e0       	ldi	r22, 0x03	; 3
    3af6:	8a e9       	ldi	r24, 0x9A	; 154
    3af8:	91 e0       	ldi	r25, 0x01	; 1
    3afa:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3afe:	0f 91       	pop	r16
    3b00:	08 95       	ret

00003b02 <_ZN6Analog13setAnalogTypeEhh>:

bool Analog::setAnalogType(uint8_t analogID, uint8_t type)    {
    3b02:	0f 93       	push	r16
    3b04:	26 2f       	mov	r18, r22

    lastAnalogueValue[analogID] = 0;
    3b06:	e6 2f       	mov	r30, r22
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	ee 0f       	add	r30, r30
    3b0c:	ff 1f       	adc	r31, r31
    3b0e:	8e 0f       	add	r24, r30
    3b10:	9f 1f       	adc	r25, r31
    3b12:	fc 01       	movw	r30, r24
    3b14:	eb 59       	subi	r30, 0x9B	; 155
    3b16:	fe 4f       	sbci	r31, 0xFE	; 254
    3b18:	11 82       	std	Z+1, r1	; 0x01
    3b1a:	10 82       	st	Z, r1

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID, type);
    3b1c:	04 2f       	mov	r16, r20
    3b1e:	41 e0       	ldi	r20, 0x01	; 1
    3b20:	63 e0       	ldi	r22, 0x03	; 3
    3b22:	8a e9       	ldi	r24, 0x9A	; 154
    3b24:	91 e0       	ldi	r25, 0x01	; 1
    3b26:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <_ZN6Analog9setMIDIidEhh>:

bool Analog::setMIDIid(uint8_t analogID, uint8_t midiID)   {
    3b2e:	0f 93       	push	r16
    3b30:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID, midiID);
    3b32:	04 2f       	mov	r16, r20
    3b34:	43 e0       	ldi	r20, 0x03	; 3
    3b36:	63 e0       	ldi	r22, 0x03	; 3
    3b38:	8a e9       	ldi	r24, 0x9A	; 154
    3b3a:	91 e0       	ldi	r25, 0x01	; 1
    3b3c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <_ZN6Analog10setCClimitE13ccLimitType_thh>:

bool Analog::setCClimit(ccLimitType_t type, uint8_t analogID, uint8_t limit)  {
    3b44:	0f 93       	push	r16

    switch (type)  {
    3b46:	66 23       	and	r22, r22
    3b48:	19 f0       	breq	.+6      	; 0x3b50 <_ZN6Analog10setCClimitE13ccLimitType_thh+0xc>
    3b4a:	61 30       	cpi	r22, 0x01	; 1
    3b4c:	51 f0       	breq	.+20     	; 0x3b62 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x1e>
    3b4e:	12 c0       	rjmp	.+36     	; 0x3b74 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x30>

        case ccLimitLow:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCClowerLimitSection, analogID, limit);
    3b50:	02 2f       	mov	r16, r18
    3b52:	24 2f       	mov	r18, r20
    3b54:	44 e0       	ldi	r20, 0x04	; 4
    3b56:	63 e0       	ldi	r22, 0x03	; 3
    3b58:	8a e9       	ldi	r24, 0x9A	; 154
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    3b60:	0a c0       	rjmp	.+20     	; 0x3b76 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x32>
        break;

        case ccLimitHigh:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID, limit);
    3b62:	02 2f       	mov	r16, r18
    3b64:	24 2f       	mov	r18, r20
    3b66:	45 e0       	ldi	r20, 0x05	; 5
    3b68:	63 e0       	ldi	r22, 0x03	; 3
    3b6a:	8a e9       	ldi	r24, 0x9A	; 154
    3b6c:	91 e0       	ldi	r25, 0x01	; 1
    3b6e:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <_ZN6Analog10setCClimitE13ccLimitType_thh+0x32>
        break;

        default:
        return false;
    3b74:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }

}
    3b76:	0f 91       	pop	r16
    3b78:	08 95       	ret

00003b7a <_ZN6Analog12setParameterEhhh>:

bool Analog::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    3b7a:	34 2f       	mov	r19, r20

    switch(messageType) {
    3b7c:	62 30       	cpi	r22, 0x02	; 2
    3b7e:	c9 f0       	breq	.+50     	; 0x3bb2 <_ZN6Analog12setParameterEhhh+0x38>
    3b80:	28 f4       	brcc	.+10     	; 0x3b8c <_ZN6Analog12setParameterEhhh+0x12>
    3b82:	66 23       	and	r22, r22
    3b84:	49 f0       	breq	.+18     	; 0x3b98 <_ZN6Analog12setParameterEhhh+0x1e>
    3b86:	61 30       	cpi	r22, 0x01	; 1
    3b88:	79 f0       	breq	.+30     	; 0x3ba8 <_ZN6Analog12setParameterEhhh+0x2e>
    3b8a:	25 c0       	rjmp	.+74     	; 0x3bd6 <_ZN6Analog12setParameterEhhh+0x5c>
    3b8c:	64 30       	cpi	r22, 0x04	; 4
    3b8e:	d9 f0       	breq	.+54     	; 0x3bc6 <_ZN6Analog12setParameterEhhh+0x4c>
    3b90:	a8 f0       	brcs	.+42     	; 0x3bbc <_ZN6Analog12setParameterEhhh+0x42>
    3b92:	65 30       	cpi	r22, 0x05	; 5
    3b94:	e1 f0       	breq	.+56     	; 0x3bce <_ZN6Analog12setParameterEhhh+0x54>
    3b96:	1f c0       	rjmp	.+62     	; 0x3bd6 <_ZN6Analog12setParameterEhhh+0x5c>

        case analogEnabledConf:
        return setAnalogEnabled(parameter, newParameter);
    3b98:	41 e0       	ldi	r20, 0x01	; 1
    3b9a:	21 11       	cpse	r18, r1
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <_ZN6Analog12setParameterEhhh+0x26>
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	63 2f       	mov	r22, r19
    3ba2:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN6Analog16setAnalogEnabledEhb>
    3ba6:	08 95       	ret
        break;

        case analogInvertedConf:
        return setAnalogInvertState(parameter, newParameter);
    3ba8:	42 2f       	mov	r20, r18
    3baa:	63 2f       	mov	r22, r19
    3bac:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_ZN6Analog20setAnalogInvertStateEhh>
    3bb0:	08 95       	ret
        break;

        case analogTypeConf:
        return setAnalogType(parameter, newParameter);
    3bb2:	42 2f       	mov	r20, r18
    3bb4:	63 2f       	mov	r22, r19
    3bb6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN6Analog13setAnalogTypeEhh>
    3bba:	08 95       	ret
        break;

        case analogMIDIidConf:
        return setMIDIid(parameter, newParameter);
    3bbc:	42 2f       	mov	r20, r18
    3bbe:	63 2f       	mov	r22, r19
    3bc0:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <_ZN6Analog9setMIDIidEhh>
    3bc4:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return setCClimit(ccLimitLow, parameter, newParameter);
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <_ZN6Analog10setCClimitE13ccLimitType_thh>
    3bcc:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return setCClimit(ccLimitHigh, parameter, newParameter);
    3bce:	61 e0       	ldi	r22, 0x01	; 1
    3bd0:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <_ZN6Analog10setCClimitE13ccLimitType_thh>
    3bd4:	08 95       	ret
        break;

    }   return false;
    3bd6:	80 e0       	ldi	r24, 0x00	; 0

}
    3bd8:	08 95       	ret

00003bda <_ZN6Analog13getFsrPressedEh>:

}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    3bda:	26 2f       	mov	r18, r22
    3bdc:	26 95       	lsr	r18
    3bde:	26 95       	lsr	r18
    3be0:	26 95       	lsr	r18
    uint8_t fsrIndex = fsrID - 8*arrayIndex;

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    3be2:	82 0f       	add	r24, r18
    3be4:	91 1d       	adc	r25, r1
    3be6:	fc 01       	movw	r30, r24
    3be8:	80 a1       	ldd	r24, Z+32	; 0x20
    3bea:	90 e0       	ldi	r25, 0x00	; 0
}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    3bec:	22 0f       	add	r18, r18
    3bee:	22 0f       	add	r18, r18
    3bf0:	22 0f       	add	r18, r18
    3bf2:	62 1b       	sub	r22, r18

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    3bf4:	02 c0       	rjmp	.+4      	; 0x3bfa <_ZN6Analog13getFsrPressedEh+0x20>
    3bf6:	95 95       	asr	r25
    3bf8:	87 95       	ror	r24
    3bfa:	6a 95       	dec	r22
    3bfc:	e2 f7       	brpl	.-8      	; 0x3bf6 <_ZN6Analog13getFsrPressedEh+0x1c>

}
    3bfe:	81 70       	andi	r24, 0x01	; 1
    3c00:	08 95       	ret

00003c02 <_ZN6Analog13setFsrPressedEhb>:

void Analog::setFsrPressed(uint8_t fsrID, bool state)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    3c02:	26 2f       	mov	r18, r22
    3c04:	26 95       	lsr	r18
    3c06:	26 95       	lsr	r18
    3c08:	26 95       	lsr	r18
    3c0a:	67 70       	andi	r22, 0x07	; 7

    bitWrite(fsrPressed[arrayIndex], fsrIndex, state);
    3c0c:	44 23       	and	r20, r20
    3c0e:	91 f0       	breq	.+36     	; 0x3c34 <_ZN6Analog13setFsrPressedEhb+0x32>
    3c10:	fc 01       	movw	r30, r24
    3c12:	e2 0f       	add	r30, r18
    3c14:	f1 1d       	adc	r31, r1
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	04 c0       	rjmp	.+8      	; 0x3c28 <_ZN6Analog13setFsrPressedEhb+0x26>
    3c20:	88 0f       	add	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	aa 1f       	adc	r26, r26
    3c26:	bb 1f       	adc	r27, r27
    3c28:	6a 95       	dec	r22
    3c2a:	d2 f7       	brpl	.-12     	; 0x3c20 <_ZN6Analog13setFsrPressedEhb+0x1e>
    3c2c:	20 a1       	ldd	r18, Z+32	; 0x20
    3c2e:	82 2b       	or	r24, r18
    3c30:	80 a3       	std	Z+32, r24	; 0x20
    3c32:	08 95       	ret
    3c34:	fc 01       	movw	r30, r24
    3c36:	e2 0f       	add	r30, r18
    3c38:	f1 1d       	adc	r31, r1
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	a0 e0       	ldi	r26, 0x00	; 0
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <_ZN6Analog13setFsrPressedEhb+0x4a>
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	aa 1f       	adc	r26, r26
    3c4a:	bb 1f       	adc	r27, r27
    3c4c:	6a 95       	dec	r22
    3c4e:	d2 f7       	brpl	.-12     	; 0x3c44 <_ZN6Analog13setFsrPressedEhb+0x42>
    3c50:	80 95       	com	r24
    3c52:	90 a1       	ldd	r25, Z+32	; 0x20
    3c54:	89 23       	and	r24, r25
    3c56:	80 a3       	std	Z+32, r24	; 0x20
    3c58:	08 95       	ret

00003c5a <_ZN6Analog13checkFSRvalueEhi>:

}

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {
    3c5a:	ef 92       	push	r14
    3c5c:	ff 92       	push	r15
    3c5e:	0f 93       	push	r16
    3c60:	1f 93       	push	r17
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	8c 01       	movw	r16, r24
    3c68:	36 2f       	mov	r19, r22
inline int16_t calibratePressure(int16_t value, pressureType_t type)  {

    switch(type)    {

        case velocity:
        return mapAnalog_int16(constrain(value, FSR_MIN_VALUE, FSR_MAX_VALUE), FSR_MIN_VALUE, FSR_MAX_VALUE, 0, 127);
    3c6a:	48 32       	cpi	r20, 0x28	; 40
    3c6c:	51 05       	cpc	r21, r1
    3c6e:	3c f0       	brlt	.+14     	; 0x3c7e <_ZN6Analog13checkFSRvalueEhi+0x24>
    3c70:	45 35       	cpi	r20, 0x55	; 85
    3c72:	21 e0       	ldi	r18, 0x01	; 1
    3c74:	52 07       	cpc	r21, r18
    3c76:	2c f0       	brlt	.+10     	; 0x3c82 <_ZN6Analog13checkFSRvalueEhi+0x28>
    3c78:	44 e5       	ldi	r20, 0x54	; 84
    3c7a:	51 e0       	ldi	r21, 0x01	; 1
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <_ZN6Analog13checkFSRvalueEhi+0x28>
    3c7e:	48 e2       	ldi	r20, 0x28	; 40
    3c80:	50 e0       	ldi	r21, 0x00	; 0

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    3c82:	c3 2f       	mov	r28, r19
    3c84:	d0 e0       	ldi	r29, 0x00	; 0
    3c86:	f8 01       	movw	r30, r16
    3c88:	ec 0f       	add	r30, r28
    3c8a:	fd 1f       	adc	r31, r29
    3c8c:	eb 5b       	subi	r30, 0xBB	; 187
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	20 81       	ld	r18, Z
    3c92:	2f 5f       	subi	r18, 0xFF	; 255
    3c94:	20 83       	st	Z, r18
    lastAnalogueValue[analogID] += calibratedPressure;
    3c96:	fe 01       	movw	r30, r28
    3c98:	ee 0f       	add	r30, r30
    3c9a:	ff 1f       	adc	r31, r31
    3c9c:	e0 0f       	add	r30, r16
    3c9e:	f1 1f       	adc	r31, r17
    3ca0:	eb 59       	subi	r30, 0x9B	; 155
    3ca2:	fe 4f       	sbci	r31, 0xFE	; 254

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

inline int16_t mapAnalog_int16(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3ca4:	48 52       	subi	r20, 0x28	; 40
    3ca6:	51 09       	sbc	r21, r1
    3ca8:	ca 01       	movw	r24, r20
    3caa:	96 95       	lsr	r25
    3cac:	98 2f       	mov	r25, r24
    3cae:	88 27       	eor	r24, r24
    3cb0:	97 95       	ror	r25
    3cb2:	87 95       	ror	r24
    3cb4:	84 1b       	sub	r24, r20
    3cb6:	95 0b       	sbc	r25, r21
    3cb8:	6c e2       	ldi	r22, 0x2C	; 44
    3cba:	71 e0       	ldi	r23, 0x01	; 1
    3cbc:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__divmodhi4>
void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    lastAnalogueValue[analogID] += calibratedPressure;
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	86 0f       	add	r24, r22
    3cc6:	91 1d       	adc	r25, r1
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24

    if (fsrMedianRunCounter[analogID] == FSR_MEDIAN_RUNS) {
    3ccc:	22 30       	cpi	r18, 0x02	; 2
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <_ZN6Analog13checkFSRvalueEhi+0x78>
    3cd0:	64 c0       	rjmp	.+200    	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>

        fsrMedianRunCounter[analogID] = 0;
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	ec 0f       	add	r30, r28
    3cd6:	fd 1f       	adc	r31, r29
    3cd8:	eb 5b       	subi	r30, 0xBB	; 187
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	10 82       	st	Z, r1
        calibratedPressure = lastAnalogueValue[analogID] / FSR_MEDIAN_RUNS;
    3cde:	7c 01       	movw	r14, r24
    3ce0:	99 23       	and	r25, r25
    3ce2:	1c f4       	brge	.+6      	; 0x3cea <_ZN6Analog13checkFSRvalueEhi+0x90>
    3ce4:	2f ef       	ldi	r18, 0xFF	; 255
    3ce6:	e2 1a       	sub	r14, r18
    3ce8:	f2 0a       	sbc	r15, r18
    3cea:	f5 94       	asr	r15
    3cec:	e7 94       	ror	r14
        lastAnalogueValue[analogID] = 0;
    3cee:	cc 0f       	add	r28, r28
    3cf0:	dd 1f       	adc	r29, r29
    3cf2:	c0 0f       	add	r28, r16
    3cf4:	d1 1f       	adc	r29, r17
    3cf6:	cb 59       	subi	r28, 0x9B	; 155
    3cf8:	de 4f       	sbci	r29, 0xFE	; 254
    3cfa:	19 82       	std	Y+1, r1	; 0x01
    3cfc:	18 82       	st	Y, r1

    }   else return;

    bool pressDetected = (calibratedPressure > 0);
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	e1 10       	cpse	r14, r1
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <_ZN6Analog13checkFSRvalueEhi+0xb0>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	c3 2f       	mov	r28, r19

    switch (pressDetected)    {
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	19 f5       	brne	.+70     	; 0x3d56 <_ZN6Analog13checkFSRvalueEhi+0xfc>

        case true:

        if (!getFsrPressed(analogID)) {
    3d10:	63 2f       	mov	r22, r19
    3d12:	c8 01       	movw	r24, r16
    3d14:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_ZN6Analog13getFsrPressedEh>
    3d18:	81 11       	cpse	r24, r1
    3d1a:	3f c0       	rjmp	.+126    	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>

            //sensor is really pressed
            setFsrPressed(analogID, true);
    3d1c:	41 e0       	ldi	r20, 0x01	; 1
    3d1e:	6c 2f       	mov	r22, r28
    3d20:	c8 01       	movw	r24, r16
    3d22:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), true, calibratedPressure);
    3d26:	6c 2f       	mov	r22, r28
    3d28:	c8 01       	movw	r24, r16
    3d2a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN6Analog9getMIDIidEh>
    3d2e:	2e 2d       	mov	r18, r14
    3d30:	41 e0       	ldi	r20, 0x01	; 1
    3d32:	68 2f       	mov	r22, r24
    3d34:	8b ef       	ldi	r24, 0xFB	; 251
    3d36:	96 e0       	ldi	r25, 0x06	; 6
    3d38:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	97 e0       	ldi	r25, 0x07	; 7
    3d40:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    3d44:	88 23       	and	r24, r24
    3d46:	49 f1       	breq	.+82     	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>
    3d48:	4c 2f       	mov	r20, r28
    3d4a:	63 e0       	ldi	r22, 0x03	; 3
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	97 e0       	ldi	r25, 0x07	; 7
    3d50:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>
    3d54:	22 c0       	rjmp	.+68     	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>
        }
        break;

        case false:

        if (getFsrPressed(analogID))  {
    3d56:	63 2f       	mov	r22, r19
    3d58:	c8 01       	movw	r24, r16
    3d5a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_ZN6Analog13getFsrPressedEh>
    3d5e:	88 23       	and	r24, r24
    3d60:	e1 f0       	breq	.+56     	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>

            setFsrPressed(analogID, false);
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	6c 2f       	mov	r22, r28
    3d66:	c8 01       	movw	r24, r16
    3d68:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), false, 0);
    3d6c:	6c 2f       	mov	r22, r28
    3d6e:	c8 01       	movw	r24, r16
    3d70:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN6Analog9getMIDIidEh>
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	68 2f       	mov	r22, r24
    3d7a:	8b ef       	ldi	r24, 0xFB	; 251
    3d7c:	96 e0       	ldi	r25, 0x06	; 6
    3d7e:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	97 e0       	ldi	r25, 0x07	; 7
    3d86:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    3d8a:	88 23       	and	r24, r24
    3d8c:	31 f0       	breq	.+12     	; 0x3d9a <_ZN6Analog13checkFSRvalueEhi+0x140>
    3d8e:	4c 2f       	mov	r20, r28
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	97 e0       	ldi	r25, 0x07	; 7
    3d96:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>

        break;

    }

}
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	ff 90       	pop	r15
    3da4:	ef 90       	pop	r14
    3da6:	08 95       	ret

00003da8 <_ZN6Analog23checkPotentiometerValueEhi>:
#include "../../eeprom/Blocks.h"

//potentiometer must exceed this value before sending new value
#define POTENTIOMETER_CC_STEP 8

void Analog::checkPotentiometerValue(uint8_t analogID, int16_t tempValue)  {
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	bf 92       	push	r11
    3dae:	cf 92       	push	r12
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29

    //calculate difference between current and previous reading
    int16_t analogDiff = tempValue - lastAnalogueValue[analogID];
    3dbe:	c6 2f       	mov	r28, r22
    3dc0:	d0 e0       	ldi	r29, 0x00	; 0
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	ee 0f       	add	r30, r30
    3dc6:	ff 1f       	adc	r31, r31
    3dc8:	e8 0f       	add	r30, r24
    3dca:	f9 1f       	adc	r31, r25
    3dcc:	eb 59       	subi	r30, 0x9B	; 155
    3dce:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd0:	20 81       	ld	r18, Z
    3dd2:	31 81       	ldd	r19, Z+1	; 0x01
    3dd4:	fa 01       	movw	r30, r20
    3dd6:	e2 1b       	sub	r30, r18
    3dd8:	f3 0b       	sbc	r31, r19
    3dda:	9f 01       	movw	r18, r30
    3ddc:	22 f4       	brpl	.+8      	; 0x3de6 <_ZN6Analog23checkPotentiometerValueEhi+0x3e>
    3dde:	22 27       	eor	r18, r18
    3de0:	33 27       	eor	r19, r19
    3de2:	2e 1b       	sub	r18, r30
    3de4:	3f 0b       	sbc	r19, r31

    //get absolute difference
    if (analogDiff < 0)   analogDiff *= -1;

    if (!(analogDiff >= POTENTIOMETER_CC_STEP)) return;
    3de6:	28 30       	cpi	r18, 0x08	; 8
    3de8:	31 05       	cpc	r19, r1
    3dea:	0c f4       	brge	.+2      	; 0x3dee <_ZN6Analog23checkPotentiometerValueEhi+0x46>
    3dec:	64 c0       	rjmp	.+200    	; 0x3eb6 <_ZN6Analog23checkPotentiometerValueEhi+0x10e>
    3dee:	8a 01       	movw	r16, r20
    3df0:	d6 2e       	mov	r13, r22
    3df2:	7c 01       	movw	r14, r24

    uint8_t ccValue = tempValue >> 3;
    3df4:	4a 01       	movw	r8, r20
    3df6:	95 94       	asr	r9
    3df8:	87 94       	ror	r8
    3dfa:	95 94       	asr	r9
    3dfc:	87 94       	ror	r8
    3dfe:	95 94       	asr	r9
    3e00:	87 94       	ror	r8
    3e02:	b8 2c       	mov	r11, r8

    //invert CC data if potInverted is true
    if (getAnalogInvertState(analogID))   ccValue = 127 - ccValue;
    3e04:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <_ZN6Analog20getAnalogInvertStateEh>
    3e08:	88 23       	and	r24, r24
    3e0a:	19 f0       	breq	.+6      	; 0x3e12 <_ZN6Analog23checkPotentiometerValueEhi+0x6a>
    3e0c:	8f e7       	ldi	r24, 0x7F	; 127
    3e0e:	b8 2e       	mov	r11, r24
    3e10:	b8 18       	sub	r11, r8

    uint8_t lowerCClimit = getCClimit(analogID, ccLimitLow);
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	6d 2d       	mov	r22, r13
    3e16:	c7 01       	movw	r24, r14
    3e18:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <_ZN6Analog10getCClimitEh13ccLimitType_t>
    3e1c:	c8 2e       	mov	r12, r24
    uint8_t upperCClimit = getCClimit(analogID, ccLimitHigh);
    3e1e:	41 e0       	ldi	r20, 0x01	; 1
    3e20:	6d 2d       	mov	r22, r13
    3e22:	c7 01       	movw	r24, r14
    3e24:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <_ZN6Analog10getCClimitEh13ccLimitType_t>

    //only use map when cc limits are different from defaults
    if ((lowerCClimit != 0) || (upperCClimit != 127))   {
    3e28:	c1 10       	cpse	r12, r1
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <_ZN6Analog23checkPotentiometerValueEhi+0x88>
    3e2c:	8f 37       	cpi	r24, 0x7F	; 127
    3e2e:	29 f1       	breq	.+74     	; 0x3e7a <_ZN6Analog23checkPotentiometerValueEhi+0xd2>
    int16_t getMedianValue(uint8_t analogID);
    void addAnalogSample(uint8_t analogID, int16_t sample);
    bool analogValueSampled(uint8_t analogID);
    inline uint8_t mapAnalog_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max) {

        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3e30:	28 2f       	mov	r18, r24
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	2c 19       	sub	r18, r12
    3e36:	31 09       	sbc	r19, r1
    3e38:	b2 9e       	mul	r11, r18
    3e3a:	c0 01       	movw	r24, r0
    3e3c:	b3 9e       	mul	r11, r19
    3e3e:	90 0d       	add	r25, r0
    3e40:	11 24       	eor	r1, r1
    3e42:	6f e7       	ldi	r22, 0x7F	; 127
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__divmodhi4>
    3e4a:	c6 0e       	add	r12, r22

        midi.sendControlChange(getMIDIid(analogID), mapAnalog_uint8(ccValue, 0, 127, lowerCClimit, upperCClimit));
    3e4c:	6d 2d       	mov	r22, r13
    3e4e:	c7 01       	movw	r24, r14
    3e50:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN6Analog9getMIDIidEh>
    3e54:	4c 2d       	mov	r20, r12
    3e56:	68 2f       	mov	r22, r24
    3e58:	8b ef       	ldi	r24, 0xFB	; 251
    3e5a:	96 e0       	ldi	r25, 0x06	; 6
    3e5c:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	97 e0       	ldi	r25, 0x07	; 7
    3e64:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    3e68:	88 23       	and	r24, r24
    3e6a:	e9 f0       	breq	.+58     	; 0x3ea6 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    3e6c:	4d 2d       	mov	r20, r13
    3e6e:	63 e0       	ldi	r22, 0x03	; 3
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	97 e0       	ldi	r25, 0x07	; 7
    3e74:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>
    3e78:	16 c0       	rjmp	.+44     	; 0x3ea6 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>

    }

    else {

        midi.sendControlChange(getMIDIid(analogID), ccValue);
    3e7a:	6d 2d       	mov	r22, r13
    3e7c:	c7 01       	movw	r24, r14
    3e7e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN6Analog9getMIDIidEh>
    3e82:	4b 2d       	mov	r20, r11
    3e84:	68 2f       	mov	r22, r24
    3e86:	8b ef       	ldi	r24, 0xFB	; 251
    3e88:	96 e0       	ldi	r25, 0x06	; 6
    3e8a:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	97 e0       	ldi	r25, 0x07	; 7
    3e92:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    3e96:	88 23       	and	r24, r24
    3e98:	31 f0       	breq	.+12     	; 0x3ea6 <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    3e9a:	4d 2d       	mov	r20, r13
    3e9c:	63 e0       	ldi	r22, 0x03	; 3
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	97 e0       	ldi	r25, 0x07	; 7
    3ea2:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>

    }

    //update values
    lastAnalogueValue[analogID] = tempValue;
    3ea6:	cc 0f       	add	r28, r28
    3ea8:	dd 1f       	adc	r29, r29
    3eaa:	ce 0d       	add	r28, r14
    3eac:	df 1d       	adc	r29, r15
    3eae:	cb 59       	subi	r28, 0x9B	; 155
    3eb0:	de 4f       	sbci	r29, 0xFE	; 254
    3eb2:	19 83       	std	Y+1, r17	; 0x01
    3eb4:	08 83       	st	Y, r16

}
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ff 90       	pop	r15
    3ec0:	ef 90       	pop	r14
    3ec2:	df 90       	pop	r13
    3ec4:	cf 90       	pop	r12
    3ec6:	bf 90       	pop	r11
    3ec8:	9f 90       	pop	r9
    3eca:	8f 90       	pop	r8
    3ecc:	08 95       	ret

00003ece <_ZN7Buttons4initEv>:

    //def const

}

void Buttons::init()    {
    3ece:	cf 92       	push	r12
    3ed0:	df 92       	push	r13
    3ed2:	ef 92       	push	r14
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	2f 97       	sbiw	r28, 0x0f	; 15
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61

    const subtype buttonTypeSubtype                   = { MAX_NUMBER_OF_BUTTONS, 0, BUTTON_TYPES-1 };
    3eec:	80 e4       	ldi	r24, 0x40	; 64
    3eee:	8d 87       	std	Y+13, r24	; 0x0d
    3ef0:	1e 86       	std	Y+14, r1	; 0x0e
    3ef2:	91 e0       	ldi	r25, 0x01	; 1
    3ef4:	9f 87       	std	Y+15, r25	; 0x0f
    const subtype buttonProgramChangeEnabledSubtype   = { MAX_NUMBER_OF_BUTTONS, 0, 1 };
    3ef6:	8a 87       	std	Y+10, r24	; 0x0a
    3ef8:	1b 86       	std	Y+11, r1	; 0x0b
    3efa:	9c 87       	std	Y+12, r25	; 0x0c
    const subtype buttonMIDIidSubtype                 = { MAX_NUMBER_OF_BUTTONS, 0, 127 };
    3efc:	8f 83       	std	Y+7, r24	; 0x07
    3efe:	18 86       	std	Y+8, r1	; 0x08
    3f00:	8f e7       	ldi	r24, 0x7F	; 127
    3f02:	89 87       	std	Y+9, r24	; 0x09

        &buttonTypeSubtype,
        &buttonProgramChangeEnabledSubtype,
        &buttonMIDIidSubtype

    };
    3f04:	ce 01       	movw	r24, r28
    3f06:	0d 96       	adiw	r24, 0x0d	; 13
    3f08:	9a 83       	std	Y+2, r25	; 0x02
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	03 97       	sbiw	r24, 0x03	; 3
    3f0e:	9c 83       	std	Y+4, r25	; 0x04
    3f10:	8b 83       	std	Y+3, r24	; 0x03
    3f12:	03 97       	sbiw	r24, 0x03	; 3
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);
    3f18:	43 e0       	ldi	r20, 0x03	; 3
    3f1a:	61 e0       	ldi	r22, 0x01	; 1
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	97 e0       	ldi	r25, 0x07	; 7
    3f20:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5SysEx14addMessageTypeEhh>
    3f24:	ce 01       	movw	r24, r28
    3f26:	01 96       	adiw	r24, 0x01	; 1
    3f28:	6c 01       	movw	r12, r24
    3f2a:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);
    3f2c:	d6 01       	movw	r26, r12
    3f2e:	ed 91       	ld	r30, X+
    3f30:	fd 91       	ld	r31, X+
    3f32:	6d 01       	movw	r12, r26
    3f34:	e2 80       	ldd	r14, Z+2	; 0x02
    3f36:	01 81       	ldd	r16, Z+1	; 0x01
    3f38:	20 81       	ld	r18, Z
    3f3a:	41 2f       	mov	r20, r17
    3f3c:	61 e0       	ldi	r22, 0x01	; 1
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	97 e0       	ldi	r25, 0x07	; 7
    3f42:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN5SysEx17addMessageSubTypeEhhhhh>
    3f46:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {
    3f48:	13 30       	cpi	r17, 0x03	; 3
    3f4a:	81 f7       	brne	.-32     	; 0x3f2c <_ZN7Buttons4initEv+0x5e>
        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);

    }

}
    3f4c:	2f 96       	adiw	r28, 0x0f	; 15
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	1f 91       	pop	r17
    3f5e:	0f 91       	pop	r16
    3f60:	ef 90       	pop	r14
    3f62:	df 90       	pop	r13
    3f64:	cf 90       	pop	r12
    3f66:	08 95       	ret

00003f68 <_ZN7Buttons16setButtonPressedEhb>:

void Buttons::setButtonPressed(uint8_t buttonID, bool state)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    3f68:	26 2f       	mov	r18, r22
    3f6a:	26 95       	lsr	r18
    3f6c:	26 95       	lsr	r18
    3f6e:	26 95       	lsr	r18
    3f70:	67 70       	andi	r22, 0x07	; 7

    bitWrite(buttonPressed[arrayIndex], buttonIndex, state);
    3f72:	44 23       	and	r20, r20
    3f74:	91 f0       	breq	.+36     	; 0x3f9a <_ZN7Buttons16setButtonPressedEhb+0x32>
    3f76:	fc 01       	movw	r30, r24
    3f78:	e2 0f       	add	r30, r18
    3f7a:	f1 1d       	adc	r31, r1
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	a0 e0       	ldi	r26, 0x00	; 0
    3f82:	b0 e0       	ldi	r27, 0x00	; 0
    3f84:	04 c0       	rjmp	.+8      	; 0x3f8e <_ZN7Buttons16setButtonPressedEhb+0x26>
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	aa 1f       	adc	r26, r26
    3f8c:	bb 1f       	adc	r27, r27
    3f8e:	6a 95       	dec	r22
    3f90:	d2 f7       	brpl	.-12     	; 0x3f86 <_ZN7Buttons16setButtonPressedEhb+0x1e>
    3f92:	21 85       	ldd	r18, Z+9	; 0x09
    3f94:	82 2b       	or	r24, r18
    3f96:	81 87       	std	Z+9, r24	; 0x09
    3f98:	08 95       	ret
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	e2 0f       	add	r30, r18
    3f9e:	f1 1d       	adc	r31, r1
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	a0 e0       	ldi	r26, 0x00	; 0
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	04 c0       	rjmp	.+8      	; 0x3fb2 <_ZN7Buttons16setButtonPressedEhb+0x4a>
    3faa:	88 0f       	add	r24, r24
    3fac:	99 1f       	adc	r25, r25
    3fae:	aa 1f       	adc	r26, r26
    3fb0:	bb 1f       	adc	r27, r27
    3fb2:	6a 95       	dec	r22
    3fb4:	d2 f7       	brpl	.-12     	; 0x3faa <_ZN7Buttons16setButtonPressedEhb+0x42>
    3fb6:	80 95       	com	r24
    3fb8:	91 85       	ldd	r25, Z+9	; 0x09
    3fba:	89 23       	and	r24, r25
    3fbc:	81 87       	std	Z+9, r24	; 0x09
    3fbe:	08 95       	ret

00003fc0 <_ZN7Buttons16getButtonPressedEh>:

}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    3fc0:	26 2f       	mov	r18, r22
    3fc2:	26 95       	lsr	r18
    3fc4:	26 95       	lsr	r18
    3fc6:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    3fc8:	82 0f       	add	r24, r18
    3fca:	91 1d       	adc	r25, r1
    3fcc:	fc 01       	movw	r30, r24
    3fce:	81 85       	ldd	r24, Z+9	; 0x09
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    3fd2:	22 0f       	add	r18, r18
    3fd4:	22 0f       	add	r18, r18
    3fd6:	22 0f       	add	r18, r18
    3fd8:	62 1b       	sub	r22, r18

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <_ZN7Buttons16getButtonPressedEh+0x20>
    3fdc:	95 95       	asr	r25
    3fde:	87 95       	ror	r24
    3fe0:	6a 95       	dec	r22
    3fe2:	e2 f7       	brpl	.-8      	; 0x3fdc <_ZN7Buttons16getButtonPressedEh+0x1c>

}
    3fe4:	81 70       	andi	r24, 0x01	; 1
    3fe6:	08 95       	ret

00003fe8 <_ZN7Buttons17updateButtonStateEhh>:

    }

}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {
    3fe8:	0f 93       	push	r16
    3fea:	1f 93       	push	r17
    3fec:	cf 93       	push	r28
    3fee:	df 93       	push	r29
    3ff0:	dc 01       	movw	r26, r24

    uint8_t arrayIndex = buttonID/8;
    3ff2:	96 2f       	mov	r25, r22
    3ff4:	96 95       	lsr	r25
    3ff6:	96 95       	lsr	r25
    3ff8:	96 95       	lsr	r25
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    3ffa:	e9 2f       	mov	r30, r25
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	ed 01       	movw	r28, r26
    4000:	ce 0f       	add	r28, r30
    4002:	df 1f       	adc	r29, r31
    4004:	58 81       	ld	r21, Y
}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    4006:	99 0f       	add	r25, r25
    4008:	99 0f       	add	r25, r25
    400a:	99 0f       	add	r25, r25
    400c:	69 1b       	sub	r22, r25

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    400e:	25 2f       	mov	r18, r21
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	06 2e       	mov	r0, r22
    4014:	02 c0       	rjmp	.+4      	; 0x401a <_ZN7Buttons17updateButtonStateEhh+0x32>
    4016:	35 95       	asr	r19
    4018:	27 95       	ror	r18
    401a:	0a 94       	dec	r0
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <_ZN7Buttons17updateButtonStateEhh+0x2e>
    401e:	21 70       	andi	r18, 0x01	; 1
    4020:	33 27       	eor	r19, r19
    4022:	84 2f       	mov	r24, r20
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	01 f1       	breq	.+64     	; 0x406c <_ZN7Buttons17updateButtonStateEhh+0x84>
        bitWrite(previousButtonState[arrayIndex], buttonIndex, buttonState);
    402c:	44 23       	and	r20, r20
    402e:	71 f0       	breq	.+28     	; 0x404c <_ZN7Buttons17updateButtonStateEhh+0x64>
    4030:	01 e0       	ldi	r16, 0x01	; 1
    4032:	10 e0       	ldi	r17, 0x00	; 0
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	04 c0       	rjmp	.+8      	; 0x4042 <_ZN7Buttons17updateButtonStateEhh+0x5a>
    403a:	00 0f       	add	r16, r16
    403c:	11 1f       	adc	r17, r17
    403e:	22 1f       	adc	r18, r18
    4040:	33 1f       	adc	r19, r19
    4042:	6a 95       	dec	r22
    4044:	d2 f7       	brpl	.-12     	; 0x403a <_ZN7Buttons17updateButtonStateEhh+0x52>
    4046:	05 2b       	or	r16, r21
    4048:	08 83       	st	Y, r16
    404a:	10 c0       	rjmp	.+32     	; 0x406c <_ZN7Buttons17updateButtonStateEhh+0x84>
    404c:	ea 0f       	add	r30, r26
    404e:	fb 1f       	adc	r31, r27
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	a0 e0       	ldi	r26, 0x00	; 0
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <_ZN7Buttons17updateButtonStateEhh+0x7a>
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	6a 95       	dec	r22
    4064:	d2 f7       	brpl	.-12     	; 0x405a <_ZN7Buttons17updateButtonStateEhh+0x72>
    4066:	80 95       	com	r24
    4068:	58 23       	and	r21, r24
    406a:	50 83       	st	Z, r21

}
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	08 95       	ret

00004076 <_ZN7Buttons22getPreviousButtonStateEh>:

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    4076:	26 2f       	mov	r18, r22
    4078:	26 95       	lsr	r18
    407a:	26 95       	lsr	r18
    407c:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    407e:	82 0f       	add	r24, r18
    4080:	91 1d       	adc	r25, r1
    4082:	fc 01       	movw	r30, r24
    4084:	80 81       	ld	r24, Z
    4086:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    4088:	22 0f       	add	r18, r18
    408a:	22 0f       	add	r18, r18
    408c:	22 0f       	add	r18, r18
    408e:	62 1b       	sub	r22, r18

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <_ZN7Buttons22getPreviousButtonStateEh+0x20>
    4092:	95 95       	asr	r25
    4094:	87 95       	ror	r24
    4096:	6a 95       	dec	r22
    4098:	e2 f7       	brpl	.-8      	; 0x4092 <_ZN7Buttons22getPreviousButtonStateEh+0x1c>

}
    409a:	81 70       	andi	r24, 0x01	; 1
    409c:	08 95       	ret

0000409e <_ZN7Buttons15buttonDebouncedEhb>:

bool Buttons::buttonDebounced(uint8_t buttonID, bool buttonState)   {
    409e:	40 68       	ori	r20, 0x80	; 128

    //shift new button reading into previousButtonState
    buttonDebounceCounter[buttonID] = (buttonDebounceCounter[buttonID] << 1) | buttonState | buttonDebounceCompare;
    40a0:	fc 01       	movw	r30, r24
    40a2:	e6 0f       	add	r30, r22
    40a4:	f1 1d       	adc	r31, r1
    40a6:	92 89       	ldd	r25, Z+18	; 0x12
    40a8:	99 0f       	add	r25, r25
    40aa:	49 2b       	or	r20, r25
    40ac:	42 8b       	std	Z+18, r20	; 0x12

    //if button is debounced, return true
    return ((buttonDebounceCounter[buttonID] == buttonDebounceCompare) || (buttonDebounceCounter[buttonID] == 0xFF));
    40ae:	40 38       	cpi	r20, 0x80	; 128
    40b0:	29 f0       	breq	.+10     	; 0x40bc <_ZN7Buttons15buttonDebouncedEhb+0x1e>
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	4f 3f       	cpi	r20, 0xFF	; 255
    40b6:	19 f0       	breq	.+6      	; 0x40be <_ZN7Buttons15buttonDebouncedEhb+0x20>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	08 95       	ret
    40bc:	81 e0       	ldi	r24, 0x01	; 1

}
    40be:	08 95       	ret

000040c0 <_ZN7Buttons13getButtonTypeEh>:

buttonType_t Buttons::getButtonType(uint8_t buttonID)  {
    40c0:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    40c2:	ea e9       	ldi	r30, 0x9A	; 154
    40c4:	f1 e0       	ldi	r31, 0x01	; 1
    40c6:	24 a1       	ldd	r18, Z+36	; 0x24
    40c8:	35 a1       	ldd	r19, Z+37	; 0x25
    40ca:	82 a1       	ldd	r24, Z+34	; 0x22
    40cc:	93 a1       	ldd	r25, Z+35	; 0x23
    40ce:	82 0f       	add	r24, r18
    40d0:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    40d2:	26 a9       	ldd	r18, Z+54	; 0x36
    40d4:	22 23       	and	r18, r18
    40d6:	a1 f0       	breq	.+40     	; 0x4100 <_ZN7Buttons13getButtonTypeEh+0x40>
    40d8:	21 30       	cpi	r18, 0x01	; 1
    40da:	b9 f4       	brne	.+46     	; 0x410a <_ZN7Buttons13getButtonTypeEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    40dc:	26 2f       	mov	r18, r22
    40de:	26 95       	lsr	r18
    40e0:	26 95       	lsr	r18
    40e2:	26 95       	lsr	r18
    40e4:	c6 2f       	mov	r28, r22
    40e6:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    40e8:	82 0f       	add	r24, r18
    40ea:	91 1d       	adc	r25, r1
    40ec:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <_ZN7Buttons13getButtonTypeEh+0x38>
    40f4:	95 95       	asr	r25
    40f6:	87 95       	ror	r24
    40f8:	ca 95       	dec	r28
    40fa:	e2 f7       	brpl	.-8      	; 0x40f4 <_ZN7Buttons13getButtonTypeEh+0x34>
    40fc:	81 70       	andi	r24, 0x01	; 1
    40fe:	06 c0       	rjmp	.+12     	; 0x410c <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4100:	86 0f       	add	r24, r22
    4102:	91 1d       	adc	r25, r1
    4104:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4108:	01 c0       	rjmp	.+2      	; 0x410c <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

        }   return 0;
    410a:	80 e0       	ldi	r24, 0x00	; 0

    return (buttonType_t)configuration.readParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID);

}
    410c:	cf 91       	pop	r28
    410e:	08 95       	ret

00004110 <_ZN7Buttons18getButtonPCenabledEh>:

bool Buttons::getButtonPCenabled(uint8_t buttonID)   {
    4110:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4112:	ea e9       	ldi	r30, 0x9A	; 154
    4114:	f1 e0       	ldi	r31, 0x01	; 1
    4116:	26 a1       	ldd	r18, Z+38	; 0x26
    4118:	37 a1       	ldd	r19, Z+39	; 0x27
    411a:	82 a1       	ldd	r24, Z+34	; 0x22
    411c:	93 a1       	ldd	r25, Z+35	; 0x23
    411e:	82 0f       	add	r24, r18
    4120:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4122:	27 a9       	ldd	r18, Z+55	; 0x37
    4124:	22 23       	and	r18, r18
    4126:	a9 f0       	breq	.+42     	; 0x4152 <_ZN7Buttons18getButtonPCenabledEh+0x42>
    4128:	21 30       	cpi	r18, 0x01	; 1
    412a:	c9 f4       	brne	.+50     	; 0x415e <_ZN7Buttons18getButtonPCenabledEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    412c:	26 2f       	mov	r18, r22
    412e:	26 95       	lsr	r18
    4130:	26 95       	lsr	r18
    4132:	26 95       	lsr	r18
    4134:	c6 2f       	mov	r28, r22
    4136:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4138:	82 0f       	add	r24, r18
    413a:	91 1d       	adc	r25, r1
    413c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <_ZN7Buttons18getButtonPCenabledEh+0x38>
    4144:	95 95       	asr	r25
    4146:	87 95       	ror	r24
    4148:	ca 95       	dec	r28
    414a:	e2 f7       	brpl	.-8      	; 0x4144 <_ZN7Buttons18getButtonPCenabledEh+0x34>
    414c:	98 2f       	mov	r25, r24
    414e:	91 70       	andi	r25, 0x01	; 1
    4150:	07 c0       	rjmp	.+14     	; 0x4160 <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4152:	86 0f       	add	r24, r22
    4154:	91 1d       	adc	r25, r1
    4156:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    415a:	98 2f       	mov	r25, r24
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

        }   return 0;
    415e:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID);
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	91 11       	cpse	r25, r1
    4164:	01 c0       	rjmp	.+2      	; 0x4168 <_ZN7Buttons18getButtonPCenabledEh+0x58>
    4166:	80 e0       	ldi	r24, 0x00	; 0

}
    4168:	cf 91       	pop	r28
    416a:	08 95       	ret

0000416c <_ZN7Buttons9getMIDIidEh>:

uint8_t Buttons::getMIDIid(uint8_t buttonID)   {
    416c:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    416e:	ea e9       	ldi	r30, 0x9A	; 154
    4170:	f1 e0       	ldi	r31, 0x01	; 1
    4172:	20 a5       	ldd	r18, Z+40	; 0x28
    4174:	31 a5       	ldd	r19, Z+41	; 0x29
    4176:	82 a1       	ldd	r24, Z+34	; 0x22
    4178:	93 a1       	ldd	r25, Z+35	; 0x23
    417a:	82 0f       	add	r24, r18
    417c:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    417e:	20 ad       	ldd	r18, Z+56	; 0x38
    4180:	22 23       	and	r18, r18
    4182:	a1 f0       	breq	.+40     	; 0x41ac <_ZN7Buttons9getMIDIidEh+0x40>
    4184:	21 30       	cpi	r18, 0x01	; 1
    4186:	b9 f4       	brne	.+46     	; 0x41b6 <_ZN7Buttons9getMIDIidEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4188:	26 2f       	mov	r18, r22
    418a:	26 95       	lsr	r18
    418c:	26 95       	lsr	r18
    418e:	26 95       	lsr	r18
    4190:	c6 2f       	mov	r28, r22
    4192:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4194:	82 0f       	add	r24, r18
    4196:	91 1d       	adc	r25, r1
    4198:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	02 c0       	rjmp	.+4      	; 0x41a4 <_ZN7Buttons9getMIDIidEh+0x38>
    41a0:	95 95       	asr	r25
    41a2:	87 95       	ror	r24
    41a4:	ca 95       	dec	r28
    41a6:	e2 f7       	brpl	.-8      	; 0x41a0 <_ZN7Buttons9getMIDIidEh+0x34>
    41a8:	81 70       	andi	r24, 0x01	; 1
    41aa:	06 c0       	rjmp	.+12     	; 0x41b8 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    41ac:	86 0f       	add	r24, r22
    41ae:	91 1d       	adc	r25, r1
    41b0:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

        }   return 0;
    41b6:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID);

}
    41b8:	cf 91       	pop	r28
    41ba:	08 95       	ret

000041bc <_ZN7Buttons20processProgramChangeEhb>:

    return bitRead(buttonPressed[arrayIndex], buttonIndex);

}

void Buttons::processProgramChange(uint8_t buttonID, bool buttonState)   {
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	cf 93       	push	r28
    41c2:	8c 01       	movw	r16, r24
    41c4:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    41c6:	44 23       	and	r20, r20
    41c8:	f9 f0       	breq	.+62     	; 0x4208 <_ZN7Buttons20processProgramChangeEhb+0x4c>

        if (!getButtonPressed(buttonID))    {
    41ca:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7Buttons16getButtonPressedEh>
    41ce:	81 11       	cpse	r24, r1
    41d0:	24 c0       	rjmp	.+72     	; 0x421a <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, true);
    41d2:	41 e0       	ldi	r20, 0x01	; 1
    41d4:	6c 2f       	mov	r22, r28
    41d6:	c8 01       	movw	r24, r16
    41d8:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>
            midi.sendProgramChange(getMIDIid(buttonID));
    41dc:	6c 2f       	mov	r22, r28
    41de:	c8 01       	movw	r24, r16
    41e0:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    41e4:	68 2f       	mov	r22, r24
    41e6:	8b ef       	ldi	r24, 0xFB	; 251
    41e8:	96 e0       	ldi	r25, 0x06	; 6
    41ea:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <_ZN4MIDI17sendProgramChangeEh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	97 e0       	ldi	r25, 0x07	; 7
    41f2:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    41f6:	88 23       	and	r24, r24
    41f8:	81 f0       	breq	.+32     	; 0x421a <_ZN7Buttons20processProgramChangeEhb+0x5e>
    41fa:	4c 2f       	mov	r20, r28
    41fc:	61 e0       	ldi	r22, 0x01	; 1
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	97 e0       	ldi	r25, 0x07	; 7
    4202:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>
    4206:	09 c0       	rjmp	.+18     	; 0x421a <_ZN7Buttons20processProgramChangeEhb+0x5e>

        }

    }   else {

        if (getButtonPressed(buttonID)) {
    4208:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7Buttons16getButtonPressedEh>
    420c:	88 23       	and	r24, r24
    420e:	29 f0       	breq	.+10     	; 0x421a <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, false);
    4210:	40 e0       	ldi	r20, 0x00	; 0
    4212:	6c 2f       	mov	r22, r28
    4214:	c8 01       	movw	r24, r16
    4216:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    421a:	cf 91       	pop	r28
    421c:	1f 91       	pop	r17
    421e:	0f 91       	pop	r16
    4220:	08 95       	ret

00004222 <_ZN7Buttons22processMomentaryButtonEhb>:

void Buttons::processMomentaryButton(uint8_t buttonID, bool buttonState)   {
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	8c 01       	movw	r16, r24
    422a:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    422c:	44 23       	and	r20, r20
    422e:	09 f1       	breq	.+66     	; 0x4272 <_ZN7Buttons22processMomentaryButtonEhb+0x50>

        //send note on only once
        if (!getButtonPressed(buttonID))    {
    4230:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7Buttons16getButtonPressedEh>
    4234:	81 11       	cpse	r24, r1
    4236:	3d c0       	rjmp	.+122    	; 0x42b2 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

            setButtonPressed(buttonID, true);
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	6c 2f       	mov	r22, r28
    423c:	c8 01       	movw	r24, r16
    423e:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>

            midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    4242:	6c 2f       	mov	r22, r28
    4244:	c8 01       	movw	r24, r16
    4246:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    424a:	2f e7       	ldi	r18, 0x7F	; 127
    424c:	41 e0       	ldi	r20, 0x01	; 1
    424e:	68 2f       	mov	r22, r24
    4250:	8b ef       	ldi	r24, 0xFB	; 251
    4252:	96 e0       	ldi	r25, 0x06	; 6
    4254:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	97 e0       	ldi	r25, 0x07	; 7
    425c:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    4260:	88 23       	and	r24, r24
    4262:	39 f1       	breq	.+78     	; 0x42b2 <_ZN7Buttons22processMomentaryButtonEhb+0x90>
    4264:	4c 2f       	mov	r20, r28
    4266:	61 e0       	ldi	r22, 0x01	; 1
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	97 e0       	ldi	r25, 0x07	; 7
    426c:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>
    4270:	20 c0       	rjmp	.+64     	; 0x42b2 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

        }

    }   else {  //button is released

            if (getButtonPressed(buttonID))    {
    4272:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7Buttons16getButtonPressedEh>
    4276:	88 23       	and	r24, r24
    4278:	e1 f0       	breq	.+56     	; 0x42b2 <_ZN7Buttons22processMomentaryButtonEhb+0x90>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    427a:	6c 2f       	mov	r22, r28
    427c:	c8 01       	movw	r24, r16
    427e:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	68 2f       	mov	r22, r24
    4288:	8b ef       	ldi	r24, 0xFB	; 251
    428a:	96 e0       	ldi	r25, 0x06	; 6
    428c:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	97 e0       	ldi	r25, 0x07	; 7
    4294:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    4298:	88 23       	and	r24, r24
    429a:	31 f0       	breq	.+12     	; 0x42a8 <_ZN7Buttons22processMomentaryButtonEhb+0x86>
    429c:	4c 2f       	mov	r20, r28
    429e:	61 e0       	ldi	r22, 0x01	; 1
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	97 e0       	ldi	r25, 0x07	; 7
    42a4:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>

                setButtonPressed(buttonID, false);
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	6c 2f       	mov	r22, r28
    42ac:	c8 01       	movw	r24, r16
    42ae:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>

            }

        }

}
    42b2:	cf 91       	pop	r28
    42b4:	1f 91       	pop	r17
    42b6:	0f 91       	pop	r16
    42b8:	08 95       	ret

000042ba <_ZN7Buttons21processLatchingButtonEhb>:

void Buttons::processLatchingButton(uint8_t buttonID, bool buttonState)    {
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	8c 01       	movw	r16, r24
    42c4:	c6 2f       	mov	r28, r22
    42c6:	d4 2f       	mov	r29, r20

    if (buttonState != getPreviousButtonState(buttonID)) {
    42c8:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN7Buttons22getPreviousButtonStateEh>
    42cc:	8d 17       	cp	r24, r29
    42ce:	09 f4       	brne	.+2      	; 0x42d2 <_ZN7Buttons21processLatchingButtonEhb+0x18>
    42d0:	42 c0       	rjmp	.+132    	; 0x4356 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

        if (buttonState) {
    42d2:	dd 23       	and	r29, r29
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <_ZN7Buttons21processLatchingButtonEhb+0x1e>
    42d6:	3f c0       	rjmp	.+126    	; 0x4356 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            //button is pressed
            //if a button has been already pressed
            if (getButtonPressed(buttonID)) {
    42d8:	6c 2f       	mov	r22, r28
    42da:	c8 01       	movw	r24, r16
    42dc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7Buttons16getButtonPressedEh>
    42e0:	88 23       	and	r24, r24
    42e2:	e9 f0       	breq	.+58     	; 0x431e <_ZN7Buttons21processLatchingButtonEhb+0x64>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    42e4:	6c 2f       	mov	r22, r28
    42e6:	c8 01       	movw	r24, r16
    42e8:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	40 e0       	ldi	r20, 0x00	; 0
    42f0:	68 2f       	mov	r22, r24
    42f2:	8b ef       	ldi	r24, 0xFB	; 251
    42f4:	96 e0       	ldi	r25, 0x06	; 6
    42f6:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	97 e0       	ldi	r25, 0x07	; 7
    42fe:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    4302:	88 23       	and	r24, r24
    4304:	31 f0       	breq	.+12     	; 0x4312 <_ZN7Buttons21processLatchingButtonEhb+0x58>
    4306:	4c 2f       	mov	r20, r28
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	97 e0       	ldi	r25, 0x07	; 7
    430e:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>

                //reset pressed state
                setButtonPressed(buttonID, false);
    4312:	40 e0       	ldi	r20, 0x00	; 0
    4314:	6c 2f       	mov	r22, r28
    4316:	c8 01       	movw	r24, r16
    4318:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>
    431c:	1c c0       	rjmp	.+56     	; 0x4356 <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            } else {

                //send note on
                midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    431e:	6c 2f       	mov	r22, r28
    4320:	c8 01       	movw	r24, r16
    4322:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    4326:	2f e7       	ldi	r18, 0x7F	; 127
    4328:	41 e0       	ldi	r20, 0x01	; 1
    432a:	68 2f       	mov	r22, r24
    432c:	8b ef       	ldi	r24, 0xFB	; 251
    432e:	96 e0       	ldi	r25, 0x06	; 6
    4330:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	97 e0       	ldi	r25, 0x07	; 7
    4338:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    433c:	88 23       	and	r24, r24
    433e:	31 f0       	breq	.+12     	; 0x434c <_ZN7Buttons21processLatchingButtonEhb+0x92>
    4340:	4c 2f       	mov	r20, r28
    4342:	61 e0       	ldi	r22, 0x01	; 1
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	97 e0       	ldi	r25, 0x07	; 7
    4348:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>

                //toggle buttonPressed flag to true
                setButtonPressed(buttonID, true);
    434c:	41 e0       	ldi	r20, 0x01	; 1
    434e:	6c 2f       	mov	r22, r28
    4350:	c8 01       	movw	r24, r16
    4352:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	08 95       	ret

00004360 <_ZN7Buttons6updateEv>:

void Buttons::update()    {
    4360:	0f 93       	push	r16
    4362:	1f 93       	push	r17
    4364:	cf 93       	push	r28
    4366:	df 93       	push	r29
    4368:	8c 01       	movw	r16, r24

    if (!board.buttonDataAvailable()) return;
    436a:	81 e4       	ldi	r24, 0x41	; 65
    436c:	92 e0       	ldi	r25, 0x02	; 2
    436e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN5Board19buttonDataAvailableEv>
    4372:	88 23       	and	r24, r24
    4374:	a9 f1       	breq	.+106    	; 0x43e0 <_ZN7Buttons6updateEv+0x80>
    4376:	c0 e0       	ldi	r28, 0x00	; 0

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        uint8_t buttonState = board.getButtonState(i);
    4378:	6c 2f       	mov	r22, r28
    437a:	81 e4       	ldi	r24, 0x41	; 65
    437c:	92 e0       	ldi	r25, 0x02	; 2
    437e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN5Board14getButtonStateEh>
    4382:	d8 2f       	mov	r29, r24

        if (buttonDebounced(i, buttonState))  {
    4384:	48 2f       	mov	r20, r24
    4386:	6c 2f       	mov	r22, r28
    4388:	c8 01       	movw	r24, r16
    438a:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN7Buttons15buttonDebouncedEhb>
    438e:	88 23       	and	r24, r24
    4390:	21 f1       	breq	.+72     	; 0x43da <_ZN7Buttons6updateEv+0x7a>

            if (getButtonPCenabled(i))  {
    4392:	6c 2f       	mov	r22, r28
    4394:	c8 01       	movw	r24, r16
    4396:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN7Buttons18getButtonPCenabledEh>
    439a:	88 23       	and	r24, r24
    439c:	31 f0       	breq	.+12     	; 0x43aa <_ZN7Buttons6updateEv+0x4a>

                //ignore momentary/latching modes if button sends program change
                //when in program change, button has latching mode since momentary mode makes no sense
                processProgramChange(i, buttonState);
    439e:	4d 2f       	mov	r20, r29
    43a0:	6c 2f       	mov	r22, r28
    43a2:	c8 01       	movw	r24, r16
    43a4:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN7Buttons20processProgramChangeEhb>
    43a8:	13 c0       	rjmp	.+38     	; 0x43d0 <_ZN7Buttons6updateEv+0x70>

            }   else {

                switch (getButtonType(i))   {
    43aa:	6c 2f       	mov	r22, r28
    43ac:	c8 01       	movw	r24, r16
    43ae:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN7Buttons13getButtonTypeEh>
    43b2:	88 23       	and	r24, r24
    43b4:	41 f0       	breq	.+16     	; 0x43c6 <_ZN7Buttons6updateEv+0x66>
    43b6:	81 30       	cpi	r24, 0x01	; 1
    43b8:	59 f4       	brne	.+22     	; 0x43d0 <_ZN7Buttons6updateEv+0x70>

                    case buttonLatching:
                    processLatchingButton(i, buttonState);
    43ba:	4d 2f       	mov	r20, r29
    43bc:	6c 2f       	mov	r22, r28
    43be:	c8 01       	movw	r24, r16
    43c0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <_ZN7Buttons21processLatchingButtonEhb>
                    break;
    43c4:	05 c0       	rjmp	.+10     	; 0x43d0 <_ZN7Buttons6updateEv+0x70>

                    case buttonMomentary:
                    processMomentaryButton(i, buttonState);
    43c6:	4d 2f       	mov	r20, r29
    43c8:	6c 2f       	mov	r22, r28
    43ca:	c8 01       	movw	r24, r16
    43cc:	0e 94 11 21 	call	0x4222	; 0x4222 <_ZN7Buttons22processMomentaryButtonEhb>

                }

            }

            updateButtonState(i, buttonState);
    43d0:	4d 2f       	mov	r20, r29
    43d2:	6c 2f       	mov	r22, r28
    43d4:	c8 01       	movw	r24, r16
    43d6:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <_ZN7Buttons17updateButtonStateEhh>
    43da:	cf 5f       	subi	r28, 0xFF	; 255

void Buttons::update()    {

    if (!board.buttonDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    43dc:	c0 34       	cpi	r28, 0x40	; 64
    43de:	61 f6       	brne	.-104    	; 0x4378 <_ZN7Buttons6updateEv+0x18>

        }

    }

}
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	1f 91       	pop	r17
    43e6:	0f 91       	pop	r16
    43e8:	08 95       	ret

000043ea <_ZN7Buttons12getParameterEhh>:

}

uint8_t Buttons::getParameter(uint8_t messageType, uint8_t parameterID) {

    switch(messageType) {
    43ea:	61 30       	cpi	r22, 0x01	; 1
    43ec:	41 f0       	breq	.+16     	; 0x43fe <_ZN7Buttons12getParameterEhh+0x14>
    43ee:	18 f0       	brcs	.+6      	; 0x43f6 <_ZN7Buttons12getParameterEhh+0xc>
    43f0:	62 30       	cpi	r22, 0x02	; 2
    43f2:	49 f0       	breq	.+18     	; 0x4406 <_ZN7Buttons12getParameterEhh+0x1c>
    43f4:	0c c0       	rjmp	.+24     	; 0x440e <_ZN7Buttons12getParameterEhh+0x24>

        case buttonTypeConf:
        return getButtonType(parameterID);
    43f6:	64 2f       	mov	r22, r20
    43f8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN7Buttons13getButtonTypeEh>
    43fc:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return getButtonPCenabled(parameterID);
    43fe:	64 2f       	mov	r22, r20
    4400:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN7Buttons18getButtonPCenabledEh>
    4404:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return getMIDIid(parameterID);
    4406:	64 2f       	mov	r22, r20
    4408:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN7Buttons9getMIDIidEh>
    440c:	08 95       	ret
        break;

    }   return 0;
    440e:	80 e0       	ldi	r24, 0x00	; 0
}
    4410:	08 95       	ret

00004412 <_ZN7Buttons13setButtonTypeEhh>:

bool Buttons::setButtonType(uint8_t buttonID, uint8_t type)  {
    4412:	0f 93       	push	r16
    4414:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID, type);
    4416:	04 2f       	mov	r16, r20
    4418:	40 e0       	ldi	r20, 0x00	; 0
    441a:	61 e0       	ldi	r22, 0x01	; 1
    441c:	8a e9       	ldi	r24, 0x9A	; 154
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4424:	0f 91       	pop	r16
    4426:	08 95       	ret

00004428 <_ZN7Buttons18setButtonPCenabledEhh>:

bool Buttons::setButtonPCenabled(uint8_t buttonID, uint8_t state)  {
    4428:	0f 93       	push	r16
    442a:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID, state);
    442c:	04 2f       	mov	r16, r20
    442e:	41 e0       	ldi	r20, 0x01	; 1
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	8a e9       	ldi	r24, 0x9A	; 154
    4434:	91 e0       	ldi	r25, 0x01	; 1
    4436:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    443a:	0f 91       	pop	r16
    443c:	08 95       	ret

0000443e <_ZN7Buttons9setMIDIidEhh>:

bool Buttons::setMIDIid(uint8_t buttonID, uint8_t midiID)    {
    443e:	0f 93       	push	r16
    4440:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID, midiID);
    4442:	04 2f       	mov	r16, r20
    4444:	42 e0       	ldi	r20, 0x02	; 2
    4446:	61 e0       	ldi	r22, 0x01	; 1
    4448:	8a e9       	ldi	r24, 0x9A	; 154
    444a:	91 e0       	ldi	r25, 0x01	; 1
    444c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4450:	0f 91       	pop	r16
    4452:	08 95       	ret

00004454 <_ZN7Buttons12setParameterEhhh>:

bool Buttons::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    4454:	34 2f       	mov	r19, r20

    switch(messageType) {
    4456:	61 30       	cpi	r22, 0x01	; 1
    4458:	49 f0       	breq	.+18     	; 0x446c <_ZN7Buttons12setParameterEhhh+0x18>
    445a:	18 f0       	brcs	.+6      	; 0x4462 <_ZN7Buttons12setParameterEhhh+0xe>
    445c:	62 30       	cpi	r22, 0x02	; 2
    445e:	59 f0       	breq	.+22     	; 0x4476 <_ZN7Buttons12setParameterEhhh+0x22>
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <_ZN7Buttons12setParameterEhhh+0x2c>

        case buttonTypeConf:
        return setButtonType(parameter, newParameter);
    4462:	42 2f       	mov	r20, r18
    4464:	63 2f       	mov	r22, r19
    4466:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN7Buttons13setButtonTypeEhh>
    446a:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return setButtonPCenabled(parameter, newParameter);
    446c:	42 2f       	mov	r20, r18
    446e:	63 2f       	mov	r22, r19
    4470:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN7Buttons18setButtonPCenabledEhh>
    4474:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return setMIDIid(parameter, newParameter);
    4476:	42 2f       	mov	r20, r18
    4478:	63 2f       	mov	r22, r19
    447a:	0e 94 1f 22 	call	0x443e	; 0x443e <_ZN7Buttons9setMIDIidEhh>
    447e:	08 95       	ret
        break;

    }   return false;
    4480:	80 e0       	ldi	r24, 0x00	; 0

}
    4482:	08 95       	ret

00004484 <_ZN8Encoders4initEv>:

    //def const

}

void Encoders::init()   {
    4484:	cf 92       	push	r12
    4486:	df 92       	push	r13
    4488:	ef 92       	push	r14
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	64 97       	sbiw	r28, 0x14	; 20
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	de bf       	out	0x3e, r29	; 62
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	cd bf       	out	0x3d, r28	; 61

    const subtype encoderEnabledSubtype       = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    44a2:	80 e2       	ldi	r24, 0x20	; 32
    44a4:	8a 8b       	std	Y+18, r24	; 0x12
    44a6:	1b 8a       	std	Y+19, r1	; 0x13
    44a8:	91 e0       	ldi	r25, 0x01	; 1
    44aa:	9c 8b       	std	Y+20, r25	; 0x14
    const subtype encoderInvertedSubtype      = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    44ac:	8f 87       	std	Y+15, r24	; 0x0f
    44ae:	18 8a       	std	Y+16, r1	; 0x10
    44b0:	99 8b       	std	Y+17, r25	; 0x11
    const subtype encoderEncodingModeSubtype  = { MAX_NUMBER_OF_ENCODERS, 0, ENCODING_MODES-1 };
    44b2:	8c 87       	std	Y+12, r24	; 0x0c
    44b4:	1d 86       	std	Y+13, r1	; 0x0d
    44b6:	9e 87       	std	Y+14, r25	; 0x0e
    const subtype encoderMIDIidSubtype        = { MAX_NUMBER_OF_ENCODERS, 0, 127 };
    44b8:	89 87       	std	Y+9, r24	; 0x09
    44ba:	1a 86       	std	Y+10, r1	; 0x0a
    44bc:	8f e7       	ldi	r24, 0x7F	; 127
    44be:	8b 87       	std	Y+11, r24	; 0x0b
        &encoderEnabledSubtype,
        &encoderInvertedSubtype,
        &encoderEncodingModeSubtype,
        &encoderMIDIidSubtype

    };
    44c0:	ce 01       	movw	r24, r28
    44c2:	42 96       	adiw	r24, 0x12	; 18
    44c4:	9a 83       	std	Y+2, r25	; 0x02
    44c6:	89 83       	std	Y+1, r24	; 0x01
    44c8:	03 97       	sbiw	r24, 0x03	; 3
    44ca:	9c 83       	std	Y+4, r25	; 0x04
    44cc:	8b 83       	std	Y+3, r24	; 0x03
    44ce:	03 97       	sbiw	r24, 0x03	; 3
    44d0:	9e 83       	std	Y+6, r25	; 0x06
    44d2:	8d 83       	std	Y+5, r24	; 0x05
    44d4:	03 97       	sbiw	r24, 0x03	; 3
    44d6:	98 87       	std	Y+8, r25	; 0x08
    44d8:	8f 83       	std	Y+7, r24	; 0x07

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);
    44da:	44 e0       	ldi	r20, 0x04	; 4
    44dc:	62 e0       	ldi	r22, 0x02	; 2
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	97 e0       	ldi	r25, 0x07	; 7
    44e2:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5SysEx14addMessageTypeEhh>
    44e6:	ce 01       	movw	r24, r28
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	6c 01       	movw	r12, r24
    44ec:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);
    44ee:	d6 01       	movw	r26, r12
    44f0:	ed 91       	ld	r30, X+
    44f2:	fd 91       	ld	r31, X+
    44f4:	6d 01       	movw	r12, r26
    44f6:	e2 80       	ldd	r14, Z+2	; 0x02
    44f8:	01 81       	ldd	r16, Z+1	; 0x01
    44fa:	20 81       	ld	r18, Z
    44fc:	41 2f       	mov	r20, r17
    44fe:	62 e0       	ldi	r22, 0x02	; 2
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	97 e0       	ldi	r25, 0x07	; 7
    4504:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN5SysEx17addMessageSubTypeEhhhhh>
    4508:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {
    450a:	14 30       	cpi	r17, 0x04	; 4
    450c:	81 f7       	brne	.-32     	; 0x44ee <_ZN8Encoders4initEv+0x6a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);

    }

}
    450e:	64 96       	adiw	r28, 0x14	; 20
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	ef 90       	pop	r14
    4524:	df 90       	pop	r13
    4526:	cf 90       	pop	r12
    4528:	08 95       	ret

0000452a <_ZN8Encoders17getEncoderEnabledEh>:

    }

}

bool Encoders::getEncoderEnabled(uint8_t encoderID) {
    452a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    452c:	20 91 df 01 	lds	r18, 0x01DF
    4530:	30 91 e0 01 	lds	r19, 0x01E0
    4534:	80 91 dd 01 	lds	r24, 0x01DD
    4538:	90 91 de 01 	lds	r25, 0x01DE
    453c:	82 0f       	add	r24, r18
    453e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4540:	20 91 f1 01 	lds	r18, 0x01F1
    4544:	22 23       	and	r18, r18
    4546:	a9 f0       	breq	.+42     	; 0x4572 <_ZN8Encoders17getEncoderEnabledEh+0x48>
    4548:	21 30       	cpi	r18, 0x01	; 1
    454a:	c9 f4       	brne	.+50     	; 0x457e <_ZN8Encoders17getEncoderEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    454c:	26 2f       	mov	r18, r22
    454e:	26 95       	lsr	r18
    4550:	26 95       	lsr	r18
    4552:	26 95       	lsr	r18
    4554:	c6 2f       	mov	r28, r22
    4556:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4558:	82 0f       	add	r24, r18
    455a:	91 1d       	adc	r25, r1
    455c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <_ZN8Encoders17getEncoderEnabledEh+0x3e>
    4564:	95 95       	asr	r25
    4566:	87 95       	ror	r24
    4568:	ca 95       	dec	r28
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <_ZN8Encoders17getEncoderEnabledEh+0x3a>
    456c:	98 2f       	mov	r25, r24
    456e:	91 70       	andi	r25, 0x01	; 1
    4570:	07 c0       	rjmp	.+14     	; 0x4580 <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4572:	86 0f       	add	r24, r22
    4574:	91 1d       	adc	r25, r1
    4576:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    457a:	98 2f       	mov	r25, r24
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

        }   return 0;
    457e:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID);
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	91 11       	cpse	r25, r1
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <_ZN8Encoders17getEncoderEnabledEh+0x5e>
    4586:	80 e0       	ldi	r24, 0x00	; 0

}
    4588:	cf 91       	pop	r28
    458a:	08 95       	ret

0000458c <_ZN8Encoders21getEncoderInvertStateEh>:

bool Encoders::getEncoderInvertState(uint8_t encoderID) {
    458c:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    458e:	20 91 e1 01 	lds	r18, 0x01E1
    4592:	30 91 e2 01 	lds	r19, 0x01E2
    4596:	80 91 dd 01 	lds	r24, 0x01DD
    459a:	90 91 de 01 	lds	r25, 0x01DE
    459e:	82 0f       	add	r24, r18
    45a0:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    45a2:	20 91 f2 01 	lds	r18, 0x01F2
    45a6:	22 23       	and	r18, r18
    45a8:	a9 f0       	breq	.+42     	; 0x45d4 <_ZN8Encoders21getEncoderInvertStateEh+0x48>
    45aa:	21 30       	cpi	r18, 0x01	; 1
    45ac:	c9 f4       	brne	.+50     	; 0x45e0 <_ZN8Encoders21getEncoderInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    45ae:	26 2f       	mov	r18, r22
    45b0:	26 95       	lsr	r18
    45b2:	26 95       	lsr	r18
    45b4:	26 95       	lsr	r18
    45b6:	c6 2f       	mov	r28, r22
    45b8:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    45ba:	82 0f       	add	r24, r18
    45bc:	91 1d       	adc	r25, r1
    45be:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	02 c0       	rjmp	.+4      	; 0x45ca <_ZN8Encoders21getEncoderInvertStateEh+0x3e>
    45c6:	95 95       	asr	r25
    45c8:	87 95       	ror	r24
    45ca:	ca 95       	dec	r28
    45cc:	e2 f7       	brpl	.-8      	; 0x45c6 <_ZN8Encoders21getEncoderInvertStateEh+0x3a>
    45ce:	98 2f       	mov	r25, r24
    45d0:	91 70       	andi	r25, 0x01	; 1
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    45d4:	86 0f       	add	r24, r22
    45d6:	91 1d       	adc	r25, r1
    45d8:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    45dc:	98 2f       	mov	r25, r24
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

        }   return 0;
    45e0:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID);
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	91 11       	cpse	r25, r1
    45e6:	01 c0       	rjmp	.+2      	; 0x45ea <_ZN8Encoders21getEncoderInvertStateEh+0x5e>
    45e8:	80 e0       	ldi	r24, 0x00	; 0

}
    45ea:	cf 91       	pop	r28
    45ec:	08 95       	ret

000045ee <_ZN8Encoders15getEncodingModeEh>:

encoderType_t Encoders::getEncodingMode(uint8_t encoderID)  {
    45ee:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    45f0:	20 91 e3 01 	lds	r18, 0x01E3
    45f4:	30 91 e4 01 	lds	r19, 0x01E4
    45f8:	80 91 dd 01 	lds	r24, 0x01DD
    45fc:	90 91 de 01 	lds	r25, 0x01DE
    4600:	82 0f       	add	r24, r18
    4602:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4604:	20 91 f3 01 	lds	r18, 0x01F3
    4608:	22 23       	and	r18, r18
    460a:	a1 f0       	breq	.+40     	; 0x4634 <_ZN8Encoders15getEncodingModeEh+0x46>
    460c:	21 30       	cpi	r18, 0x01	; 1
    460e:	b9 f4       	brne	.+46     	; 0x463e <_ZN8Encoders15getEncodingModeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4610:	26 2f       	mov	r18, r22
    4612:	26 95       	lsr	r18
    4614:	26 95       	lsr	r18
    4616:	26 95       	lsr	r18
    4618:	c6 2f       	mov	r28, r22
    461a:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    461c:	82 0f       	add	r24, r18
    461e:	91 1d       	adc	r25, r1
    4620:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	02 c0       	rjmp	.+4      	; 0x462c <_ZN8Encoders15getEncodingModeEh+0x3e>
    4628:	95 95       	asr	r25
    462a:	87 95       	ror	r24
    462c:	ca 95       	dec	r28
    462e:	e2 f7       	brpl	.-8      	; 0x4628 <_ZN8Encoders15getEncodingModeEh+0x3a>
    4630:	81 70       	andi	r24, 0x01	; 1
    4632:	06 c0       	rjmp	.+12     	; 0x4640 <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4634:	86 0f       	add	r24, r22
    4636:	91 1d       	adc	r25, r1
    4638:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    463c:	01 c0       	rjmp	.+2      	; 0x4640 <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

        }   return 0;
    463e:	80 e0       	ldi	r24, 0x00	; 0

    return (encoderType_t)configuration.readParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID);

}
    4640:	cf 91       	pop	r28
    4642:	08 95       	ret

00004644 <_ZN8Encoders9getMIDIidEh>:

uint8_t Encoders::getMIDIid(uint8_t encoderID)  {
    4644:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4646:	20 91 e5 01 	lds	r18, 0x01E5
    464a:	30 91 e6 01 	lds	r19, 0x01E6
    464e:	80 91 dd 01 	lds	r24, 0x01DD
    4652:	90 91 de 01 	lds	r25, 0x01DE
    4656:	82 0f       	add	r24, r18
    4658:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    465a:	20 91 f4 01 	lds	r18, 0x01F4
    465e:	22 23       	and	r18, r18
    4660:	a1 f0       	breq	.+40     	; 0x468a <_ZN8Encoders9getMIDIidEh+0x46>
    4662:	21 30       	cpi	r18, 0x01	; 1
    4664:	b9 f4       	brne	.+46     	; 0x4694 <_ZN8Encoders9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4666:	26 2f       	mov	r18, r22
    4668:	26 95       	lsr	r18
    466a:	26 95       	lsr	r18
    466c:	26 95       	lsr	r18
    466e:	c6 2f       	mov	r28, r22
    4670:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4672:	82 0f       	add	r24, r18
    4674:	91 1d       	adc	r25, r1
    4676:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	02 c0       	rjmp	.+4      	; 0x4682 <_ZN8Encoders9getMIDIidEh+0x3e>
    467e:	95 95       	asr	r25
    4680:	87 95       	ror	r24
    4682:	ca 95       	dec	r28
    4684:	e2 f7       	brpl	.-8      	; 0x467e <_ZN8Encoders9getMIDIidEh+0x3a>
    4686:	81 70       	andi	r24, 0x01	; 1
    4688:	06 c0       	rjmp	.+12     	; 0x4696 <_ZN8Encoders9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    468a:	86 0f       	add	r24, r22
    468c:	91 1d       	adc	r25, r1
    468e:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4692:	01 c0       	rjmp	.+2      	; 0x4696 <_ZN8Encoders9getMIDIidEh+0x52>
            break;

        }   return 0;
    4694:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID);

}
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <_ZN8Encoders6updateEv>:

    }

}

void Encoders::update()   {
    469a:	df 92       	push	r13
    469c:	ef 92       	push	r14
    469e:	ff 92       	push	r15
    46a0:	0f 93       	push	r16
    46a2:	1f 93       	push	r17
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	8c 01       	movw	r16, r24

    if (!board.encoderDataAvailable()) return;
    46aa:	81 e4       	ldi	r24, 0x41	; 65
    46ac:	92 e0       	ldi	r25, 0x02	; 2
    46ae:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN5Board20encoderDataAvailableEv>
    46b2:	88 23       	and	r24, r24
    46b4:	09 f4       	brne	.+2      	; 0x46b8 <_ZN8Encoders6updateEv+0x1e>
    46b6:	52 c0       	rjmp	.+164    	; 0x475c <_ZN8Encoders6updateEv+0xc2>
    46b8:	c0 e0       	ldi	r28, 0x00	; 0
        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    46ba:	0f 2e       	mov	r0, r31
    46bc:	ff e7       	ldi	r31, 0x7F	; 127
    46be:	df 2e       	mov	r13, r31
    46c0:	f0 2d       	mov	r31, r0
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    46c2:	ff 24       	eor	r15, r15
    46c4:	f3 94       	inc	r15

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    46c6:	e1 2c       	mov	r14, r1

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {

        if (!getEncoderEnabled(i)) continue;
    46c8:	6c 2f       	mov	r22, r28
    46ca:	c8 01       	movw	r24, r16
    46cc:	0e 94 95 22 	call	0x452a	; 0x452a <_ZN8Encoders17getEncoderEnabledEh>
    46d0:	88 23       	and	r24, r24
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <_ZN8Encoders6updateEv+0x3c>
    46d4:	3f c0       	rjmp	.+126    	; 0x4754 <_ZN8Encoders6updateEv+0xba>

        encoderPosition_t encoderState = board.getEncoderState(i);
    46d6:	6c 2f       	mov	r22, r28
    46d8:	81 e4       	ldi	r24, 0x41	; 65
    46da:	92 e0       	ldi	r25, 0x02	; 2
    46dc:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN5Board15getEncoderStateEh>
    46e0:	d8 2f       	mov	r29, r24
        if (encoderState == encStopped) continue;
    46e2:	88 23       	and	r24, r24
    46e4:	b9 f1       	breq	.+110    	; 0x4754 <_ZN8Encoders6updateEv+0xba>

        if (getEncoderInvertState(i))   {
    46e6:	6c 2f       	mov	r22, r28
    46e8:	c8 01       	movw	r24, r16
    46ea:	0e 94 c6 22 	call	0x458c	; 0x458c <_ZN8Encoders21getEncoderInvertStateEh>
    46ee:	88 23       	and	r24, r24
    46f0:	29 f0       	breq	.+10     	; 0x46fc <_ZN8Encoders6updateEv+0x62>

            if (encoderState == encMoveLeft)
    46f2:	d1 30       	cpi	r29, 0x01	; 1
    46f4:	11 f0       	breq	.+4      	; 0x46fa <_ZN8Encoders6updateEv+0x60>
                encoderState = encMoveRight;

             else encoderState = encMoveLeft;
    46f6:	df 2d       	mov	r29, r15
    46f8:	01 c0       	rjmp	.+2      	; 0x46fc <_ZN8Encoders6updateEv+0x62>
        if (encoderState == encStopped) continue;

        if (getEncoderInvertState(i))   {

            if (encoderState == encMoveLeft)
                encoderState = encMoveRight;
    46fa:	d2 e0       	ldi	r29, 0x02	; 2

        }

        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {
    46fc:	6c 2f       	mov	r22, r28
    46fe:	c8 01       	movw	r24, r16
    4700:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_ZN8Encoders15getEncodingModeEh>
    4704:	88 23       	and	r24, r24
    4706:	19 f0       	breq	.+6      	; 0x470e <_ZN8Encoders6updateEv+0x74>
    4708:	81 30       	cpi	r24, 0x01	; 1
    470a:	29 f0       	breq	.+10     	; 0x4716 <_ZN8Encoders6updateEv+0x7c>
    470c:	08 c0       	rjmp	.+16     	; 0x471e <_ZN8Encoders6updateEv+0x84>

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    470e:	d1 30       	cpi	r29, 0x01	; 1
    4710:	41 f0       	breq	.+16     	; 0x4722 <_ZN8Encoders6updateEv+0x88>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    4712:	df 2d       	mov	r29, r15
    4714:	09 c0       	rjmp	.+18     	; 0x4728 <_ZN8Encoders6updateEv+0x8e>
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    4716:	d1 30       	cpi	r29, 0x01	; 1
    4718:	31 f0       	breq	.+12     	; 0x4726 <_ZN8Encoders6updateEv+0x8c>
            else encoderValue = ENCODER_VALUE_RIGHT_3FH41H;
    471a:	d1 e4       	ldi	r29, 0x41	; 65
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <_ZN8Encoders6updateEv+0x8e>

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    471e:	de 2d       	mov	r29, r14
    4720:	03 c0       	rjmp	.+6      	; 0x4728 <_ZN8Encoders6updateEv+0x8e>

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    4722:	dd 2d       	mov	r29, r13
    4724:	01 c0       	rjmp	.+2      	; 0x4728 <_ZN8Encoders6updateEv+0x8e>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    4726:	df e3       	ldi	r29, 0x3F	; 63
            default:
            break;

        }

        midi.sendControlChange(getMIDIid(i), encoderValue);
    4728:	6c 2f       	mov	r22, r28
    472a:	c8 01       	movw	r24, r16
    472c:	0e 94 22 23 	call	0x4644	; 0x4644 <_ZN8Encoders9getMIDIidEh>
    4730:	4d 2f       	mov	r20, r29
    4732:	68 2f       	mov	r22, r24
    4734:	8b ef       	ldi	r24, 0xFB	; 251
    4736:	96 e0       	ldi	r25, 0x06	; 6
    4738:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	97 e0       	ldi	r25, 0x07	; 7
    4740:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN5SysEx20configurationEnabledEv>
    4744:	88 23       	and	r24, r24
    4746:	31 f0       	breq	.+12     	; 0x4754 <_ZN8Encoders6updateEv+0xba>
    4748:	4c 2f       	mov	r20, r28
    474a:	62 e0       	ldi	r22, 0x02	; 2
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	97 e0       	ldi	r25, 0x07	; 7
    4750:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN5SysEx15sendComponentIDEhh>
    4754:	cf 5f       	subi	r28, 0xFF	; 255

void Encoders::update()   {

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {
    4756:	c0 32       	cpi	r28, 0x20	; 32
    4758:	09 f0       	breq	.+2      	; 0x475c <_ZN8Encoders6updateEv+0xc2>
    475a:	b6 cf       	rjmp	.-148    	; 0x46c8 <_ZN8Encoders6updateEv+0x2e>
        midi.sendControlChange(getMIDIid(i), encoderValue);
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);

    }

}
    475c:	df 91       	pop	r29
    475e:	cf 91       	pop	r28
    4760:	1f 91       	pop	r17
    4762:	0f 91       	pop	r16
    4764:	ff 90       	pop	r15
    4766:	ef 90       	pop	r14
    4768:	df 90       	pop	r13
    476a:	08 95       	ret

0000476c <_ZN8Encoders12getParameterEhh>:

}

uint8_t Encoders::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    476c:	61 30       	cpi	r22, 0x01	; 1
    476e:	51 f0       	breq	.+20     	; 0x4784 <_ZN8Encoders12getParameterEhh+0x18>
    4770:	28 f0       	brcs	.+10     	; 0x477c <_ZN8Encoders12getParameterEhh+0x10>
    4772:	62 30       	cpi	r22, 0x02	; 2
    4774:	59 f0       	breq	.+22     	; 0x478c <_ZN8Encoders12getParameterEhh+0x20>
    4776:	63 30       	cpi	r22, 0x03	; 3
    4778:	69 f0       	breq	.+26     	; 0x4794 <_ZN8Encoders12getParameterEhh+0x28>
    477a:	10 c0       	rjmp	.+32     	; 0x479c <_ZN8Encoders12getParameterEhh+0x30>

        case encoderEnabledConf:
        return getEncoderEnabled(parameterID);
    477c:	64 2f       	mov	r22, r20
    477e:	0e 94 95 22 	call	0x452a	; 0x452a <_ZN8Encoders17getEncoderEnabledEh>
    4782:	08 95       	ret
        break;

        case encoderInvertedConf:
        return getEncoderInvertState(parameterID);
    4784:	64 2f       	mov	r22, r20
    4786:	0e 94 c6 22 	call	0x458c	; 0x458c <_ZN8Encoders21getEncoderInvertStateEh>
    478a:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return getEncodingMode(parameterID);
    478c:	64 2f       	mov	r22, r20
    478e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <_ZN8Encoders15getEncodingModeEh>
    4792:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return getMIDIid(parameterID);
    4794:	64 2f       	mov	r22, r20
    4796:	0e 94 22 23 	call	0x4644	; 0x4644 <_ZN8Encoders9getMIDIidEh>
    479a:	08 95       	ret
        break;

    }   return 0;
    479c:	80 e0       	ldi	r24, 0x00	; 0

}
    479e:	08 95       	ret

000047a0 <_ZN8Encoders17setEncoderEnabledEhh>:

bool Encoders::setEncoderEnabled(uint8_t encoderID, uint8_t state)    {
    47a0:	0f 93       	push	r16
    47a2:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID, state);
    47a4:	04 2f       	mov	r16, r20
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	62 e0       	ldi	r22, 0x02	; 2
    47aa:	8a e9       	ldi	r24, 0x9A	; 154
    47ac:	91 e0       	ldi	r25, 0x01	; 1
    47ae:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    47b2:	0f 91       	pop	r16
    47b4:	08 95       	ret

000047b6 <_ZN8Encoders21setEncoderInvertStateEhh>:

bool Encoders::setEncoderInvertState(uint8_t encoderID, uint8_t state)    {
    47b6:	0f 93       	push	r16
    47b8:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID, state);
    47ba:	04 2f       	mov	r16, r20
    47bc:	41 e0       	ldi	r20, 0x01	; 1
    47be:	62 e0       	ldi	r22, 0x02	; 2
    47c0:	8a e9       	ldi	r24, 0x9A	; 154
    47c2:	91 e0       	ldi	r25, 0x01	; 1
    47c4:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    47c8:	0f 91       	pop	r16
    47ca:	08 95       	ret

000047cc <_ZN8Encoders15setEncodingModeEhh>:

bool Encoders::setEncodingMode(uint8_t encoderID, uint8_t type)  {
    47cc:	0f 93       	push	r16
    47ce:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID, type);
    47d0:	04 2f       	mov	r16, r20
    47d2:	42 e0       	ldi	r20, 0x02	; 2
    47d4:	62 e0       	ldi	r22, 0x02	; 2
    47d6:	8a e9       	ldi	r24, 0x9A	; 154
    47d8:	91 e0       	ldi	r25, 0x01	; 1
    47da:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    47de:	0f 91       	pop	r16
    47e0:	08 95       	ret

000047e2 <_ZN8Encoders9setMIDIidEhh>:

bool Encoders::setMIDIid(uint8_t encoderID, uint8_t midiID)  {
    47e2:	0f 93       	push	r16
    47e4:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID, midiID);
    47e6:	04 2f       	mov	r16, r20
    47e8:	43 e0       	ldi	r20, 0x03	; 3
    47ea:	62 e0       	ldi	r22, 0x02	; 2
    47ec:	8a e9       	ldi	r24, 0x9A	; 154
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    47f4:	0f 91       	pop	r16
    47f6:	08 95       	ret

000047f8 <_ZN8Encoders12setParameterEhhh>:

bool Encoders::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    47f8:	34 2f       	mov	r19, r20

    switch(messageType) {
    47fa:	61 30       	cpi	r22, 0x01	; 1
    47fc:	59 f0       	breq	.+22     	; 0x4814 <_ZN8Encoders12setParameterEhhh+0x1c>
    47fe:	28 f0       	brcs	.+10     	; 0x480a <_ZN8Encoders12setParameterEhhh+0x12>
    4800:	62 30       	cpi	r22, 0x02	; 2
    4802:	69 f0       	breq	.+26     	; 0x481e <_ZN8Encoders12setParameterEhhh+0x26>
    4804:	63 30       	cpi	r22, 0x03	; 3
    4806:	81 f0       	breq	.+32     	; 0x4828 <_ZN8Encoders12setParameterEhhh+0x30>
    4808:	14 c0       	rjmp	.+40     	; 0x4832 <_ZN8Encoders12setParameterEhhh+0x3a>

        case encoderEnabledConf:
        return setEncoderEnabled(parameter, newParameter);
    480a:	42 2f       	mov	r20, r18
    480c:	63 2f       	mov	r22, r19
    480e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <_ZN8Encoders17setEncoderEnabledEhh>
    4812:	08 95       	ret
        break;

        case encoderInvertedConf:
        return setEncoderInvertState(parameter, newParameter);
    4814:	42 2f       	mov	r20, r18
    4816:	63 2f       	mov	r22, r19
    4818:	0e 94 db 23 	call	0x47b6	; 0x47b6 <_ZN8Encoders21setEncoderInvertStateEhh>
    481c:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return setEncodingMode(parameter, newParameter);
    481e:	42 2f       	mov	r20, r18
    4820:	63 2f       	mov	r22, r19
    4822:	0e 94 e6 23 	call	0x47cc	; 0x47cc <_ZN8Encoders15setEncodingModeEhh>
    4826:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return setMIDIid(parameter, newParameter);
    4828:	42 2f       	mov	r20, r18
    482a:	63 2f       	mov	r22, r19
    482c:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_ZN8Encoders9setMIDIidEhh>
    4830:	08 95       	ret
        break;

    }   return 0;
    4832:	80 e0       	ldi	r24, 0x00	; 0

}
    4834:	08 95       	ret

00004836 <_ZN4LEDs14velocity2colorEbh>:
    96-111 yellow
    112-127 green

    */

    switch(blinkEnabled) {
    4836:	61 30       	cpi	r22, 0x01	; 1
    4838:	21 f0       	breq	.+8      	; 0x4842 <_ZN4LEDs14velocity2colorEbh+0xc>

        case false:
        return (ledColor_t)(receivedVelocity/16);
    483a:	84 2f       	mov	r24, r20
    483c:	82 95       	swap	r24
    483e:	8f 70       	andi	r24, 0x0F	; 15
    4840:	08 95       	ret
        break;

        case true:
        if (receivedVelocity > 63) receivedVelocity -= 64;
    4842:	40 34       	cpi	r20, 0x40	; 64
    4844:	08 f0       	brcs	.+2      	; 0x4848 <_ZN4LEDs14velocity2colorEbh+0x12>
    4846:	40 54       	subi	r20, 0x40	; 64
        return (ledColor_t)(receivedVelocity/8);
    4848:	84 2f       	mov	r24, r20
    484a:	86 95       	lsr	r24
    484c:	86 95       	lsr	r24
    484e:	86 95       	lsr	r24
        break;

    }

}
    4850:	08 95       	ret

00004852 <_ZN4LEDs9allLEDsOnEv>:

    }

}

void LEDs::allLEDsOn()  {
    4852:	cf 93       	push	r28
    4854:	c0 e0       	ldi	r28, 0x00	; 0

    //turn on all LEDs
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    board.setLEDstate(i, colorOnDefault, false);
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	48 e0       	ldi	r20, 0x08	; 8
    485a:	6c 2f       	mov	r22, r28
    485c:	81 e4       	ldi	r24, 0x41	; 65
    485e:	92 e0       	ldi	r25, 0x02	; 2
    4860:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4864:	cf 5f       	subi	r28, 0xFF	; 255
    4866:	c0 33       	cpi	r28, 0x30	; 48
    4868:	b1 f7       	brne	.-20     	; 0x4856 <_ZN4LEDs9allLEDsOnEv+0x4>

}
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <_ZN4LEDs10allLEDsOffEv>:

void LEDs::allLEDsOff() {
    486e:	cf 93       	push	r28
    4870:	c0 e0       	ldi	r28, 0x00	; 0

    //turn off all LEDs
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    board.setLEDstate(i, colorOff, false);
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	40 e0       	ldi	r20, 0x00	; 0
    4876:	6c 2f       	mov	r22, r28
    4878:	81 e4       	ldi	r24, 0x41	; 65
    487a:	92 e0       	ldi	r25, 0x02	; 2
    487c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4880:	cf 5f       	subi	r28, 0xFF	; 255
    4882:	c0 33       	cpi	r28, 0x30	; 48
    4884:	b1 f7       	brne	.-20     	; 0x4872 <_ZN4LEDs10allLEDsOffEv+0x4>

}
    4886:	cf 91       	pop	r28
    4888:	08 95       	ret

0000488a <_ZN4LEDs12checkLEDsOffEv>:
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (board.getLEDstate(i))   return false;
    return true;

}

bool LEDs::checkLEDsOff()   {
    488a:	cf 93       	push	r28
    488c:	c0 e0       	ldi	r28, 0x00	; 0

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    488e:	6c 2f       	mov	r22, r28
    4890:	81 e4       	ldi	r24, 0x41	; 65
    4892:	92 e0       	ldi	r25, 0x02	; 2
    4894:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4898:	88 23       	and	r24, r24
    489a:	29 f0       	breq	.+10     	; 0x48a6 <_ZN4LEDs12checkLEDsOffEv+0x1c>
    489c:	cf 5f       	subi	r28, 0xFF	; 255
    489e:	c0 33       	cpi	r28, 0x30	; 48
    48a0:	b1 f7       	brne	.-20     	; 0x488e <_ZN4LEDs12checkLEDsOffEv+0x4>
    return true;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	01 c0       	rjmp	.+2      	; 0x48a8 <_ZN4LEDs12checkLEDsOffEv+0x1e>
}

bool LEDs::checkLEDsOff()   {

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    return true;

}
    48a8:	cf 91       	pop	r28
    48aa:	08 95       	ret

000048ac <_ZN4LEDs17getLEDHwParameterEh>:

uint8_t LEDs::getLEDHwParameter(uint8_t parameter)  {
    48ac:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    48ae:	20 91 21 02 	lds	r18, 0x0221
    48b2:	30 91 22 02 	lds	r19, 0x0222
    48b6:	80 91 1f 02 	lds	r24, 0x021F
    48ba:	90 91 20 02 	lds	r25, 0x0220
    48be:	82 0f       	add	r24, r18
    48c0:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    48c2:	20 91 33 02 	lds	r18, 0x0233
    48c6:	22 23       	and	r18, r18
    48c8:	a1 f0       	breq	.+40     	; 0x48f2 <_ZN4LEDs17getLEDHwParameterEh+0x46>
    48ca:	21 30       	cpi	r18, 0x01	; 1
    48cc:	b9 f4       	brne	.+46     	; 0x48fc <_ZN4LEDs17getLEDHwParameterEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    48ce:	26 2f       	mov	r18, r22
    48d0:	26 95       	lsr	r18
    48d2:	26 95       	lsr	r18
    48d4:	26 95       	lsr	r18
    48d6:	c6 2f       	mov	r28, r22
    48d8:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    48da:	82 0f       	add	r24, r18
    48dc:	91 1d       	adc	r25, r1
    48de:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	02 c0       	rjmp	.+4      	; 0x48ea <_ZN4LEDs17getLEDHwParameterEh+0x3e>
    48e6:	95 95       	asr	r25
    48e8:	87 95       	ror	r24
    48ea:	ca 95       	dec	r28
    48ec:	e2 f7       	brpl	.-8      	; 0x48e6 <_ZN4LEDs17getLEDHwParameterEh+0x3a>
    48ee:	81 70       	andi	r24, 0x01	; 1
    48f0:	06 c0       	rjmp	.+12     	; 0x48fe <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    48f2:	86 0f       	add	r24, r22
    48f4:	91 1d       	adc	r25, r1
    48f6:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    48fa:	01 c0       	rjmp	.+2      	; 0x48fe <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

        }   return 0;
    48fc:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter);

}
    48fe:	cf 91       	pop	r28
    4900:	08 95       	ret

00004902 <_ZN4LEDs20getLEDActivationNoteEh>:

uint8_t LEDs::getLEDActivationNote(uint8_t ledNumber)   {
    4902:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4904:	20 91 23 02 	lds	r18, 0x0223
    4908:	30 91 24 02 	lds	r19, 0x0224
    490c:	80 91 1f 02 	lds	r24, 0x021F
    4910:	90 91 20 02 	lds	r25, 0x0220
    4914:	82 0f       	add	r24, r18
    4916:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4918:	20 91 34 02 	lds	r18, 0x0234
    491c:	22 23       	and	r18, r18
    491e:	a1 f0       	breq	.+40     	; 0x4948 <_ZN4LEDs20getLEDActivationNoteEh+0x46>
    4920:	21 30       	cpi	r18, 0x01	; 1
    4922:	b9 f4       	brne	.+46     	; 0x4952 <_ZN4LEDs20getLEDActivationNoteEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4924:	26 2f       	mov	r18, r22
    4926:	26 95       	lsr	r18
    4928:	26 95       	lsr	r18
    492a:	26 95       	lsr	r18
    492c:	c6 2f       	mov	r28, r22
    492e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4930:	82 0f       	add	r24, r18
    4932:	91 1d       	adc	r25, r1
    4934:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	02 c0       	rjmp	.+4      	; 0x4940 <_ZN4LEDs20getLEDActivationNoteEh+0x3e>
    493c:	95 95       	asr	r25
    493e:	87 95       	ror	r24
    4940:	ca 95       	dec	r28
    4942:	e2 f7       	brpl	.-8      	; 0x493c <_ZN4LEDs20getLEDActivationNoteEh+0x3a>
    4944:	81 70       	andi	r24, 0x01	; 1
    4946:	06 c0       	rjmp	.+12     	; 0x4954 <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4948:	86 0f       	add	r24, r22
    494a:	91 1d       	adc	r25, r1
    494c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

        }   return 0;
    4952:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}
    4954:	cf 91       	pop	r28
    4956:	08 95       	ret

00004958 <_ZN4LEDs14noteToLEDstateEhh>:

    return (receivedVelocity > 63);

}

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {
    4958:	ef 92       	push	r14
    495a:	ff 92       	push	r15
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	8c 01       	movw	r16, r24
    4966:	d6 2f       	mov	r29, r22
    4968:	c4 2f       	mov	r28, r20

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    496a:	61 e0       	ldi	r22, 0x01	; 1
    496c:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4970:	61 e0       	ldi	r22, 0x01	; 1
    4972:	81 11       	cpse	r24, r1
    4974:	01 c0       	rjmp	.+2      	; 0x4978 <_ZN4LEDs14noteToLEDstateEhh+0x20>
    4976:	60 e0       	ldi	r22, 0x00	; 0
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    4978:	66 23       	and	r22, r22
    497a:	31 f0       	breq	.+12     	; 0x4988 <_ZN4LEDs14noteToLEDstateEhh+0x30>

}

bool LEDs::velocity2blinkState(uint8_t receivedVelocity)    {

    return (receivedVelocity > 63);
    497c:	ff 24       	eor	r15, r15
    497e:	f3 94       	inc	r15
    4980:	c0 34       	cpi	r28, 0x40	; 64
    4982:	18 f4       	brcc	.+6      	; 0x498a <_ZN4LEDs14noteToLEDstateEhh+0x32>
    4984:	f1 2c       	mov	r15, r1
    4986:	01 c0       	rjmp	.+2      	; 0x498a <_ZN4LEDs14noteToLEDstateEhh+0x32>

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    4988:	f1 2c       	mov	r15, r1
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor_t color = velocity2color(blinkEnabled_global, receivedVelocity);
    498a:	4c 2f       	mov	r20, r28
    498c:	c8 01       	movw	r24, r16
    498e:	0e 94 1b 24 	call	0x4836	; 0x4836 <_ZN4LEDs14velocity2colorEbh>
    4992:	e8 2e       	mov	r14, r24
    4994:	c0 e0       	ldi	r28, 0x00	; 0

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        if (getLEDActivationNote(i) == receivedNote)  {
    4996:	6c 2f       	mov	r22, r28
    4998:	c8 01       	movw	r24, r16
    499a:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN4LEDs20getLEDActivationNoteEh>
    499e:	8d 13       	cpse	r24, r29
    49a0:	07 c0       	rjmp	.+14     	; 0x49b0 <_ZN4LEDs14noteToLEDstateEhh+0x58>

            board.setLEDstate(i, color, blinkEnabled_led);
    49a2:	2f 2d       	mov	r18, r15
    49a4:	4e 2d       	mov	r20, r14
    49a6:	6c 2f       	mov	r22, r28
    49a8:	81 e4       	ldi	r24, 0x41	; 65
    49aa:	92 e0       	ldi	r25, 0x02	; 2
    49ac:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    49b0:	cf 5f       	subi	r28, 0xFF	; 255
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor_t color = velocity2color(blinkEnabled_global, receivedVelocity);

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    49b2:	c0 33       	cpi	r28, 0x30	; 48
    49b4:	81 f7       	brne	.-32     	; 0x4996 <_ZN4LEDs14noteToLEDstateEhh+0x3e>

        }

    }

}
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	1f 91       	pop	r17
    49bc:	0f 91       	pop	r16
    49be:	ff 90       	pop	r15
    49c0:	ef 90       	pop	r14
    49c2:	08 95       	ret

000049c4 <_ZN4LEDs19getLEDstartUpNumberEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}

uint8_t LEDs::getLEDstartUpNumber(uint8_t ledNumber)    {
    49c4:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    49c6:	20 91 25 02 	lds	r18, 0x0225
    49ca:	30 91 26 02 	lds	r19, 0x0226
    49ce:	80 91 1f 02 	lds	r24, 0x021F
    49d2:	90 91 20 02 	lds	r25, 0x0220
    49d6:	82 0f       	add	r24, r18
    49d8:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    49da:	20 91 35 02 	lds	r18, 0x0235
    49de:	22 23       	and	r18, r18
    49e0:	a1 f0       	breq	.+40     	; 0x4a0a <_ZN4LEDs19getLEDstartUpNumberEh+0x46>
    49e2:	21 30       	cpi	r18, 0x01	; 1
    49e4:	b9 f4       	brne	.+46     	; 0x4a14 <_ZN4LEDs19getLEDstartUpNumberEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    49e6:	26 2f       	mov	r18, r22
    49e8:	26 95       	lsr	r18
    49ea:	26 95       	lsr	r18
    49ec:	26 95       	lsr	r18
    49ee:	c6 2f       	mov	r28, r22
    49f0:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    49f2:	82 0f       	add	r24, r18
    49f4:	91 1d       	adc	r25, r1
    49f6:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	02 c0       	rjmp	.+4      	; 0x4a02 <_ZN4LEDs19getLEDstartUpNumberEh+0x3e>
    49fe:	95 95       	asr	r25
    4a00:	87 95       	ror	r24
    4a02:	ca 95       	dec	r28
    4a04:	e2 f7       	brpl	.-8      	; 0x49fe <_ZN4LEDs19getLEDstartUpNumberEh+0x3a>
    4a06:	81 70       	andi	r24, 0x01	; 1
    4a08:	06 c0       	rjmp	.+12     	; 0x4a16 <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4a0a:	86 0f       	add	r24, r22
    4a0c:	91 1d       	adc	r25, r1
    4a0e:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4a12:	01 c0       	rjmp	.+2      	; 0x4a16 <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

        }   return 0;
    4a14:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}
    4a16:	cf 91       	pop	r28
    4a18:	08 95       	ret

00004a1a <_ZN4LEDs11oneByOneLEDEbbb>:
    wait(1000);

}


void LEDs::oneByOneLED(bool ledDirection, bool singleLED, bool turnOn)  {
    4a1a:	2f 92       	push	r2
    4a1c:	3f 92       	push	r3
    4a1e:	4f 92       	push	r4
    4a20:	5f 92       	push	r5
    4a22:	6f 92       	push	r6
    4a24:	7f 92       	push	r7
    4a26:	8f 92       	push	r8
    4a28:	9f 92       	push	r9
    4a2a:	af 92       	push	r10
    4a2c:	bf 92       	push	r11
    4a2e:	cf 92       	push	r12
    4a30:	df 92       	push	r13
    4a32:	ef 92       	push	r14
    4a34:	ff 92       	push	r15
    4a36:	0f 93       	push	r16
    4a38:	1f 93       	push	r17
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
    4a42:	e4 97       	sbiw	r28, 0x34	; 52
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	7c 01       	movw	r14, r24
    4a50:	26 2e       	mov	r2, r22
    4a52:	44 2e       	mov	r4, r20
    4a54:	82 2e       	mov	r8, r18
                    false means that all LEDs are lighted up and they turn off one by one, depending
                    on second argument

    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;
    4a56:	62 e0       	ldi	r22, 0x02	; 2
    4a58:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	9c 01       	movw	r18, r24
    4a60:	22 0f       	add	r18, r18
    4a62:	33 1f       	adc	r19, r19
    4a64:	88 0f       	add	r24, r24
    4a66:	99 1f       	adc	r25, r25
    4a68:	88 0f       	add	r24, r24
    4a6a:	99 1f       	adc	r25, r25
    4a6c:	88 0f       	add	r24, r24
    4a6e:	99 1f       	adc	r25, r25
    4a70:	a9 01       	movw	r20, r18
    4a72:	48 0f       	add	r20, r24
    4a74:	59 1f       	adc	r21, r25
    4a76:	5a ab       	std	Y+50, r21	; 0x32
    4a78:	49 ab       	std	Y+49, r20	; 0x31

    //index of LED to be processed next
    uint8_t ledNumber,
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);
    4a7a:	60 e0       	ldi	r22, 0x00	; 0
    4a7c:	c7 01       	movw	r24, r14
    4a7e:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4a82:	98 2e       	mov	r9, r24

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    4a84:	68 2e       	mov	r6, r24
    4a86:	71 2c       	mov	r7, r1
    4a88:	16 14       	cp	r1, r6
    4a8a:	17 04       	cpc	r1, r7
    4a8c:	94 f4       	brge	.+36     	; 0x4ab2 <_ZN4LEDs11oneByOneLEDEbbb+0x98>
    4a8e:	ce 01       	movw	r24, r28
    4a90:	01 96       	adiw	r24, 0x01	; 1
    4a92:	6c 01       	movw	r12, r24
    4a94:	5c 01       	movw	r10, r24
    4a96:	a9 0c       	add	r10, r9
    4a98:	b1 1c       	adc	r11, r1
    4a9a:	8c 01       	movw	r16, r24
    4a9c:	60 2f       	mov	r22, r16
    4a9e:	6c 19       	sub	r22, r12
        _ledNumber[i] = getLEDstartUpNumber(i);
    4aa0:	c7 01       	movw	r24, r14
    4aa2:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <_ZN4LEDs19getLEDstartUpNumberEh>
    4aa6:	d8 01       	movw	r26, r16
    4aa8:	8d 93       	st	X+, r24
    4aaa:	8d 01       	movw	r16, r26
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    4aac:	aa 15       	cp	r26, r10
    4aae:	bb 05       	cpc	r27, r11
    4ab0:	a9 f7       	brne	.-22     	; 0x4a9c <_ZN4LEDs11oneByOneLEDEbbb+0x82>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    4ab2:	41 10       	cpse	r4, r1
    4ab4:	03 c0       	rjmp	.+6      	; 0x4abc <_ZN4LEDs11oneByOneLEDEbbb+0xa2>
    4ab6:	81 10       	cpse	r8, r1
    4ab8:	b9 c0       	rjmp	.+370    	; 0x4c2c <_ZN4LEDs11oneByOneLEDEbbb+0x212>
    4aba:	07 c0       	rjmp	.+14     	; 0x4aca <_ZN4LEDs11oneByOneLEDEbbb+0xb0>
    4abc:	c7 01       	movw	r24, r14
    4abe:	0e 94 45 24 	call	0x488a	; 0x488a <_ZN4LEDs12checkLEDsOffEv>
    4ac2:	88 23       	and	r24, r24
    4ac4:	29 f0       	breq	.+10     	; 0x4ad0 <_ZN4LEDs11oneByOneLEDEbbb+0xb6>
    4ac6:	81 10       	cpse	r8, r1
    4ac8:	05 c0       	rjmp	.+10     	; 0x4ad4 <_ZN4LEDs11oneByOneLEDEbbb+0xba>
    4aca:	c7 01       	movw	r24, r14
    4acc:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN4LEDs9allLEDsOnEv>

    if (turnOn) {
    4ad0:	88 20       	and	r8, r8
    4ad2:	a1 f1       	breq	.+104    	; 0x4b3c <_ZN4LEDs11oneByOneLEDEbbb+0x122>
    //it is we increment or decrement ledNumber by one, depending on previous and current direction.
    //When function is called second time with direction different than previous one, the number of
    //times it needs to execute is reduced by one, therefore passCounter is incremented.

        //right-to-left direction
        if (!ledDirection)  {
    4ad4:	21 10       	cpse	r2, r1
    4ad6:	15 c0       	rjmp	.+42     	; 0x4b02 <_ZN4LEDs11oneByOneLEDEbbb+0xe8>

            //if last LED is turned on
            if (board.getLEDstate(_ledNumber[totalNumberOfLEDs-1]))  {
    4ad8:	fe 01       	movw	r30, r28
    4ada:	e6 0d       	add	r30, r6
    4adc:	f7 1d       	adc	r31, r7
    4ade:	30 80       	ld	r3, Z
    4ae0:	63 2d       	mov	r22, r3
    4ae2:	81 e4       	ldi	r24, 0x41	; 65
    4ae4:	92 e0       	ldi	r25, 0x02	; 2
    4ae6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4aea:	88 23       	and	r24, r24
    4aec:	b1 f0       	breq	.+44     	; 0x4b1a <_ZN4LEDs11oneByOneLEDEbbb+0x100>

                //LED index is penultimate LED number
                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    4aee:	ef ef       	ldi	r30, 0xFF	; 255
    4af0:	ff ef       	ldi	r31, 0xFF	; 255
    4af2:	ec 0f       	add	r30, r28
    4af4:	fd 1f       	adc	r31, r29
    4af6:	e6 0d       	add	r30, r6
    4af8:	f7 1d       	adc	r31, r7
    4afa:	30 80       	ld	r3, Z
                //increment counter since the loop has to run one cycle less
                passCounter++;
    4afc:	55 24       	eor	r5, r5
    4afe:	53 94       	inc	r5
    4b00:	13 c0       	rjmp	.+38     	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>

        }   else {

            //left-to-right direction
            //if first LED is already on
            if (board.getLEDstate(_ledNumber[0]))    {
    4b02:	39 80       	ldd	r3, Y+1	; 0x01
    4b04:	63 2d       	mov	r22, r3
    4b06:	81 e4       	ldi	r24, 0x41	; 65
    4b08:	92 e0       	ldi	r25, 0x02	; 2
    4b0a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4b0e:	88 23       	and	r24, r24
    4b10:	31 f0       	breq	.+12     	; 0x4b1e <_ZN4LEDs11oneByOneLEDEbbb+0x104>

                //led index is 1
                ledNumber = _ledNumber[1];
    4b12:	3a 80       	ldd	r3, Y+2	; 0x02
                //increment counter
                passCounter++;
    4b14:	55 24       	eor	r5, r5
    4b16:	53 94       	inc	r5
    4b18:	07 c0       	rjmp	.+14     	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;

    //while loop counter
    uint8_t passCounter = 0;
    4b1a:	51 2c       	mov	r5, r1
    4b1c:	05 c0       	rjmp	.+10     	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4b1e:	51 2c       	mov	r5, r1
    4b20:	03 c0       	rjmp	.+6      	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4b22:	51 2c       	mov	r5, r1
    4b24:	01 c0       	rjmp	.+2      	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4b26:	51 2c       	mov	r5, r1

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4b28:	05 2d       	mov	r16, r5
    4b2a:	10 e0       	ldi	r17, 0x00	; 0
    4b2c:	63 01       	movw	r12, r6
    4b2e:	bf ef       	ldi	r27, 0xFF	; 255
    4b30:	cb 1a       	sub	r12, r27
    4b32:	db 0a       	sbc	r13, r27
    4b34:	0c 15       	cp	r16, r12
    4b36:	1d 05       	cpc	r17, r13
    4b38:	24 f1       	brlt	.+72     	; 0x4b82 <_ZN4LEDs11oneByOneLEDEbbb+0x168>
    4b3a:	7e c0       	rjmp	.+252    	; 0x4c38 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>
        //This is situation when all LEDs are turned on and we're turning them off one by one. Same
        //logic applies in both cases (see above). In this case we're not checking for whether the LED
        //is already turned on, but whether it's already turned off.

        //right-to-left direction
        if (!ledDirection)  {
    4b3c:	21 10       	cpse	r2, r1
    4b3e:	15 c0       	rjmp	.+42     	; 0x4b6a <_ZN4LEDs11oneByOneLEDEbbb+0x150>

            if (!(board.getLEDstate(_ledNumber[totalNumberOfLEDs-1])))   {
    4b40:	fe 01       	movw	r30, r28
    4b42:	e6 0d       	add	r30, r6
    4b44:	f7 1d       	adc	r31, r7
    4b46:	30 80       	ld	r3, Z
    4b48:	63 2d       	mov	r22, r3
    4b4a:	81 e4       	ldi	r24, 0x41	; 65
    4b4c:	92 e0       	ldi	r25, 0x02	; 2
    4b4e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4b52:	81 11       	cpse	r24, r1
    4b54:	e6 cf       	rjmp	.-52     	; 0x4b22 <_ZN4LEDs11oneByOneLEDEbbb+0x108>

                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    4b56:	ef ef       	ldi	r30, 0xFF	; 255
    4b58:	ff ef       	ldi	r31, 0xFF	; 255
    4b5a:	ec 0f       	add	r30, r28
    4b5c:	fd 1f       	adc	r31, r29
    4b5e:	e6 0d       	add	r30, r6
    4b60:	f7 1d       	adc	r31, r7
    4b62:	30 80       	ld	r3, Z
                passCounter++;
    4b64:	55 24       	eor	r5, r5
    4b66:	53 94       	inc	r5
    4b68:	df cf       	rjmp	.-66     	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            }   else ledNumber = _ledNumber[totalNumberOfLEDs-1];

            }   else {

            //left-to-right direction
            if (!(board.getLEDstate(_ledNumber[0]))) {
    4b6a:	39 80       	ldd	r3, Y+1	; 0x01
    4b6c:	63 2d       	mov	r22, r3
    4b6e:	81 e4       	ldi	r24, 0x41	; 65
    4b70:	92 e0       	ldi	r25, 0x02	; 2
    4b72:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4b76:	81 11       	cpse	r24, r1
    4b78:	d6 cf       	rjmp	.-84     	; 0x4b26 <_ZN4LEDs11oneByOneLEDEbbb+0x10c>

                ledNumber = _ledNumber[1];
    4b7a:	3a 80       	ldd	r3, Y+2	; 0x02
                passCounter++;
    4b7c:	55 24       	eor	r5, r5
    4b7e:	53 94       	inc	r5
    4b80:	d3 cf       	rjmp	.-90     	; 0x4b28 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    4b82:	53 01       	movw	r10, r6
    4b84:	e1 e0       	ldi	r30, 0x01	; 1
    4b86:	ae 1a       	sub	r10, r30
    4b88:	b1 08       	sbc	r11, r1

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    4b8a:	f2 e0       	ldi	r31, 0x02	; 2
    4b8c:	6f 1a       	sub	r6, r31
    4b8e:	71 08       	sbc	r7, r1
        }

        //always increment pass counter
        passCounter++;

        wait(startUpLEDswitchTime);
    4b90:	a9 a9       	ldd	r26, Y+49	; 0x31
    4b92:	ba a9       	ldd	r27, Y+50	; 0x32
    4b94:	cd 01       	movw	r24, r26
    4b96:	a0 e0       	ldi	r26, 0x00	; 0
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	89 ab       	std	Y+49, r24	; 0x31
    4b9c:	9a ab       	std	Y+50, r25	; 0x32
    4b9e:	ab ab       	std	Y+51, r26	; 0x33
    4ba0:	bc ab       	std	Y+52, r27	; 0x34

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {

        if (passCounter < totalNumberOfLEDs)    {
    4ba2:	59 14       	cp	r5, r9
    4ba4:	30 f5       	brcc	.+76     	; 0x4bf2 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

            //if we're turning LEDs on one by one, turn all the other LEDs off
            if (singleLED && turnOn)            allLEDsOff();
    4ba6:	44 20       	and	r4, r4
    4ba8:	31 f0       	breq	.+12     	; 0x4bb6 <_ZN4LEDs11oneByOneLEDEbbb+0x19c>
    4baa:	88 20       	and	r8, r8
    4bac:	39 f0       	breq	.+14     	; 0x4bbc <_ZN4LEDs11oneByOneLEDEbbb+0x1a2>
    4bae:	c7 01       	movw	r24, r14
    4bb0:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN4LEDs10allLEDsOffEv>
    4bb4:	2b c0       	rjmp	.+86     	; 0x4c0c <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();
    4bb6:	81 10       	cpse	r8, r1
    4bb8:	29 c0       	rjmp	.+82     	; 0x4c0c <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>
    4bba:	30 c0       	rjmp	.+96     	; 0x4c1c <_ZN4LEDs11oneByOneLEDEbbb+0x202>
    4bbc:	c7 01       	movw	r24, r14
    4bbe:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN4LEDs9allLEDsOnEv>
    4bc2:	2c c0       	rjmp	.+88     	; 0x4c1c <_ZN4LEDs11oneByOneLEDEbbb+0x202>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    4bc4:	0a 15       	cp	r16, r10
    4bc6:	1b 05       	cpc	r17, r11
    4bc8:	a4 f4       	brge	.+40     	; 0x4bf2 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    4bca:	21 10       	cpse	r2, r1
    4bcc:	0b c0       	rjmp	.+22     	; 0x4be4 <_ZN4LEDs11oneByOneLEDEbbb+0x1ca>
    4bce:	f3 01       	movw	r30, r6
    4bd0:	e0 1b       	sub	r30, r16
    4bd2:	f1 0b       	sbc	r31, r17
    4bd4:	41 e0       	ldi	r20, 0x01	; 1
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	4c 0f       	add	r20, r28
    4bda:	5d 1f       	adc	r21, r29
    4bdc:	e4 0f       	add	r30, r20
    4bde:	f5 1f       	adc	r31, r21
    4be0:	30 80       	ld	r3, Z
    4be2:	07 c0       	rjmp	.+14     	; 0x4bf2 <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //left-to-right direction
                else    if (passCounter < totalNumberOfLEDs-1)  ledNumber = _ledNumber[passCounter+1];
    4be4:	e2 e0       	ldi	r30, 0x02	; 2
    4be6:	f0 e0       	ldi	r31, 0x00	; 0
    4be8:	ec 0f       	add	r30, r28
    4bea:	fd 1f       	adc	r31, r29
    4bec:	e0 0f       	add	r30, r16
    4bee:	f1 1f       	adc	r31, r17
    4bf0:	30 80       	ld	r3, Z
            }

        }

        //always increment pass counter
        passCounter++;
    4bf2:	53 94       	inc	r5

        wait(startUpLEDswitchTime);
    4bf4:	69 a9       	ldd	r22, Y+49	; 0x31
    4bf6:	7a a9       	ldd	r23, Y+50	; 0x32
    4bf8:	8b a9       	ldd	r24, Y+51	; 0x33
    4bfa:	9c a9       	ldd	r25, Y+52	; 0x34
    4bfc:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4c00:	05 2d       	mov	r16, r5
    4c02:	10 e0       	ldi	r17, 0x00	; 0
    4c04:	0c 15       	cp	r16, r12
    4c06:	1d 05       	cpc	r17, r13
    4c08:	64 f2       	brlt	.-104    	; 0x4ba2 <_ZN4LEDs11oneByOneLEDEbbb+0x188>
    4c0a:	16 c0       	rjmp	.+44     	; 0x4c38 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();

            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	48 e0       	ldi	r20, 0x08	; 8
    4c10:	63 2d       	mov	r22, r3
    4c12:	81 e4       	ldi	r24, 0x41	; 65
    4c14:	92 e0       	ldi	r25, 0x02	; 2
    4c16:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4c1a:	d4 cf       	rjmp	.-88     	; 0x4bc4 <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
            else    board.setLEDstate(ledNumber, colorOff, false);
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	40 e0       	ldi	r20, 0x00	; 0
    4c20:	63 2d       	mov	r22, r3
    4c22:	81 e4       	ldi	r24, 0x41	; 65
    4c24:	92 e0       	ldi	r25, 0x02	; 2
    4c26:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
    4c2a:	cc cf       	rjmp	.-104    	; 0x4bc4 <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	0e 94 45 24 	call	0x488a	; 0x488a <_ZN4LEDs12checkLEDsOffEv>
    4c32:	81 11       	cpse	r24, r1
    4c34:	48 cf       	rjmp	.-368    	; 0x4ac6 <_ZN4LEDs11oneByOneLEDEbbb+0xac>
    4c36:	4e cf       	rjmp	.-356    	; 0x4ad4 <_ZN4LEDs11oneByOneLEDEbbb+0xba>

        wait(startUpLEDswitchTime);

    }

}
    4c38:	e4 96       	adiw	r28, 0x34	; 52
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	f8 94       	cli
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	cd bf       	out	0x3d, r28	; 61
    4c44:	df 91       	pop	r29
    4c46:	cf 91       	pop	r28
    4c48:	1f 91       	pop	r17
    4c4a:	0f 91       	pop	r16
    4c4c:	ff 90       	pop	r15
    4c4e:	ef 90       	pop	r14
    4c50:	df 90       	pop	r13
    4c52:	cf 90       	pop	r12
    4c54:	bf 90       	pop	r11
    4c56:	af 90       	pop	r10
    4c58:	9f 90       	pop	r9
    4c5a:	8f 90       	pop	r8
    4c5c:	7f 90       	pop	r7
    4c5e:	6f 90       	pop	r6
    4c60:	5f 90       	pop	r5
    4c62:	4f 90       	pop	r4
    4c64:	3f 90       	pop	r3
    4c66:	2f 90       	pop	r2
    4c68:	08 95       	ret

00004c6a <_ZN4LEDs16startUpAnimationEv>:
    //run LED animation on start-up
    startUpAnimation();

}

void LEDs::startUpAnimation() {
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	ec 01       	movw	r28, r24

    if (!getLEDHwParameter(ledHwParameterTotalLEDnumber) || !getLEDHwParameter(ledHwParameterStartUpSwitchTime))
    4c70:	60 e0       	ldi	r22, 0x00	; 0
    4c72:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4c76:	88 23       	and	r24, r24
    4c78:	09 f4       	brne	.+2      	; 0x4c7c <_ZN4LEDs16startUpAnimationEv+0x12>
    4c7a:	79 c0       	rjmp	.+242    	; 0x4d6e <_ZN4LEDs16startUpAnimationEv+0x104>
    4c7c:	62 e0       	ldi	r22, 0x02	; 2
    4c7e:	ce 01       	movw	r24, r28
    4c80:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4c84:	88 23       	and	r24, r24
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <_ZN4LEDs16startUpAnimationEv+0x20>
    4c88:	72 c0       	rjmp	.+228    	; 0x4d6e <_ZN4LEDs16startUpAnimationEv+0x104>
        return;

    //turn off all LEDs before starting animation
    allLEDsOff();
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN4LEDs10allLEDsOffEv>

    switch (getLEDHwParameter(ledHwParameterStartUpRoutine))  {
    4c90:	63 e0       	ldi	r22, 0x03	; 3
    4c92:	ce 01       	movw	r24, r28
    4c94:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4c98:	83 30       	cpi	r24, 0x03	; 3
    4c9a:	09 f4       	brne	.+2      	; 0x4c9e <_ZN4LEDs16startUpAnimationEv+0x34>
    4c9c:	3f c0       	rjmp	.+126    	; 0x4d1c <_ZN4LEDs16startUpAnimationEv+0xb2>
    4c9e:	28 f4       	brcc	.+10     	; 0x4caa <_ZN4LEDs16startUpAnimationEv+0x40>
    4ca0:	81 30       	cpi	r24, 0x01	; 1
    4ca2:	51 f0       	breq	.+20     	; 0x4cb8 <_ZN4LEDs16startUpAnimationEv+0x4e>
    4ca4:	82 30       	cpi	r24, 0x02	; 2
    4ca6:	69 f1       	breq	.+90     	; 0x4d02 <_ZN4LEDs16startUpAnimationEv+0x98>
    4ca8:	59 c0       	rjmp	.+178    	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>
    4caa:	84 30       	cpi	r24, 0x04	; 4
    4cac:	09 f4       	brne	.+2      	; 0x4cb0 <_ZN4LEDs16startUpAnimationEv+0x46>
    4cae:	43 c0       	rjmp	.+134    	; 0x4d36 <_ZN4LEDs16startUpAnimationEv+0xcc>
    4cb0:	85 30       	cpi	r24, 0x05	; 5
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <_ZN4LEDs16startUpAnimationEv+0x4c>
    4cb4:	4d c0       	rjmp	.+154    	; 0x4d50 <_ZN4LEDs16startUpAnimationEv+0xe6>
    4cb6:	52 c0       	rjmp	.+164    	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 1:
        oneByOneLED(true, true, true);
    4cb8:	21 e0       	ldi	r18, 0x01	; 1
    4cba:	41 e0       	ldi	r20, 0x01	; 1
    4cbc:	61 e0       	ldi	r22, 0x01	; 1
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, true);
    4cc4:	21 e0       	ldi	r18, 0x01	; 1
    4cc6:	40 e0       	ldi	r20, 0x00	; 0
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	ce 01       	movw	r24, r28
    4ccc:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	40 e0       	ldi	r20, 0x00	; 0
    4cd4:	61 e0       	ldi	r22, 0x01	; 1
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4cdc:	21 e0       	ldi	r18, 0x01	; 1
    4cde:	41 e0       	ldi	r20, 0x01	; 1
    4ce0:	60 e0       	ldi	r22, 0x00	; 0
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, true);
    4ce8:	21 e0       	ldi	r18, 0x01	; 1
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	61 e0       	ldi	r22, 0x01	; 1
    4cee:	ce 01       	movw	r24, r28
    4cf0:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    4cf4:	20 e0       	ldi	r18, 0x00	; 0
    4cf6:	40 e0       	ldi	r20, 0x00	; 0
    4cf8:	60 e0       	ldi	r22, 0x00	; 0
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d00:	2d c0       	rjmp	.+90     	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 2:
        oneByOneLED(true, false, true);
    4d02:	21 e0       	ldi	r18, 0x01	; 1
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	61 e0       	ldi	r22, 0x01	; 1
    4d08:	ce 01       	movw	r24, r28
    4d0a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	40 e0       	ldi	r20, 0x00	; 0
    4d12:	60 e0       	ldi	r22, 0x00	; 0
    4d14:	ce 01       	movw	r24, r28
    4d16:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d1a:	20 c0       	rjmp	.+64     	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 3:
        oneByOneLED(true, true, true);
    4d1c:	21 e0       	ldi	r18, 0x01	; 1
    4d1e:	41 e0       	ldi	r20, 0x01	; 1
    4d20:	61 e0       	ldi	r22, 0x01	; 1
    4d22:	ce 01       	movw	r24, r28
    4d24:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4d28:	21 e0       	ldi	r18, 0x01	; 1
    4d2a:	41 e0       	ldi	r20, 0x01	; 1
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	ce 01       	movw	r24, r28
    4d30:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d34:	13 c0       	rjmp	.+38     	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 4:
        oneByOneLED(true, false, true);
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	40 e0       	ldi	r20, 0x00	; 0
    4d3a:	61 e0       	ldi	r22, 0x01	; 1
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	40 e0       	ldi	r20, 0x00	; 0
    4d46:	61 e0       	ldi	r22, 0x01	; 1
    4d48:	ce 01       	movw	r24, r28
    4d4a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4d4e:	06 c0       	rjmp	.+12     	; 0x4d5c <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 5:
        oneByOneLED(true, false, true);
    4d50:	21 e0       	ldi	r18, 0x01	; 1
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	ce 01       	movw	r24, r28
    4d58:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN4LEDs11oneByOneLEDEbbb>
        default:
        break;

    }

    allLEDsOff();
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN4LEDs10allLEDsOffEv>
    wait(1000);
    4d62:	68 ee       	ldi	r22, 0xE8	; 232
    4d64:	73 e0       	ldi	r23, 0x03	; 3
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>

}
    4d6e:	df 91       	pop	r29
    4d70:	cf 91       	pop	r28
    4d72:	08 95       	ret

00004d74 <_ZN4LEDs4initEv>:

    //def const

}

void LEDs::init()   {
    4d74:	af 92       	push	r10
    4d76:	bf 92       	push	r11
    4d78:	cf 92       	push	r12
    4d7a:	df 92       	push	r13
    4d7c:	ef 92       	push	r14
    4d7e:	0f 93       	push	r16
    4d80:	1f 93       	push	r17
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	cd b7       	in	r28, 0x3d	; 61
    4d88:	de b7       	in	r29, 0x3e	; 62
    4d8a:	69 97       	sbiw	r28, 0x19	; 25
    4d8c:	0f b6       	in	r0, 0x3f	; 63
    4d8e:	f8 94       	cli
    4d90:	de bf       	out	0x3e, r29	; 62
    4d92:	0f be       	out	0x3f, r0	; 63
    4d94:	cd bf       	out	0x3d, r28	; 61
    4d96:	5c 01       	movw	r10, r24

    const subtype ledHardwareParameterSubtype   = { LED_HARDWARE_PARAMETERS, IGNORE_NEW_VALUE, IGNORE_NEW_VALUE };
    4d98:	85 e0       	ldi	r24, 0x05	; 5
    4d9a:	8f 8b       	std	Y+23, r24	; 0x17
    4d9c:	8f ef       	ldi	r24, 0xFF	; 255
    4d9e:	88 8f       	std	Y+24, r24	; 0x18
    4da0:	89 8f       	std	Y+25, r24	; 0x19
    const subtype ledActivationNoteSubtype      = { MAX_NUMBER_OF_LEDS, 0, 127 };
    4da2:	80 e3       	ldi	r24, 0x30	; 48
    4da4:	8c 8b       	std	Y+20, r24	; 0x14
    4da6:	1d 8a       	std	Y+21, r1	; 0x15
    4da8:	9f e7       	ldi	r25, 0x7F	; 127
    4daa:	9e 8b       	std	Y+22, r25	; 0x16
    const subtype ledStartUpNumberSubtype       = { MAX_NUMBER_OF_LEDS, 0, MAX_NUMBER_OF_LEDS-1 };
    4dac:	89 8b       	std	Y+17, r24	; 0x11
    4dae:	1a 8a       	std	Y+18, r1	; 0x12
    4db0:	9f e2       	ldi	r25, 0x2F	; 47
    4db2:	9b 8b       	std	Y+19, r25	; 0x13
    const subtype ledRGBenabledSubtype          = { MAX_NUMBER_OF_RGB_LEDS, 0, 1 };
    4db4:	90 e1       	ldi	r25, 0x10	; 16
    4db6:	9e 87       	std	Y+14, r25	; 0x0e
    4db8:	1f 86       	std	Y+15, r1	; 0x0f
    4dba:	91 e0       	ldi	r25, 0x01	; 1
    4dbc:	98 8b       	std	Y+16, r25	; 0x10
    const subtype ledsStateSubtype              = { MAX_NUMBER_OF_LEDS, 0, LED_STATES-1 };
    4dbe:	8b 87       	std	Y+11, r24	; 0x0b
    4dc0:	1c 86       	std	Y+12, r1	; 0x0c
    4dc2:	8e e0       	ldi	r24, 0x0E	; 14
    4dc4:	8d 87       	std	Y+13, r24	; 0x0d
        &ledActivationNoteSubtype,
        &ledStartUpNumberSubtype,
        &ledRGBenabledSubtype,
        &ledsStateSubtype

    };
    4dc6:	ce 01       	movw	r24, r28
    4dc8:	47 96       	adiw	r24, 0x17	; 23
    4dca:	9a 83       	std	Y+2, r25	; 0x02
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	03 97       	sbiw	r24, 0x03	; 3
    4dd0:	9c 83       	std	Y+4, r25	; 0x04
    4dd2:	8b 83       	std	Y+3, r24	; 0x03
    4dd4:	03 97       	sbiw	r24, 0x03	; 3
    4dd6:	9e 83       	std	Y+6, r25	; 0x06
    4dd8:	8d 83       	std	Y+5, r24	; 0x05
    4dda:	03 97       	sbiw	r24, 0x03	; 3
    4ddc:	98 87       	std	Y+8, r25	; 0x08
    4dde:	8f 83       	std	Y+7, r24	; 0x07
    4de0:	03 97       	sbiw	r24, 0x03	; 3
    4de2:	9a 87       	std	Y+10, r25	; 0x0a
    4de4:	89 87       	std	Y+9, r24	; 0x09

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);
    4de6:	45 e0       	ldi	r20, 0x05	; 5
    4de8:	64 e0       	ldi	r22, 0x04	; 4
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	97 e0       	ldi	r25, 0x07	; 7
    4dee:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5SysEx14addMessageTypeEhh>
    4df2:	ce 01       	movw	r24, r28
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	6c 01       	movw	r12, r24
    4df8:	10 e0       	ldi	r17, 0x00	; 0

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);
    4dfa:	d6 01       	movw	r26, r12
    4dfc:	ed 91       	ld	r30, X+
    4dfe:	fd 91       	ld	r31, X+
    4e00:	6d 01       	movw	r12, r26
    4e02:	e2 80       	ldd	r14, Z+2	; 0x02
    4e04:	01 81       	ldd	r16, Z+1	; 0x01
    4e06:	20 81       	ld	r18, Z
    4e08:	41 2f       	mov	r20, r17
    4e0a:	64 e0       	ldi	r22, 0x04	; 4
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	97 e0       	ldi	r25, 0x07	; 7
    4e10:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN5SysEx17addMessageSubTypeEhhhhh>
    4e14:	1f 5f       	subi	r17, 0xFF	; 255

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {
    4e16:	15 30       	cpi	r17, 0x05	; 5
    4e18:	81 f7       	brne	.-32     	; 0x4dfa <_ZN4LEDs4initEv+0x86>
        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);

    }

    board.setLEDblinkTime(getLEDHwParameter(ledHwParameterBlinkTime));
    4e1a:	61 e0       	ldi	r22, 0x01	; 1
    4e1c:	c5 01       	movw	r24, r10
    4e1e:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4e22:	68 2f       	mov	r22, r24
    4e24:	70 e0       	ldi	r23, 0x00	; 0
    4e26:	81 e4       	ldi	r24, 0x41	; 65
    4e28:	92 e0       	ldi	r25, 0x02	; 2
    4e2a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN5Board15setLEDblinkTimeEj>
    board.setLEDTransitionSpeed(getLEDHwParameter(ledHwParameterFadeTime));
    4e2e:	64 e0       	ldi	r22, 0x04	; 4
    4e30:	c5 01       	movw	r24, r10
    4e32:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4e36:	68 2f       	mov	r22, r24
    4e38:	81 e4       	ldi	r24, 0x41	; 65
    4e3a:	92 e0       	ldi	r25, 0x02	; 2
    4e3c:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>

    //run LED animation on start-up
    startUpAnimation();
    4e40:	c5 01       	movw	r24, r10
    4e42:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <_ZN4LEDs16startUpAnimationEv>

}
    4e46:	69 96       	adiw	r28, 0x19	; 25
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	de bf       	out	0x3e, r29	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	cd bf       	out	0x3d, r28	; 61
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	1f 91       	pop	r17
    4e58:	0f 91       	pop	r16
    4e5a:	ef 90       	pop	r14
    4e5c:	df 90       	pop	r13
    4e5e:	cf 90       	pop	r12
    4e60:	bf 90       	pop	r11
    4e62:	af 90       	pop	r10
    4e64:	08 95       	ret

00004e66 <_ZN4LEDs13getRGBenabledEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}

bool LEDs::getRGBenabled(uint8_t ledNumber) {
    4e66:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4e68:	20 91 27 02 	lds	r18, 0x0227
    4e6c:	30 91 28 02 	lds	r19, 0x0228
    4e70:	80 91 1f 02 	lds	r24, 0x021F
    4e74:	90 91 20 02 	lds	r25, 0x0220
    4e78:	82 0f       	add	r24, r18
    4e7a:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4e7c:	20 91 36 02 	lds	r18, 0x0236
    4e80:	22 23       	and	r18, r18
    4e82:	a9 f0       	breq	.+42     	; 0x4eae <_ZN4LEDs13getRGBenabledEh+0x48>
    4e84:	21 30       	cpi	r18, 0x01	; 1
    4e86:	c9 f4       	brne	.+50     	; 0x4eba <_ZN4LEDs13getRGBenabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4e88:	26 2f       	mov	r18, r22
    4e8a:	26 95       	lsr	r18
    4e8c:	26 95       	lsr	r18
    4e8e:	26 95       	lsr	r18
    4e90:	c6 2f       	mov	r28, r22
    4e92:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4e94:	82 0f       	add	r24, r18
    4e96:	91 1d       	adc	r25, r1
    4e98:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <_ZN4LEDs13getRGBenabledEh+0x3e>
    4ea0:	95 95       	asr	r25
    4ea2:	87 95       	ror	r24
    4ea4:	ca 95       	dec	r28
    4ea6:	e2 f7       	brpl	.-8      	; 0x4ea0 <_ZN4LEDs13getRGBenabledEh+0x3a>
    4ea8:	98 2f       	mov	r25, r24
    4eaa:	91 70       	andi	r25, 0x01	; 1
    4eac:	07 c0       	rjmp	.+14     	; 0x4ebc <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4eae:	86 0f       	add	r24, r22
    4eb0:	91 1d       	adc	r25, r1
    4eb2:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    4eb6:	98 2f       	mov	r25, r24
    4eb8:	01 c0       	rjmp	.+2      	; 0x4ebc <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

        }   return 0;
    4eba:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber);
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	91 11       	cpse	r25, r1
    4ec0:	01 c0       	rjmp	.+2      	; 0x4ec4 <_ZN4LEDs13getRGBenabledEh+0x5e>
    4ec2:	80 e0       	ldi	r24, 0x00	; 0

}
    4ec4:	cf 91       	pop	r28
    4ec6:	08 95       	ret

00004ec8 <_ZN4LEDs12getParameterEhh>:

uint8_t LEDs::getParameter(uint8_t messageType, uint8_t parameterID)   {

    switch(messageType) {
    4ec8:	62 30       	cpi	r22, 0x02	; 2
    4eca:	a9 f0       	breq	.+42     	; 0x4ef6 <_ZN4LEDs12getParameterEhh+0x2e>
    4ecc:	28 f4       	brcc	.+10     	; 0x4ed8 <_ZN4LEDs12getParameterEhh+0x10>
    4ece:	66 23       	and	r22, r22
    4ed0:	41 f0       	breq	.+16     	; 0x4ee2 <_ZN4LEDs12getParameterEhh+0x1a>
    4ed2:	61 30       	cpi	r22, 0x01	; 1
    4ed4:	59 f0       	breq	.+22     	; 0x4eec <_ZN4LEDs12getParameterEhh+0x24>
    4ed6:	23 c0       	rjmp	.+70     	; 0x4f1e <_ZN4LEDs12getParameterEhh+0x56>
    4ed8:	63 30       	cpi	r22, 0x03	; 3
    4eda:	91 f0       	breq	.+36     	; 0x4f00 <_ZN4LEDs12getParameterEhh+0x38>
    4edc:	64 30       	cpi	r22, 0x04	; 4
    4ede:	a9 f0       	breq	.+42     	; 0x4f0a <_ZN4LEDs12getParameterEhh+0x42>
    4ee0:	1e c0       	rjmp	.+60     	; 0x4f1e <_ZN4LEDs12getParameterEhh+0x56>

        case ledHardwareParameterConf:
        return getLEDHwParameter(parameterID);
    4ee2:	64 2f       	mov	r22, r20
    4ee4:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN4LEDs17getLEDHwParameterEh>
    4ee8:	98 2f       	mov	r25, r24
    4eea:	1a c0       	rjmp	.+52     	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledActivationNoteConf:
        return getLEDActivationNote(parameterID);
    4eec:	64 2f       	mov	r22, r20
    4eee:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN4LEDs20getLEDActivationNoteEh>
    4ef2:	98 2f       	mov	r25, r24
    4ef4:	15 c0       	rjmp	.+42     	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStartUpNumberConf:
        return getLEDstartUpNumber(parameterID);
    4ef6:	64 2f       	mov	r22, r20
    4ef8:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <_ZN4LEDs19getLEDstartUpNumberEh>
    4efc:	98 2f       	mov	r25, r24
    4efe:	10 c0       	rjmp	.+32     	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledRGBenabledConf:
        return getRGBenabled(parameterID);
    4f00:	64 2f       	mov	r22, r20
    4f02:	0e 94 33 27 	call	0x4e66	; 0x4e66 <_ZN4LEDs13getRGBenabledEh>
    4f06:	98 2f       	mov	r25, r24
    4f08:	0b c0       	rjmp	.+22     	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStateConf:
        return (bool)board.getLEDstate(parameterID);
    4f0a:	64 2f       	mov	r22, r20
    4f0c:	81 e4       	ldi	r24, 0x41	; 65
    4f0e:	92 e0       	ldi	r25, 0x02	; 2
    4f10:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board11getLEDstateEh>
    4f14:	91 e0       	ldi	r25, 0x01	; 1
    4f16:	81 11       	cpse	r24, r1
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	01 c0       	rjmp	.+2      	; 0x4f20 <_ZN4LEDs12getParameterEhh+0x58>
        break;

    }   return 0;
    4f1e:	90 e0       	ldi	r25, 0x00	; 0

}
    4f20:	89 2f       	mov	r24, r25
    4f22:	08 95       	ret

00004f24 <_ZN4LEDs17setLEDHwParameterEhh>:


bool LEDs::setLEDHwParameter(uint8_t parameter, uint8_t newParameter) {
    4f24:	0f 93       	push	r16
    4f26:	cf 93       	push	r28
    4f28:	c4 2f       	mov	r28, r20

    //some special considerations here
    switch(parameter)   {
    4f2a:	62 30       	cpi	r22, 0x02	; 2
    4f2c:	d9 f0       	breq	.+54     	; 0x4f64 <_ZN4LEDs17setLEDHwParameterEhh+0x40>
    4f2e:	18 f4       	brcc	.+6      	; 0x4f36 <_ZN4LEDs17setLEDHwParameterEhh+0x12>
    4f30:	61 30       	cpi	r22, 0x01	; 1
    4f32:	31 f0       	breq	.+12     	; 0x4f40 <_ZN4LEDs17setLEDHwParameterEhh+0x1c>
    4f34:	29 c0       	rjmp	.+82     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4f36:	63 30       	cpi	r22, 0x03	; 3
    4f38:	f1 f0       	breq	.+60     	; 0x4f76 <_ZN4LEDs17setLEDHwParameterEhh+0x52>
    4f3a:	64 30       	cpi	r22, 0x04	; 4
    4f3c:	51 f0       	breq	.+20     	; 0x4f52 <_ZN4LEDs17setLEDHwParameterEhh+0x2e>
    4f3e:	24 c0       	rjmp	.+72     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>

        case ledHwParameterBlinkTime:
        if ((newParameter < BLINK_TIME_MIN) || (newParameter > BLINK_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4f40:	40 31       	cpi	r20, 0x10	; 16
    4f42:	10 f1       	brcs	.+68     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4f44:	66 e0       	ldi	r22, 0x06	; 6
    4f46:	80 e0       	ldi	r24, 0x00	; 0
    4f48:	97 e0       	ldi	r25, 0x07	; 7
    4f4a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	3c c0       	rjmp	.+120    	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterFadeTime:
        if ((newParameter < FADE_TIME_MIN) || (newParameter > FADE_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4f52:	4b 30       	cpi	r20, 0x0B	; 11
    4f54:	c8 f0       	brcs	.+50     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4f56:	66 e0       	ldi	r22, 0x06	; 6
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	97 e0       	ldi	r25, 0x07	; 7
    4f5c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	33 c0       	rjmp	.+102    	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpSwitchTime:
        if ((newParameter < START_UP_SWITCH_TIME_MIN) || (newParameter > START_UP_SWITCH_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4f64:	49 37       	cpi	r20, 0x79	; 121
    4f66:	80 f0       	brcs	.+32     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4f68:	66 e0       	ldi	r22, 0x06	; 6
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	97 e0       	ldi	r25, 0x07	; 7
    4f6e:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	2a c0       	rjmp	.+84     	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpRoutine:
        if (newParameter > NUMBER_OF_START_UP_ANIMATIONS) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4f76:	46 30       	cpi	r20, 0x06	; 6
    4f78:	38 f0       	brcs	.+14     	; 0x4f88 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4f7a:	66 e0       	ldi	r22, 0x06	; 6
    4f7c:	80 e0       	ldi	r24, 0x00	; 0
    4f7e:	97 e0       	ldi	r25, 0x07	; 7
    4f80:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
    4f84:	80 e0       	ldi	r24, 0x00	; 0
    4f86:	21 c0       	rjmp	.+66     	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        default:
        break;

    }

    bool returnValue = configuration.writeParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter, newParameter);
    4f88:	0c 2f       	mov	r16, r28
    4f8a:	26 2f       	mov	r18, r22
    4f8c:	40 e0       	ldi	r20, 0x00	; 0
    4f8e:	64 e0       	ldi	r22, 0x04	; 4
    4f90:	8a e9       	ldi	r24, 0x9A	; 154
    4f92:	91 e0       	ldi	r25, 0x01	; 1
    4f94:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

    if (returnValue)    {
    4f98:	88 23       	and	r24, r24
    4f9a:	a1 f0       	breq	.+40     	; 0x4fc4 <_ZN4LEDs17setLEDHwParameterEhh+0xa0>

        switch(newParameter)    {
    4f9c:	c1 30       	cpi	r28, 0x01	; 1
    4f9e:	19 f0       	breq	.+6      	; 0x4fa6 <_ZN4LEDs17setLEDHwParameterEhh+0x82>
    4fa0:	c4 30       	cpi	r28, 0x04	; 4
    4fa2:	49 f0       	breq	.+18     	; 0x4fb6 <_ZN4LEDs17setLEDHwParameterEhh+0x92>
    4fa4:	11 c0       	rjmp	.+34     	; 0x4fc8 <_ZN4LEDs17setLEDHwParameterEhh+0xa4>

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
    4fa6:	61 e0       	ldi	r22, 0x01	; 1
    4fa8:	70 e0       	ldi	r23, 0x00	; 0
    4faa:	81 e4       	ldi	r24, 0x41	; 65
    4fac:	92 e0       	ldi	r25, 0x02	; 2
    4fae:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN5Board15setLEDblinkTimeEj>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1

        switch(newParameter)    {

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
            break;
    4fb4:	0a c0       	rjmp	.+20     	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
    4fb6:	64 e0       	ldi	r22, 0x04	; 4
    4fb8:	81 e4       	ldi	r24, 0x41	; 65
    4fba:	92 e0       	ldi	r25, 0x02	; 2
    4fbc:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>
            break;

        }   return true;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
            board.setLEDblinkTime(newParameter);
            break;

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;
    4fc2:	03 c0       	rjmp	.+6      	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

        }   return true;

    }   return false;
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	01 c0       	rjmp	.+2      	; 0x4fca <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    4fc8:	81 e0       	ldi	r24, 0x01	; 1

    }   return false;

}
    4fca:	cf 91       	pop	r28
    4fcc:	0f 91       	pop	r16
    4fce:	08 95       	ret

00004fd0 <_ZN4LEDs20setLEDActivationNoteEhh>:

bool LEDs::setLEDActivationNote(uint8_t ledNumber, uint8_t ledActNote) {
    4fd0:	0f 93       	push	r16
    4fd2:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber, ledActNote);
    4fd4:	04 2f       	mov	r16, r20
    4fd6:	41 e0       	ldi	r20, 0x01	; 1
    4fd8:	64 e0       	ldi	r22, 0x04	; 4
    4fda:	8a e9       	ldi	r24, 0x9A	; 154
    4fdc:	91 e0       	ldi	r25, 0x01	; 1
    4fde:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4fe2:	0f 91       	pop	r16
    4fe4:	08 95       	ret

00004fe6 <_ZN4LEDs17setLEDstartNumberEhh>:

bool LEDs::setLEDstartNumber(uint8_t startNumber, uint8_t ledNumber) {
    4fe6:	0f 93       	push	r16
    4fe8:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledStartUpNumberSection, startNumber, ledNumber);
    4fea:	04 2f       	mov	r16, r20
    4fec:	42 e0       	ldi	r20, 0x02	; 2
    4fee:	64 e0       	ldi	r22, 0x04	; 4
    4ff0:	8a e9       	ldi	r24, 0x9A	; 154
    4ff2:	91 e0       	ldi	r25, 0x01	; 1
    4ff4:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    4ff8:	0f 91       	pop	r16
    4ffa:	08 95       	ret

00004ffc <_ZN4LEDs13setRGBenabledEhb>:

bool LEDs::setRGBenabled(uint8_t ledNumber, bool state) {
    4ffc:	0f 93       	push	r16
    4ffe:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber, state);
    5000:	04 2f       	mov	r16, r20
    5002:	43 e0       	ldi	r20, 0x03	; 3
    5004:	64 e0       	ldi	r22, 0x04	; 4
    5006:	8a e9       	ldi	r24, 0x9A	; 154
    5008:	91 e0       	ldi	r25, 0x01	; 1
    500a:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    500e:	0f 91       	pop	r16
    5010:	08 95       	ret

00005012 <_ZN4LEDs12setParameterEhhh>:

bool LEDs::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    5012:	34 2f       	mov	r19, r20

    switch(messageType) {
    5014:	62 30       	cpi	r22, 0x02	; 2
    5016:	a9 f0       	breq	.+42     	; 0x5042 <_ZN4LEDs12setParameterEhhh+0x30>
    5018:	28 f4       	brcc	.+10     	; 0x5024 <_ZN4LEDs12setParameterEhhh+0x12>
    501a:	66 23       	and	r22, r22
    501c:	41 f0       	breq	.+16     	; 0x502e <_ZN4LEDs12setParameterEhhh+0x1c>
    501e:	61 30       	cpi	r22, 0x01	; 1
    5020:	59 f0       	breq	.+22     	; 0x5038 <_ZN4LEDs12setParameterEhhh+0x26>
    5022:	ae c0       	rjmp	.+348    	; 0x5180 <_ZN4LEDs12setParameterEhhh+0x16e>
    5024:	63 30       	cpi	r22, 0x03	; 3
    5026:	91 f0       	breq	.+36     	; 0x504c <_ZN4LEDs12setParameterEhhh+0x3a>
    5028:	64 30       	cpi	r22, 0x04	; 4
    502a:	c1 f0       	breq	.+48     	; 0x505c <_ZN4LEDs12setParameterEhhh+0x4a>
    502c:	a9 c0       	rjmp	.+338    	; 0x5180 <_ZN4LEDs12setParameterEhhh+0x16e>

        case ledHardwareParameterConf:
        return setLEDHwParameter(parameter, newParameter);
    502e:	42 2f       	mov	r20, r18
    5030:	63 2f       	mov	r22, r19
    5032:	0e 94 92 27 	call	0x4f24	; 0x4f24 <_ZN4LEDs17setLEDHwParameterEhh>
    5036:	08 95       	ret
        break;

        case ledActivationNoteConf:
        return setLEDActivationNote(parameter, newParameter);
    5038:	42 2f       	mov	r20, r18
    503a:	63 2f       	mov	r22, r19
    503c:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <_ZN4LEDs20setLEDActivationNoteEhh>
    5040:	08 95       	ret
        break;

        case ledStartUpNumberConf:
        return setLEDstartNumber(parameter, newParameter);
    5042:	42 2f       	mov	r20, r18
    5044:	63 2f       	mov	r22, r19
    5046:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZN4LEDs17setLEDstartNumberEhh>
    504a:	08 95       	ret
        break;

        case ledRGBenabledConf:
        return setRGBenabled(parameter, newParameter);
    504c:	41 e0       	ldi	r20, 0x01	; 1
    504e:	21 11       	cpse	r18, r1
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <_ZN4LEDs12setParameterEhhh+0x42>
    5052:	40 e0       	ldi	r20, 0x00	; 0
    5054:	63 2f       	mov	r22, r19
    5056:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <_ZN4LEDs13setRGBenabledEhb>
    505a:	08 95       	ret
        break;

        case ledStateConf:
        switch ((ledStatesHardwareParameter)newParameter)   {
    505c:	82 2f       	mov	r24, r18
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	8f 30       	cpi	r24, 0x0F	; 15
    5062:	91 05       	cpc	r25, r1
    5064:	08 f0       	brcs	.+2      	; 0x5068 <_ZN4LEDs12setParameterEhhh+0x56>
    5066:	8e c0       	rjmp	.+284    	; 0x5184 <_ZN4LEDs12setParameterEhhh+0x172>
    5068:	fc 01       	movw	r30, r24
    506a:	e0 52       	subi	r30, 0x20	; 32
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__tablejump2__>

            case ledStateOff:
            board.setLEDstate(parameter, colorOff, false);
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	40 e0       	ldi	r20, 0x00	; 0
    5076:	63 2f       	mov	r22, r19
    5078:	81 e4       	ldi	r24, 0x41	; 65
    507a:	92 e0       	ldi	r25, 0x02	; 2
    507c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	08 95       	ret
            break;

            case ledStateConstantWhite:
            board.setLEDstate(parameter, colorWhite, false);
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	41 e0       	ldi	r20, 0x01	; 1
    5088:	63 2f       	mov	r22, r19
    508a:	81 e4       	ldi	r24, 0x41	; 65
    508c:	92 e0       	ldi	r25, 0x02	; 2
    508e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	08 95       	ret
            break;

            case ledStateConstantCyan:
            board.setLEDstate(parameter, colorCyan, false);
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	42 e0       	ldi	r20, 0x02	; 2
    509a:	63 2f       	mov	r22, r19
    509c:	81 e4       	ldi	r24, 0x41	; 65
    509e:	92 e0       	ldi	r25, 0x02	; 2
    50a0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	08 95       	ret
            break;

            case ledStateConstantMagenta:
            board.setLEDstate(parameter, colorMagenta, false);
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	43 e0       	ldi	r20, 0x03	; 3
    50ac:	63 2f       	mov	r22, r19
    50ae:	81 e4       	ldi	r24, 0x41	; 65
    50b0:	92 e0       	ldi	r25, 0x02	; 2
    50b2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    50b8:	08 95       	ret
            break;

            case ledStateConstantRed:
            board.setLEDstate(parameter, colorRed, false);
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	44 e0       	ldi	r20, 0x04	; 4
    50be:	63 2f       	mov	r22, r19
    50c0:	81 e4       	ldi	r24, 0x41	; 65
    50c2:	92 e0       	ldi	r25, 0x02	; 2
    50c4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	08 95       	ret
            break;

            case ledStateConstantBlue:
            board.setLEDstate(parameter, colorBlue, false);
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	45 e0       	ldi	r20, 0x05	; 5
    50d0:	63 2f       	mov	r22, r19
    50d2:	81 e4       	ldi	r24, 0x41	; 65
    50d4:	92 e0       	ldi	r25, 0x02	; 2
    50d6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50da:	81 e0       	ldi	r24, 0x01	; 1
    50dc:	08 95       	ret
            break;

            case ledStateConstantYellow:
            board.setLEDstate(parameter, colorYellow, false);
    50de:	20 e0       	ldi	r18, 0x00	; 0
    50e0:	46 e0       	ldi	r20, 0x06	; 6
    50e2:	63 2f       	mov	r22, r19
    50e4:	81 e4       	ldi	r24, 0x41	; 65
    50e6:	92 e0       	ldi	r25, 0x02	; 2
    50e8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	08 95       	ret
            break;

            case ledStateConstantGreen:
            board.setLEDstate(parameter, colorGreen, false);
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	47 e0       	ldi	r20, 0x07	; 7
    50f4:	63 2f       	mov	r22, r19
    50f6:	81 e4       	ldi	r24, 0x41	; 65
    50f8:	92 e0       	ldi	r25, 0x02	; 2
    50fa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	08 95       	ret
            break;

            case ledStateBlinkWhite:
            board.setLEDstate(parameter, colorWhite, true);
    5102:	21 e0       	ldi	r18, 0x01	; 1
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	63 2f       	mov	r22, r19
    5108:	81 e4       	ldi	r24, 0x41	; 65
    510a:	92 e0       	ldi	r25, 0x02	; 2
    510c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	08 95       	ret
            break;

            case ledStateBlinkCyan:
            board.setLEDstate(parameter, colorCyan, true);
    5114:	21 e0       	ldi	r18, 0x01	; 1
    5116:	42 e0       	ldi	r20, 0x02	; 2
    5118:	63 2f       	mov	r22, r19
    511a:	81 e4       	ldi	r24, 0x41	; 65
    511c:	92 e0       	ldi	r25, 0x02	; 2
    511e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	08 95       	ret
            break;

            case ledStateBlinkMagenta:
            board.setLEDstate(parameter, colorMagenta, true);
    5126:	21 e0       	ldi	r18, 0x01	; 1
    5128:	43 e0       	ldi	r20, 0x03	; 3
    512a:	63 2f       	mov	r22, r19
    512c:	81 e4       	ldi	r24, 0x41	; 65
    512e:	92 e0       	ldi	r25, 0x02	; 2
    5130:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	08 95       	ret
            break;

            case ledStateBlinkRed:
            board.setLEDstate(parameter, colorRed, true);
    5138:	21 e0       	ldi	r18, 0x01	; 1
    513a:	44 e0       	ldi	r20, 0x04	; 4
    513c:	63 2f       	mov	r22, r19
    513e:	81 e4       	ldi	r24, 0x41	; 65
    5140:	92 e0       	ldi	r25, 0x02	; 2
    5142:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	08 95       	ret
            break;

            case ledStateBlinkBlue:
            board.setLEDstate(parameter, colorBlue, true);
    514a:	21 e0       	ldi	r18, 0x01	; 1
    514c:	45 e0       	ldi	r20, 0x05	; 5
    514e:	63 2f       	mov	r22, r19
    5150:	81 e4       	ldi	r24, 0x41	; 65
    5152:	92 e0       	ldi	r25, 0x02	; 2
    5154:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	08 95       	ret
            break;

            case ledStateBlinkYellow:
            board.setLEDstate(parameter, colorYellow, true);
    515c:	21 e0       	ldi	r18, 0x01	; 1
    515e:	46 e0       	ldi	r20, 0x06	; 6
    5160:	63 2f       	mov	r22, r19
    5162:	81 e4       	ldi	r24, 0x41	; 65
    5164:	92 e0       	ldi	r25, 0x02	; 2
    5166:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	08 95       	ret
            break;

            case ledStateBlinkGreen:
            board.setLEDstate(parameter, colorGreen, true);
    516e:	21 e0       	ldi	r18, 0x01	; 1
    5170:	47 e0       	ldi	r20, 0x07	; 7
    5172:	63 2f       	mov	r22, r19
    5174:	81 e4       	ldi	r24, 0x41	; 65
    5176:	92 e0       	ldi	r25, 0x02	; 2
    5178:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_ZN5Board11setLEDstateEh10ledColor_tb>
            return true;
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	08 95       	ret
            break;

        }
        break;

    }   return false;
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	08 95       	ret
            board.setLEDstate(parameter, colorGreen, true);
            return true;
            break;

            default:
            return false;
    5184:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;

    }   return false;

}
    5186:	08 95       	ret

00005188 <_ZN4MIDI9sendSysExEPhh>:
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, usbInterface);
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, dinInterface);

}

void MIDI::sendSysEx(uint8_t *sysExArray, uint8_t arraySize)   {
    5188:	0f 93       	push	r16

    switch (source) {
    518a:	fc 01       	movw	r30, r24
    518c:	84 81       	ldd	r24, Z+4	; 0x04
    518e:	88 23       	and	r24, r24
    5190:	19 f0       	breq	.+6      	; 0x5198 <_ZN4MIDI9sendSysExEPhh+0x10>
    5192:	81 30       	cpi	r24, 0x01	; 1
    5194:	61 f0       	breq	.+24     	; 0x51ae <_ZN4MIDI9sendSysExEPhh+0x26>
    5196:	15 c0       	rjmp	.+42     	; 0x51c2 <_ZN4MIDI9sendSysExEPhh+0x3a>

        case dinInterface:
        hwMIDI.sendSysEx(arraySize, sysExArray, false, dinInterface);
    5198:	84 2f       	mov	r24, r20
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	00 e0       	ldi	r16, 0x00	; 0
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	ab 01       	movw	r20, r22
    51a2:	bc 01       	movw	r22, r24
    51a4:	81 ea       	ldi	r24, 0xA1	; 161
    51a6:	93 e0       	ldi	r25, 0x03	; 3
    51a8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
        break;
    51ac:	0a c0       	rjmp	.+20     	; 0x51c2 <_ZN4MIDI9sendSysExEPhh+0x3a>

        case usbInterface:
        hwMIDI.sendSysEx(arraySize, sysExArray, false, usbInterface);
    51ae:	84 2f       	mov	r24, r20
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	01 e0       	ldi	r16, 0x01	; 1
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	ab 01       	movw	r20, r22
    51b8:	bc 01       	movw	r22, r24
    51ba:	81 ea       	ldi	r24, 0xA1	; 161
    51bc:	93 e0       	ldi	r25, 0x03	; 3
    51be:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
        break;

    }

}
    51c2:	0f 91       	pop	r16
    51c4:	08 95       	ret

000051c6 <_ZN4MIDI10getFeatureEh>:


bool MIDI::getFeature(uint8_t featureID)  {
    51c6:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    51c8:	ea e9       	ldi	r30, 0x9A	; 154
    51ca:	f1 e0       	ldi	r31, 0x01	; 1
    51cc:	23 81       	ldd	r18, Z+3	; 0x03
    51ce:	34 81       	ldd	r19, Z+4	; 0x04
    51d0:	81 81       	ldd	r24, Z+1	; 0x01
    51d2:	92 81       	ldd	r25, Z+2	; 0x02
    51d4:	82 0f       	add	r24, r18
    51d6:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    51d8:	25 89       	ldd	r18, Z+21	; 0x15
    51da:	22 23       	and	r18, r18
    51dc:	a9 f0       	breq	.+42     	; 0x5208 <_ZN4MIDI10getFeatureEh+0x42>
    51de:	21 30       	cpi	r18, 0x01	; 1
    51e0:	c9 f4       	brne	.+50     	; 0x5214 <_ZN4MIDI10getFeatureEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    51e2:	26 2f       	mov	r18, r22
    51e4:	26 95       	lsr	r18
    51e6:	26 95       	lsr	r18
    51e8:	26 95       	lsr	r18
    51ea:	c6 2f       	mov	r28, r22
    51ec:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    51ee:	82 0f       	add	r24, r18
    51f0:	91 1d       	adc	r25, r1
    51f2:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <_ZN4MIDI10getFeatureEh+0x38>
    51fa:	95 95       	asr	r25
    51fc:	87 95       	ror	r24
    51fe:	ca 95       	dec	r28
    5200:	e2 f7       	brpl	.-8      	; 0x51fa <_ZN4MIDI10getFeatureEh+0x34>
    5202:	98 2f       	mov	r25, r24
    5204:	91 70       	andi	r25, 0x01	; 1
    5206:	07 c0       	rjmp	.+14     	; 0x5216 <_ZN4MIDI10getFeatureEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    5208:	86 0f       	add	r24, r22
    520a:	91 1d       	adc	r25, r1
    520c:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    5210:	98 2f       	mov	r25, r24
    5212:	01 c0       	rjmp	.+2      	; 0x5216 <_ZN4MIDI10getFeatureEh+0x50>
            break;

        }   return 0;
    5214:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID);
    5216:	81 e0       	ldi	r24, 0x01	; 1
    5218:	91 11       	cpse	r25, r1
    521a:	01 c0       	rjmp	.+2      	; 0x521e <_ZN4MIDI10getFeatureEh+0x58>
    521c:	80 e0       	ldi	r24, 0x00	; 0

}
    521e:	cf 91       	pop	r28
    5220:	08 95       	ret

00005222 <_ZN4MIDI14getMIDIchannelEh>:

uint8_t MIDI::getMIDIchannel(uint8_t channel)  {
    5222:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    5224:	ea e9       	ldi	r30, 0x9A	; 154
    5226:	f1 e0       	ldi	r31, 0x01	; 1
    5228:	25 81       	ldd	r18, Z+5	; 0x05
    522a:	36 81       	ldd	r19, Z+6	; 0x06
    522c:	81 81       	ldd	r24, Z+1	; 0x01
    522e:	92 81       	ldd	r25, Z+2	; 0x02
    5230:	82 0f       	add	r24, r18
    5232:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    5234:	26 89       	ldd	r18, Z+22	; 0x16
    5236:	22 23       	and	r18, r18
    5238:	a1 f0       	breq	.+40     	; 0x5262 <_ZN4MIDI14getMIDIchannelEh+0x40>
    523a:	21 30       	cpi	r18, 0x01	; 1
    523c:	b9 f4       	brne	.+46     	; 0x526c <_ZN4MIDI14getMIDIchannelEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    523e:	26 2f       	mov	r18, r22
    5240:	26 95       	lsr	r18
    5242:	26 95       	lsr	r18
    5244:	26 95       	lsr	r18
    5246:	c6 2f       	mov	r28, r22
    5248:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    524a:	82 0f       	add	r24, r18
    524c:	91 1d       	adc	r25, r1
    524e:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	02 c0       	rjmp	.+4      	; 0x525a <_ZN4MIDI14getMIDIchannelEh+0x38>
    5256:	95 95       	asr	r25
    5258:	87 95       	ror	r24
    525a:	ca 95       	dec	r28
    525c:	e2 f7       	brpl	.-8      	; 0x5256 <_ZN4MIDI14getMIDIchannelEh+0x34>
    525e:	81 70       	andi	r24, 0x01	; 1
    5260:	06 c0       	rjmp	.+12     	; 0x526e <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    5262:	86 0f       	add	r24, r22
    5264:	91 1d       	adc	r25, r1
    5266:	0e 94 45 30 	call	0x608a	; 0x608a <eeprom_read_byte>
    526a:	01 c0       	rjmp	.+2      	; 0x526e <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

        }   return 0;
    526c:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiChannelSection, channel);

}
    526e:	cf 91       	pop	r28
    5270:	08 95       	ret

00005272 <_ZN4MIDI4initEv>:

    //default constructor

}

void MIDI::init() {
    5272:	af 92       	push	r10
    5274:	bf 92       	push	r11
    5276:	cf 92       	push	r12
    5278:	df 92       	push	r13
    527a:	ef 92       	push	r14
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	cd b7       	in	r28, 0x3d	; 61
    5286:	de b7       	in	r29, 0x3e	; 62
    5288:	2a 97       	sbiw	r28, 0x0a	; 10
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	f8 94       	cli
    528e:	de bf       	out	0x3e, r29	; 62
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	cd bf       	out	0x3d, r28	; 61
    5294:	5c 01       	movw	r10, r24

    const subtype midiFeatureSubtype = { MIDI_FEATURES, 0, 1 };
    5296:	83 e0       	ldi	r24, 0x03	; 3
    5298:	88 87       	std	Y+8, r24	; 0x08
    529a:	19 86       	std	Y+9, r1	; 0x09
    529c:	91 e0       	ldi	r25, 0x01	; 1
    529e:	9a 87       	std	Y+10, r25	; 0x0a
    const subtype midiChannelSubtype = { MIDI_CHANNELS, 1, 16 };
    52a0:	84 e0       	ldi	r24, 0x04	; 4
    52a2:	8d 83       	std	Y+5, r24	; 0x05
    52a4:	9e 83       	std	Y+6, r25	; 0x06
    52a6:	80 e1       	ldi	r24, 0x10	; 16
    52a8:	8f 83       	std	Y+7, r24	; 0x07
    const subtype *midiSubtypeArray[] = {

        &midiFeatureSubtype,
        &midiChannelSubtype

    };
    52aa:	ce 01       	movw	r24, r28
    52ac:	08 96       	adiw	r24, 0x08	; 8
    52ae:	9a 83       	std	Y+2, r25	; 0x02
    52b0:	89 83       	std	Y+1, r24	; 0x01
    52b2:	03 97       	sbiw	r24, 0x03	; 3
    52b4:	9c 83       	std	Y+4, r25	; 0x04
    52b6:	8b 83       	std	Y+3, r24	; 0x03

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);
    52b8:	42 e0       	ldi	r20, 0x02	; 2
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	80 e0       	ldi	r24, 0x00	; 0
    52be:	97 e0       	ldi	r25, 0x07	; 7
    52c0:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN5SysEx14addMessageTypeEhh>
    52c4:	ce 01       	movw	r24, r28
    52c6:	01 96       	adiw	r24, 0x01	; 1
    52c8:	6c 01       	movw	r12, r24
    52ca:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<MIDI_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);
    52cc:	d6 01       	movw	r26, r12
    52ce:	ed 91       	ld	r30, X+
    52d0:	fd 91       	ld	r31, X+
    52d2:	6d 01       	movw	r12, r26
    52d4:	e2 80       	ldd	r14, Z+2	; 0x02
    52d6:	01 81       	ldd	r16, Z+1	; 0x01
    52d8:	20 81       	ld	r18, Z
    52da:	41 2f       	mov	r20, r17
    52dc:	60 e0       	ldi	r22, 0x00	; 0
    52de:	80 e0       	ldi	r24, 0x00	; 0
    52e0:	97 e0       	ldi	r25, 0x07	; 7
    52e2:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN5SysEx17addMessageSubTypeEhhhhh>
    52e6:	1f 5f       	subi	r17, 0xFF	; 255

    };

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);

    for (int i=0; i<MIDI_SUBTYPES; i++)   {
    52e8:	12 30       	cpi	r17, 0x02	; 2
    52ea:	81 f7       	brne	.-32     	; 0x52cc <_ZN4MIDI4initEv+0x5a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);

    }

    uint8_t inChannel = getMIDIchannel(inputChannel);
    52ec:	63 e0       	ldi	r22, 0x03	; 3
    52ee:	c5 01       	movw	r24, r10
    52f0:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    52f4:	18 2f       	mov	r17, r24
    hwMIDI.init(inChannel, true, true, dinInterface);
    52f6:	00 e0       	ldi	r16, 0x00	; 0
    52f8:	21 e0       	ldi	r18, 0x01	; 1
    52fa:	41 e0       	ldi	r20, 0x01	; 1
    52fc:	68 2f       	mov	r22, r24
    52fe:	81 ea       	ldi	r24, 0xA1	; 161
    5300:	93 e0       	ldi	r25, 0x03	; 3
    5302:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN6HWmidi4initEhbb19midiInterfaceType_t>
    hwMIDI.init(inChannel, true, true, usbInterface);
    5306:	01 e0       	ldi	r16, 0x01	; 1
    5308:	21 e0       	ldi	r18, 0x01	; 1
    530a:	41 e0       	ldi	r20, 0x01	; 1
    530c:	61 2f       	mov	r22, r17
    530e:	81 ea       	ldi	r24, 0xA1	; 161
    5310:	93 e0       	ldi	r25, 0x03	; 3
    5312:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN6HWmidi4initEhbb19midiInterfaceType_t>
    hwMIDI.setInputChannel(inChannel);
    5316:	61 2f       	mov	r22, r17
    5318:	81 ea       	ldi	r24, 0xA1	; 161
    531a:	93 e0       	ldi	r25, 0x03	; 3
    531c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN6HWmidi15setInputChannelEh>

}
    5320:	2a 96       	adiw	r28, 0x0a	; 10
    5322:	0f b6       	in	r0, 0x3f	; 63
    5324:	f8 94       	cli
    5326:	de bf       	out	0x3e, r29	; 62
    5328:	0f be       	out	0x3f, r0	; 63
    532a:	cd bf       	out	0x3d, r28	; 61
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	1f 91       	pop	r17
    5332:	0f 91       	pop	r16
    5334:	ef 90       	pop	r14
    5336:	df 90       	pop	r13
    5338:	cf 90       	pop	r12
    533a:	bf 90       	pop	r11
    533c:	af 90       	pop	r10
    533e:	08 95       	ret

00005340 <_ZN4MIDI10checkInputEv>:

void MIDI::checkInput()   {
    5340:	ef 92       	push	r14
    5342:	ff 92       	push	r15
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	ec 01       	movw	r28, r24

    if (hwMIDI.read(usbInterface))   {   //new message on usb
    534e:	61 e0       	ldi	r22, 0x01	; 1
    5350:	81 ea       	ldi	r24, 0xA1	; 161
    5352:	93 e0       	ldi	r25, 0x03	; 3
    5354:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN6HWmidi4readE19midiInterfaceType_t>
    5358:	88 23       	and	r24, r24
    535a:	c1 f1       	breq	.+112    	; 0x53cc <_ZN4MIDI10checkInputEv+0x8c>

        midiMessageType_t messageType = hwMIDI.getType(usbInterface);
    535c:	61 e0       	ldi	r22, 0x01	; 1
    535e:	81 ea       	ldi	r24, 0xA1	; 161
    5360:	93 e0       	ldi	r25, 0x03	; 3
    5362:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>
    5366:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1(usbInterface);
    5368:	61 e0       	ldi	r22, 0x01	; 1
    536a:	81 ea       	ldi	r24, 0xA1	; 161
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZNK6HWmidi8getData1E19midiInterfaceType_t>
    5372:	08 2f       	mov	r16, r24
        uint8_t data2 = hwMIDI.getData2(usbInterface);
    5374:	61 e0       	ldi	r22, 0x01	; 1
    5376:	81 ea       	ldi	r24, 0xA1	; 161
    5378:	93 e0       	ldi	r25, 0x03	; 3
    537a:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZNK6HWmidi8getData2E19midiInterfaceType_t>
        source = usbInterface;
    537e:	91 e0       	ldi	r25, 0x01	; 1
    5380:	9c 83       	std	Y+4, r25	; 0x04

        switch(messageType) {
    5382:	10 39       	cpi	r17, 0x90	; 144
    5384:	e9 f0       	breq	.+58     	; 0x53c0 <_ZN4MIDI10checkInputEv+0x80>
    5386:	10 3f       	cpi	r17, 0xF0	; 240
    5388:	19 f0       	breq	.+6      	; 0x5390 <_ZN4MIDI10checkInputEv+0x50>
    538a:	10 38       	cpi	r17, 0x80	; 128
    538c:	f9 f4       	brne	.+62     	; 0x53cc <_ZN4MIDI10checkInputEv+0x8c>
    538e:	18 c0       	rjmp	.+48     	; 0x53c0 <_ZN4MIDI10checkInputEv+0x80>

            case midiMessageSystemExclusive:
            sysEx.handleSysEx(hwMIDI.getSysExArray(usbInterface), hwMIDI.getSysExArrayLength(usbInterface));
    5390:	61 e0       	ldi	r22, 0x01	; 1
    5392:	81 ea       	ldi	r24, 0xA1	; 161
    5394:	93 e0       	ldi	r25, 0x03	; 3
    5396:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>
    539a:	18 2f       	mov	r17, r24
    539c:	61 e0       	ldi	r22, 0x01	; 1
    539e:	81 ea       	ldi	r24, 0xA1	; 161
    53a0:	93 e0       	ldi	r25, 0x03	; 3
    53a2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>
    53a6:	bc 01       	movw	r22, r24
    53a8:	41 2f       	mov	r20, r17
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	97 e0       	ldi	r25, 0x07	; 7
    53ae:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <_ZN5SysEx11handleSysExEPhh>
            lastSysExMessageTime = rTimeMillis();
    53b2:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
    53b6:	68 83       	st	Y, r22
    53b8:	79 83       	std	Y+1, r23	; 0x01
    53ba:	8a 83       	std	Y+2, r24	; 0x02
    53bc:	9b 83       	std	Y+3, r25	; 0x03
            break;
    53be:	06 c0       	rjmp	.+12     	; 0x53cc <_ZN4MIDI10checkInputEv+0x8c>

            case midiMessageNoteOff:
            case midiMessageNoteOn:
            //we're using received note data to control LEDs
            leds.noteToLEDstate(data1, data2);
    53c0:	48 2f       	mov	r20, r24
    53c2:	60 2f       	mov	r22, r16
    53c4:	8a ef       	ldi	r24, 0xFA	; 250
    53c6:	96 e0       	ldi	r25, 0x06	; 6
    53c8:	0e 94 ac 24 	call	0x4958	; 0x4958 <_ZN4LEDs14noteToLEDstateEhh>
        }

    }

    //check for incoming MIDI messages on USART
    if (hwMIDI.read(dinInterface))    {
    53cc:	60 e0       	ldi	r22, 0x00	; 0
    53ce:	81 ea       	ldi	r24, 0xA1	; 161
    53d0:	93 e0       	ldi	r25, 0x03	; 3
    53d2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN6HWmidi4readE19midiInterfaceType_t>
    53d6:	88 23       	and	r24, r24
    53d8:	09 f4       	brne	.+2      	; 0x53dc <_ZN4MIDI10checkInputEv+0x9c>
    53da:	99 c0       	rjmp	.+306    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

        uint8_t messageType = hwMIDI.getType(dinInterface);
    53dc:	60 e0       	ldi	r22, 0x00	; 0
    53de:	81 ea       	ldi	r24, 0xA1	; 161
    53e0:	93 e0       	ldi	r25, 0x03	; 3
    53e2:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>
    53e6:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1(dinInterface);
    53e8:	60 e0       	ldi	r22, 0x00	; 0
    53ea:	81 ea       	ldi	r24, 0xA1	; 161
    53ec:	93 e0       	ldi	r25, 0x03	; 3
    53ee:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZNK6HWmidi8getData1E19midiInterfaceType_t>
    53f2:	f8 2e       	mov	r15, r24
        uint8_t data2 = hwMIDI.getData2(dinInterface);
    53f4:	60 e0       	ldi	r22, 0x00	; 0
    53f6:	81 ea       	ldi	r24, 0xA1	; 161
    53f8:	93 e0       	ldi	r25, 0x03	; 3
    53fa:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZNK6HWmidi8getData2E19midiInterfaceType_t>
    53fe:	e8 2e       	mov	r14, r24

        source = dinInterface;
    5400:	1c 82       	std	Y+4, r1	; 0x04

        if (!getFeature(midiFeatureUSBconvert))  {
    5402:	62 e0       	ldi	r22, 0x02	; 2
    5404:	ce 01       	movw	r24, r28
    5406:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN4MIDI10getFeatureEh>
    540a:	81 11       	cpse	r24, r1
    540c:	0c c0       	rjmp	.+24     	; 0x5426 <_ZN4MIDI10checkInputEv+0xe6>

            switch(messageType) {
    540e:	10 38       	cpi	r17, 0x80	; 128
    5410:	19 f0       	breq	.+6      	; 0x5418 <_ZN4MIDI10checkInputEv+0xd8>
    5412:	10 39       	cpi	r17, 0x90	; 144
    5414:	09 f0       	breq	.+2      	; 0x5418 <_ZN4MIDI10checkInputEv+0xd8>
    5416:	7b c0       	rjmp	.+246    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                case midiMessageNoteOff:
                case midiMessageNoteOn:
                leds.noteToLEDstate(data1, data2);
    5418:	4e 2d       	mov	r20, r14
    541a:	6f 2d       	mov	r22, r15
    541c:	8a ef       	ldi	r24, 0xFA	; 250
    541e:	96 e0       	ldi	r25, 0x06	; 6
    5420:	0e 94 ac 24 	call	0x4958	; 0x4958 <_ZN4LEDs14noteToLEDstateEhh>
                break;
    5424:	74 c0       	rjmp	.+232    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>
            }

        }   else {

                //dump everything from MIDI in to USB MIDI out
                switch(messageType) {
    5426:	10 3b       	cpi	r17, 0xB0	; 176
    5428:	69 f1       	breq	.+90     	; 0x5484 <_ZN4MIDI10checkInputEv+0x144>
    542a:	48 f4       	brcc	.+18     	; 0x543e <_ZN4MIDI10checkInputEv+0xfe>
    542c:	10 39       	cpi	r17, 0x90	; 144
    542e:	e9 f0       	breq	.+58     	; 0x546a <_ZN4MIDI10checkInputEv+0x12a>
    5430:	10 3a       	cpi	r17, 0xA0	; 160
    5432:	09 f4       	brne	.+2      	; 0x5436 <_ZN4MIDI10checkInputEv+0xf6>
    5434:	60 c0       	rjmp	.+192    	; 0x54f6 <_ZN4MIDI10checkInputEv+0x1b6>
    5436:	10 38       	cpi	r17, 0x80	; 128
    5438:	09 f0       	breq	.+2      	; 0x543c <_ZN4MIDI10checkInputEv+0xfc>
    543a:	69 c0       	rjmp	.+210    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>
    543c:	09 c0       	rjmp	.+18     	; 0x5450 <_ZN4MIDI10checkInputEv+0x110>
    543e:	10 3d       	cpi	r17, 0xD0	; 208
    5440:	09 f4       	brne	.+2      	; 0x5444 <_ZN4MIDI10checkInputEv+0x104>
    5442:	4d c0       	rjmp	.+154    	; 0x54de <_ZN4MIDI10checkInputEv+0x19e>
    5444:	10 3f       	cpi	r17, 0xF0	; 240
    5446:	b9 f1       	breq	.+110    	; 0x54b6 <_ZN4MIDI10checkInputEv+0x176>
    5448:	10 3c       	cpi	r17, 0xC0	; 192
    544a:	09 f0       	breq	.+2      	; 0x544e <_ZN4MIDI10checkInputEv+0x10e>
    544c:	60 c0       	rjmp	.+192    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>
    544e:	27 c0       	rjmp	.+78     	; 0x549e <_ZN4MIDI10checkInputEv+0x15e>

                    case midiMessageNoteOff:
                    hwMIDI.sendNoteOff(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    5450:	63 e0       	ldi	r22, 0x03	; 3
    5452:	ce 01       	movw	r24, r28
    5454:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    5458:	01 e0       	ldi	r16, 0x01	; 1
    545a:	28 2f       	mov	r18, r24
    545c:	4e 2d       	mov	r20, r14
    545e:	6f 2d       	mov	r22, r15
    5460:	81 ea       	ldi	r24, 0xA1	; 161
    5462:	93 e0       	ldi	r25, 0x03	; 3
    5464:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
                    break;
    5468:	52 c0       	rjmp	.+164    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageNoteOn:
                    hwMIDI.sendNoteOn(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    546a:	63 e0       	ldi	r22, 0x03	; 3
    546c:	ce 01       	movw	r24, r28
    546e:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    5472:	01 e0       	ldi	r16, 0x01	; 1
    5474:	28 2f       	mov	r18, r24
    5476:	4e 2d       	mov	r20, r14
    5478:	6f 2d       	mov	r22, r15
    547a:	81 ea       	ldi	r24, 0xA1	; 161
    547c:	93 e0       	ldi	r25, 0x03	; 3
    547e:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
                    break;
    5482:	45 c0       	rjmp	.+138    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageControlChange:
                    hwMIDI.sendControlChange(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    5484:	63 e0       	ldi	r22, 0x03	; 3
    5486:	ce 01       	movw	r24, r28
    5488:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    548c:	01 e0       	ldi	r16, 0x01	; 1
    548e:	28 2f       	mov	r18, r24
    5490:	4e 2d       	mov	r20, r14
    5492:	6f 2d       	mov	r22, r15
    5494:	81 ea       	ldi	r24, 0xA1	; 161
    5496:	93 e0       	ldi	r25, 0x03	; 3
    5498:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>
                    break;
    549c:	38 c0       	rjmp	.+112    	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageProgramChange:
                    hwMIDI.sendProgramChange(data1, getMIDIchannel(inputChannel), usbInterface);
    549e:	63 e0       	ldi	r22, 0x03	; 3
    54a0:	ce 01       	movw	r24, r28
    54a2:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    54a6:	21 e0       	ldi	r18, 0x01	; 1
    54a8:	48 2f       	mov	r20, r24
    54aa:	6f 2d       	mov	r22, r15
    54ac:	81 ea       	ldi	r24, 0xA1	; 161
    54ae:	93 e0       	ldi	r25, 0x03	; 3
    54b0:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>
                    break;
    54b4:	2c c0       	rjmp	.+88     	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageSystemExclusive:
                    hwMIDI.sendSysEx(hwMIDI.getSysExArrayLength(dinInterface), hwMIDI.getSysExArray(dinInterface), true, usbInterface);
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	81 ea       	ldi	r24, 0xA1	; 161
    54ba:	93 e0       	ldi	r25, 0x03	; 3
    54bc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>
    54c0:	7c 01       	movw	r14, r24
    54c2:	60 e0       	ldi	r22, 0x00	; 0
    54c4:	81 ea       	ldi	r24, 0xA1	; 161
    54c6:	93 e0       	ldi	r25, 0x03	; 3
    54c8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>
    54cc:	bc 01       	movw	r22, r24
    54ce:	01 e0       	ldi	r16, 0x01	; 1
    54d0:	21 e0       	ldi	r18, 0x01	; 1
    54d2:	a7 01       	movw	r20, r14
    54d4:	81 ea       	ldi	r24, 0xA1	; 161
    54d6:	93 e0       	ldi	r25, 0x03	; 3
    54d8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
                    break;
    54dc:	18 c0       	rjmp	.+48     	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageAfterTouchChannel:
                    hwMIDI.sendAfterTouch(data1, getMIDIchannel(inputChannel), usbInterface);
    54de:	63 e0       	ldi	r22, 0x03	; 3
    54e0:	ce 01       	movw	r24, r28
    54e2:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    54e6:	21 e0       	ldi	r18, 0x01	; 1
    54e8:	48 2f       	mov	r20, r24
    54ea:	6f 2d       	mov	r22, r15
    54ec:	81 ea       	ldi	r24, 0xA1	; 161
    54ee:	93 e0       	ldi	r25, 0x03	; 3
    54f0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>
                    break;
    54f4:	0c c0       	rjmp	.+24     	; 0x550e <_ZN4MIDI10checkInputEv+0x1ce>

                    case midiMessageAfterTouchPoly:
                    hwMIDI.sendPolyPressure(data1, data2, getMIDIchannel(inputChannel), usbInterface);
    54f6:	63 e0       	ldi	r22, 0x03	; 3
    54f8:	ce 01       	movw	r24, r28
    54fa:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    54fe:	01 e0       	ldi	r16, 0x01	; 1
    5500:	28 2f       	mov	r18, r24
    5502:	4e 2d       	mov	r20, r14
    5504:	6f 2d       	mov	r22, r15
    5506:	81 ea       	ldi	r24, 0xA1	; 161
    5508:	93 e0       	ldi	r25, 0x03	; 3
    550a:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>
        }

    }

    //disable sysex config after inactivity
    if (rTimeMillis() - lastSysExMessageTime > CONFIG_TIMEOUT)
    550e:	0e 94 67 05 	call	0xace	; 0xace <_Z11rTimeMillisv>
    5512:	08 81       	ld	r16, Y
    5514:	19 81       	ldd	r17, Y+1	; 0x01
    5516:	2a 81       	ldd	r18, Y+2	; 0x02
    5518:	3b 81       	ldd	r19, Y+3	; 0x03
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	80 1b       	sub	r24, r16
    5520:	91 0b       	sbc	r25, r17
    5522:	a2 0b       	sbc	r26, r18
    5524:	b3 0b       	sbc	r27, r19
    5526:	81 36       	cpi	r24, 0x61	; 97
    5528:	9a 4e       	sbci	r25, 0xEA	; 234
    552a:	a1 05       	cpc	r26, r1
    552c:	b1 05       	cpc	r27, r1
    552e:	20 f0       	brcs	.+8      	; 0x5538 <_ZN4MIDI10checkInputEv+0x1f8>
        sysEx.disableConf();
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	97 e0       	ldi	r25, 0x07	; 7
    5534:	0e 94 92 2c 	call	0x5924	; 0x5924 <_ZN5SysEx11disableConfEv>

}
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	1f 91       	pop	r17
    553e:	0f 91       	pop	r16
    5540:	ff 90       	pop	r15
    5542:	ef 90       	pop	r14
    5544:	08 95       	ret

00005546 <_ZN4MIDI12sendMIDInoteEhbh>:

void MIDI::sendMIDInote(uint8_t note, bool state, uint8_t _velocity)  {
    5546:	ef 92       	push	r14
    5548:	ff 92       	push	r15
    554a:	0f 93       	push	r16
    554c:	1f 93       	push	r17
    554e:	cf 93       	push	r28
    5550:	df 93       	push	r29
    5552:	7c 01       	movw	r14, r24
    5554:	c6 2f       	mov	r28, r22
    5556:	04 2f       	mov	r16, r20
    5558:	d2 2f       	mov	r29, r18

    uint8_t channel = getMIDIchannel(noteChannel);
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    5560:	18 2f       	mov	r17, r24

    switch (state) {
    5562:	01 30       	cpi	r16, 0x01	; 1
    5564:	41 f1       	breq	.+80     	; 0x55b6 <_ZN4MIDI12sendMIDInoteEhbh+0x70>

        case false:
        //button released
        if (getFeature(midiFeatureStandardNoteOff))   {
    5566:	60 e0       	ldi	r22, 0x00	; 0
    5568:	c7 01       	movw	r24, r14
    556a:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN4MIDI10getFeatureEh>
    556e:	88 23       	and	r24, r24
    5570:	89 f0       	breq	.+34     	; 0x5594 <_ZN4MIDI12sendMIDInoteEhbh+0x4e>

            hwMIDI.sendNoteOff(note, _velocity, channel, usbInterface);
    5572:	01 e0       	ldi	r16, 0x01	; 1
    5574:	21 2f       	mov	r18, r17
    5576:	4d 2f       	mov	r20, r29
    5578:	6c 2f       	mov	r22, r28
    557a:	81 ea       	ldi	r24, 0xA1	; 161
    557c:	93 e0       	ldi	r25, 0x03	; 3
    557e:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
            hwMIDI.sendNoteOff(note, _velocity, channel, dinInterface);
    5582:	00 e0       	ldi	r16, 0x00	; 0
    5584:	21 2f       	mov	r18, r17
    5586:	4d 2f       	mov	r20, r29
    5588:	6c 2f       	mov	r22, r28
    558a:	81 ea       	ldi	r24, 0xA1	; 161
    558c:	93 e0       	ldi	r25, 0x03	; 3
    558e:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
    5592:	21 c0       	rjmp	.+66     	; 0x55d6 <_ZN4MIDI12sendMIDInoteEhbh+0x90>

        } else {

            hwMIDI.sendNoteOn(note, _velocity, channel, usbInterface);
    5594:	01 e0       	ldi	r16, 0x01	; 1
    5596:	21 2f       	mov	r18, r17
    5598:	4d 2f       	mov	r20, r29
    559a:	6c 2f       	mov	r22, r28
    559c:	81 ea       	ldi	r24, 0xA1	; 161
    559e:	93 e0       	ldi	r25, 0x03	; 3
    55a0:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
            hwMIDI.sendNoteOn(note, _velocity, channel, dinInterface);
    55a4:	00 e0       	ldi	r16, 0x00	; 0
    55a6:	21 2f       	mov	r18, r17
    55a8:	4d 2f       	mov	r20, r29
    55aa:	6c 2f       	mov	r22, r28
    55ac:	81 ea       	ldi	r24, 0xA1	; 161
    55ae:	93 e0       	ldi	r25, 0x03	; 3
    55b0:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
    55b4:	10 c0       	rjmp	.+32     	; 0x55d6 <_ZN4MIDI12sendMIDInoteEhbh+0x90>
        }
        break;

        case true:
        //button pressed
        hwMIDI.sendNoteOn(note, _velocity, channel, usbInterface);
    55b6:	01 e0       	ldi	r16, 0x01	; 1
    55b8:	28 2f       	mov	r18, r24
    55ba:	4d 2f       	mov	r20, r29
    55bc:	6c 2f       	mov	r22, r28
    55be:	81 ea       	ldi	r24, 0xA1	; 161
    55c0:	93 e0       	ldi	r25, 0x03	; 3
    55c2:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
        hwMIDI.sendNoteOn(note, _velocity, channel, dinInterface);
    55c6:	00 e0       	ldi	r16, 0x00	; 0
    55c8:	21 2f       	mov	r18, r17
    55ca:	4d 2f       	mov	r20, r29
    55cc:	6c 2f       	mov	r22, r28
    55ce:	81 ea       	ldi	r24, 0xA1	; 161
    55d0:	93 e0       	ldi	r25, 0x03	; 3
    55d2:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
        break;

    }

}
    55d6:	df 91       	pop	r29
    55d8:	cf 91       	pop	r28
    55da:	1f 91       	pop	r17
    55dc:	0f 91       	pop	r16
    55de:	ff 90       	pop	r15
    55e0:	ef 90       	pop	r14
    55e2:	08 95       	ret

000055e4 <_ZN4MIDI17sendProgramChangeEh>:

void MIDI::sendProgramChange(uint8_t program)    {
    55e4:	cf 93       	push	r28
    55e6:	df 93       	push	r29
    55e8:	c6 2f       	mov	r28, r22

    uint8_t channel = getMIDIchannel(programChangeChannel);
    55ea:	61 e0       	ldi	r22, 0x01	; 1
    55ec:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    55f0:	d8 2f       	mov	r29, r24
    hwMIDI.sendProgramChange(program, channel, usbInterface);
    55f2:	21 e0       	ldi	r18, 0x01	; 1
    55f4:	48 2f       	mov	r20, r24
    55f6:	6c 2f       	mov	r22, r28
    55f8:	81 ea       	ldi	r24, 0xA1	; 161
    55fa:	93 e0       	ldi	r25, 0x03	; 3
    55fc:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>
    hwMIDI.sendProgramChange(program, channel, dinInterface);
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	4d 2f       	mov	r20, r29
    5604:	6c 2f       	mov	r22, r28
    5606:	81 ea       	ldi	r24, 0xA1	; 161
    5608:	93 e0       	ldi	r25, 0x03	; 3
    560a:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN6HWmidi17sendProgramChangeEhh19midiInterfaceType_t>

}
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	08 95       	ret

00005614 <_ZN4MIDI17sendControlChangeEhh>:

void MIDI::sendControlChange(uint8_t ccNumber, uint8_t ccValue) {
    5614:	0f 93       	push	r16
    5616:	1f 93       	push	r17
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	c6 2f       	mov	r28, r22
    561e:	d4 2f       	mov	r29, r20

    uint8_t channel = getMIDIchannel(CCchannel);
    5620:	62 e0       	ldi	r22, 0x02	; 2
    5622:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    5626:	18 2f       	mov	r17, r24
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, usbInterface);
    5628:	01 e0       	ldi	r16, 0x01	; 1
    562a:	28 2f       	mov	r18, r24
    562c:	4d 2f       	mov	r20, r29
    562e:	6c 2f       	mov	r22, r28
    5630:	81 ea       	ldi	r24, 0xA1	; 161
    5632:	93 e0       	ldi	r25, 0x03	; 3
    5634:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, dinInterface);
    5638:	00 e0       	ldi	r16, 0x00	; 0
    563a:	21 2f       	mov	r18, r17
    563c:	4d 2f       	mov	r20, r29
    563e:	6c 2f       	mov	r22, r28
    5640:	81 ea       	ldi	r24, 0xA1	; 161
    5642:	93 e0       	ldi	r25, 0x03	; 3
    5644:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>

}
    5648:	df 91       	pop	r29
    564a:	cf 91       	pop	r28
    564c:	1f 91       	pop	r17
    564e:	0f 91       	pop	r16
    5650:	08 95       	ret

00005652 <_ZN4MIDI12getParameterEhh>:

}

uint8_t MIDI::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    5652:	66 23       	and	r22, r22
    5654:	19 f0       	breq	.+6      	; 0x565c <_ZN4MIDI12getParameterEhh+0xa>
    5656:	61 30       	cpi	r22, 0x01	; 1
    5658:	29 f0       	breq	.+10     	; 0x5664 <_ZN4MIDI12getParameterEhh+0x12>
    565a:	08 c0       	rjmp	.+16     	; 0x566c <_ZN4MIDI12getParameterEhh+0x1a>

        case midiFeatureConf:
        return getFeature(parameterID);
    565c:	64 2f       	mov	r22, r20
    565e:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN4MIDI10getFeatureEh>
    5662:	08 95       	ret
        break;

        case midiChannelConf:
        return getMIDIchannel(parameterID);
    5664:	64 2f       	mov	r22, r20
    5666:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN4MIDI14getMIDIchannelEh>
    566a:	08 95       	ret
        break;

    }   return 0;
    566c:	80 e0       	ldi	r24, 0x00	; 0

}
    566e:	08 95       	ret

00005670 <_ZN4MIDI14setMIDIchannelEhh>:


bool MIDI::setMIDIchannel(uint8_t channelID, uint8_t channelNumber)  {
    5670:	0f 93       	push	r16
    5672:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_MIDI_BLOCK, midiChannelSection, channelID, channelNumber);
    5674:	04 2f       	mov	r16, r20
    5676:	41 e0       	ldi	r20, 0x01	; 1
    5678:	60 e0       	ldi	r22, 0x00	; 0
    567a:	8a e9       	ldi	r24, 0x9A	; 154
    567c:	91 e0       	ldi	r25, 0x01	; 1
    567e:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>

}
    5682:	0f 91       	pop	r16
    5684:	08 95       	ret

00005686 <_ZN4MIDI10setFeatureEhh>:

bool MIDI::setFeature(uint8_t featureID, uint8_t newValue)  {
    5686:	0f 93       	push	r16
    5688:	1f 93       	push	r17
    568a:	cf 93       	push	r28
    568c:	df 93       	push	r29
    568e:	d6 2f       	mov	r29, r22
    5690:	14 2f       	mov	r17, r20

    if (!configuration.writeParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID, newValue))
    5692:	04 2f       	mov	r16, r20
    5694:	26 2f       	mov	r18, r22
    5696:	40 e0       	ldi	r20, 0x00	; 0
    5698:	60 e0       	ldi	r22, 0x00	; 0
    569a:	8a e9       	ldi	r24, 0x9A	; 154
    569c:	91 e0       	ldi	r25, 0x01	; 1
    569e:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN13Configuration14writeParameterEhhhh>
    56a2:	c8 2f       	mov	r28, r24
    56a4:	88 23       	and	r24, r24
    56a6:	69 f0       	breq	.+26     	; 0x56c2 <_ZN4MIDI10setFeatureEhh+0x3c>
        return false;

    if (featureID == midiFeatureRunningStatus)    {
    56a8:	d1 30       	cpi	r29, 0x01	; 1
    56aa:	59 f4       	brne	.+22     	; 0x56c2 <_ZN4MIDI10setFeatureEhh+0x3c>

        //tell hwMIDI object that we've changed this setting
        newValue ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();
    56ac:	11 23       	and	r17, r17
    56ae:	29 f0       	breq	.+10     	; 0x56ba <_ZN4MIDI10setFeatureEhh+0x34>
    56b0:	81 ea       	ldi	r24, 0xA1	; 161
    56b2:	93 e0       	ldi	r25, 0x03	; 3
    56b4:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6HWmidi19enableRunningStatusEv>
    56b8:	04 c0       	rjmp	.+8      	; 0x56c2 <_ZN4MIDI10setFeatureEhh+0x3c>
    56ba:	81 ea       	ldi	r24, 0xA1	; 161
    56bc:	93 e0       	ldi	r25, 0x03	; 3
    56be:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN6HWmidi20disableRunningStatusEv>

    }   return true;

}
    56c2:	8c 2f       	mov	r24, r28
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	1f 91       	pop	r17
    56ca:	0f 91       	pop	r16
    56cc:	08 95       	ret

000056ce <_ZN4MIDI12setParameterEhhh>:

bool MIDI::setParameter(uint8_t messageType, uint8_t parameterID, uint8_t newValue) {
    56ce:	34 2f       	mov	r19, r20

    switch(messageType) {
    56d0:	66 23       	and	r22, r22
    56d2:	19 f0       	breq	.+6      	; 0x56da <_ZN4MIDI12setParameterEhhh+0xc>
    56d4:	61 30       	cpi	r22, 0x01	; 1
    56d6:	31 f0       	breq	.+12     	; 0x56e4 <_ZN4MIDI12setParameterEhhh+0x16>
    56d8:	0a c0       	rjmp	.+20     	; 0x56ee <_ZN4MIDI12setParameterEhhh+0x20>

        case midiFeatureConf:
        return setFeature(parameterID, newValue);
    56da:	42 2f       	mov	r20, r18
    56dc:	63 2f       	mov	r22, r19
    56de:	0e 94 43 2b 	call	0x5686	; 0x5686 <_ZN4MIDI10setFeatureEhh>
    56e2:	08 95       	ret
        break;

        case midiChannelConf:
        return setMIDIchannel(parameterID, newValue);
    56e4:	42 2f       	mov	r20, r18
    56e6:	63 2f       	mov	r22, r19
    56e8:	0e 94 38 2b 	call	0x5670	; 0x5670 <_ZN4MIDI14setMIDIchannelEhh>
    56ec:	08 95       	ret
        break;

    }   return false;
    56ee:	80 e0       	ldi	r24, 0x00	; 0

}
    56f0:	08 95       	ret

000056f2 <_Z5onGethhh>:

}

uint8_t onGet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    56f2:	82 30       	cpi	r24, 0x02	; 2
    56f4:	a9 f0       	breq	.+42     	; 0x5720 <_Z5onGethhh+0x2e>
    56f6:	28 f4       	brcc	.+10     	; 0x5702 <_Z5onGethhh+0x10>
    56f8:	88 23       	and	r24, r24
    56fa:	41 f0       	breq	.+16     	; 0x570c <_Z5onGethhh+0x1a>
    56fc:	81 30       	cpi	r24, 0x01	; 1
    56fe:	59 f0       	breq	.+22     	; 0x5716 <_Z5onGethhh+0x24>
    5700:	1e c0       	rjmp	.+60     	; 0x573e <_Z5onGethhh+0x4c>
    5702:	83 30       	cpi	r24, 0x03	; 3
    5704:	91 f0       	breq	.+36     	; 0x572a <_Z5onGethhh+0x38>
    5706:	84 30       	cpi	r24, 0x04	; 4
    5708:	a9 f0       	breq	.+42     	; 0x5734 <_Z5onGethhh+0x42>
    570a:	19 c0       	rjmp	.+50     	; 0x573e <_Z5onGethhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.getParameter(messageSubtype, parameter);
    570c:	8b ef       	ldi	r24, 0xFB	; 251
    570e:	96 e0       	ldi	r25, 0x06	; 6
    5710:	0e 94 29 2b 	call	0x5652	; 0x5652 <_ZN4MIDI12getParameterEhh>
    5714:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.getParameter(messageSubtype, parameter);
    5716:	87 ea       	ldi	r24, 0xA7	; 167
    5718:	96 e0       	ldi	r25, 0x06	; 6
    571a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_ZN7Buttons12getParameterEhh>
    571e:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.getParameter(messageSubtype, parameter);
    5720:	89 ef       	ldi	r24, 0xF9	; 249
    5722:	96 e0       	ldi	r25, 0x06	; 6
    5724:	0e 94 b6 23 	call	0x476c	; 0x476c <_ZN8Encoders12getParameterEhh>
    5728:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.getParameter(messageSubtype, parameter);
    572a:	82 e0       	ldi	r24, 0x02	; 2
    572c:	95 e0       	ldi	r25, 0x05	; 5
    572e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <_ZN6Analog12getParameterEhh>
    5732:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.getParameter(messageSubtype, parameter);
    5734:	8a ef       	ldi	r24, 0xFA	; 250
    5736:	96 e0       	ldi	r25, 0x06	; 6
    5738:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <_ZN4LEDs12getParameterEhh>
    573c:	08 95       	ret
        break;

    } return INVALID_VALUE;
    573e:	80 e8       	ldi	r24, 0x80	; 128

}
    5740:	08 95       	ret

00005742 <_Z5onSethhhh>:

bool onSet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter, uint8_t newParameter)   {

    switch(messageType) {
    5742:	82 30       	cpi	r24, 0x02	; 2
    5744:	a9 f0       	breq	.+42     	; 0x5770 <_Z5onSethhhh+0x2e>
    5746:	28 f4       	brcc	.+10     	; 0x5752 <_Z5onSethhhh+0x10>
    5748:	88 23       	and	r24, r24
    574a:	41 f0       	breq	.+16     	; 0x575c <_Z5onSethhhh+0x1a>
    574c:	81 30       	cpi	r24, 0x01	; 1
    574e:	59 f0       	breq	.+22     	; 0x5766 <_Z5onSethhhh+0x24>
    5750:	1e c0       	rjmp	.+60     	; 0x578e <_Z5onSethhhh+0x4c>
    5752:	83 30       	cpi	r24, 0x03	; 3
    5754:	91 f0       	breq	.+36     	; 0x577a <_Z5onSethhhh+0x38>
    5756:	84 30       	cpi	r24, 0x04	; 4
    5758:	a9 f0       	breq	.+42     	; 0x5784 <_Z5onSethhhh+0x42>
    575a:	19 c0       	rjmp	.+50     	; 0x578e <_Z5onSethhhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, newParameter);
    575c:	8b ef       	ldi	r24, 0xFB	; 251
    575e:	96 e0       	ldi	r25, 0x06	; 6
    5760:	0e 94 67 2b 	call	0x56ce	; 0x56ce <_ZN4MIDI12setParameterEhhh>
    5764:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, newParameter);
    5766:	87 ea       	ldi	r24, 0xA7	; 167
    5768:	96 e0       	ldi	r25, 0x06	; 6
    576a:	0e 94 2a 22 	call	0x4454	; 0x4454 <_ZN7Buttons12setParameterEhhh>
    576e:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, newParameter);
    5770:	89 ef       	ldi	r24, 0xF9	; 249
    5772:	96 e0       	ldi	r25, 0x06	; 6
    5774:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_ZN8Encoders12setParameterEhhh>
    5778:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.setParameter(messageSubtype, parameter, newParameter);
    577a:	82 e0       	ldi	r24, 0x02	; 2
    577c:	95 e0       	ldi	r25, 0x05	; 5
    577e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN6Analog12setParameterEhhh>
    5782:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, newParameter);
    5784:	8a ef       	ldi	r24, 0xFA	; 250
    5786:	96 e0       	ldi	r25, 0x06	; 6
    5788:	0e 94 09 28 	call	0x5012	; 0x5012 <_ZN4LEDs12setParameterEhhh>
    578c:	08 95       	ret
        break;

    }   return false;
    578e:	80 e0       	ldi	r24, 0x00	; 0

}
    5790:	08 95       	ret

00005792 <_Z7onResethhh>:

bool onReset(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    5792:	82 30       	cpi	r24, 0x02	; 2
    5794:	b9 f0       	breq	.+46     	; 0x57c4 <_Z7onResethhh+0x32>
    5796:	28 f4       	brcc	.+10     	; 0x57a2 <_Z7onResethhh+0x10>
    5798:	88 23       	and	r24, r24
    579a:	41 f0       	breq	.+16     	; 0x57ac <_Z7onResethhh+0x1a>
    579c:	81 30       	cpi	r24, 0x01	; 1
    579e:	61 f0       	breq	.+24     	; 0x57b8 <_Z7onResethhh+0x26>
    57a0:	23 c0       	rjmp	.+70     	; 0x57e8 <_Z7onResethhh+0x56>
    57a2:	83 30       	cpi	r24, 0x03	; 3
    57a4:	d9 f0       	breq	.+54     	; 0x57dc <_Z7onResethhh+0x4a>
    57a6:	84 30       	cpi	r24, 0x04	; 4
    57a8:	99 f0       	breq	.+38     	; 0x57d0 <_Z7onResethhh+0x3e>
    57aa:	1e c0       	rjmp	.+60     	; 0x57e8 <_Z7onResethhh+0x56>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    57ac:	20 e8       	ldi	r18, 0x80	; 128
    57ae:	8b ef       	ldi	r24, 0xFB	; 251
    57b0:	96 e0       	ldi	r25, 0x06	; 6
    57b2:	0e 94 67 2b 	call	0x56ce	; 0x56ce <_ZN4MIDI12setParameterEhhh>
    57b6:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    57b8:	20 e8       	ldi	r18, 0x80	; 128
    57ba:	87 ea       	ldi	r24, 0xA7	; 167
    57bc:	96 e0       	ldi	r25, 0x06	; 6
    57be:	0e 94 2a 22 	call	0x4454	; 0x4454 <_ZN7Buttons12setParameterEhhh>
    57c2:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return analog.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    57c4:	20 e8       	ldi	r18, 0x80	; 128
    57c6:	82 e0       	ldi	r24, 0x02	; 2
    57c8:	95 e0       	ldi	r25, 0x05	; 5
    57ca:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN6Analog12setParameterEhhh>
    57ce:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    57d0:	20 e8       	ldi	r18, 0x80	; 128
    57d2:	8a ef       	ldi	r24, 0xFA	; 250
    57d4:	96 e0       	ldi	r25, 0x06	; 6
    57d6:	0e 94 09 28 	call	0x5012	; 0x5012 <_ZN4LEDs12setParameterEhhh>
    57da:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    57dc:	20 e8       	ldi	r18, 0x80	; 128
    57de:	89 ef       	ldi	r24, 0xF9	; 249
    57e0:	96 e0       	ldi	r25, 0x06	; 6
    57e2:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_ZN8Encoders12setParameterEhhh>
    57e6:	08 95       	ret
        break;

    }   return false;
    57e8:	80 e0       	ldi	r24, 0x00	; 0

}
    57ea:	08 95       	ret

000057ec <_Z12ledsOff_slowv>:
#include "hardware/reset/Reset.h"

void ledsOff_slow() {

    //turn off all leds slowly before reseting
    board.setLEDTransitionSpeed(1);
    57ec:	61 e0       	ldi	r22, 0x01	; 1
    57ee:	81 e4       	ldi	r24, 0x41	; 65
    57f0:	92 e0       	ldi	r25, 0x02	; 2
    57f2:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN5Board21setLEDTransitionSpeedEh>
    leds.allLEDsOff();
    57f6:	8a ef       	ldi	r24, 0xFA	; 250
    57f8:	96 e0       	ldi	r25, 0x06	; 6
    57fa:	0e 94 37 24 	call	0x486e	; 0x486e <_ZN4LEDs10allLEDsOffEv>
    //make sure all leds are off
    wait(1000);
    57fe:	68 ee       	ldi	r22, 0xE8	; 232
    5800:	73 e0       	ldi	r23, 0x03	; 3
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4waitm>
    580a:	08 95       	ret

0000580c <_Z8onRebootv>:

}

void onReboot()  {

    ledsOff_slow();
    580c:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <_Z12ledsOff_slowv>
    //this will reset the board into bootloader mode
    reboot(BTLDR_REBOOT);
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	0e 94 0a 14 	call	0x2814	; 0x2814 <_Z6rebooth>
    5816:	08 95       	ret

00005818 <_Z14onFactoryResetv>:

}

void onFactoryReset()   {

    ledsOff_slow();
    5818:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <_Z12ledsOff_slowv>
    configuration.factoryReset();
    581c:	8a e9       	ldi	r24, 0x9A	; 154
    581e:	91 e0       	ldi	r25, 0x01	; 1
    5820:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN13Configuration12factoryResetEv>
    reboot(APP_REBOOT);
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	0e 94 0a 14 	call	0x2814	; 0x2814 <_Z6rebooth>
    582a:	08 95       	ret

0000582c <_Z5setupv>:

}

void setup()    {

    configuration.init();
    582c:	8a e9       	ldi	r24, 0x9A	; 154
    582e:	91 e0       	ldi	r25, 0x01	; 1
    5830:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Configuration4initEv>

    sysEx.setHandleReboot(onReboot);
    5834:	66 e0       	ldi	r22, 0x06	; 6
    5836:	7c e2       	ldi	r23, 0x2C	; 44
    5838:	80 e0       	ldi	r24, 0x00	; 0
    583a:	97 e0       	ldi	r25, 0x07	; 7
    583c:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <_ZN5SysEx15setHandleRebootEPFvvE>
    sysEx.setHandleGet(onGet);
    5840:	69 e7       	ldi	r22, 0x79	; 121
    5842:	7b e2       	ldi	r23, 0x2B	; 43
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	97 e0       	ldi	r25, 0x07	; 7
    5848:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <_ZN5SysEx12setHandleGetEPFhhhhE>
    sysEx.setHandleSet(onSet);
    584c:	61 ea       	ldi	r22, 0xA1	; 161
    584e:	7b e2       	ldi	r23, 0x2B	; 43
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	97 e0       	ldi	r25, 0x07	; 7
    5854:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <_ZN5SysEx12setHandleSetEPFbhhhhE>
    sysEx.setHandleReset(onReset);
    5858:	69 ec       	ldi	r22, 0xC9	; 201
    585a:	7b e2       	ldi	r23, 0x2B	; 43
    585c:	80 e0       	ldi	r24, 0x00	; 0
    585e:	97 e0       	ldi	r25, 0x07	; 7
    5860:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <_ZN5SysEx14setHandleResetEPFbhhhE>
    sysEx.setHandleFactoryReset(onFactoryReset);
    5864:	6c e0       	ldi	r22, 0x0C	; 12
    5866:	7c e2       	ldi	r23, 0x2C	; 44
    5868:	80 e0       	ldi	r24, 0x00	; 0
    586a:	97 e0       	ldi	r25, 0x07	; 7
    586c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN5SysEx21setHandleFactoryResetEPFvvE>

    board.init();
    5870:	81 e4       	ldi	r24, 0x41	; 65
    5872:	92 e0       	ldi	r25, 0x02	; 2
    5874:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN5Board4initEv>
    midi.init();
    5878:	8b ef       	ldi	r24, 0xFB	; 251
    587a:	96 e0       	ldi	r25, 0x06	; 6
    587c:	0e 94 39 29 	call	0x5272	; 0x5272 <_ZN4MIDI4initEv>
    buttons.init();
    5880:	87 ea       	ldi	r24, 0xA7	; 167
    5882:	96 e0       	ldi	r25, 0x06	; 6
    5884:	0e 94 67 1f 	call	0x3ece	; 0x3ece <_ZN7Buttons4initEv>
    leds.init();
    5888:	8a ef       	ldi	r24, 0xFA	; 250
    588a:	96 e0       	ldi	r25, 0x06	; 6
    588c:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <_ZN4LEDs4initEv>
    analog.init();
    5890:	82 e0       	ldi	r24, 0x02	; 2
    5892:	95 e0       	ldi	r25, 0x05	; 5
    5894:	0e 94 1c 1b 	call	0x3638	; 0x3638 <_ZN6Analog4initEv>
    encoders.init();
    5898:	89 ef       	ldi	r24, 0xF9	; 249
    589a:	96 e0       	ldi	r25, 0x06	; 6
    589c:	0e 94 42 22 	call	0x4484	; 0x4484 <_ZN8Encoders4initEv>
    58a0:	08 95       	ret

000058a2 <main>:

}

int main()  {

    setup();
    58a2:	0e 94 16 2c 	call	0x582c	; 0x582c <_Z5setupv>
    while(1) { midi.checkInput(); buttons.update(); analog.update(); encoders.update(); }
    58a6:	8b ef       	ldi	r24, 0xFB	; 251
    58a8:	96 e0       	ldi	r25, 0x06	; 6
    58aa:	0e 94 a0 29 	call	0x5340	; 0x5340 <_ZN4MIDI10checkInputEv>
    58ae:	87 ea       	ldi	r24, 0xA7	; 167
    58b0:	96 e0       	ldi	r25, 0x06	; 6
    58b2:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN7Buttons6updateEv>
    58b6:	82 e0       	ldi	r24, 0x02	; 2
    58b8:	95 e0       	ldi	r25, 0x05	; 5
    58ba:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN6Analog6updateEv>
    58be:	89 ef       	ldi	r24, 0xF9	; 249
    58c0:	96 e0       	ldi	r25, 0x06	; 6
    58c2:	0e 94 4d 23 	call	0x469a	; 0x469a <_ZN8Encoders6updateEv>
    analog.init();
    encoders.init();

}

int main()  {
    58c6:	ef cf       	rjmp	.-34     	; 0x58a6 <main+0x4>

000058c8 <_ZN5SysExC1Ev>:
#include <avr/eeprom.h>
#include "SysEx.h"
#include "../hardware/board/Board.h"

SysEx::SysEx()  {
    58c8:	fc 01       	movw	r30, r24

    sendRebootCallback          = NULL;
    58ca:	11 82       	std	Z+1, r1	; 0x01
    58cc:	10 82       	st	Z, r1
    sendFactoryResetCallback    = NULL;
    58ce:	13 82       	std	Z+3, r1	; 0x03
    58d0:	12 82       	std	Z+2, r1	; 0x02
    sendGetCallback             = NULL;
    58d2:	15 82       	std	Z+5, r1	; 0x05
    58d4:	14 82       	std	Z+4, r1	; 0x04
    sendSetCallback             = NULL;
    58d6:	17 82       	std	Z+7, r1	; 0x07
    58d8:	16 82       	std	Z+6, r1	; 0x06
    sendResetCallback           = NULL;
    58da:	11 86       	std	Z+9, r1	; 0x09
    58dc:	10 86       	std	Z+8, r1	; 0x08

    sysExEnabled = false;
    58de:	12 86       	std	Z+10, r1	; 0x0a
    58e0:	ac 01       	movw	r20, r24
    58e2:	4e 5e       	subi	r20, 0xEE	; 238
    58e4:	5f 4f       	sbci	r21, 0xFF	; 255
    58e6:	bc 01       	movw	r22, r24
    58e8:	6c 51       	subi	r22, 0x1C	; 28
    58ea:	7f 4f       	sbci	r23, 0xFF	; 255

    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {

        messageInfo[i].messageTypeID = INVALID_VALUE;
    58ec:	80 e8       	ldi	r24, 0x80	; 128
    58ee:	fa 01       	movw	r30, r20
    58f0:	35 97       	sbiw	r30, 0x05	; 5
    58f2:	80 83       	st	Z, r24
    58f4:	31 96       	adiw	r30, 0x01	; 1
        messageInfo[i].numberOfSubtypes = INVALID_VALUE;
    58f6:	80 83       	st	Z, r24
    58f8:	9a 01       	movw	r18, r20
    58fa:	24 5e       	subi	r18, 0xE4	; 228
    58fc:	3f 4f       	sbci	r19, 0xFF	; 255
    58fe:	fa 01       	movw	r30, r20
    5900:	df 01       	movw	r26, r30
    5902:	13 97       	sbiw	r26, 0x03	; 3

        for (int j=0; j<MAX_NUMBER_OF_SUBTYPES; j++)    {

            for (int k=0; k<SUBTYPE_FIELDS; k++)
                messageInfo[i].subTypeInfo[j][k] = INVALID_VALUE;
    5904:	8c 93       	st	X, r24
    5906:	11 96       	adiw	r26, 0x01	; 1
    5908:	8c 93       	st	X, r24
    590a:	11 96       	adiw	r26, 0x01	; 1
    590c:	8c 93       	st	X, r24
    590e:	80 83       	st	Z, r24
    5910:	34 96       	adiw	r30, 0x04	; 4
    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {

        messageInfo[i].messageTypeID = INVALID_VALUE;
        messageInfo[i].numberOfSubtypes = INVALID_VALUE;

        for (int j=0; j<MAX_NUMBER_OF_SUBTYPES; j++)    {
    5912:	e2 17       	cp	r30, r18
    5914:	f3 07       	cpc	r31, r19
    5916:	a1 f7       	brne	.-24     	; 0x5900 <_ZN5SysExC1Ev+0x38>
    5918:	42 5e       	subi	r20, 0xE2	; 226
    591a:	5f 4f       	sbci	r21, 0xFF	; 255
    sendSetCallback             = NULL;
    sendResetCallback           = NULL;

    sysExEnabled = false;

    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {
    591c:	46 17       	cp	r20, r22
    591e:	57 07       	cpc	r21, r23
    5920:	31 f7       	brne	.-52     	; 0x58ee <_ZN5SysExC1Ev+0x26>

        }

    }

}
    5922:	08 95       	ret

00005924 <_ZN5SysEx11disableConfEv>:

}

void SysEx::disableConf()   {

    sysExEnabled = false;
    5924:	fc 01       	movw	r30, r24
    5926:	12 86       	std	Z+10, r1	; 0x0a
    5928:	08 95       	ret

0000592a <_ZN5SysEx14addMessageTypeEhh>:

}

void SysEx::addMessageType(uint8_t messageID, uint8_t subTypes) {

    messageInfo[messageID].messageTypeID = messageID;
    592a:	fc 01       	movw	r30, r24
    592c:	2e e1       	ldi	r18, 0x1E	; 30
    592e:	62 9f       	mul	r22, r18
    5930:	e0 0d       	add	r30, r0
    5932:	f1 1d       	adc	r31, r1
    5934:	11 24       	eor	r1, r1
    5936:	65 87       	std	Z+13, r22	; 0x0d
    messageInfo[messageID].numberOfSubtypes = subTypes;
    5938:	46 87       	std	Z+14, r20	; 0x0e
    593a:	08 95       	ret

0000593c <_ZN5SysEx17addMessageSubTypeEhhhhh>:

}

void SysEx::addMessageSubType(uint8_t messageID, uint8_t subTypeId, uint8_t numberOfParameters, uint8_t minValue, uint8_t maxValue) {
    593c:	ef 92       	push	r14
    593e:	0f 93       	push	r16

    messageInfo[messageID].subTypeInfo[subTypeId][0] = numberOfParameters;
    5940:	e4 2f       	mov	r30, r20
    5942:	f0 e0       	ldi	r31, 0x00	; 0
    5944:	3e e1       	ldi	r19, 0x1E	; 30
    5946:	63 9f       	mul	r22, r19
    5948:	b0 01       	movw	r22, r0
    594a:	11 24       	eor	r1, r1
    594c:	db 01       	movw	r26, r22
    594e:	34 e0       	ldi	r19, 0x04	; 4
    5950:	43 9f       	mul	r20, r19
    5952:	a0 0d       	add	r26, r0
    5954:	b1 1d       	adc	r27, r1
    5956:	11 24       	eor	r1, r1
    5958:	a8 0f       	add	r26, r24
    595a:	b9 1f       	adc	r27, r25
    595c:	1f 96       	adiw	r26, 0x0f	; 15
    595e:	2c 93       	st	X, r18
    5960:	1f 97       	sbiw	r26, 0x0f	; 15
    messageInfo[messageID].subTypeInfo[subTypeId][1] = minValue;
    5962:	50 96       	adiw	r26, 0x10	; 16
    5964:	0c 93       	st	X, r16
    messageInfo[messageID].subTypeInfo[subTypeId][2] = maxValue;
    5966:	31 96       	adiw	r30, 0x01	; 1
    5968:	ee 0f       	add	r30, r30
    596a:	ff 1f       	adc	r31, r31
    596c:	ee 0f       	add	r30, r30
    596e:	ff 1f       	adc	r31, r31
    5970:	6e 0f       	add	r22, r30
    5972:	7f 1f       	adc	r23, r31
    5974:	fc 01       	movw	r30, r24
    5976:	e6 0f       	add	r30, r22
    5978:	f7 1f       	adc	r31, r23
    597a:	e5 86       	std	Z+13, r14	; 0x0d

}
    597c:	0f 91       	pop	r16
    597e:	ef 90       	pop	r14
    5980:	08 95       	ret

00005982 <_ZN5SysEx10checkBlockEh>:

bool SysEx::checkBlock(uint8_t messageType) {

    //check if message type is valid
    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)
        if (messageInfo[messageType].messageTypeID == messageType)
    5982:	fc 01       	movw	r30, r24
    5984:	2e e1       	ldi	r18, 0x1E	; 30
    5986:	62 9f       	mul	r22, r18
    5988:	e0 0d       	add	r30, r0
    598a:	f1 1d       	adc	r31, r1
    598c:	11 24       	eor	r1, r1
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	95 85       	ldd	r25, Z+13	; 0x0d
    5992:	69 13       	cpse	r22, r25
    5994:	80 e0       	ldi	r24, 0x00	; 0
            return true;

    return false;

}
    5996:	08 95       	ret

00005998 <_ZN5SysEx17checkNewParameterEhhhh>:
    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);

}

bool SysEx::checkNewParameter(uint8_t messageType, uint8_t messageSubType, uint8_t parameter, uint8_t newParameter) {
    5998:	0f 93       	push	r16

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    599a:	e4 2f       	mov	r30, r20
    599c:	f0 e0       	ldi	r31, 0x00	; 0
    599e:	2e e1       	ldi	r18, 0x1E	; 30
    59a0:	62 9f       	mul	r22, r18
    59a2:	b0 01       	movw	r22, r0
    59a4:	11 24       	eor	r1, r1
    59a6:	db 01       	movw	r26, r22
    59a8:	24 e0       	ldi	r18, 0x04	; 4
    59aa:	42 9f       	mul	r20, r18
    59ac:	a0 0d       	add	r26, r0
    59ae:	b1 1d       	adc	r27, r1
    59b0:	11 24       	eor	r1, r1
    59b2:	a8 0f       	add	r26, r24
    59b4:	b9 1f       	adc	r27, r25
    59b6:	50 96       	adiw	r26, 0x10	; 16
    59b8:	2c 91       	ld	r18, X
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];
    59ba:	31 96       	adiw	r30, 0x01	; 1
    59bc:	ee 0f       	add	r30, r30
    59be:	ff 1f       	adc	r31, r31
    59c0:	ee 0f       	add	r30, r30
    59c2:	ff 1f       	adc	r31, r31
    59c4:	6e 0f       	add	r22, r30
    59c6:	7f 1f       	adc	r23, r31
    59c8:	fc 01       	movw	r30, r24
    59ca:	e6 0f       	add	r30, r22
    59cc:	f7 1f       	adc	r31, r23
    59ce:	95 85       	ldd	r25, Z+13	; 0x0d

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    59d0:	2f 3f       	cpi	r18, 0xFF	; 255
    59d2:	71 f0       	breq	.+28     	; 0x59f0 <_ZN5SysEx17checkNewParameterEhhhh+0x58>
    59d4:	9f 3f       	cpi	r25, 0xFF	; 255
    59d6:	39 f0       	breq	.+14     	; 0x59e6 <_ZN5SysEx17checkNewParameterEhhhh+0x4e>
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    59d8:	02 17       	cp	r16, r18
    59da:	88 f0       	brcs	.+34     	; 0x59fe <_ZN5SysEx17checkNewParameterEhhhh+0x66>
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	90 17       	cp	r25, r16
    59e0:	88 f4       	brcc	.+34     	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	0f c0       	rjmp	.+30     	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	02 17       	cp	r16, r18
    59ea:	60 f4       	brcc	.+24     	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	0a c0       	rjmp	.+20     	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    59f0:	9f 3f       	cpi	r25, 0xFF	; 255
    59f2:	39 f0       	breq	.+14     	; 0x5a02 <_ZN5SysEx17checkNewParameterEhhhh+0x6a>
        return (newParameter <= maxValue);   //check only max value
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	90 17       	cp	r25, r16
    59f8:	28 f4       	brcc	.+10     	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	03 c0       	rjmp	.+6      	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	01 c0       	rjmp	.+2      	; 0x5a04 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return (newParameter <= maxValue);   //check only max value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return true; //don't check new parameter
    5a02:	81 e0       	ldi	r24, 0x01	; 1

    return false;

}
    5a04:	0f 91       	pop	r16
    5a06:	08 95       	ret

00005a08 <_ZN5SysEx24generateMinMessageLenghtEhhhh>:


uint8_t SysEx::generateMinMessageLenght(uint8_t wish, uint8_t amount, uint8_t messageType, uint8_t messageSubType)    {
    5a08:	0f 93       	push	r16

    //single parameter
    if (amount == AMOUNT_SINGLE)  {
    5a0a:	41 11       	cpse	r20, r1
    5a0c:	04 c0       	rjmp	.+8      	; 0x5a16 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0xe>

        if ((wish == WISH_GET) ||
    5a0e:	6d 7f       	andi	r22, 0xFD	; 253
    5a10:	b1 f0       	breq	.+44     	; 0x5a3e <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x36>
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value
    5a12:	8b e0       	ldi	r24, 0x0B	; 11
    5a14:	19 c0       	rjmp	.+50     	; 0x5a48 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

        }   else if (amount == AMOUNT_ALL)   {
    5a16:	41 30       	cpi	r20, 0x01	; 1
    5a18:	a1 f4       	brne	.+40     	; 0x5a42 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3a>

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
    5a1a:	6d 7f       	andi	r22, 0xFD	; 253
    5a1c:	a1 f0       	breq	.+40     	; 0x5a46 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3e>
            return ML_REQ_STANDARD;

        else    {                                                                   //set

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];
    5a1e:	e0 2f       	mov	r30, r16
    5a20:	f0 e0       	ldi	r31, 0x00	; 0
    5a22:	ee 0f       	add	r30, r30
    5a24:	ff 1f       	adc	r31, r31
    5a26:	ee 0f       	add	r30, r30
    5a28:	ff 1f       	adc	r31, r31
    5a2a:	3e e1       	ldi	r19, 0x1E	; 30
    5a2c:	23 9f       	mul	r18, r19
    5a2e:	e0 0d       	add	r30, r0
    5a30:	f1 1d       	adc	r31, r1
    5a32:	11 24       	eor	r1, r1
    5a34:	e8 0f       	add	r30, r24
    5a36:	f9 1f       	adc	r31, r25
    5a38:	87 85       	ldd	r24, Z+15	; 0x0f
    5a3a:	87 5f       	subi	r24, 0xF7	; 247
    5a3c:	05 c0       	rjmp	.+10     	; 0x5a48 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

    //single parameter
    if (amount == AMOUNT_SINGLE)  {

        if ((wish == WISH_GET) ||
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
    5a3e:	8a e0       	ldi	r24, 0x0A	; 10
    5a40:	03 c0       	rjmp	.+6      	; 0x5a48 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];

        }

    }   else return 0;
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	01 c0       	rjmp	.+2      	; 0x5a48 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value

        }   else if (amount == AMOUNT_ALL)   {

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
            return ML_REQ_STANDARD;
    5a46:	89 e0       	ldi	r24, 0x09	; 9

        }

    }   else return 0;

}
    5a48:	0f 91       	pop	r16
    5a4a:	08 95       	ret

00005a4c <_ZN5SysEx9sendErrorE10sysExError>:

void SysEx::sendError(sysExError errorID)  {
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	00 d0       	rcall	.+0      	; 0x5a56 <_ZN5SysEx9sendErrorE10sysExError+0xa>
    5a56:	00 d0       	rcall	.+0      	; 0x5a58 <_ZN5SysEx9sendErrorE10sysExError+0xc>
    5a58:	1f 92       	push	r1
    5a5a:	cd b7       	in	r28, 0x3d	; 61
    5a5c:	de b7       	in	r29, 0x3e	; 62
    5a5e:	8c 01       	movw	r16, r24
    //public function, interface objects can use this function directly
    //to override internal error checking

    uint8_t sysExResponse[5];

    sysExResponse[0] = SYS_EX_M_ID_0;
    5a60:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5a62:	83 e5       	ldi	r24, 0x53	; 83
    5a64:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5a66:	83 e4       	ldi	r24, 0x43	; 67
    5a68:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_NACK;
    5a6a:	86 e4       	ldi	r24, 0x46	; 70
    5a6c:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = errorID;
    5a6e:	6d 83       	std	Y+5, r22	; 0x05

    midi.sendSysEx(sysExResponse, 5);
    5a70:	45 e0       	ldi	r20, 0x05	; 5
    5a72:	be 01       	movw	r22, r28
    5a74:	6f 5f       	subi	r22, 0xFF	; 255
    5a76:	7f 4f       	sbci	r23, 0xFF	; 255
    5a78:	8b ef       	ldi	r24, 0xFB	; 251
    5a7a:	96 e0       	ldi	r25, 0x06	; 6
    5a7c:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN4MIDI9sendSysExEPhh>
    dataAvailable = false;
    5a80:	f8 01       	movw	r30, r16
    5a82:	14 86       	std	Z+12, r1	; 0x0c

}
    5a84:	0f 90       	pop	r0
    5a86:	0f 90       	pop	r0
    5a88:	0f 90       	pop	r0
    5a8a:	0f 90       	pop	r0
    5a8c:	0f 90       	pop	r0
    5a8e:	df 91       	pop	r29
    5a90:	cf 91       	pop	r28
    5a92:	1f 91       	pop	r17
    5a94:	0f 91       	pop	r16
    5a96:	08 95       	ret

00005a98 <_ZN5SysEx20checkMessageValidityEPhh>:
    //data is processed
    dataAvailable = false;

}

bool SysEx::checkMessageValidity(uint8_t sysExArray[], uint8_t arrSize)  {
    5a98:	7f 92       	push	r7
    5a9a:	8f 92       	push	r8
    5a9c:	9f 92       	push	r9
    5a9e:	af 92       	push	r10
    5aa0:	bf 92       	push	r11
    5aa2:	cf 92       	push	r12
    5aa4:	df 92       	push	r13
    5aa6:	ef 92       	push	r14
    5aa8:	ff 92       	push	r15
    5aaa:	0f 93       	push	r16
    5aac:	1f 93       	push	r17
    5aae:	cf 93       	push	r28
    5ab0:	df 93       	push	r29
    5ab2:	7c 01       	movw	r14, r24
    5ab4:	eb 01       	movw	r28, r22
    5ab6:	84 2e       	mov	r8, r20

    //check wish validity
    if (!checkWish(sysExArray[MS_WISH]))    {
    5ab8:	cc 80       	ldd	r12, Y+4	; 0x04
    5aba:	82 e0       	ldi	r24, 0x02	; 2
    5abc:	8c 15       	cp	r24, r12
    5abe:	30 f4       	brcc	.+12     	; 0x5acc <_ZN5SysEx20checkMessageValidityEPhh+0x34>

        sendError(ERROR_WISH);
    5ac0:	61 e0       	ldi	r22, 0x01	; 1
    5ac2:	c7 01       	movw	r24, r14
    5ac4:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5ac8:	10 e0       	ldi	r17, 0x00	; 0
    5aca:	84 c0       	rjmp	.+264    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted amount is correct
    if (!checkAmount(sysExArray[MS_AMOUNT]))    {
    5acc:	bd 80       	ldd	r11, Y+5	; 0x05
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	8b 15       	cp	r24, r11
    5ad2:	30 f4       	brcc	.+12     	; 0x5ae0 <_ZN5SysEx20checkMessageValidityEPhh+0x48>

        sendError(ERROR_AMOUNT);
    5ad4:	62 e0       	ldi	r22, 0x02	; 2
    5ad6:	c7 01       	movw	r24, r14
    5ad8:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5adc:	10 e0       	ldi	r17, 0x00	; 0
    5ade:	7a c0       	rjmp	.+244    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if message type is correct
    if (!checkBlock(sysExArray[MS_BLOCK]))    {
    5ae0:	de 80       	ldd	r13, Y+6	; 0x06
    5ae2:	6d 2d       	mov	r22, r13
    5ae4:	c7 01       	movw	r24, r14
    5ae6:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_ZN5SysEx10checkBlockEh>
    5aea:	18 2f       	mov	r17, r24
    5aec:	81 11       	cpse	r24, r1
    5aee:	05 c0       	rjmp	.+10     	; 0x5afa <_ZN5SysEx20checkMessageValidityEPhh+0x62>

        sendError(ERROR_BLOCK);
    5af0:	63 e0       	ldi	r22, 0x03	; 3
    5af2:	c7 01       	movw	r24, r14
    5af4:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5af8:	6d c0       	rjmp	.+218    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    } else {

        //determine minimum message length based on asked parameters
        if (arrSize < generateMinMessageLenght(sysExArray[MS_WISH], sysExArray[MS_AMOUNT],sysExArray[MS_BLOCK], sysExArray[MS_SECTION]))    {
    5afa:	7f 80       	ldd	r7, Y+7	; 0x07
    5afc:	07 2d       	mov	r16, r7
    5afe:	2d 2d       	mov	r18, r13
    5b00:	4b 2d       	mov	r20, r11
    5b02:	6c 2d       	mov	r22, r12
    5b04:	c7 01       	movw	r24, r14
    5b06:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <_ZN5SysEx24generateMinMessageLenghtEhhhh>
    5b0a:	88 16       	cp	r8, r24
    5b0c:	30 f4       	brcc	.+12     	; 0x5b1a <_ZN5SysEx20checkMessageValidityEPhh+0x82>

            sendError(ERROR_MESSAGE_LENGTH);
    5b0e:	67 e0       	ldi	r22, 0x07	; 7
    5b10:	c7 01       	movw	r24, r14
    5b12:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    5b16:	10 e0       	ldi	r17, 0x00	; 0
    5b18:	5d c0       	rjmp	.+186    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

}

bool SysEx::checkSection(uint8_t messageType, uint8_t messageSubType)    {

    return (messageSubType < messageInfo[messageType].numberOfSubtypes);
    5b1a:	4d 2d       	mov	r20, r13
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	f7 01       	movw	r30, r14
    5b20:	8e e1       	ldi	r24, 0x1E	; 30
    5b22:	d8 9e       	mul	r13, r24
    5b24:	e0 0d       	add	r30, r0
    5b26:	f1 1d       	adc	r31, r1
    5b28:	11 24       	eor	r1, r1
        }

    }

    //check if subtype is correct
    if (!checkSection(sysExArray[MS_BLOCK], sysExArray[MS_SECTION])) {
    5b2a:	86 85       	ldd	r24, Z+14	; 0x0e
    5b2c:	78 16       	cp	r7, r24
    5b2e:	30 f0       	brcs	.+12     	; 0x5b3c <_ZN5SysEx20checkMessageValidityEPhh+0xa4>

        sendError(ERROR_SECTION);
    5b30:	64 e0       	ldi	r22, 0x04	; 4
    5b32:	c7 01       	movw	r24, r14
    5b34:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5b38:	10 e0       	ldi	r17, 0x00	; 0
    5b3a:	4c c0       	rjmp	.+152    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {
    5b3c:	b1 10       	cpse	r11, r1
    5b3e:	28 c0       	rjmp	.+80     	; 0x5b90 <_ZN5SysEx20checkMessageValidityEPhh+0xf8>

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    5b40:	28 85       	ldd	r18, Y+8	; 0x08
}

bool SysEx::checkParameterID(uint8_t messageType, uint8_t messageSubType, uint8_t parameter)   {

    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);
    5b42:	8e e1       	ldi	r24, 0x1E	; 30
    5b44:	84 9f       	mul	r24, r20
    5b46:	f0 01       	movw	r30, r0
    5b48:	85 9f       	mul	r24, r21
    5b4a:	f0 0d       	add	r31, r0
    5b4c:	11 24       	eor	r1, r1
    5b4e:	84 e0       	ldi	r24, 0x04	; 4
    5b50:	78 9e       	mul	r7, r24
    5b52:	e0 0d       	add	r30, r0
    5b54:	f1 1d       	adc	r31, r1
    5b56:	11 24       	eor	r1, r1
    5b58:	ee 0d       	add	r30, r14
    5b5a:	ff 1d       	adc	r31, r15
    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    5b5c:	87 85       	ldd	r24, Z+15	; 0x0f
    5b5e:	28 17       	cp	r18, r24
    5b60:	30 f0       	brcs	.+12     	; 0x5b6e <_ZN5SysEx20checkMessageValidityEPhh+0xd6>

            sendError(ERROR_PARAMETER);
    5b62:	65 e0       	ldi	r22, 0x05	; 5
    5b64:	c7 01       	movw	r24, r14
    5b66:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    5b6a:	10 e0       	ldi	r17, 0x00	; 0
    5b6c:	33 c0       	rjmp	.+102    	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

        }

        //if message wish is set, check new parameter
        if (sysExArray[MS_WISH] == WISH_SET) {
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	c8 12       	cpse	r12, r24
    5b72:	30 c0       	rjmp	.+96     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID], sysExArray[MS_NEW_PARAMETER_ID_SINGLE]))  {
    5b74:	09 85       	ldd	r16, Y+9	; 0x09
    5b76:	47 2d       	mov	r20, r7
    5b78:	6d 2d       	mov	r22, r13
    5b7a:	c7 01       	movw	r24, r14
    5b7c:	0e 94 cc 2c 	call	0x5998	; 0x5998 <_ZN5SysEx17checkNewParameterEhhhh>
    5b80:	18 2f       	mov	r17, r24
    5b82:	81 11       	cpse	r24, r1
    5b84:	27 c0       	rjmp	.+78     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

                sendError(ERROR_NEW_PARAMETER);
    5b86:	66 e0       	ldi	r22, 0x06	; 6
    5b88:	c7 01       	movw	r24, r14
    5b8a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    5b8e:	22 c0       	rjmp	.+68     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    } else {

        //all parameters

        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	c8 12       	cpse	r12, r24
    5b94:	1f c0       	rjmp	.+62     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    5b96:	91 2c       	mov	r9, r1
    5b98:	89 e0       	ldi	r24, 0x09	; 9
    5b9a:	88 1a       	sub	r8, r24
    5b9c:	91 08       	sbc	r9, r1
    5b9e:	18 14       	cp	r1, r8
    5ba0:	19 04       	cpc	r1, r9
    5ba2:	c4 f4       	brge	.+48     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    5ba4:	28 96       	adiw	r28, 0x08	; 8
    5ba6:	a1 2c       	mov	r10, r1
    5ba8:	b1 2c       	mov	r11, r1

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], i, sysExArray[arrayIndex+i]))   {
    5baa:	09 91       	ld	r16, Y+
    5bac:	2a 2d       	mov	r18, r10
    5bae:	47 2d       	mov	r20, r7
    5bb0:	6d 2d       	mov	r22, r13
    5bb2:	c7 01       	movw	r24, r14
    5bb4:	0e 94 cc 2c 	call	0x5998	; 0x5998 <_ZN5SysEx17checkNewParameterEhhhh>
    5bb8:	18 2f       	mov	r17, r24
    5bba:	81 11       	cpse	r24, r1
    5bbc:	05 c0       	rjmp	.+10     	; 0x5bc8 <_ZN5SysEx20checkMessageValidityEPhh+0x130>

                sendError(ERROR_NEW_PARAMETER);
    5bbe:	66 e0       	ldi	r22, 0x06	; 6
    5bc0:	c7 01       	movw	r24, r14
    5bc2:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    5bc8:	8f ef       	ldi	r24, 0xFF	; 255
    5bca:	a8 1a       	sub	r10, r24
    5bcc:	b8 0a       	sbc	r11, r24
    5bce:	a8 14       	cp	r10, r8
    5bd0:	b9 04       	cpc	r11, r9
    5bd2:	5c f3       	brlt	.-42     	; 0x5baa <_ZN5SysEx20checkMessageValidityEPhh+0x112>

    }

    return true;

}
    5bd4:	81 2f       	mov	r24, r17
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	1f 91       	pop	r17
    5bdc:	0f 91       	pop	r16
    5bde:	ff 90       	pop	r15
    5be0:	ef 90       	pop	r14
    5be2:	df 90       	pop	r13
    5be4:	cf 90       	pop	r12
    5be6:	bf 90       	pop	r11
    5be8:	af 90       	pop	r10
    5bea:	9f 90       	pop	r9
    5bec:	8f 90       	pop	r8
    5bee:	7f 90       	pop	r7
    5bf0:	08 95       	ret

00005bf2 <_ZN5SysEx17sendHelloResponseEv>:
    midi.sendSysEx(sysExResponse, 5);
    dataAvailable = false;

}

void SysEx::sendHelloResponse()   {
    5bf2:	cf 93       	push	r28
    5bf4:	df 93       	push	r29
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
    5bfa:	27 97       	sbiw	r28, 0x07	; 7
    5bfc:	0f b6       	in	r0, 0x3f	; 63
    5bfe:	f8 94       	cli
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	cd bf       	out	0x3d, r28	; 61

    uint8_t sysExAckResponse[7];

    sysExAckResponse[0] = SYS_EX_M_ID_0;
    5c06:	19 82       	std	Y+1, r1	; 0x01
    sysExAckResponse[1] = SYS_EX_M_ID_1;
    5c08:	23 e5       	ldi	r18, 0x53	; 83
    5c0a:	2a 83       	std	Y+2, r18	; 0x02
    sysExAckResponse[2] = SYS_EX_M_ID_2;
    5c0c:	23 e4       	ldi	r18, 0x43	; 67
    5c0e:	2b 83       	std	Y+3, r18	; 0x03
    sysExAckResponse[3] = RESPONSE_ACK;
    5c10:	21 e4       	ldi	r18, 0x41	; 65
    5c12:	2c 83       	std	Y+4, r18	; 0x04
    sysExAckResponse[4] = VERSION_BYTE_0;
    5c14:	21 e0       	ldi	r18, 0x01	; 1
    5c16:	2d 83       	std	Y+5, r18	; 0x05
    sysExAckResponse[5] = VERSION_BYTE_1;
    5c18:	1e 82       	std	Y+6, r1	; 0x06
    sysExAckResponse[6] = VERSION_BYTE_2;
    5c1a:	1f 82       	std	Y+7, r1	; 0x07

    sysExEnabled = true;
    5c1c:	fc 01       	movw	r30, r24
    5c1e:	22 87       	std	Z+10, r18	; 0x0a

    midi.sendSysEx(sysExAckResponse, 7);
    5c20:	47 e0       	ldi	r20, 0x07	; 7
    5c22:	be 01       	movw	r22, r28
    5c24:	6f 5f       	subi	r22, 0xFF	; 255
    5c26:	7f 4f       	sbci	r23, 0xFF	; 255
    5c28:	8b ef       	ldi	r24, 0xFB	; 251
    5c2a:	96 e0       	ldi	r25, 0x06	; 6
    5c2c:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN4MIDI9sendSysExEPhh>

}
    5c30:	27 96       	adiw	r28, 0x07	; 7
    5c32:	0f b6       	in	r0, 0x3f	; 63
    5c34:	f8 94       	cli
    5c36:	de bf       	out	0x3e, r29	; 62
    5c38:	0f be       	out	0x3f, r0	; 63
    5c3a:	cd bf       	out	0x3d, r28	; 61
    5c3c:	df 91       	pop	r29
    5c3e:	cf 91       	pop	r28
    5c40:	08 95       	ret

00005c42 <_ZN5SysEx12checkSpecialEPhh>:
    messageInfo[messageID].subTypeInfo[subTypeId][1] = minValue;
    messageInfo[messageID].subTypeInfo[subTypeId][2] = maxValue;

}

bool SysEx::checkSpecial(uint8_t *array, uint8_t size) {
    5c42:	cf 93       	push	r28

    if (size == ML_SPECIAL)   {
    5c44:	46 30       	cpi	r20, 0x06	; 6
    5c46:	09 f5       	brne	.+66     	; 0x5c8a <_ZN5SysEx12checkSpecialEPhh+0x48>
    5c48:	db 01       	movw	r26, r22
    5c4a:	fc 01       	movw	r30, r24

        if (array[size-2] == REBOOT_STRING)  {   //reset message
    5c4c:	14 96       	adiw	r26, 0x04	; 4
    5c4e:	2c 91       	ld	r18, X
    5c50:	2f 37       	cpi	r18, 0x7F	; 127
    5c52:	69 f4       	brne	.+26     	; 0x5c6e <_ZN5SysEx12checkSpecialEPhh+0x2c>

            if (sysExEnabled)
    5c54:	c2 85       	ldd	r28, Z+10	; 0x0a
    5c56:	cc 23       	and	r28, r28
    5c58:	29 f0       	breq	.+10     	; 0x5c64 <_ZN5SysEx12checkSpecialEPhh+0x22>
                sendRebootCallback();
    5c5a:	01 90       	ld	r0, Z+
    5c5c:	f0 81       	ld	r31, Z
    5c5e:	e0 2d       	mov	r30, r0
    5c60:	09 95       	icall
    5c62:	16 c0       	rjmp	.+44     	; 0x5c90 <_ZN5SysEx12checkSpecialEPhh+0x4e>
            else sendError(ERROR_HANDSHAKE);
    5c64:	60 e0       	ldi	r22, 0x00	; 0
    5c66:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
            return true;
    5c6a:	c1 e0       	ldi	r28, 0x01	; 1
    5c6c:	11 c0       	rjmp	.+34     	; 0x5c90 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == HELLO_STRING)   {
    5c6e:	28 34       	cpi	r18, 0x48	; 72
    5c70:	21 f4       	brne	.+8      	; 0x5c7a <_ZN5SysEx12checkSpecialEPhh+0x38>

            //hello message, necessary for allowing configuration
            sendHelloResponse();
    5c72:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <_ZN5SysEx17sendHelloResponseEv>
            return true;
    5c76:	c1 e0       	ldi	r28, 0x01	; 1
    5c78:	0b c0       	rjmp	.+22     	; 0x5c90 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == FACTORY_RESET_STRING) {
    5c7a:	24 34       	cpi	r18, 0x44	; 68
    5c7c:	41 f4       	brne	.+16     	; 0x5c8e <_ZN5SysEx12checkSpecialEPhh+0x4c>

            sendFactoryResetCallback();
    5c7e:	02 80       	ldd	r0, Z+2	; 0x02
    5c80:	f3 81       	ldd	r31, Z+3	; 0x03
    5c82:	e0 2d       	mov	r30, r0
    5c84:	09 95       	icall

        }

    }   return false;
    5c86:	c0 e0       	ldi	r28, 0x00	; 0
    5c88:	03 c0       	rjmp	.+6      	; 0x5c90 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5c8a:	c0 e0       	ldi	r28, 0x00	; 0
    5c8c:	01 c0       	rjmp	.+2      	; 0x5c90 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5c8e:	c0 e0       	ldi	r28, 0x00	; 0

}
    5c90:	8c 2f       	mov	r24, r28
    5c92:	cf 91       	pop	r28
    5c94:	08 95       	ret

00005c96 <_ZN5SysEx15sendComponentIDEhh>:

    midi.sendSysEx(sysExAckResponse, 7);

}

void SysEx::sendComponentID(uint8_t blockID, uint8_t componentID)   {
    5c96:	cf 93       	push	r28
    5c98:	df 93       	push	r29
    5c9a:	00 d0       	rcall	.+0      	; 0x5c9c <_ZN5SysEx15sendComponentIDEhh+0x6>
    5c9c:	00 d0       	rcall	.+0      	; 0x5c9e <_ZN5SysEx15sendComponentIDEhh+0x8>
    5c9e:	00 d0       	rcall	.+0      	; 0x5ca0 <_ZN5SysEx15sendComponentIDEhh+0xa>
    5ca0:	cd b7       	in	r28, 0x3d	; 61
    5ca2:	de b7       	in	r29, 0x3e	; 62

    uint8_t sysExResponse[6];

    sysExResponse[0] = SYS_EX_M_ID_0;
    5ca4:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5ca6:	83 e5       	ldi	r24, 0x53	; 83
    5ca8:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5caa:	83 e4       	ldi	r24, 0x43	; 67
    5cac:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = COMPONENT_INFO_STRING;
    5cae:	89 e4       	ldi	r24, 0x49	; 73
    5cb0:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = blockID;
    5cb2:	6d 83       	std	Y+5, r22	; 0x05
    sysExResponse[5] = componentID;
    5cb4:	4e 83       	std	Y+6, r20	; 0x06

    midi.sendSysEx(sysExResponse, 6);
    5cb6:	46 e0       	ldi	r20, 0x06	; 6
    5cb8:	be 01       	movw	r22, r28
    5cba:	6f 5f       	subi	r22, 0xFF	; 255
    5cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbe:	8b ef       	ldi	r24, 0xFB	; 251
    5cc0:	96 e0       	ldi	r25, 0x06	; 6
    5cc2:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN4MIDI9sendSysExEPhh>

}
    5cc6:	26 96       	adiw	r28, 0x06	; 6
    5cc8:	0f b6       	in	r0, 0x3f	; 63
    5cca:	f8 94       	cli
    5ccc:	de bf       	out	0x3e, r29	; 62
    5cce:	0f be       	out	0x3f, r0	; 63
    5cd0:	cd bf       	out	0x3d, r28	; 61
    5cd2:	df 91       	pop	r29
    5cd4:	cf 91       	pop	r28
    5cd6:	08 95       	ret

00005cd8 <_ZN5SysEx12sendResponseEPhh>:

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {
    5cd8:	8f 92       	push	r8
    5cda:	9f 92       	push	r9
    5cdc:	af 92       	push	r10
    5cde:	bf 92       	push	r11
    5ce0:	cf 92       	push	r12
    5ce2:	df 92       	push	r13
    5ce4:	ef 92       	push	r14
    5ce6:	ff 92       	push	r15
    5ce8:	0f 93       	push	r16
    5cea:	1f 93       	push	r17
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	cd b7       	in	r28, 0x3d	; 61
    5cf2:	de b7       	in	r29, 0x3e	; 62
    5cf4:	c8 54       	subi	r28, 0x48	; 72
    5cf6:	d1 09       	sbc	r29, r1
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	f8 94       	cli
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	0f be       	out	0x3f, r0	; 63
    5d00:	cd bf       	out	0x3d, r28	; 61
    5d02:	4c 01       	movw	r8, r24
    5d04:	6b 01       	movw	r12, r22
    uint8_t sysExResponse[64+ML_RES_BASIC];
    uint8_t arrayLength = 0;
    uint8_t arrayIndex = 0;
    bool eepromError = false;

    sysExResponse[0] = SYS_EX_M_ID_0;
    5d06:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5d08:	83 e5       	ldi	r24, 0x53	; 83
    5d0a:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5d0c:	83 e4       	ldi	r24, 0x43	; 67
    5d0e:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_ACK;
    5d10:	81 e4       	ldi	r24, 0x41	; 65
    5d12:	8c 83       	std	Y+4, r24	; 0x04

    if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    5d14:	db 01       	movw	r26, r22
    5d16:	15 96       	adiw	r26, 0x05	; 5
    5d18:	8c 91       	ld	r24, X
    5d1a:	15 97       	sbiw	r26, 0x05	; 5
    5d1c:	81 30       	cpi	r24, 0x01	; 1
    5d1e:	09 f0       	breq	.+2      	; 0x5d22 <_ZN5SysEx12sendResponseEPhh+0x4a>
    5d20:	ac c0       	rjmp	.+344    	; 0x5e7a <_ZN5SysEx12sendResponseEPhh+0x1a2>

        uint8_t messageType = sysExArray[MS_BLOCK];
        uint8_t messageSubtype = sysExArray[MS_SECTION];
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];
    5d22:	17 96       	adiw	r26, 0x07	; 7
    5d24:	ec 91       	ld	r30, X
    5d26:	17 97       	sbiw	r26, 0x07	; 7
    5d28:	f0 e0       	ldi	r31, 0x00	; 0
    5d2a:	16 96       	adiw	r26, 0x06	; 6
    5d2c:	9c 91       	ld	r25, X
    5d2e:	ee 0f       	add	r30, r30
    5d30:	ff 1f       	adc	r31, r31
    5d32:	ee 0f       	add	r30, r30
    5d34:	ff 1f       	adc	r31, r31
    5d36:	be e1       	ldi	r27, 0x1E	; 30
    5d38:	9b 9f       	mul	r25, r27
    5d3a:	e0 0d       	add	r30, r0
    5d3c:	f1 1d       	adc	r31, r1
    5d3e:	11 24       	eor	r1, r1
    5d40:	e8 0d       	add	r30, r8
    5d42:	f9 1d       	adc	r31, r9
    5d44:	e7 84       	ldd	r14, Z+15	; 0x0f

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    5d46:	fb 01       	movw	r30, r22
    5d48:	94 81       	ldd	r25, Z+4	; 0x04
    5d4a:	91 30       	cpi	r25, 0x01	; 1
    5d4c:	81 f1       	breq	.+96     	; 0x5dae <_ZN5SysEx12sendResponseEPhh+0xd6>
    5d4e:	50 f0       	brcs	.+20     	; 0x5d64 <_ZN5SysEx12sendResponseEPhh+0x8c>
    5d50:	92 30       	cpi	r25, 0x02	; 2
    5d52:	09 f4       	brne	.+2      	; 0x5d56 <_ZN5SysEx12sendResponseEPhh+0x7e>
    5d54:	5c c0       	rjmp	.+184    	; 0x5e0e <_ZN5SysEx12sendResponseEPhh+0x136>
    5d56:	7f c0       	rjmp	.+254    	; 0x5e56 <_ZN5SysEx12sendResponseEPhh+0x17e>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];
    5d58:	d6 01       	movw	r26, r12
    5d5a:	18 96       	adiw	r26, 0x08	; 8
    5d5c:	fc 90       	ld	r15, X

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5d5e:	ee 24       	eor	r14, r14
    5d60:	e3 94       	inc	r14
    5d62:	03 c0       	rjmp	.+6      	; 0x5d6a <_ZN5SysEx12sendResponseEPhh+0x92>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    5d64:	ee 20       	and	r14, r14
    5d66:	f1 f0       	breq	.+60     	; 0x5da4 <_ZN5SysEx12sendResponseEPhh+0xcc>

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
    5d68:	f1 2c       	mov	r15, r1
    5d6a:	8e 01       	movw	r16, r28
    5d6c:	0b 5f       	subi	r16, 0xFB	; 251
    5d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d70:	ce 01       	movw	r24, r28
    5d72:	8e 0d       	add	r24, r14
    5d74:	91 1d       	adc	r25, r1
    5d76:	fc 01       	movw	r30, r24
    5d78:	35 96       	adiw	r30, 0x05	; 5
    5d7a:	5f 01       	movw	r10, r30
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
    5d7c:	d4 01       	movw	r26, r8
    5d7e:	14 96       	adiw	r26, 0x04	; 4
    5d80:	ed 91       	ld	r30, X+
    5d82:	fc 91       	ld	r31, X
    5d84:	15 97       	sbiw	r26, 0x05	; 5
    5d86:	4f 2d       	mov	r20, r15
    5d88:	d6 01       	movw	r26, r12
    5d8a:	17 96       	adiw	r26, 0x07	; 7
    5d8c:	6c 91       	ld	r22, X
    5d8e:	17 97       	sbiw	r26, 0x07	; 7
    5d90:	16 96       	adiw	r26, 0x06	; 6
    5d92:	8c 91       	ld	r24, X
    5d94:	09 95       	icall
    5d96:	f8 01       	movw	r30, r16
    5d98:	81 93       	st	Z+, r24
    5d9a:	8f 01       	movw	r16, r30
            _parameter++;
    5d9c:	f3 94       	inc	r15

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    5d9e:	ea 15       	cp	r30, r10
    5da0:	fb 05       	cpc	r31, r11
    5da2:	61 f7       	brne	.-40     	; 0x5d7c <_ZN5SysEx12sendResponseEPhh+0xa4>

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
            _parameter++;

        }   arrayLength = ML_SET_RESTORE+componentNr;
    5da4:	44 e0       	ldi	r20, 0x04	; 4
    5da6:	4e 0d       	add	r20, r14
        break;
    5da8:	77 c0       	rjmp	.+238    	; 0x5e98 <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5daa:	ee 24       	eor	r14, r14
    5dac:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE+componentNr;
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    5dae:	81 30       	cpi	r24, 0x01	; 1
    5db0:	29 f0       	breq	.+10     	; 0x5dbc <_ZN5SysEx12sendResponseEPhh+0xe4>
            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            }   else    {

            _parameter = sysExArray[MS_PARAMETER_ID];
    5db2:	d6 01       	movw	r26, r12
    5db4:	18 96       	adiw	r26, 0x08	; 8
    5db6:	fc 90       	ld	r15, X
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;
    5db8:	89 e0       	ldi	r24, 0x09	; 9
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <_ZN5SysEx12sendResponseEPhh+0xe8>

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;
    5dbc:	88 e0       	ldi	r24, 0x08	; 8
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
    5dbe:	f1 2c       	mov	r15, r1
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5dc0:	ee 20       	and	r14, r14
    5dc2:	09 f4       	brne	.+2      	; 0x5dc6 <_ZN5SysEx12sendResponseEPhh+0xee>
    5dc4:	66 c0       	rjmp	.+204    	; 0x5e92 <_ZN5SysEx12sendResponseEPhh+0x1ba>
    5dc6:	a8 2e       	mov	r10, r24
    5dc8:	b1 2c       	mov	r11, r1
    5dca:	86 01       	movw	r16, r12
    5dcc:	0a 0d       	add	r16, r10
    5dce:	1b 1d       	adc	r17, r11
    5dd0:	ae 0c       	add	r10, r14
    5dd2:	b1 1c       	adc	r11, r1
    5dd4:	ac 0c       	add	r10, r12
    5dd6:	bd 1c       	adc	r11, r13

            if (!sendSetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter, sysExArray[arrayIndex+i]))  {
    5dd8:	f8 01       	movw	r30, r16
    5dda:	21 91       	ld	r18, Z+
    5ddc:	8f 01       	movw	r16, r30
    5dde:	d4 01       	movw	r26, r8
    5de0:	16 96       	adiw	r26, 0x06	; 6
    5de2:	ed 91       	ld	r30, X+
    5de4:	fc 91       	ld	r31, X
    5de6:	17 97       	sbiw	r26, 0x07	; 7
    5de8:	4f 2d       	mov	r20, r15
    5dea:	d6 01       	movw	r26, r12
    5dec:	17 96       	adiw	r26, 0x07	; 7
    5dee:	6c 91       	ld	r22, X
    5df0:	17 97       	sbiw	r26, 0x07	; 7
    5df2:	16 96       	adiw	r26, 0x06	; 6
    5df4:	8c 91       	ld	r24, X
    5df6:	09 95       	icall
    5df8:	88 23       	and	r24, r24
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <_ZN5SysEx12sendResponseEPhh+0x126>
    5dfc:	52 c0       	rjmp	.+164    	; 0x5ea2 <_ZN5SysEx12sendResponseEPhh+0x1ca>
                eepromError = true;
                break;

            }

            _parameter++;
    5dfe:	f3 94       	inc	r15
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5e00:	0a 15       	cp	r16, r10
    5e02:	1b 05       	cpc	r17, r11
    5e04:	49 f7       	brne	.-46     	; 0x5dd8 <_ZN5SysEx12sendResponseEPhh+0x100>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5e06:	44 e0       	ldi	r20, 0x04	; 4
    5e08:	47 c0       	rjmp	.+142    	; 0x5e98 <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5e0a:	ee 24       	eor	r14, r14
    5e0c:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
    5e0e:	81 30       	cpi	r24, 0x01	; 1
    5e10:	19 f0       	breq	.+6      	; 0x5e18 <_ZN5SysEx12sendResponseEPhh+0x140>
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];
    5e12:	f6 01       	movw	r30, r12
    5e14:	f0 84       	ldd	r15, Z+8	; 0x08
    5e16:	01 c0       	rjmp	.+2      	; 0x5e1a <_ZN5SysEx12sendResponseEPhh+0x142>
        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
    5e18:	f1 2c       	mov	r15, r1
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    5e1a:	ae 2c       	mov	r10, r14
    5e1c:	b1 2c       	mov	r11, r1
    5e1e:	1a 14       	cp	r1, r10
    5e20:	1b 04       	cpc	r1, r11
    5e22:	cc f5       	brge	.+114    	; 0x5e96 <_ZN5SysEx12sendResponseEPhh+0x1be>
    5e24:	00 e0       	ldi	r16, 0x00	; 0
    5e26:	10 e0       	ldi	r17, 0x00	; 0

            if (!sendResetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter))  {
    5e28:	d4 01       	movw	r26, r8
    5e2a:	18 96       	adiw	r26, 0x08	; 8
    5e2c:	ed 91       	ld	r30, X+
    5e2e:	fc 91       	ld	r31, X
    5e30:	19 97       	sbiw	r26, 0x09	; 9
    5e32:	4f 2d       	mov	r20, r15
    5e34:	40 0f       	add	r20, r16
    5e36:	d6 01       	movw	r26, r12
    5e38:	17 96       	adiw	r26, 0x07	; 7
    5e3a:	6c 91       	ld	r22, X
    5e3c:	17 97       	sbiw	r26, 0x07	; 7
    5e3e:	16 96       	adiw	r26, 0x06	; 6
    5e40:	8c 91       	ld	r24, X
    5e42:	09 95       	icall
    5e44:	88 23       	and	r24, r24
    5e46:	69 f1       	breq	.+90     	; 0x5ea2 <_ZN5SysEx12sendResponseEPhh+0x1ca>
        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    5e48:	0f 5f       	subi	r16, 0xFF	; 255
    5e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e4c:	0a 15       	cp	r16, r10
    5e4e:	1b 05       	cpc	r17, r11
    5e50:	59 f7       	brne	.-42     	; 0x5e28 <_ZN5SysEx12sendResponseEPhh+0x150>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5e52:	44 e0       	ldi	r20, 0x04	; 4
    5e54:	21 c0       	rjmp	.+66     	; 0x5e98 <_ZN5SysEx12sendResponseEPhh+0x1c0>
        break;

    }

    if (dataAvailable)  {
    5e56:	f4 01       	movw	r30, r8
    5e58:	84 85       	ldd	r24, Z+12	; 0x0c
    5e5a:	88 23       	and	r24, r24
    5e5c:	39 f1       	breq	.+78     	; 0x5eac <_ZN5SysEx12sendResponseEPhh+0x1d4>
    5e5e:	40 e0       	ldi	r20, 0x00	; 0

        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
    5e60:	be 01       	movw	r22, r28
    5e62:	6f 5f       	subi	r22, 0xFF	; 255
    5e64:	7f 4f       	sbci	r23, 0xFF	; 255
    5e66:	8b ef       	ldi	r24, 0xFB	; 251
    5e68:	96 e0       	ldi	r25, 0x06	; 6
    5e6a:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN4MIDI9sendSysExEPhh>
    5e6e:	1e c0       	rjmp	.+60     	; 0x5eac <_ZN5SysEx12sendResponseEPhh+0x1d4>
        else                sendError(ERROR_EEPROM);
    5e70:	68 e0       	ldi	r22, 0x08	; 8
    5e72:	c4 01       	movw	r24, r8
    5e74:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
    5e78:	19 c0       	rjmp	.+50     	; 0x5eac <_ZN5SysEx12sendResponseEPhh+0x1d4>
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    5e7a:	db 01       	movw	r26, r22
    5e7c:	14 96       	adiw	r26, 0x04	; 4
    5e7e:	9c 91       	ld	r25, X
    5e80:	91 30       	cpi	r25, 0x01	; 1
    5e82:	09 f4       	brne	.+2      	; 0x5e86 <_ZN5SysEx12sendResponseEPhh+0x1ae>
    5e84:	92 cf       	rjmp	.-220    	; 0x5daa <_ZN5SysEx12sendResponseEPhh+0xd2>
    5e86:	08 f4       	brcc	.+2      	; 0x5e8a <_ZN5SysEx12sendResponseEPhh+0x1b2>
    5e88:	67 cf       	rjmp	.-306    	; 0x5d58 <_ZN5SysEx12sendResponseEPhh+0x80>
    5e8a:	92 30       	cpi	r25, 0x02	; 2
    5e8c:	09 f4       	brne	.+2      	; 0x5e90 <_ZN5SysEx12sendResponseEPhh+0x1b8>
    5e8e:	bd cf       	rjmp	.-134    	; 0x5e0a <_ZN5SysEx12sendResponseEPhh+0x132>
    5e90:	e2 cf       	rjmp	.-60     	; 0x5e56 <_ZN5SysEx12sendResponseEPhh+0x17e>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5e92:	44 e0       	ldi	r20, 0x04	; 4
    5e94:	01 c0       	rjmp	.+2      	; 0x5e98 <_ZN5SysEx12sendResponseEPhh+0x1c0>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    5e96:	44 e0       	ldi	r20, 0x04	; 4
        break;

    }

    if (dataAvailable)  {
    5e98:	f4 01       	movw	r30, r8
    5e9a:	84 85       	ldd	r24, Z+12	; 0x0c
    5e9c:	81 11       	cpse	r24, r1
    5e9e:	e0 cf       	rjmp	.-64     	; 0x5e60 <_ZN5SysEx12sendResponseEPhh+0x188>
    5ea0:	05 c0       	rjmp	.+10     	; 0x5eac <_ZN5SysEx12sendResponseEPhh+0x1d4>
    5ea2:	d4 01       	movw	r26, r8
    5ea4:	1c 96       	adiw	r26, 0x0c	; 12
    5ea6:	8c 91       	ld	r24, X
    5ea8:	81 11       	cpse	r24, r1
    5eaa:	e2 cf       	rjmp	.-60     	; 0x5e70 <_ZN5SysEx12sendResponseEPhh+0x198>
        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
        else                sendError(ERROR_EEPROM);

    }

}
    5eac:	c8 5b       	subi	r28, 0xB8	; 184
    5eae:	df 4f       	sbci	r29, 0xFF	; 255
    5eb0:	0f b6       	in	r0, 0x3f	; 63
    5eb2:	f8 94       	cli
    5eb4:	de bf       	out	0x3e, r29	; 62
    5eb6:	0f be       	out	0x3f, r0	; 63
    5eb8:	cd bf       	out	0x3d, r28	; 61
    5eba:	df 91       	pop	r29
    5ebc:	cf 91       	pop	r28
    5ebe:	1f 91       	pop	r17
    5ec0:	0f 91       	pop	r16
    5ec2:	ff 90       	pop	r15
    5ec4:	ef 90       	pop	r14
    5ec6:	df 90       	pop	r13
    5ec8:	cf 90       	pop	r12
    5eca:	bf 90       	pop	r11
    5ecc:	af 90       	pop	r10
    5ece:	9f 90       	pop	r9
    5ed0:	8f 90       	pop	r8
    5ed2:	08 95       	ret

00005ed4 <_ZN5SysEx11handleSysExEPhh>:

    }   return false;

}

void SysEx::handleSysEx(uint8_t *sysExArray, uint8_t size)    {
    5ed4:	ff 92       	push	r15
    5ed6:	0f 93       	push	r16
    5ed8:	1f 93       	push	r17
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29

    //we have new data
    dataAvailable = true;
    5ede:	21 e0       	ldi	r18, 0x01	; 1
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	24 87       	std	Z+12, r18	; 0x0c

    //ignore messages shorter than absolute minimum
    if (size < ML_SPECIAL) return;
    5ee4:	46 30       	cpi	r20, 0x06	; 6
    5ee6:	40 f1       	brcs	.+80     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>
    //don't respond to sysex message if device ID is wrong
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;
    5ee8:	fb 01       	movw	r30, r22
    5eea:	53 81       	ldd	r21, Z+3	; 0x03
    5eec:	32 81       	ldd	r19, Z+2	; 0x02
bool SysEx::checkID(uint8_t firstByte, uint8_t secondByte, uint8_t thirdByte)   {

    return  (

    (firstByte  == SYS_EX_M_ID_0)   &&
    (secondByte == SYS_EX_M_ID_1)   &&
    5eee:	21 81       	ldd	r18, Z+1	; 0x01
    5ef0:	21 11       	cpse	r18, r1
    5ef2:	22 c0       	rjmp	.+68     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>

bool SysEx::checkID(uint8_t firstByte, uint8_t secondByte, uint8_t thirdByte)   {

    return  (

    (firstByte  == SYS_EX_M_ID_0)   &&
    5ef4:	33 35       	cpi	r19, 0x53	; 83
    5ef6:	01 f5       	brne	.+64     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>
    (secondByte == SYS_EX_M_ID_1)   &&
    5ef8:	53 34       	cpi	r21, 0x43	; 67
    5efa:	f1 f4       	brne	.+60     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>
    5efc:	16 c0       	rjmp	.+44     	; 0x5f2a <_ZN5SysEx11handleSysExEPhh+0x56>
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;

    if (checkSpecial(sysExArray, size)) return;
    //message appears to be fine for now
    //check if hello message has been received by now
    if (!sysExEnabled) {
    5efe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f00:	81 11       	cpse	r24, r1
    5f02:	05 c0       	rjmp	.+10     	; 0x5f0e <_ZN5SysEx11handleSysExEPhh+0x3a>

        //message is fine, but handshake hasn't been received
        sendError(ERROR_HANDSHAKE);
    5f04:	60 e0       	ldi	r22, 0x00	; 0
    5f06:	ce 01       	movw	r24, r28
    5f08:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <_ZN5SysEx9sendErrorE10sysExError>
        return;
    5f0c:	15 c0       	rjmp	.+42     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>

    }

    if (!checkMessageValidity(sysExArray, size)) return; //message not valid
    5f0e:	4f 2d       	mov	r20, r15
    5f10:	b8 01       	movw	r22, r16
    5f12:	ce 01       	movw	r24, r28
    5f14:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN5SysEx20checkMessageValidityEPhh>
    5f18:	88 23       	and	r24, r24
    5f1a:	71 f0       	breq	.+28     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>
        sendResponse(sysExArray, size);
    5f1c:	4f 2d       	mov	r20, r15
    5f1e:	b8 01       	movw	r22, r16
    5f20:	ce 01       	movw	r24, r28
    5f22:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <_ZN5SysEx12sendResponseEPhh>

    //data is processed
    dataAvailable = false;
    5f26:	1c 86       	std	Y+12, r1	; 0x0c
    5f28:	07 c0       	rjmp	.+14     	; 0x5f38 <_ZN5SysEx11handleSysExEPhh+0x64>
    5f2a:	f4 2e       	mov	r15, r20
    5f2c:	8b 01       	movw	r16, r22
    5f2e:	ec 01       	movw	r28, r24
    //ignore messages shorter than absolute minimum
    if (size < ML_SPECIAL) return;
    //don't respond to sysex message if device ID is wrong
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;

    if (checkSpecial(sysExArray, size)) return;
    5f30:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <_ZN5SysEx12checkSpecialEPhh>
    5f34:	88 23       	and	r24, r24
    5f36:	19 f3       	breq	.-58     	; 0x5efe <_ZN5SysEx11handleSysExEPhh+0x2a>
        sendResponse(sysExArray, size);

    //data is processed
    dataAvailable = false;

}
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	1f 91       	pop	r17
    5f3e:	0f 91       	pop	r16
    5f40:	ff 90       	pop	r15
    5f42:	08 95       	ret

00005f44 <_ZN5SysEx15setHandleRebootEPFvvE>:

//callbacks

void SysEx::setHandleReboot(void (*fptr)(void)) {

    sendRebootCallback = fptr;
    5f44:	fc 01       	movw	r30, r24
    5f46:	71 83       	std	Z+1, r23	; 0x01
    5f48:	60 83       	st	Z, r22
    5f4a:	08 95       	ret

00005f4c <_ZN5SysEx21setHandleFactoryResetEPFvvE>:

}

void SysEx::setHandleFactoryReset(void (*fptr)(void))   {

    sendFactoryResetCallback = fptr;
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	73 83       	std	Z+3, r23	; 0x03
    5f50:	62 83       	std	Z+2, r22	; 0x02
    5f52:	08 95       	ret

00005f54 <_ZN5SysEx12setHandleGetEPFhhhhE>:

}

void SysEx::setHandleGet(uint8_t(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendGetCallback = fptr;
    5f54:	fc 01       	movw	r30, r24
    5f56:	75 83       	std	Z+5, r23	; 0x05
    5f58:	64 83       	std	Z+4, r22	; 0x04
    5f5a:	08 95       	ret

00005f5c <_ZN5SysEx12setHandleSetEPFbhhhhE>:

}

void SysEx::setHandleSet(bool(*fptr)(uint8_t messageType, uint8_t messageSubType, uint8_t parameterID, uint8_t newParameterID))    {

    sendSetCallback = fptr;
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	77 83       	std	Z+7, r23	; 0x07
    5f60:	66 83       	std	Z+6, r22	; 0x06
    5f62:	08 95       	ret

00005f64 <_ZN5SysEx14setHandleResetEPFbhhhE>:

}

void SysEx::setHandleReset(bool(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendResetCallback = fptr;
    5f64:	fc 01       	movw	r30, r24
    5f66:	71 87       	std	Z+9, r23	; 0x09
    5f68:	60 87       	std	Z+8, r22	; 0x08
    5f6a:	08 95       	ret

00005f6c <_ZN5SysEx20configurationEnabledEv>:

bool SysEx::configurationEnabled()  {

    return sysExEnabled;

}
    5f6c:	fc 01       	movw	r30, r24
    5f6e:	82 85       	ldd	r24, Z+10	; 0x0a
    5f70:	08 95       	ret

00005f72 <_GLOBAL__sub_I__ZN5SysExC2Ev>:

SysEx sysEx;
    5f72:	80 e0       	ldi	r24, 0x00	; 0
    5f74:	97 e0       	ldi	r25, 0x07	; 7
    5f76:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <_ZN5SysExC1Ev>
    5f7a:	08 95       	ret

00005f7c <__divmodhi4>:
    5f7c:	97 fb       	bst	r25, 7
    5f7e:	07 2e       	mov	r0, r23
    5f80:	16 f4       	brtc	.+4      	; 0x5f86 <__divmodhi4+0xa>
    5f82:	00 94       	com	r0
    5f84:	07 d0       	rcall	.+14     	; 0x5f94 <__divmodhi4_neg1>
    5f86:	77 fd       	sbrc	r23, 7
    5f88:	09 d0       	rcall	.+18     	; 0x5f9c <__divmodhi4_neg2>
    5f8a:	0e 94 31 30 	call	0x6062	; 0x6062 <__udivmodhi4>
    5f8e:	07 fc       	sbrc	r0, 7
    5f90:	05 d0       	rcall	.+10     	; 0x5f9c <__divmodhi4_neg2>
    5f92:	3e f4       	brtc	.+14     	; 0x5fa2 <__divmodhi4_exit>

00005f94 <__divmodhi4_neg1>:
    5f94:	90 95       	com	r25
    5f96:	81 95       	neg	r24
    5f98:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9a:	08 95       	ret

00005f9c <__divmodhi4_neg2>:
    5f9c:	70 95       	com	r23
    5f9e:	61 95       	neg	r22
    5fa0:	7f 4f       	sbci	r23, 0xFF	; 255

00005fa2 <__divmodhi4_exit>:
    5fa2:	08 95       	ret

00005fa4 <__udivmodsi4>:
    5fa4:	a1 e2       	ldi	r26, 0x21	; 33
    5fa6:	1a 2e       	mov	r1, r26
    5fa8:	aa 1b       	sub	r26, r26
    5faa:	bb 1b       	sub	r27, r27
    5fac:	fd 01       	movw	r30, r26
    5fae:	0d c0       	rjmp	.+26     	; 0x5fca <__udivmodsi4_ep>

00005fb0 <__udivmodsi4_loop>:
    5fb0:	aa 1f       	adc	r26, r26
    5fb2:	bb 1f       	adc	r27, r27
    5fb4:	ee 1f       	adc	r30, r30
    5fb6:	ff 1f       	adc	r31, r31
    5fb8:	a2 17       	cp	r26, r18
    5fba:	b3 07       	cpc	r27, r19
    5fbc:	e4 07       	cpc	r30, r20
    5fbe:	f5 07       	cpc	r31, r21
    5fc0:	20 f0       	brcs	.+8      	; 0x5fca <__udivmodsi4_ep>
    5fc2:	a2 1b       	sub	r26, r18
    5fc4:	b3 0b       	sbc	r27, r19
    5fc6:	e4 0b       	sbc	r30, r20
    5fc8:	f5 0b       	sbc	r31, r21

00005fca <__udivmodsi4_ep>:
    5fca:	66 1f       	adc	r22, r22
    5fcc:	77 1f       	adc	r23, r23
    5fce:	88 1f       	adc	r24, r24
    5fd0:	99 1f       	adc	r25, r25
    5fd2:	1a 94       	dec	r1
    5fd4:	69 f7       	brne	.-38     	; 0x5fb0 <__udivmodsi4_loop>
    5fd6:	60 95       	com	r22
    5fd8:	70 95       	com	r23
    5fda:	80 95       	com	r24
    5fdc:	90 95       	com	r25
    5fde:	9b 01       	movw	r18, r22
    5fe0:	ac 01       	movw	r20, r24
    5fe2:	bd 01       	movw	r22, r26
    5fe4:	cf 01       	movw	r24, r30
    5fe6:	08 95       	ret

00005fe8 <__tablejump2__>:
    5fe8:	ee 0f       	add	r30, r30
    5fea:	ff 1f       	adc	r31, r31
    5fec:	05 90       	lpm	r0, Z+
    5fee:	f4 91       	lpm	r31, Z
    5ff0:	e0 2d       	mov	r30, r0
    5ff2:	09 94       	ijmp

00005ff4 <__ashldi3>:
    5ff4:	0f 93       	push	r16
    5ff6:	08 30       	cpi	r16, 0x08	; 8
    5ff8:	90 f0       	brcs	.+36     	; 0x601e <__ashldi3+0x2a>
    5ffa:	98 2f       	mov	r25, r24
    5ffc:	87 2f       	mov	r24, r23
    5ffe:	76 2f       	mov	r23, r22
    6000:	65 2f       	mov	r22, r21
    6002:	54 2f       	mov	r21, r20
    6004:	43 2f       	mov	r20, r19
    6006:	32 2f       	mov	r19, r18
    6008:	22 27       	eor	r18, r18
    600a:	08 50       	subi	r16, 0x08	; 8
    600c:	f4 cf       	rjmp	.-24     	; 0x5ff6 <__ashldi3+0x2>
    600e:	22 0f       	add	r18, r18
    6010:	33 1f       	adc	r19, r19
    6012:	44 1f       	adc	r20, r20
    6014:	55 1f       	adc	r21, r21
    6016:	66 1f       	adc	r22, r22
    6018:	77 1f       	adc	r23, r23
    601a:	88 1f       	adc	r24, r24
    601c:	99 1f       	adc	r25, r25
    601e:	0a 95       	dec	r16
    6020:	b2 f7       	brpl	.-20     	; 0x600e <__ashldi3+0x1a>
    6022:	0f 91       	pop	r16
    6024:	08 95       	ret

00006026 <__ashrdi3>:
    6026:	97 fb       	bst	r25, 7
    6028:	10 f8       	bld	r1, 0

0000602a <__lshrdi3>:
    602a:	16 94       	lsr	r1
    602c:	00 08       	sbc	r0, r0
    602e:	0f 93       	push	r16
    6030:	08 30       	cpi	r16, 0x08	; 8
    6032:	98 f0       	brcs	.+38     	; 0x605a <__lshrdi3+0x30>
    6034:	08 50       	subi	r16, 0x08	; 8
    6036:	23 2f       	mov	r18, r19
    6038:	34 2f       	mov	r19, r20
    603a:	45 2f       	mov	r20, r21
    603c:	56 2f       	mov	r21, r22
    603e:	67 2f       	mov	r22, r23
    6040:	78 2f       	mov	r23, r24
    6042:	89 2f       	mov	r24, r25
    6044:	90 2d       	mov	r25, r0
    6046:	f4 cf       	rjmp	.-24     	; 0x6030 <__lshrdi3+0x6>
    6048:	05 94       	asr	r0
    604a:	97 95       	ror	r25
    604c:	87 95       	ror	r24
    604e:	77 95       	ror	r23
    6050:	67 95       	ror	r22
    6052:	57 95       	ror	r21
    6054:	47 95       	ror	r20
    6056:	37 95       	ror	r19
    6058:	27 95       	ror	r18
    605a:	0a 95       	dec	r16
    605c:	aa f7       	brpl	.-22     	; 0x6048 <__lshrdi3+0x1e>
    605e:	0f 91       	pop	r16
    6060:	08 95       	ret

00006062 <__udivmodhi4>:
    6062:	aa 1b       	sub	r26, r26
    6064:	bb 1b       	sub	r27, r27
    6066:	51 e1       	ldi	r21, 0x11	; 17
    6068:	07 c0       	rjmp	.+14     	; 0x6078 <__udivmodhi4_ep>

0000606a <__udivmodhi4_loop>:
    606a:	aa 1f       	adc	r26, r26
    606c:	bb 1f       	adc	r27, r27
    606e:	a6 17       	cp	r26, r22
    6070:	b7 07       	cpc	r27, r23
    6072:	10 f0       	brcs	.+4      	; 0x6078 <__udivmodhi4_ep>
    6074:	a6 1b       	sub	r26, r22
    6076:	b7 0b       	sbc	r27, r23

00006078 <__udivmodhi4_ep>:
    6078:	88 1f       	adc	r24, r24
    607a:	99 1f       	adc	r25, r25
    607c:	5a 95       	dec	r21
    607e:	a9 f7       	brne	.-22     	; 0x606a <__udivmodhi4_loop>
    6080:	80 95       	com	r24
    6082:	90 95       	com	r25
    6084:	bc 01       	movw	r22, r24
    6086:	cd 01       	movw	r24, r26
    6088:	08 95       	ret

0000608a <eeprom_read_byte>:
    608a:	f9 99       	sbic	0x1f, 1	; 31
    608c:	fe cf       	rjmp	.-4      	; 0x608a <eeprom_read_byte>
    608e:	92 bd       	out	0x22, r25	; 34
    6090:	81 bd       	out	0x21, r24	; 33
    6092:	f8 9a       	sbi	0x1f, 0	; 31
    6094:	99 27       	eor	r25, r25
    6096:	80 b5       	in	r24, 0x20	; 32
    6098:	08 95       	ret

0000609a <eeprom_update_byte>:
    609a:	26 2f       	mov	r18, r22

0000609c <eeprom_update_r18>:
    609c:	f9 99       	sbic	0x1f, 1	; 31
    609e:	fe cf       	rjmp	.-4      	; 0x609c <eeprom_update_r18>
    60a0:	92 bd       	out	0x22, r25	; 34
    60a2:	81 bd       	out	0x21, r24	; 33
    60a4:	f8 9a       	sbi	0x1f, 0	; 31
    60a6:	01 97       	sbiw	r24, 0x01	; 1
    60a8:	00 b4       	in	r0, 0x20	; 32
    60aa:	02 16       	cp	r0, r18
    60ac:	39 f0       	breq	.+14     	; 0x60bc <eeprom_update_r18+0x20>
    60ae:	1f ba       	out	0x1f, r1	; 31
    60b0:	20 bd       	out	0x20, r18	; 32
    60b2:	0f b6       	in	r0, 0x3f	; 63
    60b4:	f8 94       	cli
    60b6:	fa 9a       	sbi	0x1f, 2	; 31
    60b8:	f9 9a       	sbi	0x1f, 1	; 31
    60ba:	0f be       	out	0x3f, r0	; 63
    60bc:	08 95       	ret

000060be <_exit>:
    60be:	f8 94       	cli

000060c0 <__stop_program>:
    60c0:	ff cf       	rjmp	.-2      	; 0x60c0 <__stop_program>
