
OpenDeck_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  0000574a  000057de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000574a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000650  0080019a  0080019a  00005878  2**0
                  ALLOC
  3 .noinit       00000007  008007ea  008007ea  00005878  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000008f8  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00016a92  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000032b7  00000000  00000000  0001cc72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e63  00000000  00000000  0001ff29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a68  00000000  00000000  00023d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004b62  00000000  00000000  000257f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c4dc  00000000  00000000  0002a356  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b10  00000000  00000000  00036832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__ctors_end>
       4:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
       8:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
       c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      10:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      14:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      18:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      1c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      20:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      24:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      28:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__vector_10>
      2c:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__vector_11>
      30:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      34:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      38:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      3c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      40:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      44:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      48:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      4c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      50:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      54:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_21>
      58:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      5c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      60:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      64:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_25>
      68:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__vector_26>
      6c:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__vector_27>
      70:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      74:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_29>
      78:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      7c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      80:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      84:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      88:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      8c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      90:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      94:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      98:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      9c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      a0:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      a4:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      a8:	0c 94 b3 01 	jmp	0x366	; 0x366 <__bad_interrupt>
      ac:	60 0f       	add	r22, r16
      ae:	78 0f       	add	r23, r24
      b0:	78 0f       	add	r23, r24
      b2:	78 0f       	add	r23, r24
      b4:	78 0f       	add	r23, r24
      b6:	78 0f       	add	r23, r24
      b8:	78 0f       	add	r23, r24
      ba:	78 0f       	add	r23, r24
      bc:	78 0f       	add	r23, r24
      be:	78 0f       	add	r23, r24
      c0:	78 0f       	add	r23, r24
      c2:	78 0f       	add	r23, r24
      c4:	78 0f       	add	r23, r24
      c6:	78 0f       	add	r23, r24
      c8:	78 0f       	add	r23, r24
      ca:	78 0f       	add	r23, r24
      cc:	60 0f       	add	r22, r16
      ce:	78 0f       	add	r23, r24
      d0:	78 0f       	add	r23, r24
      d2:	78 0f       	add	r23, r24
      d4:	78 0f       	add	r23, r24
      d6:	78 0f       	add	r23, r24
      d8:	78 0f       	add	r23, r24
      da:	78 0f       	add	r23, r24
      dc:	78 0f       	add	r23, r24
      de:	78 0f       	add	r23, r24
      e0:	78 0f       	add	r23, r24
      e2:	78 0f       	add	r23, r24
      e4:	78 0f       	add	r23, r24
      e6:	78 0f       	add	r23, r24
      e8:	78 0f       	add	r23, r24
      ea:	78 0f       	add	r23, r24
      ec:	60 0f       	add	r22, r16
      ee:	78 0f       	add	r23, r24
      f0:	78 0f       	add	r23, r24
      f2:	78 0f       	add	r23, r24
      f4:	78 0f       	add	r23, r24
      f6:	78 0f       	add	r23, r24
      f8:	78 0f       	add	r23, r24
      fa:	78 0f       	add	r23, r24
      fc:	78 0f       	add	r23, r24
      fe:	78 0f       	add	r23, r24
     100:	78 0f       	add	r23, r24
     102:	78 0f       	add	r23, r24
     104:	78 0f       	add	r23, r24
     106:	78 0f       	add	r23, r24
     108:	78 0f       	add	r23, r24
     10a:	78 0f       	add	r23, r24
     10c:	60 0f       	add	r22, r16
     10e:	78 0f       	add	r23, r24
     110:	78 0f       	add	r23, r24
     112:	78 0f       	add	r23, r24
     114:	78 0f       	add	r23, r24
     116:	78 0f       	add	r23, r24
     118:	78 0f       	add	r23, r24
     11a:	78 0f       	add	r23, r24
     11c:	78 0f       	add	r23, r24
     11e:	78 0f       	add	r23, r24
     120:	78 0f       	add	r23, r24
     122:	78 0f       	add	r23, r24
     124:	78 0f       	add	r23, r24
     126:	78 0f       	add	r23, r24
     128:	78 0f       	add	r23, r24
     12a:	78 0f       	add	r23, r24
     12c:	55 0f       	add	r21, r21
     12e:	78 0f       	add	r23, r24
     130:	78 0f       	add	r23, r24
     132:	78 0f       	add	r23, r24
     134:	78 0f       	add	r23, r24
     136:	78 0f       	add	r23, r24
     138:	78 0f       	add	r23, r24
     13a:	78 0f       	add	r23, r24
     13c:	78 0f       	add	r23, r24
     13e:	78 0f       	add	r23, r24
     140:	78 0f       	add	r23, r24
     142:	78 0f       	add	r23, r24
     144:	78 0f       	add	r23, r24
     146:	78 0f       	add	r23, r24
     148:	78 0f       	add	r23, r24
     14a:	78 0f       	add	r23, r24
     14c:	55 0f       	add	r21, r21
     14e:	78 0f       	add	r23, r24
     150:	78 0f       	add	r23, r24
     152:	78 0f       	add	r23, r24
     154:	78 0f       	add	r23, r24
     156:	78 0f       	add	r23, r24
     158:	78 0f       	add	r23, r24
     15a:	78 0f       	add	r23, r24
     15c:	78 0f       	add	r23, r24
     15e:	78 0f       	add	r23, r24
     160:	78 0f       	add	r23, r24
     162:	78 0f       	add	r23, r24
     164:	78 0f       	add	r23, r24
     166:	78 0f       	add	r23, r24
     168:	78 0f       	add	r23, r24
     16a:	78 0f       	add	r23, r24
     16c:	60 0f       	add	r22, r16
     16e:	78 0f       	add	r23, r24
     170:	78 0f       	add	r23, r24
     172:	78 0f       	add	r23, r24
     174:	78 0f       	add	r23, r24
     176:	78 0f       	add	r23, r24
     178:	78 0f       	add	r23, r24
     17a:	78 0f       	add	r23, r24
     17c:	78 0f       	add	r23, r24
     17e:	78 0f       	add	r23, r24
     180:	78 0f       	add	r23, r24
     182:	78 0f       	add	r23, r24
     184:	78 0f       	add	r23, r24
     186:	78 0f       	add	r23, r24
     188:	78 0f       	add	r23, r24
     18a:	78 0f       	add	r23, r24
     18c:	6b 0f       	add	r22, r27
     18e:	55 0f       	add	r21, r21
     190:	60 0f       	add	r22, r16
     192:	55 0f       	add	r21, r21
     194:	78 0f       	add	r23, r24
     196:	78 0f       	add	r23, r24
     198:	47 0f       	add	r20, r23
     19a:	78 0f       	add	r23, r24
     19c:	47 0f       	add	r20, r23
     19e:	78 0f       	add	r23, r24
     1a0:	47 0f       	add	r20, r23
     1a2:	47 0f       	add	r20, r23
     1a4:	47 0f       	add	r20, r23
     1a6:	78 0f       	add	r23, r24
     1a8:	47 0f       	add	r20, r23
     1aa:	47 0f       	add	r20, r23
     1ac:	a3 10       	cpse	r10, r3
     1ae:	bf 10       	cpse	r11, r15
     1b0:	b4 10       	cpse	r11, r4
     1b2:	af 10       	cpse	r10, r15
     1b4:	cb 10       	cpse	r12, r11
     1b6:	cb 10       	cpse	r12, r11
     1b8:	9f 10       	cpse	r9, r15
     1ba:	cb 10       	cpse	r12, r11
     1bc:	9f 10       	cpse	r9, r15
     1be:	cb 10       	cpse	r12, r11
     1c0:	9f 10       	cpse	r9, r15
     1c2:	9f 10       	cpse	r9, r15
     1c4:	9f 10       	cpse	r9, r15
     1c6:	cb 10       	cpse	r12, r11
     1c8:	9f 10       	cpse	r9, r15
     1ca:	9f 10       	cpse	r9, r15
     1cc:	cd 23       	and	r28, r29
     1ce:	d6 23       	and	r29, r22
     1d0:	df 23       	and	r29, r31
     1d2:	e8 23       	and	r30, r24
     1d4:	f1 23       	and	r31, r17
     1d6:	fa 23       	and	r31, r26
     1d8:	03 24       	eor	r0, r3
     1da:	0c 24       	eor	r0, r12
     1dc:	15 24       	eor	r1, r5
     1de:	1e 24       	eor	r1, r14
     1e0:	27 24       	eor	r2, r7
     1e2:	30 24       	eor	r3, r0
     1e4:	39 24       	eor	r3, r9
     1e6:	42 24       	eor	r4, r2
     1e8:	4b 24       	eor	r4, r11

000001ea <__trampolines_end>:
     1ea:	00 01       	movw	r0, r0
     1ec:	00 00       	nop
     1ee:	c0 02       	muls	r28, r16
     1f0:	12 00       	.word	0x0012	; ????
     1f2:	02 00       	.word	0x0002	; ????
     1f4:	00 2c       	mov	r0, r0
     1f6:	02 73       	andi	r16, 0x32	; 50
     1f8:	00 22       	and	r0, r16
     1fa:	01 00       	.word	0x0001	; ????
     1fc:	9f 02       	muls	r25, r31
     1fe:	21 00       	.word	0x0021	; ????
     200:	21 01       	movw	r4, r2
     202:	00 88       	ldd	r0, Z+16	; 0x10
     204:	02 09       	sbc	r16, r2
     206:	00 03       	mulsu	r16, r16
     208:	00 00       	nop
     20a:	28 02       	muls	r18, r24
     20c:	04 01       	movw	r0, r8
     20e:	03 09       	sbc	r16, r3
     210:	04 14       	cp	r0, r4
     212:	02 12       	cpse	r0, r18

00000214 <string1>:
     214:	12 03 4f 00 70 00 65 00 6e 00 44 00 65 00 63 00     ..O.p.e.n.D.e.c.
     224:	6b 00 00 00                                         k...

00000228 <string0>:
     228:	04 03 09 04                                         ....

0000022c <config1_descriptor>:
     22c:	09 02 73 00 02 01 00 c0 32 09 04 00 00 02 01 03     ..s.....2.......
     23c:	00 00 07 24 01 00 01 41 00 06 24 02 01 01 00 06     ...$...A..$.....
     24c:	24 02 02 02 00 09 24 03 01 03 01 02 01 00 09 24     $.....$........$
     25c:	03 02 04 01 01 01 00 09 05 04 02 40 00 00 00 00     ...........@....
     26c:	05 25 01 01 01 09 05 83 02 40 00 00 00 00 05 25     .%.......@.....%
     27c:	01 01 03 09 04 01 00 02 03 00 00 00 09 21 11 01     .............!..
     28c:	00 01 22 21 00 07 05 81 03 40 00 01 07 05 02 03     .."!.....@......
     29c:	20 00 02                                             ..

0000029f <debug_hid_report_desc>:
     29f:	06 c9 ff 09 04 a1 5c 75 08 15 00 26 ff 00 95 40     ......\u...&...@
     2af:	09 75 81 02 95 20 09 76 91 02 95 04 09 76 b1 02     .u... .v.....v..
     2bf:	c0                                                  .

000002c0 <device_descriptor>:
     2c0:	12 01 00 02 00 00 00 40 09 12 72 84 00 01 00 01     .......@..r.....
     2d0:	00 01                                               ..

000002d2 <endpoint_config_table>:
     2d2:	01 c1 36 01 c0 26 01 81 36 01 80 36                 ..6..&..6..6

000002de <__ctors_start>:
     2de:	fd 2a       	or	r15, r29

000002e0 <__ctors_end>:
     2e0:	11 24       	eor	r1, r1
     2e2:	1f be       	out	0x3f, r1	; 63
     2e4:	cf ef       	ldi	r28, 0xFF	; 255
     2e6:	da e0       	ldi	r29, 0x0A	; 10
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	cd bf       	out	0x3d, r28	; 61

000002ec <_Z21Bootloader_Jump_Checkv>:
#define BOOTLOADER_START_ADDRESS  0x7000

void Bootloader_Jump_Check(void)    {

    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))  {
     2ec:	04 b6       	in	r0, 0x34	; 52
     2ee:	03 fe       	sbrs	r0, 3
     2f0:	18 c0       	rjmp	.+48     	; 0x322 <__do_copy_data>
     2f2:	80 91 ea 07 	lds	r24, 0x07EA
     2f6:	90 91 eb 07 	lds	r25, 0x07EB
     2fa:	a0 91 ec 07 	lds	r26, 0x07EC
     2fe:	b0 91 ed 07 	lds	r27, 0x07ED
     302:	8a 3c       	cpi	r24, 0xCA	; 202
     304:	9c 4a       	sbci	r25, 0xAC	; 172
     306:	a2 44       	sbci	r26, 0x42	; 66
     308:	bc 4d       	sbci	r27, 0xDC	; 220
     30a:	59 f4       	brne	.+22     	; 0x322 <__do_copy_data>
        Boot_Key = 0;
     30c:	10 92 ea 07 	sts	0x07EA, r1
     310:	10 92 eb 07 	sts	0x07EB, r1
     314:	10 92 ec 07 	sts	0x07EC, r1
     318:	10 92 ed 07 	sts	0x07ED, r1
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     31c:	e0 e0       	ldi	r30, 0x00	; 0
     31e:	f0 e7       	ldi	r31, 0x70	; 112
     320:	09 95       	icall

00000322 <__do_copy_data>:
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	ea e4       	ldi	r30, 0x4A	; 74
     32a:	f7 e5       	ldi	r31, 0x57	; 87
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x10>
     32e:	05 90       	lpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	aa 39       	cpi	r26, 0x9A	; 154
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0xc>

00000338 <__do_clear_bss>:
     338:	27 e0       	ldi	r18, 0x07	; 7
     33a:	aa e9       	ldi	r26, 0x9A	; 154
     33c:	b1 e0       	ldi	r27, 0x01	; 1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	aa 3e       	cpi	r26, 0xEA	; 234
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>

00000348 <__do_global_ctors>:
     348:	11 e0       	ldi	r17, 0x01	; 1
     34a:	c0 e7       	ldi	r28, 0x70	; 112
     34c:	d1 e0       	ldi	r29, 0x01	; 1
     34e:	04 c0       	rjmp	.+8      	; 0x358 <__do_global_ctors+0x10>
     350:	21 97       	sbiw	r28, 0x01	; 1
     352:	fe 01       	movw	r30, r28
     354:	0e 94 38 2b 	call	0x5670	; 0x5670 <__tablejump2__>
     358:	cf 36       	cpi	r28, 0x6F	; 111
     35a:	d1 07       	cpc	r29, r17
     35c:	c9 f7       	brne	.-14     	; 0x350 <__do_global_ctors+0x8>
     35e:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <main>
     362:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <_exit>

00000366 <__bad_interrupt>:
     366:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000036a <_ZN13Configuration11clearEEPROMEv>:
    clearEEPROM();
    writeConfiguration();

}

void Configuration::clearEEPROM()    {
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29

    for (int i=0; i<1024; i++) eeprom_update_byte((uint8_t*)i, 0xFF);
     36e:	c0 e0       	ldi	r28, 0x00	; 0
     370:	d0 e0       	ldi	r29, 0x00	; 0
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	ce 01       	movw	r24, r28
     376:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
     37a:	21 96       	adiw	r28, 0x01	; 1
     37c:	c1 15       	cp	r28, r1
     37e:	84 e0       	ldi	r24, 0x04	; 4
     380:	d8 07       	cpc	r29, r24
     382:	b9 f7       	brne	.-18     	; 0x372 <_ZN13Configuration11clearEEPROMEv+0x8>

}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <_ZN13Configuration14writeParameterEhhhh>:

bool Configuration::writeParameter(uint8_t blockID, uint8_t sectionID, uint8_t parameterID, uint8_t newValue)    {
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	7c 01       	movw	r14, r24
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     3a0:	c4 2f       	mov	r28, r20
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	de 01       	movw	r26, r28
     3a6:	aa 0f       	add	r26, r26
     3a8:	bb 1f       	adc	r27, r27
     3aa:	c6 2e       	mov	r12, r22
     3ac:	d1 2c       	mov	r13, r1
     3ae:	81 e2       	ldi	r24, 0x21	; 33
     3b0:	68 9f       	mul	r22, r24
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	ae 0f       	add	r26, r30
     3b8:	bf 1f       	adc	r27, r31
     3ba:	ae 0d       	add	r26, r14
     3bc:	bf 1d       	adc	r27, r15
     3be:	ee 0d       	add	r30, r14
     3c0:	ff 1d       	adc	r31, r15
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	4d 91       	ld	r20, X+
     3c6:	5c 91       	ld	r21, X
     3c8:	14 97       	sbiw	r26, 0x04	; 4
     3ca:	81 81       	ldd	r24, Z+1	; 0x01
     3cc:	92 81       	ldd	r25, Z+2	; 0x02
     3ce:	84 0f       	add	r24, r20
     3d0:	95 1f       	adc	r25, r21

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     3d2:	ec 0f       	add	r30, r28
     3d4:	fd 1f       	adc	r31, r29

    uint8_t arrayIndex;
    uint8_t arrayValue;
    uint8_t parameterIndex;

    switch(parameterType)   {
     3d6:	35 89       	ldd	r19, Z+21	; 0x15
     3d8:	33 23       	and	r19, r19
     3da:	09 f4       	brne	.+2      	; 0x3de <_ZN13Configuration14writeParameterEhhhh+0x54>
     3dc:	65 c0       	rjmp	.+202    	; 0x4a8 <_ZN13Configuration14writeParameterEhhhh+0x11e>
     3de:	31 30       	cpi	r19, 0x01	; 1
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <_ZN13Configuration14writeParameterEhhhh+0x5a>
     3e2:	8d c0       	rjmp	.+282    	; 0x4fe <_ZN13Configuration14writeParameterEhhhh+0x174>

        case BIT_PARAMETER:
        arrayIndex = parameterID/8;
        parameterIndex = parameterID - 8*arrayIndex;
     3e4:	32 2f       	mov	r19, r18
     3e6:	36 95       	lsr	r19
     3e8:	36 95       	lsr	r19
     3ea:	36 95       	lsr	r19
     3ec:	12 2f       	mov	r17, r18
     3ee:	17 70       	andi	r17, 0x07	; 7
        arrayValue = eeprom_read_byte((uint8_t*)startAddress+arrayIndex);
     3f0:	5c 01       	movw	r10, r24
     3f2:	a3 0e       	add	r10, r19
     3f4:	b1 1c       	adc	r11, r1
     3f6:	c5 01       	movw	r24, r10
     3f8:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
        if (newValue == DEFAULT_VALUE)
     3fc:	00 38       	cpi	r16, 0x80	; 128
     3fe:	51 f5       	brne	.+84     	; 0x454 <_ZN13Configuration14writeParameterEhhhh+0xca>
            bitWrite(arrayValue, parameterIndex, (blocks[blockID].defaultValue[sectionID] & 0x01));
     400:	91 e2       	ldi	r25, 0x21	; 33
     402:	9c 9d       	mul	r25, r12
     404:	a0 01       	movw	r20, r0
     406:	9d 9d       	mul	r25, r13
     408:	50 0d       	add	r21, r0
     40a:	11 24       	eor	r1, r1
     40c:	e4 0e       	add	r14, r20
     40e:	f5 1e       	adc	r15, r21
     410:	ce 0d       	add	r28, r14
     412:	df 1d       	adc	r29, r15
     414:	9b 8d       	ldd	r25, Y+27	; 0x1b
     416:	90 ff       	sbrs	r25, 0
     418:	0e c0       	rjmp	.+28     	; 0x436 <_ZN13Configuration14writeParameterEhhhh+0xac>
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	04 c0       	rjmp	.+8      	; 0x42c <_ZN13Configuration14writeParameterEhhhh+0xa2>
     424:	44 0f       	add	r20, r20
     426:	55 1f       	adc	r21, r21
     428:	66 1f       	adc	r22, r22
     42a:	77 1f       	adc	r23, r23
     42c:	1a 95       	dec	r17
     42e:	d2 f7       	brpl	.-12     	; 0x424 <_ZN13Configuration14writeParameterEhhhh+0x9a>
     430:	c8 2f       	mov	r28, r24
     432:	c4 2b       	or	r28, r20
     434:	2d c0       	rjmp	.+90     	; 0x490 <_ZN13Configuration14writeParameterEhhhh+0x106>
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <_ZN13Configuration14writeParameterEhhhh+0xbe>
     440:	44 0f       	add	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	66 1f       	adc	r22, r22
     446:	77 1f       	adc	r23, r23
     448:	1a 95       	dec	r17
     44a:	d2 f7       	brpl	.-12     	; 0x440 <_ZN13Configuration14writeParameterEhhhh+0xb6>
     44c:	c4 2f       	mov	r28, r20
     44e:	c0 95       	com	r28
     450:	c8 23       	and	r28, r24
     452:	1e c0       	rjmp	.+60     	; 0x490 <_ZN13Configuration14writeParameterEhhhh+0x106>
        else bitWrite(arrayValue, parameterIndex, newValue);
     454:	00 23       	and	r16, r16
     456:	71 f0       	breq	.+28     	; 0x474 <_ZN13Configuration14writeParameterEhhhh+0xea>
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_ZN13Configuration14writeParameterEhhhh+0xe0>
     462:	44 0f       	add	r20, r20
     464:	55 1f       	adc	r21, r21
     466:	66 1f       	adc	r22, r22
     468:	77 1f       	adc	r23, r23
     46a:	1a 95       	dec	r17
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_ZN13Configuration14writeParameterEhhhh+0xd8>
     46e:	c8 2f       	mov	r28, r24
     470:	c4 2b       	or	r28, r20
     472:	0e c0       	rjmp	.+28     	; 0x490 <_ZN13Configuration14writeParameterEhhhh+0x106>
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <_ZN13Configuration14writeParameterEhhhh+0xfc>
     47e:	44 0f       	add	r20, r20
     480:	55 1f       	adc	r21, r21
     482:	66 1f       	adc	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	1a 95       	dec	r17
     488:	d2 f7       	brpl	.-12     	; 0x47e <_ZN13Configuration14writeParameterEhhhh+0xf4>
     48a:	c4 2f       	mov	r28, r20
     48c:	c0 95       	com	r28
     48e:	c8 23       	and	r28, r24
        eeprom_update_byte((uint8_t*)startAddress+arrayIndex, arrayValue);
     490:	6c 2f       	mov	r22, r28
     492:	c5 01       	movw	r24, r10
     494:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
        return (arrayValue == eeprom_read_byte((uint8_t*)startAddress+arrayIndex));
     498:	c5 01       	movw	r24, r10
     49a:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	8c 17       	cp	r24, r28
     4a2:	71 f1       	breq	.+92     	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	2c c0       	rjmp	.+88     	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>
        break;

        case BYTE_PARAMETER:
        if (newValue == DEFAULT_VALUE)    {
     4a8:	00 38       	cpi	r16, 0x80	; 128
     4aa:	d1 f4       	brne	.+52     	; 0x4e0 <_ZN13Configuration14writeParameterEhhhh+0x156>

            eeprom_update_byte((uint8_t*)startAddress+parameterID, blocks[blockID].defaultValue[sectionID]);
     4ac:	5c 01       	movw	r10, r24
     4ae:	a2 0e       	add	r10, r18
     4b0:	b1 1c       	adc	r11, r1
     4b2:	81 e2       	ldi	r24, 0x21	; 33
     4b4:	8c 9d       	mul	r24, r12
     4b6:	a0 01       	movw	r20, r0
     4b8:	8d 9d       	mul	r24, r13
     4ba:	50 0d       	add	r21, r0
     4bc:	11 24       	eor	r1, r1
     4be:	e4 0e       	add	r14, r20
     4c0:	f5 1e       	adc	r15, r21
     4c2:	ce 0d       	add	r28, r14
     4c4:	df 1d       	adc	r29, r15
     4c6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     4c8:	c5 01       	movw	r24, r10
     4ca:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
            return (blocks[blockID].defaultValue[sectionID] == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     4ce:	cb 8d       	ldd	r28, Y+27	; 0x1b
     4d0:	c5 01       	movw	r24, r10
     4d2:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	c8 17       	cp	r28, r24
     4da:	91 f0       	breq	.+36     	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	10 c0       	rjmp	.+32     	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>

        }   else {

            eeprom_update_byte((uint8_t*)startAddress+parameterID, newValue);
     4e0:	ec 01       	movw	r28, r24
     4e2:	c2 0f       	add	r28, r18
     4e4:	d1 1d       	adc	r29, r1
     4e6:	60 2f       	mov	r22, r16
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
            return (newValue == eeprom_read_byte((uint8_t*)startAddress+parameterID));
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	80 17       	cp	r24, r16
     4f8:	19 f0       	breq	.+6      	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <_ZN13Configuration14writeParameterEhhhh+0x176>

        }
        break;

    }   return 0;
     4fe:	90 e0       	ldi	r25, 0x00	; 0

}
     500:	89 2f       	mov	r24, r25
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	08 95       	ret

00000518 <_ZN13Configuration22createSectionAddressesEv>:

void Configuration::createSectionAddresses()   {
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	00 d0       	rcall	.+0      	; 0x53e <_ZN13Configuration22createSectionAddressesEv+0x26>
     53e:	00 d0       	rcall	.+0      	; 0x540 <_ZN13Configuration22createSectionAddressesEv+0x28>
     540:	00 d0       	rcall	.+0      	; 0x542 <_ZN13Configuration22createSectionAddressesEv+0x2a>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	7c 01       	movw	r14, r24
     548:	4c 01       	movw	r8, r24
     54a:	24 e1       	ldi	r18, 0x14	; 20
     54c:	82 0e       	add	r8, r18
     54e:	91 1c       	adc	r9, r1

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     554:	61 2c       	mov	r6, r1
     556:	51 2c       	mov	r5, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     558:	aa 24       	eor	r10, r10
     55a:	a3 94       	inc	r10
     55c:	71 2c       	mov	r7, r1
     55e:	46 2c       	mov	r4, r6
     560:	35 2c       	mov	r3, r5

        }

        uint8_t lastSection = blocks[i].sections-1;

        switch(blocks[i].subsectionType[lastSection]) {
     562:	0f 2e       	mov	r0, r31
     564:	f1 e2       	ldi	r31, 0x21	; 33
     566:	bf 2e       	mov	r11, r31
     568:	f0 2d       	mov	r31, r0
     56a:	6c 01       	movw	r12, r24
     56c:	c0 c0       	rjmp	.+384    	; 0x6ee <_ZN13Configuration22createSectionAddressesEv+0x1d6>

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     56e:	86 2d       	mov	r24, r6
     570:	95 2d       	mov	r25, r5
     572:	9c 82       	std	Y+4, r9	; 0x04
     574:	8b 82       	std	Y+3, r8	; 0x03
     576:	fe 82       	std	Y+6, r15	; 0x06
     578:	ed 82       	std	Y+5, r14	; 0x05
     57a:	db 01       	movw	r26, r22

            if (!j) {
     57c:	00 97       	sbiw	r24, 0x00	; 0
     57e:	29 f4       	brne	.+10     	; 0x58a <_ZN13Configuration22createSectionAddressesEv+0x72>

                //first section address is always 0
                blocks[i].subsectionAddress[0] = 0;
     580:	14 96       	adiw	r26, 0x04	; 4
     582:	1c 92       	st	X, r1
     584:	1e 92       	st	-X, r1
     586:	13 97       	sbiw	r26, 0x03	; 3
     588:	36 c0       	rjmp	.+108    	; 0x5f6 <_ZN13Configuration22createSectionAddressesEv+0xde>
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04

                }   else {

                switch(blocks[i].subsectionType[j-1])   {
     58e:	f9 01       	movw	r30, r18
     590:	40 81       	ld	r20, Z
     592:	44 23       	and	r20, r20
     594:	11 f1       	breq	.+68     	; 0x5da <_ZN13Configuration22createSectionAddressesEv+0xc2>
     596:	41 30       	cpi	r20, 0x01	; 1
     598:	71 f5       	brne	.+92     	; 0x5f6 <_ZN13Configuration22createSectionAddressesEv+0xde>
     59a:	4d 81       	ldd	r20, Y+5	; 0x05
     59c:	5e 81       	ldd	r21, Y+6	; 0x06
     59e:	b9 01       	movw	r22, r18
     5a0:	65 50       	subi	r22, 0x05	; 5
     5a2:	71 09       	sbc	r23, r1

                    //calculate address of current section by adding number of parameters in last section
                    //and adding last section address

                    case BIT_PARAMETER:
                    blocks[i].subsectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].subsectionAddress[j-1];
     5a4:	fb 01       	movw	r30, r22
     5a6:	60 81       	ld	r22, Z
     5a8:	67 70       	andi	r22, 0x07	; 7
     5aa:	26 2e       	mov	r2, r22
     5ac:	6a 2d       	mov	r22, r10
     5ae:	77 2d       	mov	r23, r7
     5b0:	21 10       	cpse	r2, r1
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <_ZN13Configuration22createSectionAddressesEv+0xa0>
     5b4:	64 2d       	mov	r22, r4
     5b6:	73 2d       	mov	r23, r3
     5b8:	26 50       	subi	r18, 0x06	; 6
     5ba:	31 09       	sbc	r19, r1
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	26 95       	lsr	r18
     5c2:	26 95       	lsr	r18
     5c4:	26 95       	lsr	r18
     5c6:	62 0f       	add	r22, r18
     5c8:	71 1d       	adc	r23, r1
     5ca:	fa 01       	movw	r30, r20
     5cc:	21 81       	ldd	r18, Z+1	; 0x01
     5ce:	32 81       	ldd	r19, Z+2	; 0x02
     5d0:	26 0f       	add	r18, r22
     5d2:	37 1f       	adc	r19, r23
     5d4:	34 83       	std	Z+4, r19	; 0x04
     5d6:	23 83       	std	Z+3, r18	; 0x03
                    break;
     5d8:	0e c0       	rjmp	.+28     	; 0x5f6 <_ZN13Configuration22createSectionAddressesEv+0xde>
     5da:	2b 81       	ldd	r18, Y+3	; 0x03
     5dc:	3c 81       	ldd	r19, Y+4	; 0x04
     5de:	26 50       	subi	r18, 0x06	; 6
     5e0:	31 09       	sbc	r19, r1

                    case BYTE_PARAMETER:
                    blocks[i].subsectionAddress[j] = blocks[i].sectionParameters[j-1] + blocks[i].subsectionAddress[j-1];
     5e2:	f9 01       	movw	r30, r18
     5e4:	40 81       	ld	r20, Z
     5e6:	ed 81       	ldd	r30, Y+5	; 0x05
     5e8:	fe 81       	ldd	r31, Y+6	; 0x06
     5ea:	21 81       	ldd	r18, Z+1	; 0x01
     5ec:	32 81       	ldd	r19, Z+2	; 0x02
     5ee:	24 0f       	add	r18, r20
     5f0:	31 1d       	adc	r19, r1
     5f2:	34 83       	std	Z+4, r19	; 0x04
     5f4:	23 83       	std	Z+3, r18	; 0x03

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	4c 91       	ld	r20, X
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	3c 83       	std	Y+4, r19	; 0x04
     604:	2b 83       	std	Y+3, r18	; 0x03
     606:	ed 81       	ldd	r30, Y+5	; 0x05
     608:	fe 81       	ldd	r31, Y+6	; 0x06
     60a:	32 96       	adiw	r30, 0x02	; 2
     60c:	fe 83       	std	Y+6, r31	; 0x06
     60e:	ed 83       	std	Y+5, r30	; 0x05
     610:	24 2f       	mov	r18, r20
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	0c f4       	brge	.+2      	; 0x61c <_ZN13Configuration22createSectionAddressesEv+0x104>
     61a:	b0 cf       	rjmp	.-160    	; 0x57c <_ZN13Configuration22createSectionAddressesEv+0x64>
     61c:	bd 01       	movw	r22, r26

            }

        }

        uint8_t lastSection = blocks[i].sections-1;
     61e:	41 50       	subi	r20, 0x01	; 1

        switch(blocks[i].subsectionType[lastSection]) {
     620:	84 2f       	mov	r24, r20
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	b0 9e       	mul	r11, r16
     626:	f0 01       	movw	r30, r0
     628:	b1 9e       	mul	r11, r17
     62a:	f0 0d       	add	r31, r0
     62c:	11 24       	eor	r1, r1
     62e:	ec 0d       	add	r30, r12
     630:	fd 1d       	adc	r31, r13
     632:	e8 0f       	add	r30, r24
     634:	f9 1f       	adc	r31, r25
     636:	25 89       	ldd	r18, Z+21	; 0x15
     638:	22 23       	and	r18, r18
     63a:	41 f1       	breq	.+80     	; 0x68c <_ZN13Configuration22createSectionAddressesEv+0x174>
     63c:	21 30       	cpi	r18, 0x01	; 1
     63e:	e9 f5       	brne	.+122    	; 0x6ba <_ZN13Configuration22createSectionAddressesEv+0x1a2>

            case BIT_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+((blocks[i].sectionParameters[lastSection]%8 != 0)+blocks[i].sectionParameters[lastSection]/8);
     640:	b0 9e       	mul	r11, r16
     642:	f0 01       	movw	r30, r0
     644:	b1 9e       	mul	r11, r17
     646:	f0 0d       	add	r31, r0
     648:	11 24       	eor	r1, r1
     64a:	ec 0d       	add	r30, r12
     64c:	fd 1d       	adc	r31, r13
     64e:	e8 0f       	add	r30, r24
     650:	f9 1f       	adc	r31, r25
     652:	47 85       	ldd	r20, Z+15	; 0x0f
     654:	54 2f       	mov	r21, r20
     656:	57 70       	andi	r21, 0x07	; 7
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	11 f4       	brne	.+4      	; 0x660 <_ZN13Configuration22createSectionAddressesEv+0x148>
     65c:	26 2d       	mov	r18, r6
     65e:	35 2d       	mov	r19, r5
     660:	46 95       	lsr	r20
     662:	46 95       	lsr	r20
     664:	46 95       	lsr	r20
     666:	24 0f       	add	r18, r20
     668:	31 1d       	adc	r19, r1
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	b0 9e       	mul	r11, r16
     670:	a0 01       	movw	r20, r0
     672:	b1 9e       	mul	r11, r17
     674:	50 0d       	add	r21, r0
     676:	11 24       	eor	r1, r1
     678:	84 0f       	add	r24, r20
     67a:	95 1f       	adc	r25, r21
     67c:	f6 01       	movw	r30, r12
     67e:	e8 0f       	add	r30, r24
     680:	f9 1f       	adc	r31, r25
     682:	83 81       	ldd	r24, Z+3	; 0x03
     684:	94 81       	ldd	r25, Z+4	; 0x04
     686:	28 0f       	add	r18, r24
     688:	39 1f       	adc	r19, r25
            break;
     68a:	19 c0       	rjmp	.+50     	; 0x6be <_ZN13Configuration22createSectionAddressesEv+0x1a6>

            case BYTE_PARAMETER:
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
     68c:	b0 9e       	mul	r11, r16
     68e:	90 01       	movw	r18, r0
     690:	b1 9e       	mul	r11, r17
     692:	30 0d       	add	r19, r0
     694:	11 24       	eor	r1, r1
     696:	f6 01       	movw	r30, r12
     698:	e2 0f       	add	r30, r18
     69a:	f3 1f       	adc	r31, r19
     69c:	e8 0f       	add	r30, r24
     69e:	f9 1f       	adc	r31, r25
     6a0:	47 85       	ldd	r20, Z+15	; 0x0f
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	f6 01       	movw	r30, r12
     6ac:	e8 0f       	add	r30, r24
     6ae:	f9 1f       	adc	r31, r25
     6b0:	23 81       	ldd	r18, Z+3	; 0x03
     6b2:	34 81       	ldd	r19, Z+4	; 0x04
     6b4:	24 0f       	add	r18, r20
     6b6:	31 1d       	adc	r19, r1
            break;
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_ZN13Configuration22createSectionAddressesEv+0x1a6>

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;
     6ba:	26 2d       	mov	r18, r6
     6bc:	35 2d       	mov	r19, r5
            memory_usage = blocks[i].subsectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
            break;

        }

        if (i < NUMBER_OF_BLOCKS-1) {
     6be:	04 30       	cpi	r16, 0x04	; 4
     6c0:	11 05       	cpc	r17, r1
     6c2:	54 f4       	brge	.+20     	; 0x6d8 <_ZN13Configuration22createSectionAddressesEv+0x1c0>

            blocks[i+1].blockStartAddress = blocks[i].blockStartAddress + memory_usage;
     6c4:	db 01       	movw	r26, r22
     6c6:	11 96       	adiw	r26, 0x01	; 1
     6c8:	8d 91       	ld	r24, X+
     6ca:	9c 91       	ld	r25, X
     6cc:	12 97       	sbiw	r26, 0x02	; 2
     6ce:	28 0f       	add	r18, r24
     6d0:	39 1f       	adc	r19, r25
     6d2:	f4 01       	movw	r30, r8
     6d4:	37 87       	std	Z+15, r19	; 0x0f
     6d6:	26 87       	std	Z+14, r18	; 0x0e

}

void Configuration::createSectionAddresses()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     6d8:	0f 5f       	subi	r16, 0xFF	; 255
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	f1 e2       	ldi	r31, 0x21	; 33
     6de:	ef 0e       	add	r14, r31
     6e0:	f1 1c       	adc	r15, r1
     6e2:	21 e2       	ldi	r18, 0x21	; 33
     6e4:	82 0e       	add	r8, r18
     6e6:	91 1c       	adc	r9, r1
     6e8:	05 30       	cpi	r16, 0x05	; 5
     6ea:	11 05       	cpc	r17, r1
     6ec:	31 f0       	breq	.+12     	; 0x6fa <_ZN13Configuration22createSectionAddressesEv+0x1e2>
     6ee:	b7 01       	movw	r22, r14

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     6f0:	d7 01       	movw	r26, r14
     6f2:	4c 91       	ld	r20, X
     6f4:	41 11       	cpse	r20, r1
     6f6:	3b cf       	rjmp	.-394    	; 0x56e <_ZN13Configuration22createSectionAddressesEv+0x56>
     6f8:	92 cf       	rjmp	.-220    	; 0x61e <_ZN13Configuration22createSectionAddressesEv+0x106>

        }

    }

}
     6fa:	26 96       	adiw	r28, 0x06	; 6
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <_ZN13Configuration18writeConfigurationEv>:

void Configuration::writeConfiguration()   {
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	2c 97       	sbiw	r28, 0x0c	; 12
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	1c 01       	movw	r2, r24
     762:	98 87       	std	Y+8, r25	; 0x08
     764:	8f 83       	std	Y+7, r24	; 0x07

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     766:	1a 86       	std	Y+10, r1	; 0x0a
     768:	19 86       	std	Y+9, r1	; 0x09

        for (int j=0; j<blocks[i].sections; j++) {
     76a:	71 2c       	mov	r7, r1
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     76c:	0f 2e       	mov	r0, r31
     76e:	f1 e2       	ldi	r31, 0x21	; 33
     770:	6f 2e       	mov	r6, r31
     772:	f0 2d       	mov	r31, r0
     774:	73 c0       	rjmp	.+230    	; 0x85c <_ZN13Configuration18writeConfigurationEv+0x130>
     776:	c8 01       	movw	r24, r16
     778:	99 27       	eor	r25, r25
     77a:	fc 01       	movw	r30, r24
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	e2 0f       	add	r30, r18
     786:	f3 1f       	adc	r31, r19
     788:	e2 0d       	add	r30, r2
     78a:	f3 1d       	adc	r31, r3
     78c:	43 81       	ldd	r20, Z+3	; 0x03
     78e:	54 81       	ldd	r21, Z+4	; 0x04
     790:	ab 81       	ldd	r26, Y+3	; 0x03
     792:	bc 81       	ldd	r27, Y+4	; 0x04
     794:	2d 91       	ld	r18, X+
     796:	3c 91       	ld	r19, X
     798:	fa 01       	movw	r30, r20
     79a:	e2 0f       	add	r30, r18
     79c:	f3 1f       	adc	r31, r19
     79e:	fc 87       	std	Y+12, r31	; 0x0c
     7a0:	eb 87       	std	Y+11, r30	; 0x0b

            uint16_t startAddress = getSectionAddress(i, j);
            uint8_t parameterType = getParameterType(i, j);
            uint8_t defaultValue = blocks[i].defaultValue[j];
     7a2:	d6 01       	movw	r26, r12
     7a4:	9d 90       	ld	r9, X+
     7a6:	6d 01       	movw	r12, r26
     7a8:	fd 01       	movw	r30, r26
     7aa:	3d 97       	sbiw	r30, 0x0d	; 13
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];
     7ac:	20 81       	ld	r18, Z

    };

    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].subsectionType[sectionID];
     7ae:	f2 01       	movw	r30, r4
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25

            switch(parameterType)   {
     7b4:	85 89       	ldd	r24, Z+21	; 0x15
     7b6:	88 23       	and	r24, r24
     7b8:	79 f0       	breq	.+30     	; 0x7d8 <_ZN13Configuration18writeConfigurationEv+0xac>
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	c1 f5       	brne	.+112    	; 0x82e <_ZN13Configuration18writeConfigurationEv+0x102>

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     7be:	26 95       	lsr	r18
     7c0:	26 95       	lsr	r18
     7c2:	26 95       	lsr	r18
     7c4:	eb 84       	ldd	r14, Y+11	; 0x0b
     7c6:	fc 84       	ldd	r15, Y+12	; 0x0c
     7c8:	bf ef       	ldi	r27, 0xFF	; 255
     7ca:	eb 1a       	sub	r14, r27
     7cc:	fb 0a       	sbc	r15, r27
     7ce:	e2 0e       	add	r14, r18
     7d0:	f1 1c       	adc	r15, r1
     7d2:	ab 84       	ldd	r10, Y+11	; 0x0b
     7d4:	bc 84       	ldd	r11, Y+12	; 0x0c
     7d6:	03 c0       	rjmp	.+6      	; 0x7de <_ZN13Configuration18writeConfigurationEv+0xb2>
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7d8:	21 11       	cpse	r18, r1
     7da:	0c c0       	rjmp	.+24     	; 0x7f4 <_ZN13Configuration18writeConfigurationEv+0xc8>
     7dc:	28 c0       	rjmp	.+80     	; 0x82e <_ZN13Configuration18writeConfigurationEv+0x102>

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     7de:	69 2d       	mov	r22, r9
     7e0:	c5 01       	movw	r24, r10
     7e2:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
     7e6:	ef ef       	ldi	r30, 0xFF	; 255
     7e8:	ae 1a       	sub	r10, r30
     7ea:	be 0a       	sbc	r11, r30
            uint8_t numberOfParameters = blocks[i].sectionParameters[j];

            switch(parameterType)   {

                case BIT_PARAMETER:
                for (int i=0; i<numberOfParameters/8+1; i++)
     7ec:	ae 14       	cp	r10, r14
     7ee:	bf 04       	cpc	r11, r15
     7f0:	b1 f7       	brne	.-20     	; 0x7de <_ZN13Configuration18writeConfigurationEv+0xb2>
     7f2:	1d c0       	rjmp	.+58     	; 0x82e <_ZN13Configuration18writeConfigurationEv+0x102>
     7f4:	eb 84       	ldd	r14, Y+11	; 0x0b
     7f6:	fc 84       	ldd	r15, Y+12	; 0x0c
     7f8:	e2 0e       	add	r14, r18
     7fa:	f1 1c       	adc	r15, r1
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     7fc:	ab 84       	ldd	r10, Y+11	; 0x0b
     7fe:	bc 84       	ldd	r11, Y+12	; 0x0c
     800:	c8 01       	movw	r24, r16
     802:	19 2d       	mov	r17, r9
     804:	4c 01       	movw	r8, r24

                    if (defaultValue == AUTO_INCREMENT)
     806:	1f 3f       	cpi	r17, 0xFF	; 255
     808:	39 f4       	brne	.+14     	; 0x818 <_ZN13Configuration18writeConfigurationEv+0xec>
     80a:	6a 2d       	mov	r22, r10
     80c:	3b 85       	ldd	r19, Y+11	; 0x0b
     80e:	63 1b       	sub	r22, r19
                        eeprom_update_byte((uint8_t*)startAddress+i, i);
     810:	c5 01       	movw	r24, r10
     812:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
     816:	04 c0       	rjmp	.+8      	; 0x820 <_ZN13Configuration18writeConfigurationEv+0xf4>
                    else eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
     818:	61 2f       	mov	r22, r17
     81a:	c5 01       	movw	r24, r10
     81c:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
     820:	6f ef       	ldi	r22, 0xFF	; 255
     822:	a6 1a       	sub	r10, r22
     824:	b6 0a       	sbc	r11, r22
                for (int i=0; i<numberOfParameters/8+1; i++)
                eeprom_update_byte((uint8_t*)startAddress+i, defaultValue);
                break;

                case BYTE_PARAMETER:
                for (int i=0; i<numberOfParameters; i++)    {
     826:	ae 14       	cp	r10, r14
     828:	bf 04       	cpc	r11, r15
     82a:	69 f7       	brne	.-38     	; 0x806 <_ZN13Configuration18writeConfigurationEv+0xda>
     82c:	84 01       	movw	r16, r8

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {

        for (int j=0; j<blocks[i].sections; j++) {
     82e:	0f 5f       	subi	r16, 0xFF	; 255
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	a9 81       	ldd	r26, Y+1	; 0x01
     834:	ba 81       	ldd	r27, Y+2	; 0x02
     836:	8c 91       	ld	r24, X
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	08 17       	cp	r16, r24
     83c:	19 07       	cpc	r17, r25
     83e:	0c f4       	brge	.+2      	; 0x842 <_ZN13Configuration18writeConfigurationEv+0x116>
     840:	9a cf       	rjmp	.-204    	; 0x776 <_ZN13Configuration18writeConfigurationEv+0x4a>

}

void Configuration::writeConfiguration()   {

    for (int i=0; i<NUMBER_OF_BLOCKS; i++)  {
     842:	e9 85       	ldd	r30, Y+9	; 0x09
     844:	fa 85       	ldd	r31, Y+10	; 0x0a
     846:	31 96       	adiw	r30, 0x01	; 1
     848:	fa 87       	std	Y+10, r31	; 0x0a
     84a:	e9 87       	std	Y+9, r30	; 0x09
     84c:	2f 81       	ldd	r18, Y+7	; 0x07
     84e:	38 85       	ldd	r19, Y+8	; 0x08
     850:	2f 5d       	subi	r18, 0xDF	; 223
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	38 87       	std	Y+8, r19	; 0x08
     856:	2f 83       	std	Y+7, r18	; 0x07
     858:	35 97       	sbiw	r30, 0x05	; 5
     85a:	e9 f0       	breq	.+58     	; 0x896 <_ZN13Configuration18writeConfigurationEv+0x16a>
     85c:	6f 81       	ldd	r22, Y+7	; 0x07
     85e:	78 85       	ldd	r23, Y+8	; 0x08
     860:	7a 83       	std	Y+2, r23	; 0x02
     862:	69 83       	std	Y+1, r22	; 0x01

        for (int j=0; j<blocks[i].sections; j++) {
     864:	db 01       	movw	r26, r22
     866:	8c 91       	ld	r24, X
     868:	88 23       	and	r24, r24
     86a:	59 f3       	breq	.-42     	; 0x842 <_ZN13Configuration18writeConfigurationEv+0x116>
     86c:	6b 01       	movw	r12, r22
     86e:	bb e1       	ldi	r27, 0x1B	; 27
     870:	cb 0e       	add	r12, r27
     872:	d1 1c       	adc	r13, r1
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	17 2d       	mov	r17, r7
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
     878:	e9 85       	ldd	r30, Y+9	; 0x09
     87a:	e6 9d       	mul	r30, r6
     87c:	50 01       	movw	r10, r0
     87e:	11 24       	eor	r1, r1
     880:	21 01       	movw	r4, r2
     882:	4a 0c       	add	r4, r10
     884:	5b 1c       	adc	r5, r11
     886:	92 01       	movw	r18, r4
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	3c 83       	std	Y+4, r19	; 0x04
     88e:	2b 83       	std	Y+3, r18	; 0x03
     890:	be 82       	std	Y+6, r11	; 0x06
     892:	ad 82       	std	Y+5, r10	; 0x05
     894:	70 cf       	rjmp	.-288    	; 0x776 <_ZN13Configuration18writeConfigurationEv+0x4a>

        }

    }

    eeprom_update_byte((uint8_t*)ID_LOCATION_0, UNIQUE_ID);
     896:	6f e2       	ldi	r22, 0x2F	; 47
     898:	8d ef       	ldi	r24, 0xFD	; 253
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_1, UNIQUE_ID);
     8a0:	6f e2       	ldi	r22, 0x2F	; 47
     8a2:	8e ef       	ldi	r24, 0xFE	; 254
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>
    eeprom_update_byte((uint8_t*)ID_LOCATION_2, UNIQUE_ID);
     8aa:	6f e2       	ldi	r22, 0x2F	; 47
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	0e 94 91 2b 	call	0x5722	; 0x5722 <eeprom_update_byte>

}
     8b4:	2c 96       	adiw	r28, 0x0c	; 12
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	4f 90       	pop	r4
     8e0:	3f 90       	pop	r3
     8e2:	2f 90       	pop	r2
     8e4:	08 95       	ret

000008e6 <_ZN13Configuration12factoryResetEv>:

    ))  factoryReset();

}

void Configuration::factoryReset()  {
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24

    clearEEPROM();
     8ec:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN13Configuration11clearEEPROMEv>
    writeConfiguration();
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN13Configuration18writeConfigurationEv>

}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <_ZN13Configuration4initEv>:

    //def const

}

void Configuration::init() {
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24

    createMemoryLayout();
     902:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN13Configuration18createMemoryLayoutEv>
    createSectionAddresses();
     906:	ce 01       	movw	r24, r28
     908:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN13Configuration22createSectionAddressesEv>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     90c:	8d ef       	ldi	r24, 0xFD	; 253
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    createMemoryLayout();
    createSectionAddresses();

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(
     914:	8f 32       	cpi	r24, 0x2F	; 47
     916:	61 f4       	brne	.+24     	; 0x930 <_ZN13Configuration4initEv+0x34>

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
     918:	8e ef       	ldi	r24, 0xFE	; 254
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>

    //if ID bytes haven't been written to EEPROM on specified address,
    //write default configuration to EEPROM
    if  (!(

    (eeprom_read_byte((uint8_t*)ID_LOCATION_0) == UNIQUE_ID) &&
     920:	8f 32       	cpi	r24, 0x2F	; 47
     922:	31 f4       	brne	.+12     	; 0x930 <_ZN13Configuration4initEv+0x34>
    (eeprom_read_byte((uint8_t*)ID_LOCATION_1) == UNIQUE_ID) &&
    (eeprom_read_byte((uint8_t*)ID_LOCATION_2) == UNIQUE_ID)
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>

    ))  factoryReset();
     92c:	8f 32       	cpi	r24, 0x2F	; 47
     92e:	19 f0       	breq	.+6      	; 0x936 <_ZN13Configuration4initEv+0x3a>
     930:	ce 01       	movw	r24, r28
     932:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN13Configuration12factoryResetEv>

}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <_ZN13Configuration18createMemoryLayoutEv>:
#include "Configuration.h"
#include "../hardware/board/Board.h"
#include "../interface/settings/MIDIsettings.h"
#include "../interface/settings/LEDsettings.h"

void Configuration::createMemoryLayout()   {
     93c:	fc 01       	movw	r30, r24
        defaultValue        any value 0-127 or AUTO_INCREMENT (next value gets increased by 1)
        sectionParameters   number of parameters in section
    */

    {
        blocks[CONF_MIDI_BLOCK].sections = MIDI_SECTIONS;
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	80 83       	st	Z, r24

        blocks[CONF_MIDI_BLOCK].subsectionType[midiFeatureSection] = BIT_PARAMETER;
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	95 8b       	std	Z+21, r25	; 0x15
        blocks[CONF_MIDI_BLOCK].defaultValue[midiFeatureSection] = 0;
     946:	13 8e       	std	Z+27, r1	; 0x1b
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiFeatureSection] = MIDI_FEATURES;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	87 87       	std	Z+15, r24	; 0x0f

        blocks[CONF_MIDI_BLOCK].subsectionType[midiChannelSection] = BYTE_PARAMETER;
     94c:	16 8a       	std	Z+22, r1	; 0x16
        blocks[CONF_MIDI_BLOCK].defaultValue[midiChannelSection] = 0x01;
     94e:	94 8f       	std	Z+28, r25	; 0x1c
        blocks[CONF_MIDI_BLOCK].sectionParameters[midiChannelSection] = MIDI_CHANNELS;
     950:	34 e0       	ldi	r19, 0x04	; 4
     952:	30 8b       	std	Z+16, r19	; 0x10
    }

    {
        blocks[CONF_BUTTON_BLOCK].sections = BUTTON_SECTIONS;
     954:	81 a3       	std	Z+33, r24	; 0x21

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonTypeSection] = BIT_PARAMETER;
     956:	96 ab       	std	Z+54, r25	; 0x36
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonTypeSection] = 0;
     958:	14 ae       	std	Z+60, r1	; 0x3c
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonTypeSection] = MAX_NUMBER_OF_BUTTONS;
     95a:	80 e4       	ldi	r24, 0x40	; 64
     95c:	80 ab       	std	Z+48, r24	; 0x30

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonProgramChangeEnabledSection] = BIT_PARAMETER;
     95e:	97 ab       	std	Z+55, r25	; 0x37
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonProgramChangeEnabledSection] = 0;
     960:	15 ae       	std	Z+61, r1	; 0x3d
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonProgramChangeEnabledSection] = MAX_NUMBER_OF_BUTTONS;
     962:	81 ab       	std	Z+49, r24	; 0x31

        blocks[CONF_BUTTON_BLOCK].subsectionType[buttonMIDIidSection] = BYTE_PARAMETER;
     964:	10 ae       	std	Z+56, r1	; 0x38
        blocks[CONF_BUTTON_BLOCK].defaultValue[buttonMIDIidSection] = AUTO_INCREMENT;
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	26 af       	std	Z+62, r18	; 0x3e
        blocks[CONF_BUTTON_BLOCK].sectionParameters[buttonMIDIidSection] = MAX_NUMBER_OF_BUTTONS;
     96a:	82 ab       	std	Z+50, r24	; 0x32
    }

    {
        blocks[CONF_ENCODER_BLOCK].sections = ENCODER_SECTIONS;
     96c:	df 01       	movw	r26, r30
     96e:	ae 5b       	subi	r26, 0xBE	; 190
     970:	bf 4f       	sbci	r27, 0xFF	; 255
     972:	3c 93       	st	X, r19

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEnabledSection] = BIT_PARAMETER;
     974:	55 96       	adiw	r26, 0x15	; 21
     976:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEnabledSection] = 0;
     978:	16 96       	adiw	r26, 0x06	; 6
     97a:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEnabledSection] = MAX_NUMBER_OF_ENCODERS;
     97c:	1c 97       	sbiw	r26, 0x0c	; 12
     97e:	80 e2       	ldi	r24, 0x20	; 32
     980:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderInvertedSection] = BIT_PARAMETER;
     982:	17 96       	adiw	r26, 0x07	; 7
     984:	9c 93       	st	X, r25
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderInvertedSection] = 0;
     986:	16 96       	adiw	r26, 0x06	; 6
     988:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderInvertedSection] = MAX_NUMBER_OF_ENCODERS;
     98a:	1c 97       	sbiw	r26, 0x0c	; 12
     98c:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderEncodingModeSection] = BYTE_PARAMETER;
     98e:	17 96       	adiw	r26, 0x07	; 7
     990:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderEncodingModeSection] = enc7Fh01h;
     992:	16 96       	adiw	r26, 0x06	; 6
     994:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderEncodingModeSection] = MAX_NUMBER_OF_ENCODERS;
     996:	1c 97       	sbiw	r26, 0x0c	; 12
     998:	8c 93       	st	X, r24

        blocks[CONF_ENCODER_BLOCK].subsectionType[encoderMIDIidSection] = BYTE_PARAMETER;
     99a:	17 96       	adiw	r26, 0x07	; 7
     99c:	1c 92       	st	X, r1
        blocks[CONF_ENCODER_BLOCK].defaultValue[encoderMIDIidSection] = AUTO_INCREMENT;
     99e:	16 96       	adiw	r26, 0x06	; 6
     9a0:	2c 93       	st	X, r18
        blocks[CONF_ENCODER_BLOCK].sectionParameters[encoderMIDIidSection] = MAX_NUMBER_OF_ENCODERS;
     9a2:	1c 97       	sbiw	r26, 0x0c	; 12
     9a4:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_ANALOG_BLOCK].sections = ANALOG_SECTIONS;
     9a6:	1f 96       	adiw	r26, 0x0f	; 15
     9a8:	46 e0       	ldi	r20, 0x06	; 6
     9aa:	4c 93       	st	X, r20

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogEnabledSection] = BIT_PARAMETER;
     9ac:	55 96       	adiw	r26, 0x15	; 21
     9ae:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogEnabledSection] = 0;
     9b0:	16 96       	adiw	r26, 0x06	; 6
     9b2:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogEnabledSection] = MAX_NUMBER_OF_ANALOG;
     9b4:	1c 97       	sbiw	r26, 0x0c	; 12
     9b6:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogInvertedSection] = BIT_PARAMETER;
     9b8:	18 96       	adiw	r26, 0x08	; 8
     9ba:	9c 93       	st	X, r25
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogInvertedSection] = 0;
     9bc:	16 96       	adiw	r26, 0x06	; 6
     9be:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogInvertedSection] = MAX_NUMBER_OF_ANALOG;
     9c0:	1c 97       	sbiw	r26, 0x0c	; 12
     9c2:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogTypeSection] = BYTE_PARAMETER;
     9c4:	15 96       	adiw	r26, 0x05	; 5
     9c6:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogTypeSection] = 0;
     9c8:	16 96       	adiw	r26, 0x06	; 6
     9ca:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogTypeSection] = MAX_NUMBER_OF_ANALOG;
     9cc:	1c 97       	sbiw	r26, 0x0c	; 12
     9ce:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogMIDIidSection] = BYTE_PARAMETER;
     9d0:	18 96       	adiw	r26, 0x08	; 8
     9d2:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogMIDIidSection] = AUTO_INCREMENT;
     9d4:	16 96       	adiw	r26, 0x06	; 6
     9d6:	2c 93       	st	X, r18
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogMIDIidSection] = MAX_NUMBER_OF_ANALOG;
     9d8:	1c 97       	sbiw	r26, 0x0c	; 12
     9da:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCClowerLimitSection] = BYTE_PARAMETER;
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCClowerLimitSection] = 0;
     9e0:	16 96       	adiw	r26, 0x06	; 6
     9e2:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCClowerLimitSection] = MAX_NUMBER_OF_ANALOG;
     9e4:	1c 97       	sbiw	r26, 0x0c	; 12
     9e6:	8c 93       	st	X, r24

        blocks[CONF_ANALOG_BLOCK].subsectionType[analogCCupperLimitSection] = BYTE_PARAMETER;
     9e8:	17 96       	adiw	r26, 0x07	; 7
     9ea:	1c 92       	st	X, r1
        blocks[CONF_ANALOG_BLOCK].defaultValue[analogCCupperLimitSection] = 127;
     9ec:	16 96       	adiw	r26, 0x06	; 6
     9ee:	4f e7       	ldi	r20, 0x7F	; 127
     9f0:	4c 93       	st	X, r20
        blocks[CONF_ANALOG_BLOCK].sectionParameters[analogCCupperLimitSection] = MAX_NUMBER_OF_ANALOG;
     9f2:	1c 97       	sbiw	r26, 0x0c	; 12
     9f4:	8c 93       	st	X, r24
    }

    {
        blocks[CONF_LED_BLOCK].sections = LED_SECTIONS;
     9f6:	1d 96       	adiw	r26, 0x0d	; 13
     9f8:	3c 93       	st	X, r19

        blocks[CONF_LED_BLOCK].subsectionType[ledHardwareParameterSection] = BYTE_PARAMETER;
     9fa:	55 96       	adiw	r26, 0x15	; 21
     9fc:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledHardwareParameterSection] = 0;
     9fe:	16 96       	adiw	r26, 0x06	; 6
     a00:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledHardwareParameterSection] = LED_HARDWARE_PARAMETERS;
     a02:	1c 97       	sbiw	r26, 0x0c	; 12
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledActivationNoteSection] = BYTE_PARAMETER;
     a08:	17 96       	adiw	r26, 0x07	; 7
     a0a:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledActivationNoteSection] = AUTO_INCREMENT;
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledActivationNoteSection] = MAX_NUMBER_OF_LEDS;
     a10:	1c 97       	sbiw	r26, 0x0c	; 12
     a12:	80 e3       	ldi	r24, 0x30	; 48
     a14:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledStartUpNumberSection] = BYTE_PARAMETER;
     a16:	17 96       	adiw	r26, 0x07	; 7
     a18:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].defaultValue[ledStartUpNumberSection] = AUTO_INCREMENT;
     a1a:	16 96       	adiw	r26, 0x06	; 6
     a1c:	2c 93       	st	X, r18
        blocks[CONF_LED_BLOCK].sectionParameters[ledStartUpNumberSection] = MAX_NUMBER_OF_LEDS;
     a1e:	1c 97       	sbiw	r26, 0x0c	; 12
     a20:	8c 93       	st	X, r24

        blocks[CONF_LED_BLOCK].subsectionType[ledRGBenabledSection] = BIT_PARAMETER;
     a22:	17 96       	adiw	r26, 0x07	; 7
     a24:	9c 93       	st	X, r25
        blocks[CONF_LED_BLOCK].defaultValue[ledRGBenabledSection] = 0;
     a26:	16 96       	adiw	r26, 0x06	; 6
     a28:	1c 92       	st	X, r1
        blocks[CONF_LED_BLOCK].sectionParameters[ledRGBenabledSection] = MAX_NUMBER_OF_LEDS;
     a2a:	ea 56       	subi	r30, 0x6A	; 106
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	80 83       	st	Z, r24
     a30:	08 95       	ret

00000a32 <_Z8setUpADCv>:
#include "ADC.h"
#include <avr/cpufunc.h>

void setUpADC() {

    ADMUX = 0x00;
     a32:	10 92 7c 00 	sts	0x007C, r1
    ADCSRA = 0x0;
     a36:	ea e7       	ldi	r30, 0x7A	; 122
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	10 82       	st	Z, r1

    //default ADC voltage is set to AREF

    //set prescaler to 128 and enable ADC
    ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
     a3c:	80 81       	ld	r24, Z
     a3e:	87 68       	ori	r24, 0x87	; 135
     a40:	80 83       	st	Z, r24

    //enable high-speed mode if available
    #ifdef ADHSM
        ADCSRB |= (1<<ADHSM);
     a42:	eb e7       	ldi	r30, 0x7B	; 123
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	80 83       	st	Z, r24
     a4c:	08 95       	ret

00000a4e <_Z15setADCprescalerh>:
}

void setADCprescaler(uint8_t prescaler) {

    //disable ADC before setting new prescaler
    ADCSRA &= ~(1<<ADEN);
     a4e:	ea e7       	ldi	r30, 0x7A	; 122
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	90 81       	ld	r25, Z
     a54:	9f 77       	andi	r25, 0x7F	; 127
     a56:	90 83       	st	Z, r25

    switch(prescaler)   {
     a58:	80 32       	cpi	r24, 0x20	; 32
     a5a:	79 f0       	breq	.+30     	; 0xa7a <_Z15setADCprescalerh+0x2c>
     a5c:	18 f4       	brcc	.+6      	; 0xa64 <_Z15setADCprescalerh+0x16>
     a5e:	80 31       	cpi	r24, 0x10	; 16
     a60:	31 f0       	breq	.+12     	; 0xa6e <_Z15setADCprescalerh+0x20>
     a62:	08 95       	ret
     a64:	80 34       	cpi	r24, 0x40	; 64
     a66:	79 f0       	breq	.+30     	; 0xa86 <_Z15setADCprescalerh+0x38>
     a68:	80 38       	cpi	r24, 0x80	; 128
     a6a:	99 f0       	breq	.+38     	; 0xa92 <_Z15setADCprescalerh+0x44>
     a6c:	08 95       	ret

        case 16:
        ADCSRA |= (1<<ADPS2);
     a6e:	ea e7       	ldi	r30, 0x7A	; 122
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	84 60       	ori	r24, 0x04	; 4
     a76:	80 83       	st	Z, r24
        break;
     a78:	11 c0       	rjmp	.+34     	; 0xa9c <_Z15setADCprescalerh+0x4e>

        case 32:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS0);
     a7a:	ea e7       	ldi	r30, 0x7A	; 122
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	85 60       	ori	r24, 0x05	; 5
     a82:	80 83       	st	Z, r24
        break;
     a84:	0b c0       	rjmp	.+22     	; 0xa9c <_Z15setADCprescalerh+0x4e>

        case 64:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1);
     a86:	ea e7       	ldi	r30, 0x7A	; 122
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	86 60       	ori	r24, 0x06	; 6
     a8e:	80 83       	st	Z, r24
        break;
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <_Z15setADCprescalerh+0x4e>

        case 128:
        ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     a92:	ea e7       	ldi	r30, 0x7A	; 122
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	87 60       	ori	r24, 0x07	; 7
     a9a:	80 83       	st	Z, r24

        default:
        return;
        break;

    }   ADCSRA |= (1<<ADEN);
     a9c:	ea e7       	ldi	r30, 0x7A	; 122
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret

00000aa8 <_Z13setADCchannelh>:
}

void setADCchannel(uint8_t adcChannel)  {

    //check for valid channel
    if ((adcChannel < 0) || (adcChannel > 7))   return;
     aa8:	88 30       	cpi	r24, 0x08	; 8
     aaa:	40 f4       	brcc	.+16     	; 0xabc <_Z13setADCchannelh+0x14>

    //select ADC channel with safety mask
    ADMUX = (ADMUX & 0xF0) | (adcChannel & 0x0F);
     aac:	ec e7       	ldi	r30, 0x7C	; 124
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	90 81       	ld	r25, Z
     ab2:	8f 70       	andi	r24, 0x0F	; 15
     ab4:	90 7f       	andi	r25, 0xF0	; 240
     ab6:	89 2b       	or	r24, r25
     ab8:	80 83       	st	Z, r24

    _NOP();
     aba:	00 00       	nop
     abc:	08 95       	ret

00000abe <_Z11getADCvaluev>:
}

int16_t getADCvalue()   {

    //single conversion mode
    ADCSRA |= (1<<ADSC);
     abe:	ea e7       	ldi	r30, 0x7A	; 122
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	80 83       	st	Z, r24

    //wait until ADC conversion is complete
    while (ADCSRA & (1<<ADSC));
     ac8:	80 81       	ld	r24, Z
     aca:	86 fd       	sbrc	r24, 6
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <_Z11getADCvaluev+0xa>

    return ADC;
     ace:	80 91 78 00 	lds	r24, 0x0078
     ad2:	90 91 79 00 	lds	r25, 0x0079

}
     ad6:	08 95       	ret

00000ad8 <_Z22disconnectDigitalInADCh>:

void disconnectDigitalInADC(uint8_t adcChannel) {

    if (adcChannel < 6)
     ad8:	86 30       	cpi	r24, 0x06	; 6
     ada:	70 f4       	brcc	.+28     	; 0xaf8 <_Z22disconnectDigitalInADCh+0x20>
        DIDR0 |= (1<<adcChannel);
     adc:	ee e7       	ldi	r30, 0x7E	; 126
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	40 81       	ld	r20, Z
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	b9 01       	movw	r22, r18
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <_Z22disconnectDigitalInADCh+0x16>
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	8a 95       	dec	r24
     af0:	e2 f7       	brpl	.-8      	; 0xaea <_Z22disconnectDigitalInADCh+0x12>
     af2:	cb 01       	movw	r24, r22
     af4:	84 2b       	or	r24, r20
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <_Z15disableWatchDogv>:
//run time in milliseconds
volatile uint32_t           rTime_ms = 0;

void disableWatchDog()  {

    MCUSR &= ~(1 << WDRF);
     afa:	84 b7       	in	r24, 0x34	; 52
     afc:	87 7f       	andi	r24, 0xF7	; 247
     afe:	84 bf       	out	0x34, r24	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	a8 95       	wdr
     b06:	80 91 60 00 	lds	r24, 0x0060
     b0a:	88 61       	ori	r24, 0x18	; 24
     b0c:	80 93 60 00 	sts	0x0060, r24
     b10:	10 92 60 00 	sts	0x0060, r1
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	08 95       	ret

00000b18 <_Z11rTimeMillisv>:
//timer-based functions

uint32_t rTimeMillis()    {

    uint32_t _rTime_mS;
    uint8_t interruptFlag = SREG;
     b18:	2f b7       	in	r18, 0x3f	; 63

    cli();
     b1a:	f8 94       	cli
    _rTime_mS = rTime_ms;
     b1c:	60 91 42 02 	lds	r22, 0x0242
     b20:	70 91 43 02 	lds	r23, 0x0243
     b24:	80 91 44 02 	lds	r24, 0x0244
     b28:	90 91 45 02 	lds	r25, 0x0245
    SREG = interruptFlag;
     b2c:	2f bf       	out	0x3f, r18	; 63

    return _rTime_mS;

}
     b2e:	08 95       	ret

00000b30 <_Z4waitm>:

void wait(uint32_t time)    {
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	6b 01       	movw	r12, r22
     b3a:	7c 01       	movw	r14, r24

    uint32_t _delayTime = rTimeMillis() + time;
     b3c:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z11rTimeMillisv>
     b40:	c6 0e       	add	r12, r22
     b42:	d7 1e       	adc	r13, r23
     b44:	e8 1e       	adc	r14, r24
     b46:	f9 1e       	adc	r15, r25
    while (_delayTime > rTimeMillis()) {}
     b48:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z11rTimeMillisv>
     b4c:	6c 15       	cp	r22, r12
     b4e:	7d 05       	cpc	r23, r13
     b50:	8e 05       	cpc	r24, r14
     b52:	9f 05       	cpc	r25, r15
     b54:	c8 f3       	brcs	.-14     	; 0xb48 <_Z4waitm+0x18>

}
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	08 95       	ret

00000b60 <_Z24getInputMatrixBufferSizev>:

int8_t getInputMatrixBufferSize() {

    uint8_t head, tail;

    head = digital_buffer_head;
     b60:	80 91 77 03 	lds	r24, 0x0377
    tail = digital_buffer_tail;
     b64:	90 91 76 03 	lds	r25, 0x0376
    if (head >= tail) return head - tail;
     b68:	89 17       	cp	r24, r25
     b6a:	10 f0       	brcs	.+4      	; 0xb70 <_Z24getInputMatrixBufferSizev+0x10>
     b6c:	89 1b       	sub	r24, r25
     b6e:	08 95       	ret
     b70:	8c 5f       	subi	r24, 0xFC	; 252
    return DIGITAL_BUFFER_SIZE + head - tail;
     b72:	89 1b       	sub	r24, r25

}
     b74:	08 95       	ret

00000b76 <_Z21copyInputMatrixBufferv>:

bool copyInputMatrixBuffer()    {

    int8_t bufferSize = getInputMatrixBufferSize();
     b76:	0e 94 b0 05 	call	0xb60	; 0xb60 <_Z24getInputMatrixBufferSizev>

    if (bufferSize <= 0) return false;
     b7a:	18 16       	cp	r1, r24
     b7c:	dc f5       	brge	.+118    	; 0xbf4 <_Z21copyInputMatrixBufferv+0x7e>

    //some data in buffer
    //copy oldest member of buffer to inputMatrixBufferCopy
    if (digital_buffer_head == digital_buffer_tail) return false;
     b7e:	90 91 77 03 	lds	r25, 0x0377
     b82:	80 91 76 03 	lds	r24, 0x0376
     b86:	98 17       	cp	r25, r24
     b88:	b9 f1       	breq	.+110    	; 0xbf8 <_Z21copyInputMatrixBufferv+0x82>
    uint8_t index = digital_buffer_tail + 1;
     b8a:	80 91 76 03 	lds	r24, 0x0376
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
    if (index >= DIGITAL_BUFFER_SIZE) index = 0;
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	08 f0       	brcs	.+2      	; 0xb96 <_Z21copyInputMatrixBufferv+0x20>
     b94:	80 e0       	ldi	r24, 0x00	; 0
    cli();
     b96:	f8 94       	cli
    inputMatrixBufferCopy = inputBuffer[index];
     b98:	e8 2f       	mov	r30, r24
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	e8 58       	subi	r30, 0x88	; 136
     baa:	fc 4f       	sbci	r31, 0xFC	; 252
     bac:	a0 81       	ld	r26, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	62 81       	ldd	r22, Z+2	; 0x02
     bb2:	53 81       	ldd	r21, Z+3	; 0x03
     bb4:	44 81       	ldd	r20, Z+4	; 0x04
     bb6:	35 81       	ldd	r19, Z+5	; 0x05
     bb8:	26 81       	ldd	r18, Z+6	; 0x06
     bba:	97 81       	ldd	r25, Z+7	; 0x07
     bbc:	a0 93 98 03 	sts	0x0398, r26
     bc0:	70 93 99 03 	sts	0x0399, r23
     bc4:	60 93 9a 03 	sts	0x039A, r22
     bc8:	50 93 9b 03 	sts	0x039B, r21
     bcc:	40 93 9c 03 	sts	0x039C, r20
     bd0:	30 93 9d 03 	sts	0x039D, r19
     bd4:	20 93 9e 03 	sts	0x039E, r18
     bd8:	90 93 9f 03 	sts	0x039F, r25
    sei();
     bdc:	78 94       	sei
    dmBufferCopied = true;
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	90 93 33 03 	sts	0x0333, r25
    buttonsProcessed = false;
     be4:	10 92 35 03 	sts	0x0335, r1
    encodersProcessed = false;
     be8:	10 92 34 03 	sts	0x0334, r1
    digital_buffer_tail = index;
     bec:	80 93 76 03 	sts	0x0376, r24
    return true;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret

bool copyInputMatrixBuffer()    {

    int8_t bufferSize = getInputMatrixBufferSize();

    if (bufferSize <= 0) return false;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 95       	ret

    //some data in buffer
    //copy oldest member of buffer to inputMatrixBufferCopy
    if (digital_buffer_head == digital_buffer_tail) return false;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
    buttonsProcessed = false;
    encodersProcessed = false;
    digital_buffer_tail = index;
    return true;

}
     bfa:	08 95       	ret

00000bfc <__vector_21>:


//ISR functions
ISR(TIMER0_COMPA_vect) {
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 92       	push	r2
     c08:	3f 92       	push	r3
     c0a:	4f 92       	push	r4
     c0c:	5f 92       	push	r5
     c0e:	6f 92       	push	r6
     c10:	7f 92       	push	r7
     c12:	8f 92       	push	r8
     c14:	9f 92       	push	r9
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	2f 93       	push	r18
     c28:	3f 93       	push	r19
     c2a:	4f 93       	push	r20
     c2c:	5f 93       	push	r21
     c2e:	6f 93       	push	r22
     c30:	7f 93       	push	r23
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	00 d0       	rcall	.+0      	; 0xc44 <__vector_21+0x48>
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62

    static bool updateMillisAndBlink = false;
    static uint8_t matrixSwitchCounter = 0;
    uint32_t ms;

    if (matrixSwitchCounter == 1)   {
     c48:	80 91 40 02 	lds	r24, 0x0240
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_21+0x56>
     c50:	41 c1       	rjmp	.+642    	; 0xed4 <__vector_21+0x2d8>
}

inline void ledRowsOff()   {

    //turn off PWM
    TCCR1A &= ~(1<<COM1C1);
     c52:	e0 e8       	ldi	r30, 0x80	; 128
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	87 7f       	andi	r24, 0xF7	; 247
     c5a:	80 83       	st	Z, r24
    TCCR4C &= ~(1<<COM4D1);
     c5c:	a2 ec       	ldi	r26, 0xC2	; 194
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	8c 91       	ld	r24, X
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	8c 93       	st	X, r24
    TCCR1A &= ~(1<<COM1A1);
     c66:	80 81       	ld	r24, Z
     c68:	8f 77       	andi	r24, 0x7F	; 127
     c6a:	80 83       	st	Z, r24
    TCCR4A &= ~(1<<COM4A1);
     c6c:	a0 ec       	ldi	r26, 0xC0	; 192
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	8c 91       	ld	r24, X
     c72:	8f 77       	andi	r24, 0x7F	; 127
     c74:	8c 93       	st	X, r24
    TCCR3A &= ~(1<<COM3A1);
     c76:	a0 e9       	ldi	r26, 0x90	; 144
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	8c 91       	ld	r24, X
     c7c:	8f 77       	andi	r24, 0x7F	; 127
     c7e:	8c 93       	st	X, r24
    TCCR1A &= ~(1<<COM1B1);
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	80 83       	st	Z, r24

    setHighMacro(LED_ROW_1_PORT, LED_ROW_1_PIN);
     c86:	2f 9a       	sbi	0x05, 7	; 5
    setHighMacro(LED_ROW_2_PORT, LED_ROW_2_PIN);
     c88:	5f 9a       	sbi	0x0b, 7	; 11
    setHighMacro(LED_ROW_3_PORT, LED_ROW_3_PIN);
     c8a:	2d 9a       	sbi	0x05, 5	; 5
    setHighMacro(LED_ROW_4_PORT, LED_ROW_4_PIN);
     c8c:	47 9a       	sbi	0x08, 7	; 8
    setHighMacro(LED_ROW_5_PORT, LED_ROW_5_PIN);
     c8e:	46 9a       	sbi	0x08, 6	; 8
    setHighMacro(LED_ROW_6_PORT, LED_ROW_6_PIN);
     c90:	2e 9a       	sbi	0x05, 6	; 5
    uint32_t ms;

    if (matrixSwitchCounter == 1)   {

        ledRowsOff();
        if (activeLEDcolumn == NUMBER_OF_LED_COLUMNS) activeLEDcolumn = 0;
     c92:	80 91 a0 03 	lds	r24, 0x03A0
     c96:	88 30       	cpi	r24, 0x08	; 8
     c98:	11 f4       	brne	.+4      	; 0xc9e <__vector_21+0xa2>
     c9a:	10 92 a0 03 	sts	0x03A0, r1
        activateOutputColumn(activeLEDcolumn);
     c9e:	80 91 a0 03 	lds	r24, 0x03A0

}

inline void activateOutputColumn(uint8_t column)    {

    bitRead(column, 0) ? setHighMacro(DEC_LM_A0_PORT, DEC_LM_A0_PIN) : setLowMacro(DEC_LM_A0_PORT, DEC_LM_A0_PIN);
     ca2:	80 ff       	sbrs	r24, 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <__vector_21+0xae>
     ca6:	29 9a       	sbi	0x05, 1	; 5
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <__vector_21+0xb0>
     caa:	29 98       	cbi	0x05, 1	; 5
    bitRead(column, 1) ? setHighMacro(DEC_LM_A1_PORT, DEC_LM_A1_PIN) : setLowMacro(DEC_LM_A1_PORT, DEC_LM_A1_PIN);
     cac:	81 ff       	sbrs	r24, 1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <__vector_21+0xb8>
     cb0:	2a 9a       	sbi	0x05, 2	; 5
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <__vector_21+0xba>
     cb4:	2a 98       	cbi	0x05, 2	; 5
    bitRead(column, 2) ? setHighMacro(DEC_LM_A2_PORT, DEC_LM_A2_PIN) : setLowMacro(DEC_LM_A2_PORT, DEC_LM_A2_PIN);
     cb6:	82 ff       	sbrs	r24, 2
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <__vector_21+0xc2>
     cba:	2b 9a       	sbi	0x05, 3	; 5
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <__vector_21+0xc4>
     cbe:	2b 98       	cbi	0x05, 3	; 5

    _NOP();
     cc0:	00 00       	nop

}

inline void checkLEDs()  {

    if (blinkEnabled)   {
     cc2:	80 91 32 03 	lds	r24, 0x0332
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <__vector_21+0xd0>
     cca:	34 c2       	rjmp	.+1128   	; 0x1134 <__vector_21+0x538>

        if (!blinkTimerCounter)  {
     ccc:	80 91 cb 02 	lds	r24, 0x02CB
     cd0:	90 91 cc 02 	lds	r25, 0x02CC
     cd4:	a0 91 cd 02 	lds	r26, 0x02CD
     cd8:	b0 91 ce 02 	lds	r27, 0x02CE
     cdc:	89 2b       	or	r24, r25
     cde:	8a 2b       	or	r24, r26
     ce0:	8b 2b       	or	r24, r27
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_21+0xea>
     ce4:	27 c2       	rjmp	.+1102   	; 0x1134 <__vector_21+0x538>
            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
     ce6:	30 91 00 01 	lds	r19, 0x0100
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
        if (!blinkTimerCounter)  {

            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {
     cee:	fc 01       	movw	r30, r24
     cf0:	ef 5f       	subi	r30, 0xFF	; 255
     cf2:	fc 4f       	sbci	r31, 0xFC	; 252
     cf4:	20 81       	ld	r18, Z
     cf6:	21 ff       	sbrs	r18, 1
     cf8:	0f c0       	rjmp	.+30     	; 0xd18 <__vector_21+0x11c>

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
     cfa:	33 23       	and	r19, r19
     cfc:	39 f0       	breq	.+14     	; 0xd0c <__vector_21+0x110>
     cfe:	fc 01       	movw	r30, r24
     d00:	ef 5f       	subi	r30, 0xFF	; 255
     d02:	fc 4f       	sbci	r31, 0xFC	; 252
     d04:	20 81       	ld	r18, Z
     d06:	28 60       	ori	r18, 0x08	; 8
     d08:	20 83       	st	Z, r18
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <__vector_21+0x11c>
                    else bitWrite(ledState[i], LED_BLINK_STATE_BIT, 0);
     d0c:	fc 01       	movw	r30, r24
     d0e:	ef 5f       	subi	r30, 0xFF	; 255
     d10:	fc 4f       	sbci	r31, 0xFC	; 252
     d12:	20 81       	ld	r18, Z
     d14:	27 7f       	andi	r18, 0xF7	; 247
     d16:	20 83       	st	Z, r18
    if (blinkEnabled)   {

        if (!blinkTimerCounter)  {

            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	80 33       	cpi	r24, 0x30	; 48
     d1c:	91 05       	cpc	r25, r1
     d1e:	39 f7       	brne	.-50     	; 0xcee <__vector_21+0xf2>

                }

            }

            blinkState = !blinkState;
     d20:	90 91 00 01 	lds	r25, 0x0100
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 27       	eor	r24, r25
     d28:	80 93 00 01 	sts	0x0100, r24
     d2c:	03 c2       	rjmp	.+1030   	; 0x1134 <__vector_21+0x538>

    //if there is an active LED in current column, turn on LED row
    //do fancy transitions here
        for (int i=0; i<NUMBER_OF_LED_ROWS; i++)  {

            uint8_t ledNumber = activeLEDcolumn+i*NUMBER_OF_LED_COLUMNS;
     d2e:	80 91 a0 03 	lds	r24, 0x03A0
     d32:	86 0f       	add	r24, r22
            uint8_t ledStateSingle = ledOnLookUpTable[ledState[ledNumber]];
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	ef 5f       	subi	r30, 0xFF	; 255
     d3a:	fc 4f       	sbci	r31, 0xFC	; 252
     d3c:	e0 81       	ld	r30, Z
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	e7 59       	subi	r30, 0x97	; 151
     d42:	fe 4f       	sbci	r31, 0xFE	; 254
     d44:	f0 81       	ld	r31, Z

            //don't bother with pwm if it's disabled
            if (!pwmSteps && ledStateSingle)    {
     d46:	e0 91 31 03 	lds	r30, 0x0331
     d4a:	e1 11       	cpse	r30, r1
     d4c:	30 c2       	rjmp	.+1120   	; 0x11ae <__vector_21+0x5b2>
     d4e:	f1 11       	cpse	r31, r1
     d50:	1a c2       	rjmp	.+1076   	; 0x1186 <__vector_21+0x58a>
     d52:	33 c0       	rjmp	.+102    	; 0xdba <__vector_21+0x1be>
inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {

        case 0:
        OCR1C = intensity;
     d54:	f4 01       	movw	r30, r8
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1C1);
     d5a:	8c 91       	ld	r24, X
     d5c:	88 60       	ori	r24, 0x08	; 8
     d5e:	8c 93       	st	X, r24
     d60:	ad c0       	rjmp	.+346    	; 0xebc <__vector_21+0x2c0>
        break;

        case 1:
        OCR4D = intensity;
     d62:	f3 01       	movw	r30, r6
     d64:	10 82       	st	Z, r1
        TCCR4C |= (1<<COM4D1);
     d66:	f1 01       	movw	r30, r2
     d68:	80 81       	ld	r24, Z
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	80 83       	st	Z, r24
     d6e:	a6 c0       	rjmp	.+332    	; 0xebc <__vector_21+0x2c0>
        break;

        case 2:
        OCR1A = intensity;
     d70:	f7 01       	movw	r30, r14
     d72:	11 82       	std	Z+1, r1	; 0x01
     d74:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1A1);
     d76:	8c 91       	ld	r24, X
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	8c 93       	st	X, r24
     d7c:	9f c0       	rjmp	.+318    	; 0xebc <__vector_21+0x2c0>
        break;

        case 3:
        OCR4A = intensity;
     d7e:	f6 01       	movw	r30, r12
     d80:	10 82       	st	Z, r1
        TCCR4A |= (1<<COM4A1);
     d82:	f9 01       	movw	r30, r18
     d84:	80 81       	ld	r24, Z
     d86:	80 68       	ori	r24, 0x80	; 128
     d88:	80 83       	st	Z, r24
     d8a:	98 c0       	rjmp	.+304    	; 0xebc <__vector_21+0x2c0>
        break;

        case 4:
        OCR3A = intensity;
     d8c:	f8 01       	movw	r30, r16
     d8e:	11 82       	std	Z+1, r1	; 0x01
     d90:	10 82       	st	Z, r1
        TCCR3A |= (1<<COM3A1);
     d92:	fa 01       	movw	r30, r20
     d94:	80 81       	ld	r24, Z
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	80 83       	st	Z, r24
     d9a:	90 c0       	rjmp	.+288    	; 0xebc <__vector_21+0x2c0>
        break;

        case 5:
        OCR1B = intensity;
     d9c:	f5 01       	movw	r30, r10
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
        TCCR1A |= (1<<COM1B1);
     da2:	8c 91       	ld	r24, X
     da4:	80 62       	ori	r24, 0x20	; 32
     da6:	8c 93       	st	X, r24
     da8:	89 c0       	rjmp	.+274    	; 0xebc <__vector_21+0x2c0>
                #endif

            } else {

                if (
                (ledStateSingle && (transitionCounter[ledNumber] != (NUMBER_OF_TRANSITIONS-1))) ||
     daa:	fc 01       	movw	r30, r24
     dac:	e1 53       	subi	r30, 0x31	; 49
     dae:	fd 4f       	sbci	r31, 0xFD	; 253
     db0:	50 80       	ld	r5, Z
     db2:	ff e3       	ldi	r31, 0x3F	; 63
     db4:	5f 12       	cpse	r5, r31
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <__vector_21+0x1cc>
     db8:	06 c2       	rjmp	.+1036   	; 0x11c6 <__vector_21+0x5ca>
                (!ledStateSingle && transitionCounter[ledNumber])
     dba:	fc 01       	movw	r30, r24
     dbc:	e1 53       	subi	r30, 0x31	; 49
     dbe:	fd 4f       	sbci	r31, 0xFD	; 253
     dc0:	40 80       	ld	r4, Z
     dc2:	41 10       	cpse	r4, r1
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <__vector_21+0x1e8>
     dc6:	7a c0       	rjmp	.+244    	; 0xebc <__vector_21+0x2c0>
                )  {

                    if (ledStateSingle) transitionCounter[ledNumber] += pwmSteps;
     dc8:	40 90 31 03 	lds	r4, 0x0331
     dcc:	e4 2d       	mov	r30, r4
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	e5 0d       	add	r30, r5
     dd2:	f1 1d       	adc	r31, r1
     dd4:	57 fc       	sbrc	r5, 7
     dd6:	fa 95       	dec	r31
     dd8:	2f 01       	movw	r4, r30
     dda:	fc 01       	movw	r30, r24
     ddc:	e1 53       	subi	r30, 0x31	; 49
     dde:	fd 4f       	sbci	r31, 0xFD	; 253
     de0:	40 82       	st	Z, r4
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <__vector_21+0x200>
                    else transitionCounter[ledNumber] -= pwmSteps;
     de4:	50 90 31 03 	lds	r5, 0x0331
     de8:	e4 2d       	mov	r30, r4
     dea:	44 0c       	add	r4, r4
     dec:	ff 0b       	sbc	r31, r31
     dee:	e5 19       	sub	r30, r5
     df0:	f1 09       	sbc	r31, r1
     df2:	2f 01       	movw	r4, r30
     df4:	fc 01       	movw	r30, r24
     df6:	e1 53       	subi	r30, 0x31	; 49
     df8:	fd 4f       	sbci	r31, 0xFD	; 253
     dfa:	40 82       	st	Z, r4

                    if (transitionCounter[ledNumber] >= NUMBER_OF_TRANSITIONS) transitionCounter[ledNumber] = NUMBER_OF_TRANSITIONS-1;
     dfc:	fc 01       	movw	r30, r24
     dfe:	e1 53       	subi	r30, 0x31	; 49
     e00:	fd 4f       	sbci	r31, 0xFD	; 253
     e02:	e0 81       	ld	r30, Z
     e04:	e0 34       	cpi	r30, 0x40	; 64
     e06:	4c f0       	brlt	.+18     	; 0xe1a <__vector_21+0x21e>
     e08:	fc 01       	movw	r30, r24
     e0a:	e1 53       	subi	r30, 0x31	; 49
     e0c:	fd 4f       	sbci	r31, 0xFD	; 253
     e0e:	0f 2e       	mov	r0, r31
     e10:	ff e3       	ldi	r31, 0x3F	; 63
     e12:	5f 2e       	mov	r5, r31
     e14:	f0 2d       	mov	r31, r0
     e16:	50 82       	st	Z, r5
     e18:	d6 c1       	rjmp	.+940    	; 0x11c6 <__vector_21+0x5ca>
                    if (transitionCounter[ledNumber] < 0) transitionCounter[ledNumber] = 0;
     e1a:	ee 23       	and	r30, r30
     e1c:	2c f4       	brge	.+10     	; 0xe28 <__vector_21+0x22c>
     e1e:	fc 01       	movw	r30, r24
     e20:	e1 53       	subi	r30, 0x31	; 49
     e22:	fd 4f       	sbci	r31, 0xFD	; 253
     e24:	10 82       	st	Z, r1
     e26:	4a c0       	rjmp	.+148    	; 0xebc <__vector_21+0x2c0>

                }

                if (transitionCounter[ledNumber]) {
     e28:	fc 01       	movw	r30, r24
     e2a:	e1 53       	subi	r30, 0x31	; 49
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	e0 81       	ld	r30, Z
     e30:	ee 23       	and	r30, r30
     e32:	09 f4       	brne	.+2      	; 0xe36 <__vector_21+0x23a>
     e34:	43 c0       	rjmp	.+134    	; 0xebc <__vector_21+0x2c0>

                    #ifdef LED_INVERT
                        ledRowOn(i, 255-ledTransitionScale[transitionCounter[ledNumber]]);
     e36:	0e 2e       	mov	r0, r30
     e38:	00 0c       	add	r0, r0
     e3a:	ff 0b       	sbc	r31, r31
     e3c:	e7 5d       	subi	r30, 0xD7	; 215
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	80 95       	com	r24

}

inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {
     e44:	72 30       	cpi	r23, 0x02	; 2
     e46:	d9 f0       	breq	.+54     	; 0xe7e <__vector_21+0x282>
     e48:	28 f4       	brcc	.+10     	; 0xe54 <__vector_21+0x258>
     e4a:	77 23       	and	r23, r23
     e4c:	49 f0       	breq	.+18     	; 0xe60 <__vector_21+0x264>
     e4e:	71 30       	cpi	r23, 0x01	; 1
     e50:	79 f0       	breq	.+30     	; 0xe70 <__vector_21+0x274>
     e52:	34 c0       	rjmp	.+104    	; 0xebc <__vector_21+0x2c0>
     e54:	74 30       	cpi	r23, 0x04	; 4
     e56:	11 f1       	breq	.+68     	; 0xe9c <__vector_21+0x2a0>
     e58:	d0 f0       	brcs	.+52     	; 0xe8e <__vector_21+0x292>
     e5a:	75 30       	cpi	r23, 0x05	; 5
     e5c:	41 f1       	breq	.+80     	; 0xeae <__vector_21+0x2b2>
     e5e:	2e c0       	rjmp	.+92     	; 0xebc <__vector_21+0x2c0>

        case 0:
        OCR1C = intensity;
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	f4 01       	movw	r30, r8
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1C1);
     e68:	8c 91       	ld	r24, X
     e6a:	88 60       	ori	r24, 0x08	; 8
     e6c:	8c 93       	st	X, r24
     e6e:	26 c0       	rjmp	.+76     	; 0xebc <__vector_21+0x2c0>
        break;

        case 1:
        OCR4D = intensity;
     e70:	f3 01       	movw	r30, r6
     e72:	80 83       	st	Z, r24
        TCCR4C |= (1<<COM4D1);
     e74:	f1 01       	movw	r30, r2
     e76:	80 81       	ld	r24, Z
     e78:	88 60       	ori	r24, 0x08	; 8
     e7a:	80 83       	st	Z, r24
     e7c:	1f c0       	rjmp	.+62     	; 0xebc <__vector_21+0x2c0>
        break;

        case 2:
        OCR1A = intensity;
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	f7 01       	movw	r30, r14
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1A1);
     e86:	8c 91       	ld	r24, X
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	8c 93       	st	X, r24
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <__vector_21+0x2c0>
        break;

        case 3:
        OCR4A = intensity;
     e8e:	f6 01       	movw	r30, r12
     e90:	80 83       	st	Z, r24
        TCCR4A |= (1<<COM4A1);
     e92:	f9 01       	movw	r30, r18
     e94:	80 81       	ld	r24, Z
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	80 83       	st	Z, r24
     e9a:	10 c0       	rjmp	.+32     	; 0xebc <__vector_21+0x2c0>
        break;

        case 4:
        OCR3A = intensity;
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	f8 01       	movw	r30, r16
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
        TCCR3A |= (1<<COM3A1);
     ea4:	fa 01       	movw	r30, r20
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	80 83       	st	Z, r24
     eac:	07 c0       	rjmp	.+14     	; 0xebc <__vector_21+0x2c0>
        break;

        case 5:
        OCR1B = intensity;
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	f5 01       	movw	r30, r10
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
        TCCR1A |= (1<<COM1B1);
     eb6:	8c 91       	ld	r24, X
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
     ebc:	68 5f       	subi	r22, 0xF8	; 248
     ebe:	7f 5f       	subi	r23, 0xFF	; 255

    }

    //if there is an active LED in current column, turn on LED row
    //do fancy transitions here
        for (int i=0; i<NUMBER_OF_LED_ROWS; i++)  {
     ec0:	60 33       	cpi	r22, 0x30	; 48
     ec2:	09 f0       	breq	.+2      	; 0xec6 <__vector_21+0x2ca>
     ec4:	34 cf       	rjmp	.-408    	; 0xd2e <__vector_21+0x132>

        ledRowsOff();
        if (activeLEDcolumn == NUMBER_OF_LED_COLUMNS) activeLEDcolumn = 0;
        activateOutputColumn(activeLEDcolumn);
        checkLEDs();
        activeLEDcolumn++;
     ec6:	80 91 a0 03 	lds	r24, 0x03A0
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	80 93 a0 03 	sts	0x03A0, r24
        matrixSwitchCounter = 0;
     ed0:	10 92 40 02 	sts	0x0240, r1

    }

    if (updateMillisAndBlink)   {
     ed4:	90 91 3f 02 	lds	r25, 0x023F
     ed8:	99 23       	and	r25, r25
     eda:	d1 f0       	breq	.+52     	; 0xf10 <__vector_21+0x314>

        ms = rTime_ms;
     edc:	40 91 42 02 	lds	r20, 0x0242
     ee0:	50 91 43 02 	lds	r21, 0x0243
     ee4:	60 91 44 02 	lds	r22, 0x0244
     ee8:	70 91 45 02 	lds	r23, 0x0245
        ms++;
     eec:	4f 5f       	subi	r20, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	6f 4f       	sbci	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
        //update run time
        rTime_ms = ms;
     ef4:	40 93 42 02 	sts	0x0242, r20
     ef8:	50 93 43 02 	sts	0x0243, r21
     efc:	60 93 44 02 	sts	0x0244, r22
     f00:	70 93 45 02 	sts	0x0245, r23

        matrixSwitchCounter++;
     f04:	80 91 40 02 	lds	r24, 0x0240
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 93 40 02 	sts	0x0240, r24
     f0e:	33 c0       	rjmp	.+102    	; 0xf76 <__vector_21+0x37a>

    }   else {

        if (blinkEnabled) {
     f10:	80 91 32 03 	lds	r24, 0x0332
     f14:	88 23       	and	r24, r24
     f16:	79 f1       	breq	.+94     	; 0xf76 <__vector_21+0x37a>

            blinkTimerCounter++;
     f18:	40 91 cb 02 	lds	r20, 0x02CB
     f1c:	50 91 cc 02 	lds	r21, 0x02CC
     f20:	60 91 cd 02 	lds	r22, 0x02CD
     f24:	70 91 ce 02 	lds	r23, 0x02CE
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	6f 4f       	sbci	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	40 93 cb 02 	sts	0x02CB, r20
     f34:	50 93 cc 02 	sts	0x02CC, r21
     f38:	60 93 cd 02 	sts	0x02CD, r22
     f3c:	70 93 ce 02 	sts	0x02CE, r23
            if (blinkTimerCounter >= ledBlinkTime) blinkTimerCounter = 0;
     f40:	00 91 cb 02 	lds	r16, 0x02CB
     f44:	10 91 cc 02 	lds	r17, 0x02CC
     f48:	20 91 cd 02 	lds	r18, 0x02CD
     f4c:	30 91 ce 02 	lds	r19, 0x02CE
     f50:	40 91 ff 02 	lds	r20, 0x02FF
     f54:	50 91 00 03 	lds	r21, 0x0300
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	04 17       	cp	r16, r20
     f5e:	15 07       	cpc	r17, r21
     f60:	26 07       	cpc	r18, r22
     f62:	37 07       	cpc	r19, r23
     f64:	40 f0       	brcs	.+16     	; 0xf76 <__vector_21+0x37a>
     f66:	10 92 cb 02 	sts	0x02CB, r1
     f6a:	10 92 cc 02 	sts	0x02CC, r1
     f6e:	10 92 cd 02 	sts	0x02CD, r1
     f72:	10 92 ce 02 	sts	0x02CE, r1

        }

    }

    updateMillisAndBlink = !updateMillisAndBlink;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 27       	eor	r24, r25
     f7a:	80 93 3f 02 	sts	0x023F, r24

    //read input matrix
    uint8_t bufferIndex = digital_buffer_head + 1;
     f7e:	80 91 77 03 	lds	r24, 0x0377
     f82:	8f 5f       	subi	r24, 0xFF	; 255
    if (bufferIndex >= DIGITAL_BUFFER_SIZE) bufferIndex = 0;
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	08 f0       	brcs	.+2      	; 0xf8a <__vector_21+0x38e>
     f88:	80 e0       	ldi	r24, 0x00	; 0
    if (digital_buffer_tail == bufferIndex) return; //buffer full, exit
     f8a:	90 91 76 03 	lds	r25, 0x0376
     f8e:	89 17       	cp	r24, r25
     f90:	09 f4       	brne	.+2      	; 0xf94 <__vector_21+0x398>
     f92:	1e c1       	rjmp	.+572    	; 0x11d0 <__vector_21+0x5d4>
    inputBuffer[bufferIndex] = 0;
     f94:	e8 2f       	mov	r30, r24
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	df 01       	movw	r26, r30
     f9a:	aa 0f       	add	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	aa 0f       	add	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	aa 0f       	add	r26, r26
     fa4:	bb 1f       	adc	r27, r27
     fa6:	a8 58       	subi	r26, 0x88	; 136
     fa8:	bc 4f       	sbci	r27, 0xFC	; 252
     faa:	1c 92       	st	X, r1
     fac:	11 96       	adiw	r26, 0x01	; 1
     fae:	1c 92       	st	X, r1
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	1c 92       	st	X, r1
     fb6:	12 97       	sbiw	r26, 0x02	; 2
     fb8:	13 96       	adiw	r26, 0x03	; 3
     fba:	1c 92       	st	X, r1
     fbc:	13 97       	sbiw	r26, 0x03	; 3
     fbe:	14 96       	adiw	r26, 0x04	; 4
     fc0:	1c 92       	st	X, r1
     fc2:	14 97       	sbiw	r26, 0x04	; 4
     fc4:	15 96       	adiw	r26, 0x05	; 5
     fc6:	1c 92       	st	X, r1
     fc8:	15 97       	sbiw	r26, 0x05	; 5
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	1c 92       	st	X, r1
     fce:	16 97       	sbiw	r26, 0x06	; 6
     fd0:	17 96       	adiw	r26, 0x07	; 7
     fd2:	1c 92       	st	X, r1
     fd4:	17 97       	sbiw	r26, 0x07	; 7
    digital_buffer_head = bufferIndex;
     fd6:	80 93 77 03 	sts	0x0377, r24

    for (int i=0; i<NUMBER_OF_BUTTON_COLUMNS; i++)  {
     fda:	1a 82       	std	Y+2, r1	; 0x02
     fdc:	19 82       	std	Y+1, r1	; 0x01

    uint8_t data = 0;
    uint8_t dataReorder = 0;

    //make room for new data
    inputBuffer[bufferIndex] <<= 8;
     fde:	fd 01       	movw	r30, r26

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);
     fe0:	68 94       	set
     fe2:	cc 24       	eor	r12, r12
     fe4:	c3 f8       	bld	r12, 3
     fe6:	d1 2c       	mov	r13, r1

}

inline void storeDigitalIn(uint8_t column, uint8_t bufferIndex)  {

    uint8_t data = 0;
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	0f 2e       	mov	r0, r31
     fec:	f1 e9       	ldi	r31, 0x91	; 145
     fee:	ef 2e       	mov	r14, r31
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	ff 2e       	mov	r15, r31
     ff4:	f0 2d       	mov	r31, r0
    inputBuffer[bufferIndex] <<= 8;

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {
     ff6:	31 2c       	mov	r3, r1

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));
     ff8:	81 2c       	mov	r8, r1
     ffa:	91 2c       	mov	r9, r1
     ffc:	54 01       	movw	r10, r8
     ffe:	83 94       	inc	r8

}

inline void activateInputColumn(uint8_t column)   {

    bitRead(dmColumnArray[column], 0) ? setHighMacro(DEC_DM_A0_PORT, DEC_DM_A0_PIN) : setLowMacro(DEC_DM_A0_PORT, DEC_DM_A0_PIN);
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	99 27       	eor	r25, r25
    1006:	dc 01       	movw	r26, r24
    1008:	a7 57       	subi	r26, 0x77	; 119
    100a:	be 4f       	sbci	r27, 0xFE	; 254
    100c:	2c 91       	ld	r18, X
    100e:	20 ff       	sbrs	r18, 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <__vector_21+0x41a>
    1012:	2c 9a       	sbi	0x05, 4	; 5
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__vector_21+0x41c>
    1016:	2c 98       	cbi	0x05, 4	; 5
    bitRead(dmColumnArray[column], 1) ? setHighMacro(DEC_DM_A1_PORT, DEC_DM_A1_PIN) : setLowMacro(DEC_DM_A1_PORT, DEC_DM_A1_PIN);
    1018:	dc 01       	movw	r26, r24
    101a:	a7 57       	subi	r26, 0x77	; 119
    101c:	be 4f       	sbci	r27, 0xFE	; 254
    101e:	2c 91       	ld	r18, X
    1020:	21 ff       	sbrs	r18, 1
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <__vector_21+0x42c>
    1024:	5e 9a       	sbi	0x0b, 6	; 11
    1026:	01 c0       	rjmp	.+2      	; 0x102a <__vector_21+0x42e>
    1028:	5e 98       	cbi	0x0b, 6	; 11
    bitRead(dmColumnArray[column], 2) ? setHighMacro(DEC_DM_A2_PORT, DEC_DM_A2_PIN) : setLowMacro(DEC_DM_A2_PORT, DEC_DM_A2_PIN);
    102a:	dc 01       	movw	r26, r24
    102c:	a7 57       	subi	r26, 0x77	; 119
    102e:	be 4f       	sbci	r27, 0xFE	; 254
    1030:	8c 91       	ld	r24, X
    1032:	82 ff       	sbrs	r24, 2
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__vector_21+0x43e>
    1036:	5c 9a       	sbi	0x0b, 4	; 11
    1038:	01 c0       	rjmp	.+2      	; 0x103c <__vector_21+0x440>
    103a:	5c 98       	cbi	0x0b, 4	; 11

    _NOP();
    103c:	00 00       	nop

    uint8_t data = 0;
    uint8_t dataReorder = 0;

    //make room for new data
    inputBuffer[bufferIndex] <<= 8;
    103e:	20 81       	ld	r18, Z
    1040:	31 81       	ldd	r19, Z+1	; 0x01
    1042:	42 81       	ldd	r20, Z+2	; 0x02
    1044:	53 81       	ldd	r21, Z+3	; 0x03
    1046:	64 81       	ldd	r22, Z+4	; 0x04
    1048:	75 81       	ldd	r23, Z+5	; 0x05
    104a:	86 81       	ldd	r24, Z+6	; 0x06
    104c:	97 81       	ldd	r25, Z+7	; 0x07
    104e:	08 e0       	ldi	r16, 0x08	; 8
    1050:	0e 94 3e 2b 	call	0x567c	; 0x567c <__ashldi3>
    1054:	20 83       	st	Z, r18
    1056:	31 83       	std	Z+1, r19	; 0x01
    1058:	42 83       	std	Z+2, r20	; 0x02
    105a:	53 83       	std	Z+3, r21	; 0x03
    105c:	64 83       	std	Z+4, r22	; 0x04
    105e:	75 83       	std	Z+5, r23	; 0x05
    1060:	86 83       	std	Z+6, r24	; 0x06
    1062:	97 83       	std	Z+7, r25	; 0x07

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);
    1064:	59 98       	cbi	0x0b, 1	; 11
    1066:	00 00       	nop
    1068:	59 9a       	sbi	0x0b, 1	; 11
    106a:	2c 2d       	mov	r18, r12
    106c:	3d 2d       	mov	r19, r13

}

inline void storeDigitalIn(uint8_t column, uint8_t bufferIndex)  {

    uint8_t data = 0;
    106e:	81 2f       	mov	r24, r17
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {

        data <<= 1;
        data |= ((SR_DIN_PIN_REGISTER >> SR_DIN_PIN) & 0x01);
    1070:	99 b1       	in	r25, 0x09	; 9
    1072:	95 fb       	bst	r25, 5
    1074:	99 27       	eor	r25, r25
    1076:	90 f9       	bld	r25, 0
    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {

        data <<= 1;
    1078:	88 0f       	add	r24, r24
        data |= ((SR_DIN_PIN_REGISTER >> SR_DIN_PIN) & 0x01);
    107a:	89 2b       	or	r24, r25
        //pulse clock pin
        pulseHightToLow(SR_CLK_PORT, SR_CLK_PIN);
    107c:	58 9a       	sbi	0x0b, 0	; 11
    107e:	00 00       	nop
    1080:	58 98       	cbi	0x0b, 0	; 11
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	31 09       	sbc	r19, r1
    inputBuffer[bufferIndex] <<= 8;

    //pulse latch pin
    pulseLowToHigh(SR_LATCH_PORT, SR_LATCH_PIN);

    for (int i=0; i<8; i++) {
    1086:	a1 f7       	brne	.-24     	; 0x1070 <__vector_21+0x474>
    1088:	d7 01       	movw	r26, r14
    108a:	61 2f       	mov	r22, r17
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	33 2d       	mov	r19, r3

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	ac 01       	movw	r20, r24
    1094:	0d 90       	ld	r0, X+
    1096:	02 c0       	rjmp	.+4      	; 0x109c <__vector_21+0x4a0>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <__vector_21+0x49c>
    10a0:	40 ff       	sbrs	r20, 0
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <__vector_21+0x4c0>
    10a4:	24 01       	movw	r4, r8
    10a6:	35 01       	movw	r6, r10
    10a8:	02 2e       	mov	r0, r18
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__vector_21+0x4b8>
    10ac:	44 0c       	add	r4, r4
    10ae:	55 1c       	adc	r5, r5
    10b0:	66 1c       	adc	r6, r6
    10b2:	77 1c       	adc	r7, r7
    10b4:	0a 94       	dec	r0
    10b6:	d2 f7       	brpl	.-12     	; 0x10ac <__vector_21+0x4b0>
    10b8:	64 29       	or	r22, r4
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <__vector_21+0x4da>
    10bc:	24 01       	movw	r4, r8
    10be:	35 01       	movw	r6, r10
    10c0:	02 2e       	mov	r0, r18
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__vector_21+0x4d0>
    10c4:	44 0c       	add	r4, r4
    10c6:	55 1c       	adc	r5, r5
    10c8:	66 1c       	adc	r6, r6
    10ca:	77 1c       	adc	r7, r7
    10cc:	0a 94       	dec	r0
    10ce:	d2 f7       	brpl	.-12     	; 0x10c4 <__vector_21+0x4c8>
    10d0:	24 2c       	mov	r2, r4
    10d2:	20 94       	com	r2
    10d4:	62 21       	and	r22, r2
        pulseHightToLow(SR_CLK_PORT, SR_CLK_PIN);

    }

    //reorder data to match rows on PCB layout
    for (int i=0; i<8; i++)
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	28 30       	cpi	r18, 0x08	; 8
    10dc:	31 05       	cpc	r19, r1
    10de:	c9 f6       	brne	.-78     	; 0x1092 <__vector_21+0x496>
        bitWrite(dataReorder, i, bitRead(data, dmRowBitArray[i]));

    inputBuffer[bufferIndex] |= (uint64_t)dataReorder;
    10e0:	80 81       	ld	r24, Z
    10e2:	a1 81       	ldd	r26, Z+1	; 0x01
    10e4:	72 81       	ldd	r23, Z+2	; 0x02
    10e6:	53 81       	ldd	r21, Z+3	; 0x03
    10e8:	44 81       	ldd	r20, Z+4	; 0x04
    10ea:	35 81       	ldd	r19, Z+5	; 0x05
    10ec:	26 81       	ldd	r18, Z+6	; 0x06
    10ee:	97 81       	ldd	r25, Z+7	; 0x07
    10f0:	68 2b       	or	r22, r24
    10f2:	60 83       	st	Z, r22
    10f4:	a1 83       	std	Z+1, r26	; 0x01
    10f6:	72 83       	std	Z+2, r23	; 0x02
    10f8:	53 83       	std	Z+3, r21	; 0x03
    10fa:	44 83       	std	Z+4, r20	; 0x04
    10fc:	35 83       	std	Z+5, r19	; 0x05
    10fe:	26 83       	std	Z+6, r18	; 0x06
    1100:	97 83       	std	Z+7, r25	; 0x07
    if (bufferIndex >= DIGITAL_BUFFER_SIZE) bufferIndex = 0;
    if (digital_buffer_tail == bufferIndex) return; //buffer full, exit
    inputBuffer[bufferIndex] = 0;
    digital_buffer_head = bufferIndex;

    for (int i=0; i<NUMBER_OF_BUTTON_COLUMNS; i++)  {
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	08 97       	sbiw	r24, 0x08	; 8
    110e:	09 f0       	breq	.+2      	; 0x1112 <__vector_21+0x516>
    1110:	77 cf       	rjmp	.-274    	; 0x1000 <__vector_21+0x404>
        activateInputColumn(i);
        storeDigitalIn(i, bufferIndex);

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {
    1112:	80 91 ca 02 	lds	r24, 0x02CA
    1116:	81 11       	cpse	r24, r1
    1118:	5b c0       	rjmp	.+182    	; 0x11d0 <__vector_21+0x5d4>
    111a:	80 91 7a 00 	lds	r24, 0x007A
    111e:	86 ff       	sbrs	r24, 6
    1120:	49 c0       	rjmp	.+146    	; 0x11b4 <__vector_21+0x5b8>
    1122:	56 c0       	rjmp	.+172    	; 0x11d0 <__vector_21+0x5d4>

        adcDelayCounter++;
        if (adcDelayCounter == 2)   {

            adcDelayCounter = 0;
    1124:	10 92 46 02 	sts	0x0246, r1
            startADCconversion();
    1128:	ea e7       	ldi	r30, 0x7A	; 122
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	80 83       	st	Z, r24
    1132:	4e c0       	rjmp	.+156    	; 0x11d0 <__vector_21+0x5d4>
            //change blinkBit state and write it into ledState variable if LED is in blink state
            for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)  {

                if (bitRead(ledState[i], LED_BLINK_ON_BIT))    {

                    if (blinkState) bitWrite(ledState[i], LED_BLINK_STATE_BIT, 1);
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
        OCR4D = intensity;
        TCCR4C |= (1<<COM4D1);
        break;

        case 2:
        OCR1A = intensity;
    1138:	0f 2e       	mov	r0, r31
    113a:	f8 e8       	ldi	r31, 0x88	; 136
    113c:	ef 2e       	mov	r14, r31
    113e:	f1 2c       	mov	r15, r1
    1140:	f0 2d       	mov	r31, r0
        TCCR1A |= (1<<COM1A1);
    1142:	a0 e8       	ldi	r26, 0x80	; 128
    1144:	b0 e0       	ldi	r27, 0x00	; 0
        OCR4A = intensity;
        TCCR4A |= (1<<COM4A1);
        break;

        case 4:
        OCR3A = intensity;
    1146:	08 e9       	ldi	r16, 0x98	; 152
    1148:	10 e0       	ldi	r17, 0x00	; 0
        TCCR3A |= (1<<COM3A1);
    114a:	40 e9       	ldi	r20, 0x90	; 144
    114c:	50 e0       	ldi	r21, 0x00	; 0
        OCR1A = intensity;
        TCCR1A |= (1<<COM1A1);
        break;

        case 3:
        OCR4A = intensity;
    114e:	0f 2e       	mov	r0, r31
    1150:	ff ec       	ldi	r31, 0xCF	; 207
    1152:	cf 2e       	mov	r12, r31
    1154:	d1 2c       	mov	r13, r1
    1156:	f0 2d       	mov	r31, r0
        TCCR4A |= (1<<COM4A1);
    1158:	20 ec       	ldi	r18, 0xC0	; 192
    115a:	30 e0       	ldi	r19, 0x00	; 0
        OCR3A = intensity;
        TCCR3A |= (1<<COM3A1);
        break;

        case 5:
        OCR1B = intensity;
    115c:	0f 2e       	mov	r0, r31
    115e:	fa e8       	ldi	r31, 0x8A	; 138
    1160:	af 2e       	mov	r10, r31
    1162:	b1 2c       	mov	r11, r1
    1164:	f0 2d       	mov	r31, r0
inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {

        case 0:
        OCR1C = intensity;
    1166:	0f 2e       	mov	r0, r31
    1168:	fc e8       	ldi	r31, 0x8C	; 140
    116a:	8f 2e       	mov	r8, r31
    116c:	91 2c       	mov	r9, r1
    116e:	f0 2d       	mov	r31, r0
        TCCR1A |= (1<<COM1C1);
        break;

        case 1:
        OCR4D = intensity;
    1170:	0f 2e       	mov	r0, r31
    1172:	f2 ed       	ldi	r31, 0xD2	; 210
    1174:	6f 2e       	mov	r6, r31
    1176:	71 2c       	mov	r7, r1
    1178:	f0 2d       	mov	r31, r0
        TCCR4C |= (1<<COM4D1);
    117a:	0f 2e       	mov	r0, r31
    117c:	f2 ec       	ldi	r31, 0xC2	; 194
    117e:	2f 2e       	mov	r2, r31
    1180:	31 2c       	mov	r3, r1
    1182:	f0 2d       	mov	r31, r0
    1184:	d4 cd       	rjmp	.-1112   	; 0xd2e <__vector_21+0x132>

}

inline void ledRowOn(uint8_t rowNumber, uint8_t intensity)  {

    switch (rowNumber)  {
    1186:	72 30       	cpi	r23, 0x02	; 2
    1188:	09 f4       	brne	.+2      	; 0x118c <__vector_21+0x590>
    118a:	f2 cd       	rjmp	.-1052   	; 0xd70 <__vector_21+0x174>
    118c:	38 f4       	brcc	.+14     	; 0x119c <__vector_21+0x5a0>
    118e:	77 23       	and	r23, r23
    1190:	09 f4       	brne	.+2      	; 0x1194 <__vector_21+0x598>
    1192:	e0 cd       	rjmp	.-1088   	; 0xd54 <__vector_21+0x158>
    1194:	71 30       	cpi	r23, 0x01	; 1
    1196:	09 f4       	brne	.+2      	; 0x119a <__vector_21+0x59e>
    1198:	e4 cd       	rjmp	.-1080   	; 0xd62 <__vector_21+0x166>
    119a:	90 ce       	rjmp	.-736    	; 0xebc <__vector_21+0x2c0>
    119c:	74 30       	cpi	r23, 0x04	; 4
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__vector_21+0x5a6>
    11a0:	f5 cd       	rjmp	.-1046   	; 0xd8c <__vector_21+0x190>
    11a2:	08 f4       	brcc	.+2      	; 0x11a6 <__vector_21+0x5aa>
    11a4:	ec cd       	rjmp	.-1064   	; 0xd7e <__vector_21+0x182>
    11a6:	75 30       	cpi	r23, 0x05	; 5
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_21+0x5b0>
    11aa:	f8 cd       	rjmp	.-1040   	; 0xd9c <__vector_21+0x1a0>
    11ac:	87 ce       	rjmp	.-754    	; 0xebc <__vector_21+0x2c0>
                    ledRowOn(i, 255);
                #endif

            } else {

                if (
    11ae:	f1 11       	cpse	r31, r1
    11b0:	fc cd       	rjmp	.-1032   	; 0xdaa <__vector_21+0x1ae>
    11b2:	03 ce       	rjmp	.-1018   	; 0xdba <__vector_21+0x1be>

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {

        adcDelayCounter++;
    11b4:	80 91 46 02 	lds	r24, 0x0246
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
        if (adcDelayCounter == 2)   {
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <__vector_21+0x5c4>
    11be:	b2 cf       	rjmp	.-156    	; 0x1124 <__vector_21+0x528>

    }

    if (!_analogDataAvailable && !bitRead(ADCSRA, ADSC))   {

        adcDelayCounter++;
    11c0:	80 93 46 02 	sts	0x0246, r24
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <__vector_21+0x5d4>
                    if (transitionCounter[ledNumber] >= NUMBER_OF_TRANSITIONS) transitionCounter[ledNumber] = NUMBER_OF_TRANSITIONS-1;
                    if (transitionCounter[ledNumber] < 0) transitionCounter[ledNumber] = 0;

                }

                if (transitionCounter[ledNumber]) {
    11c6:	fc 01       	movw	r30, r24
    11c8:	e1 53       	subi	r30, 0x31	; 49
    11ca:	fd 4f       	sbci	r31, 0xFD	; 253
    11cc:	e0 81       	ld	r30, Z
    11ce:	33 ce       	rjmp	.-922    	; 0xe36 <__vector_21+0x23a>

        }

    }

}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	3f 90       	pop	r3
    120e:	2f 90       	pop	r2
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_29>:

ISR(ADC_vect)   {
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31

    analogBuffer[analogBufferCounter] = ADC;
    1230:	80 91 c7 02 	lds	r24, 0x02C7
    1234:	e8 2f       	mov	r30, r24
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	20 91 78 00 	lds	r18, 0x0078
    123c:	30 91 79 00 	lds	r19, 0x0079
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	e9 57       	subi	r30, 0x79	; 121
    1246:	fd 4f       	sbci	r31, 0xFD	; 253
    1248:	31 83       	std	Z+1, r19	; 0x01
    124a:	20 83       	st	Z, r18
    analogBufferCounter++;
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 93 c7 02 	sts	0x02C7, r24

    activeMuxInput++;
    1252:	90 91 c8 02 	lds	r25, 0x02C8
    1256:	9f 5f       	subi	r25, 0xFF	; 255

    bool switchMux = (activeMuxInput == NUMBER_OF_MUX_INPUTS);
    bool bufferFull = (analogBufferCounter == MAX_NUMBER_OF_ANALOG);
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	80 32       	cpi	r24, 0x20	; 32
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_29+0x46>
    125e:	20 e0       	ldi	r18, 0x00	; 0

    if (switchMux)  {
    1260:	90 31       	cpi	r25, 0x10	; 16
    1262:	19 f0       	breq	.+6      	; 0x126a <__vector_29+0x50>
ISR(ADC_vect)   {

    analogBuffer[analogBufferCounter] = ADC;
    analogBufferCounter++;

    activeMuxInput++;
    1264:	90 93 c8 02 	sts	0x02C8, r25
    1268:	1a c0       	rjmp	.+52     	; 0x129e <__vector_29+0x84>
    bool switchMux = (activeMuxInput == NUMBER_OF_MUX_INPUTS);
    bool bufferFull = (analogBufferCounter == MAX_NUMBER_OF_ANALOG);

    if (switchMux)  {

        activeMuxInput = 0;
    126a:	10 92 c8 02 	sts	0x02C8, r1
        activeMux++;
    126e:	80 91 c9 02 	lds	r24, 0x02C9
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 c9 02 	sts	0x02C9, r24
        if (activeMux == NUMBER_OF_MUX) activeMux = 0;
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	21 f4       	brne	.+8      	; 0x1284 <__vector_29+0x6a>
    127c:	10 92 c9 02 	sts	0x02C9, r1
    uint8_t analogPin;

    switch(muxNumber) {

        case 0:
        analogPin = MUX_1_IN_PIN;
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__vector_29+0x78>

inline void setAnalogPin(uint8_t muxNumber)   {

    uint8_t analogPin;

    switch(muxNumber) {
    1284:	88 23       	and	r24, r24
    1286:	21 f0       	breq	.+8      	; 0x1290 <__vector_29+0x76>
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	49 f4       	brne	.+18     	; 0x129e <__vector_29+0x84>
        case 0:
        analogPin = MUX_1_IN_PIN;
        break;

        case 1:
        analogPin = MUX_2_IN_PIN;
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <__vector_29+0x78>
    uint8_t analogPin;

    switch(muxNumber) {

        case 0:
        analogPin = MUX_1_IN_PIN;
    1290:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;

    }

    ADMUX = (ADMUX & 0xF0) | (analogPin & 0x0F);
    1292:	ec e7       	ldi	r30, 0x7C	; 124
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 7f       	andi	r24, 0xF0	; 240
    129a:	89 2b       	or	r24, r25
    129c:	80 83       	st	Z, r24
        if (activeMux == NUMBER_OF_MUX) activeMux = 0;
        setAnalogPin(activeMux);

    }

    if (bufferFull)   {
    129e:	22 23       	and	r18, r18
    12a0:	29 f0       	breq	.+10     	; 0x12ac <__vector_29+0x92>

        analogBufferCounter = 0;
    12a2:	10 92 c7 02 	sts	0x02C7, r1
         _analogDataAvailable = true;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 ca 02 	sts	0x02CA, r24

    //according to datasheet, propagation delay between setting Sn pins
    //and output appearing on Yn is around 150ns
    //add three NOPs to compensate

    bitRead(muxPinOrderArray[muxInput], 0) ? setHighMacro(MUX_S0_PORT, MUX_S0_PIN) : setLowMacro(MUX_S0_PORT, MUX_S0_PIN);
    12ac:	80 91 c8 02 	lds	r24, 0x02C8
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	fc 01       	movw	r30, r24
    12b4:	e7 58       	subi	r30, 0x87	; 135
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	30 81       	ld	r19, Z
    12ba:	30 ff       	sbrs	r19, 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <__vector_29+0xa8>
    12be:	8d 9a       	sbi	0x11, 5	; 17
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <__vector_29+0xaa>
    12c2:	8d 98       	cbi	0x11, 5	; 17
    bitRead(muxPinOrderArray[muxInput], 1) ? setHighMacro(MUX_S1_PORT, MUX_S1_PIN) : setLowMacro(MUX_S1_PORT, MUX_S1_PIN);
    12c4:	fc 01       	movw	r30, r24
    12c6:	e7 58       	subi	r30, 0x87	; 135
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	30 81       	ld	r19, Z
    12cc:	31 ff       	sbrs	r19, 1
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <__vector_29+0xba>
    12d0:	8f 9a       	sbi	0x11, 7	; 17
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <__vector_29+0xbc>
    12d4:	8f 98       	cbi	0x11, 7	; 17
    bitRead(muxPinOrderArray[muxInput], 2) ? setHighMacro(MUX_S2_PORT, MUX_S2_PIN) : setLowMacro(MUX_S2_PORT, MUX_S2_PIN);
    12d6:	fc 01       	movw	r30, r24
    12d8:	e7 58       	subi	r30, 0x87	; 135
    12da:	fe 4f       	sbci	r31, 0xFE	; 254
    12dc:	30 81       	ld	r19, Z
    12de:	32 ff       	sbrs	r19, 2
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <__vector_29+0xcc>
    12e2:	8c 9a       	sbi	0x11, 4	; 17
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <__vector_29+0xce>
    12e6:	8c 98       	cbi	0x11, 4	; 17
    bitRead(muxPinOrderArray[muxInput], 3) ? setHighMacro(MUX_S3_PORT, MUX_S3_PIN) : setLowMacro(MUX_S3_PORT, MUX_S3_PIN);
    12e8:	fc 01       	movw	r30, r24
    12ea:	e7 58       	subi	r30, 0x87	; 135
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	80 81       	ld	r24, Z
    12f0:	83 ff       	sbrs	r24, 3
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <__vector_29+0xde>
    12f4:	8e 9a       	sbi	0x11, 6	; 17
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <__vector_29+0xe0>
    12f8:	8e 98       	cbi	0x11, 6	; 17

    _NOP(); _NOP(); _NOP();
    12fa:	00 00       	nop
    12fc:	00 00       	nop
    12fe:	00 00       	nop

    }

    //always set mux input
    setMuxInput(activeMuxInput);
    if (!bufferFull) startADCconversion();
    1300:	21 11       	cpse	r18, r1
    1302:	05 c0       	rjmp	.+10     	; 0x130e <__vector_29+0xf4>
    1304:	ea e7       	ldi	r30, 0x7A	; 122
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 64       	ori	r24, 0x40	; 64
    130c:	80 83       	st	Z, r24

}
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <_ZN5Board8initPinsEv>:

void Board::initPins() {

    //configure input matrix
    //shift register
    setInputMacro(SR_DIN_DDR, SR_DIN_PIN);
    1324:	55 98       	cbi	0x0a, 5	; 10
    setOutputMacro(SR_CLK_DDR, SR_CLK_PIN);
    1326:	50 9a       	sbi	0x0a, 0	; 10
    setOutputMacro(SR_LATCH_DDR, SR_LATCH_PIN);
    1328:	51 9a       	sbi	0x0a, 1	; 10

    //decoder
    setOutputMacro(DEC_DM_A0_DDR, DEC_DM_A0_PIN);
    132a:	24 9a       	sbi	0x04, 4	; 4
    setOutputMacro(DEC_DM_A1_DDR, DEC_DM_A1_PIN);
    132c:	56 9a       	sbi	0x0a, 6	; 10
    setOutputMacro(DEC_DM_A1_DDR, DEC_DM_A2_PIN);
    132e:	54 9a       	sbi	0x0a, 4	; 10

    //configure led matrix
    //rows

    setHighMacro(LED_ROW_1_PORT, LED_ROW_1_PIN);
    1330:	2f 9a       	sbi	0x05, 7	; 5
    setHighMacro(LED_ROW_2_PORT, LED_ROW_2_PIN);
    1332:	5f 9a       	sbi	0x0b, 7	; 11
    setHighMacro(LED_ROW_3_PORT, LED_ROW_3_PIN);
    1334:	2d 9a       	sbi	0x05, 5	; 5
    setHighMacro(LED_ROW_4_PORT, LED_ROW_4_PIN);
    1336:	47 9a       	sbi	0x08, 7	; 8
    setHighMacro(LED_ROW_5_PORT, LED_ROW_5_PIN);
    1338:	46 9a       	sbi	0x08, 6	; 8
    setHighMacro(LED_ROW_6_PORT, LED_ROW_6_PIN);
    133a:	2e 9a       	sbi	0x05, 6	; 5

    setOutputMacro(LED_ROW_1_DDR, LED_ROW_1_PIN);
    133c:	27 9a       	sbi	0x04, 7	; 4
    setOutputMacro(LED_ROW_2_DDR, LED_ROW_2_PIN);
    133e:	57 9a       	sbi	0x0a, 7	; 10
    setOutputMacro(LED_ROW_3_DDR, LED_ROW_3_PIN);
    1340:	25 9a       	sbi	0x04, 5	; 4
    setOutputMacro(LED_ROW_4_DDR, LED_ROW_4_PIN);
    1342:	3f 9a       	sbi	0x07, 7	; 7
    setOutputMacro(LED_ROW_5_DDR, LED_ROW_5_PIN);
    1344:	3e 9a       	sbi	0x07, 6	; 7
    setOutputMacro(LED_ROW_6_DDR, LED_ROW_6_PIN);
    1346:	26 9a       	sbi	0x04, 6	; 4

    //decoder
    setOutputMacro(DEC_LM_A0_DDR, DEC_LM_A0_PIN);
    1348:	21 9a       	sbi	0x04, 1	; 4
    setOutputMacro(DEC_LM_A1_DDR, DEC_LM_A1_PIN);
    134a:	22 9a       	sbi	0x04, 2	; 4
    setOutputMacro(DEC_LM_A2_DDR, DEC_LM_A2_PIN);
    134c:	23 9a       	sbi	0x04, 3	; 4

    //configure analog
    //select pins
    setOutputMacro(MUX_S0_DDR, MUX_S0_PIN);
    134e:	85 9a       	sbi	0x10, 5	; 16
    setOutputMacro(MUX_S1_DDR, MUX_S1_PIN);
    1350:	87 9a       	sbi	0x10, 7	; 16
    setOutputMacro(MUX_S2_DDR, MUX_S2_PIN);
    1352:	84 9a       	sbi	0x10, 4	; 16
    setOutputMacro(MUX_S3_DDR, MUX_S3_PIN);
    1354:	86 9a       	sbi	0x10, 6	; 16

    //mux inputs
    setInputMacro(MUX_1_IN_DDR, MUX_1_IN_PIN);
    1356:	80 98       	cbi	0x10, 0	; 16
    setInputMacro(MUX_2_IN_DDR, MUX_2_IN_PIN);
    1358:	81 98       	cbi	0x10, 1	; 16

    //bootloader led
    setOutputMacro(BTLDR_LED_DDR, BTLDR_LED_PIN);
    135a:	6e 9a       	sbi	0x0d, 6	; 13
    135c:	08 95       	ret

0000135e <_ZN5Board10initAnalogEv>:

}

void Board::initAnalog()    {

    setUpADC();
    135e:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z8setUpADCv>
    setADCprescaler(128);
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	0e 94 27 05 	call	0xa4e	; 0xa4e <_Z15setADCprescalerh>

    //according to datasheet, propagation delay between setting Sn pins
    //and output appearing on Yn is around 150ns
    //add three NOPs to compensate

    bitRead(muxPinOrderArray[muxInput], 0) ? setHighMacro(MUX_S0_PORT, MUX_S0_PIN) : setLowMacro(MUX_S0_PORT, MUX_S0_PIN);
    1368:	80 91 c8 02 	lds	r24, 0x02C8
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	fc 01       	movw	r30, r24
    1370:	e7 58       	subi	r30, 0x87	; 135
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	20 81       	ld	r18, Z
    1376:	20 ff       	sbrs	r18, 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <_ZN5Board10initAnalogEv+0x20>
    137a:	8d 9a       	sbi	0x11, 5	; 17
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <_ZN5Board10initAnalogEv+0x22>
    137e:	8d 98       	cbi	0x11, 5	; 17
    bitRead(muxPinOrderArray[muxInput], 1) ? setHighMacro(MUX_S1_PORT, MUX_S1_PIN) : setLowMacro(MUX_S1_PORT, MUX_S1_PIN);
    1380:	fc 01       	movw	r30, r24
    1382:	e7 58       	subi	r30, 0x87	; 135
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	20 81       	ld	r18, Z
    1388:	21 ff       	sbrs	r18, 1
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <_ZN5Board10initAnalogEv+0x32>
    138c:	8f 9a       	sbi	0x11, 7	; 17
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <_ZN5Board10initAnalogEv+0x34>
    1390:	8f 98       	cbi	0x11, 7	; 17
    bitRead(muxPinOrderArray[muxInput], 2) ? setHighMacro(MUX_S2_PORT, MUX_S2_PIN) : setLowMacro(MUX_S2_PORT, MUX_S2_PIN);
    1392:	fc 01       	movw	r30, r24
    1394:	e7 58       	subi	r30, 0x87	; 135
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	20 81       	ld	r18, Z
    139a:	22 ff       	sbrs	r18, 2
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <_ZN5Board10initAnalogEv+0x44>
    139e:	8c 9a       	sbi	0x11, 4	; 17
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <_ZN5Board10initAnalogEv+0x46>
    13a2:	8c 98       	cbi	0x11, 4	; 17
    bitRead(muxPinOrderArray[muxInput], 3) ? setHighMacro(MUX_S3_PORT, MUX_S3_PIN) : setLowMacro(MUX_S3_PORT, MUX_S3_PIN);
    13a4:	fc 01       	movw	r30, r24
    13a6:	e7 58       	subi	r30, 0x87	; 135
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	80 81       	ld	r24, Z
    13ac:	83 ff       	sbrs	r24, 3
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <_ZN5Board10initAnalogEv+0x56>
    13b0:	8e 9a       	sbi	0x11, 6	; 17
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <_ZN5Board10initAnalogEv+0x58>
    13b4:	8e 98       	cbi	0x11, 6	; 17

    _NOP(); _NOP(); _NOP();
    13b6:	00 00       	nop
    13b8:	00 00       	nop
    13ba:	00 00       	nop

    setUpADC();
    setADCprescaler(128);

    setMuxInput(activeMuxInput);
    setADCchannel(MUX_1_IN_PIN);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_Z13setADCchannelh>

    disconnectDigitalInADC(MUX_1_IN_PIN);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z22disconnectDigitalInADCh>
    disconnectDigitalInADC(MUX_2_IN_PIN);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z22disconnectDigitalInADCh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ce:	8f e3       	ldi	r24, 0x3F	; 63
    13d0:	9f e1       	ldi	r25, 0x1F	; 31
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <_ZN5Board10initAnalogEv+0x74>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <_ZN5Board10initAnalogEv+0x7a>
    13d8:	00 00       	nop

    _delay_ms(2);
    for (int i=0; i<5; i++)
        getADCvalue();  //few dummy reads to init ADC
    13da:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z11getADCvaluev>
    13de:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z11getADCvaluev>
    13e2:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z11getADCvaluev>
    13e6:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z11getADCvaluev>
    13ea:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z11getADCvaluev>
    adcInterruptEnable();
    13ee:	ea e7       	ldi	r30, 0x7A	; 122
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	80 83       	st	Z, r24
    startADCconversion();
    13f8:	80 81       	ld	r24, Z
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	80 83       	st	Z, r24
    13fe:	08 95       	ret

00001400 <_ZN5Board15configureTimersEv>:

}

void Board::configureTimers()   {
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29

    //clear timer0 conf
    TCCR0A = 0;
    1412:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
    1414:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0;
    1416:	0f 2e       	mov	r0, r31
    1418:	fe e6       	ldi	r31, 0x6E	; 110
    141a:	af 2e       	mov	r10, r31
    141c:	b1 2c       	mov	r11, r1
    141e:	f0 2d       	mov	r31, r0
    1420:	d5 01       	movw	r26, r10
    1422:	1c 92       	st	X, r1

    //clear timer1 conf
    TCCR1A = 0;
    1424:	68 94       	set
    1426:	ee 24       	eor	r14, r14
    1428:	e7 f8       	bld	r14, 7
    142a:	f1 2c       	mov	r15, r1
    142c:	f7 01       	movw	r30, r14
    142e:	10 82       	st	Z, r1
    TCCR1B = 0;
    1430:	01 e8       	ldi	r16, 0x81	; 129
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	d8 01       	movw	r26, r16
    1436:	1c 92       	st	X, r1

    //clear timer3 conf
    TCCR3A = 0;
    1438:	60 e9       	ldi	r22, 0x90	; 144
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	fb 01       	movw	r30, r22
    143e:	10 82       	st	Z, r1
    TCCR3B = 0;
    1440:	41 e9       	ldi	r20, 0x91	; 145
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	da 01       	movw	r26, r20
    1446:	1c 92       	st	X, r1

    //clear timer4 conf
    TCCR4A = 0;
    1448:	20 ec       	ldi	r18, 0xC0	; 192
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	10 82       	st	Z, r1
    TCCR4B = 0;
    1450:	81 ec       	ldi	r24, 0xC1	; 193
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	dc 01       	movw	r26, r24
    1456:	1c 92       	st	X, r1
    TCCR4C = 0;
    1458:	c2 ec       	ldi	r28, 0xC2	; 194
    145a:	d0 e0       	ldi	r29, 0x00	; 0
    145c:	18 82       	st	Y, r1
    TCCR4D = 0;
    145e:	a3 ec       	ldi	r26, 0xC3	; 195
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	1c 92       	st	X, r1
    TCCR4E = 0;
    1464:	10 92 c4 00 	sts	0x00C4, r1

    //set timer1, timer3 and timer4 to phase correct pwm mode
    //timer 1
    TCCR1A |= (1<<WGM10);           //phase correct PWM
    1468:	f7 01       	movw	r30, r14
    146a:	d0 80       	ld	r13, Z
    146c:	fd 2d       	mov	r31, r13
    146e:	f1 60       	ori	r31, 0x01	; 1
    1470:	df 2e       	mov	r13, r31
    1472:	f7 01       	movw	r30, r14
    1474:	d0 82       	st	Z, r13
    TCCR1B |= (1<<CS10);            //prescaler 1
    1476:	f8 01       	movw	r30, r16
    1478:	f0 80       	ld	r15, Z
    147a:	ff 2d       	mov	r31, r15
    147c:	f1 60       	ori	r31, 0x01	; 1
    147e:	ff 2e       	mov	r15, r31
    1480:	f8 01       	movw	r30, r16
    1482:	f0 82       	st	Z, r15
    //timer 3
    TCCR3A |= (1<<WGM30);           //phase correct PWM
    1484:	fb 01       	movw	r30, r22
    1486:	10 81       	ld	r17, Z
    1488:	11 60       	ori	r17, 0x01	; 1
    148a:	10 83       	st	Z, r17
    TCCR3B |= (1<<CS30);            //prescaler 1
    148c:	fa 01       	movw	r30, r20
    148e:	60 81       	ld	r22, Z
    1490:	61 60       	ori	r22, 0x01	; 1
    1492:	60 83       	st	Z, r22
    //OCR3A = 10000;
    //TIMSK3 |= (1<<OCIE3A);
    //timer 4
    TCCR4A |= (1<<PWM4A);           //Pulse Width Modulator A Enable
    1494:	f9 01       	movw	r30, r18
    1496:	40 81       	ld	r20, Z
    1498:	42 60       	ori	r20, 0x02	; 2
    149a:	40 83       	st	Z, r20
    TCCR4B |= (1<<CS40);            //prescaler 1
    149c:	fc 01       	movw	r30, r24
    149e:	20 81       	ld	r18, Z
    14a0:	21 60       	ori	r18, 0x01	; 1
    14a2:	20 83       	st	Z, r18
    TCCR4C |= (1<<PWM4D);           //Pulse Width Modulator D Enable
    14a4:	88 81       	ld	r24, Y
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	88 83       	st	Y, r24
    TCCR4D |= (1<<WGM40);           //phase correct PWM
    14aa:	8c 91       	ld	r24, X
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	8c 93       	st	X, r24

    //set timer0 to ctc, used for millis/led matrix
    TCCR0A |= (1<<WGM01);           //CTC mode
    14b0:	84 b5       	in	r24, 0x24	; 36
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS01)|(1<<CS00);  //prescaler 64
    14b6:	85 b5       	in	r24, 0x25	; 37
    14b8:	83 60       	ori	r24, 0x03	; 3
    14ba:	85 bd       	out	0x25, r24	; 37
    OCR0A = 124;                    //500uS
    14bc:	8c e7       	ldi	r24, 0x7C	; 124
    14be:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);          //compare match interrupt
    14c0:	d5 01       	movw	r26, r10
    14c2:	8c 91       	ld	r24, X
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	8c 93       	st	X, r24

}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	bf 90       	pop	r11
    14d8:	af 90       	pop	r10
    14da:	08 95       	ret

000014dc <_ZN5Board4initEv>:

    //default constructor

}

void Board::init()  {
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ec 01       	movw	r28, r24

    cli();
    14e2:	f8 94       	cli
    disableWatchDog();
    14e4:	0e 94 7d 05 	call	0xafa	; 0xafa <_Z15disableWatchDogv>
    initPins();
    14e8:	ce 01       	movw	r24, r28
    14ea:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN5Board8initPinsEv>
    initAnalog();
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN5Board10initAnalogEv>
    14f4:	e6 e3       	ldi	r30, 0x36	; 54
    14f6:	f3 e0       	ldi	r31, 0x03	; 3
    14f8:	46 e7       	ldi	r20, 0x76	; 118
    14fa:	53 e0       	ldi	r21, 0x03	; 3

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {

        encoderData[i] |= ((uint16_t)encStopped << 8);
        encoderData[i] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);   //set number of pulses to 8
    14fc:	20 81       	ld	r18, Z
    14fe:	31 81       	ldd	r19, Z+1	; 0x01
    1500:	20 68       	ori	r18, 0x80	; 128
    1502:	21 93       	st	Z+, r18
    1504:	31 93       	st	Z+, r19
    cli();
    disableWatchDog();
    initPins();
    initAnalog();

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {
    1506:	e4 17       	cp	r30, r20
    1508:	f5 07       	cpc	r31, r21
    150a:	c1 f7       	brne	.-16     	; 0x14fc <_ZN5Board4initEv+0x20>
    150c:	8f e1       	ldi	r24, 0x1F	; 31
    150e:	9e e4       	ldi	r25, 0x4E	; 78
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <_ZN5Board4initEv+0x34>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <_ZN5Board4initEv+0x3a>
    1516:	00 00       	nop

    }

    _delay_ms(5);

    configureTimers();
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN5Board15configureTimersEv>

    //enable global interrupts
    sei();
    151e:	78 94       	sei

}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <_ZN5Board11getLEDstateEh>:
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1526:	e6 2f       	mov	r30, r22
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ef 5f       	subi	r30, 0xFF	; 255
    152c:	fc 4f       	sbci	r31, 0xFC	; 252
    152e:	80 81       	ld	r24, Z
    return returnValue;

}
    1530:	08 95       	ret

00001532 <_ZN5Board15setLEDblinkTimeEj>:

void Board::setLEDblinkTime(uint16_t blinkTime)  {

    cli();
    1532:	f8 94       	cli
    ledBlinkTime = blinkTime*100;
    1534:	24 e6       	ldi	r18, 0x64	; 100
    1536:	26 9f       	mul	r18, r22
    1538:	c0 01       	movw	r24, r0
    153a:	27 9f       	mul	r18, r23
    153c:	90 0d       	add	r25, r0
    153e:	11 24       	eor	r1, r1
    1540:	90 93 00 03 	sts	0x0300, r25
    1544:	80 93 ff 02 	sts	0x02FF, r24
    blinkTimerCounter = 0;
    1548:	10 92 cb 02 	sts	0x02CB, r1
    154c:	10 92 cc 02 	sts	0x02CC, r1
    1550:	10 92 cd 02 	sts	0x02CD, r1
    1554:	10 92 ce 02 	sts	0x02CE, r1
    sei();
    1558:	78 94       	sei
    155a:	08 95       	ret

0000155c <_ZN5Board21setLEDTransitionSpeedEh>:
}

void Board::setLEDTransitionSpeed(uint8_t transitionSteps) {

    //reset transition counter
    cli();
    155c:	f8 94       	cli
    155e:	ef ec       	ldi	r30, 0xCF	; 207
    1560:	f2 e0       	ldi	r31, 0x02	; 2
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	92 e0       	ldi	r25, 0x02	; 2
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)
        transitionCounter[i] = 0;
    1566:	11 92       	st	Z+, r1

void Board::setLEDTransitionSpeed(uint8_t transitionSteps) {

    //reset transition counter
    cli();
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)
    1568:	e8 17       	cp	r30, r24
    156a:	f9 07       	cpc	r31, r25
    156c:	e1 f7       	brne	.-8      	; 0x1566 <_ZN5Board21setLEDTransitionSpeedEh+0xa>
        transitionCounter[i] = 0;
    sei();
    156e:	78 94       	sei

    pwmSteps = transitionSteps;
    1570:	60 93 31 03 	sts	0x0331, r22
    1574:	08 95       	ret

00001576 <_ZN5Board16ledBlinkingStartEv>:

}

void Board::ledBlinkingStart() {

    if (!blinkEnabled)  {
    1576:	80 91 32 03 	lds	r24, 0x0332
    157a:	81 11       	cpse	r24, r1
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <_ZN5Board16ledBlinkingStartEv+0x22>

        blinkEnabled = true;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 32 03 	sts	0x0332, r24
        blinkState = true;
    1584:	80 93 00 01 	sts	0x0100, r24
        blinkTimerCounter = 0;
    1588:	10 92 cb 02 	sts	0x02CB, r1
    158c:	10 92 cc 02 	sts	0x02CC, r1
    1590:	10 92 cd 02 	sts	0x02CD, r1
    1594:	10 92 ce 02 	sts	0x02CE, r1
    1598:	08 95       	ret

0000159a <_ZN5Board15ledBlinkingStopEv>:

}

void Board::ledBlinkingStop()   {

    blinkState = true;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 00 01 	sts	0x0100, r24
    cli();
    15a0:	f8 94       	cli
    blinkTimerCounter = 0;
    15a2:	10 92 cb 02 	sts	0x02CB, r1
    15a6:	10 92 cc 02 	sts	0x02CC, r1
    15aa:	10 92 cd 02 	sts	0x02CD, r1
    15ae:	10 92 ce 02 	sts	0x02CE, r1
    sei();
    15b2:	78 94       	sei
    blinkEnabled = false;
    15b4:	10 92 32 03 	sts	0x0332, r1
    15b8:	08 95       	ret

000015ba <_ZN5Board14checkBlinkLEDsEv>:
    state = blinkEnabled;
    return state;

}

void Board::checkBlinkLEDs() {
    15ba:	ac 01       	movw	r20, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    15bc:	90 91 01 03 	lds	r25, 0x0301
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    15c0:	91 fd       	sbrc	r25, 1
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <_ZN5Board14checkBlinkLEDsEv+0x30>
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	30 e0       	ldi	r19, 0x00	; 0
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    15c8:	f9 01       	movw	r30, r18
    15ca:	ff 27       	eor	r31, r31
    15cc:	ef 5f       	subi	r30, 0xFF	; 255
    15ce:	fc 4f       	sbci	r31, 0xFC	; 252
    15d0:	90 81       	ld	r25, Z
    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        ledState = getLEDstate(i);

        if (bitRead(ledState, LED_BLINK_ON_BIT)) {
    15d2:	91 fd       	sbrc	r25, 1
    15d4:	0a c0       	rjmp	.+20     	; 0x15ea <_ZN5Board14checkBlinkLEDsEv+0x30>

    bool _blinkEnabled = false;
    uint8_t ledState;

    //if any LED is blinking, set timerState to true and exit the loop
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    15d6:	2f 5f       	subi	r18, 0xFF	; 255
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	20 33       	cpi	r18, 0x30	; 48
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f7       	brne	.-24     	; 0x15c8 <_ZN5Board14checkBlinkLEDsEv+0xe>
    }

    if (_blinkEnabled)  ledBlinkingStart();

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {
    15e0:	80 91 32 03 	lds	r24, 0x0332
    15e4:	81 11       	cpse	r24, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <_ZN5Board14checkBlinkLEDsEv+0x38>
    15e8:	08 95       	ret

        }

    }

    if (_blinkEnabled)  ledBlinkingStart();
    15ea:	ca 01       	movw	r24, r20
    15ec:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN5Board16ledBlinkingStartEv>
    15f0:	08 95       	ret

    //don't bother reseting variables if blinking is already disabled
    else    if (!_blinkEnabled && ledBlinkingActive()) {

        //reset blinkState to default value
        ledBlinkingStop();
    15f2:	ca 01       	movw	r24, r20
    15f4:	0e 94 cd 0a 	call	0x159a	; 0x159a <_ZN5Board15ledBlinkingStopEv>
    15f8:	08 95       	ret

000015fa <_ZN5Board9handleLEDEh8ledColorb7ledType>:
    return column + NUMBER_OF_LED_COLUMNS*row;

}


void Board::handleLED(uint8_t ledNumber, ledColor color, bool blinkMode, ledType type) {
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xe>
    1608:	00 d0       	rcall	.+0      	; 0x160a <_ZN5Board9handleLEDEh8ledColorb7ledType+0x10>
    160a:	00 d0       	rcall	.+0      	; 0x160c <_ZN5Board9handleLEDEh8ledColorb7ledType+0x12>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62

    uint8_t currentState[3];
    bool newLEDstate[3];
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
    1610:	48 30       	cpi	r20, 0x08	; 8
    1612:	09 f0       	breq	.+2      	; 0x1616 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x1c>
    1614:	8f c0       	rjmp	.+286    	; 0x1734 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x13a>
    1616:	01 30       	cpi	r16, 0x01	; 1
    1618:	09 f0       	breq	.+2      	; 0x161c <_ZN5Board9handleLEDEh8ledColorb7ledType+0x22>
    161a:	8c c0       	rjmp	.+280    	; 0x1734 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x13a>
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    161c:	e6 2f       	mov	r30, r22
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	ef 5f       	subi	r30, 0xFF	; 255
    1622:	fc 4f       	sbci	r31, 0xFC	; 252
    1624:	80 81       	ld	r24, Z

    switch(type)    {

        case singleLED:
        loops = 1;
        currentState[0] = getLEDstate(ledNumber);
    1626:	8c 83       	std	Y+4, r24	; 0x04
        newLEDstate[0] = (color != colorOff);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	41 11       	cpse	r20, r1
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x36>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	89 83       	std	Y+1, r24	; 0x01
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {

        case singleLED:
        loops = 1;
    1632:	01 e0       	ldi	r16, 0x01	; 1
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;
    1634:	86 c0       	rjmp	.+268    	; 0x1742 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x148>
}

inline uint8_t getRGBfirstID(uint8_t rgbID)    {

    //get first RGB LED address (out of three)
    uint8_t column = rgbID % NUMBER_OF_LED_COLUMNS;
    1636:	86 2f       	mov	r24, r22
    1638:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (rgbID/NUMBER_OF_BUTTON_COLUMNS)*3;
    163a:	66 95       	lsr	r22
    163c:	66 95       	lsr	r22
    163e:	66 95       	lsr	r22

    return column + NUMBER_OF_LED_COLUMNS*row;
    1640:	98 e1       	ldi	r25, 0x18	; 24
    1642:	69 9f       	mul	r22, r25
    1644:	80 0d       	add	r24, r0
    1646:	11 24       	eor	r1, r1
    1648:	68 2f       	mov	r22, r24
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    164a:	e8 2f       	mov	r30, r24
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ef 5f       	subi	r30, 0xFF	; 255
    1650:	fc 4f       	sbci	r31, 0xFC	; 252
    1652:	80 81       	ld	r24, Z
        break;

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
    1654:	8c 83       	std	Y+4, r24	; 0x04
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    1656:	e8 e0       	ldi	r30, 0x08	; 8
    1658:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	ef 5f       	subi	r30, 0xFF	; 255
    165e:	fc 4f       	sbci	r31, 0xFC	; 252
    1660:	80 81       	ld	r24, Z

        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
    1662:	8d 83       	std	Y+5, r24	; 0x05
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    1664:	e0 e1       	ldi	r30, 0x10	; 16
    1666:	e6 0f       	add	r30, r22
}

uint8_t Board::getLEDstate(uint8_t ledNumber)   {

    uint8_t returnValue;
    returnValue = ledState[ledNumber];
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	ef 5f       	subi	r30, 0xFF	; 255
    166c:	fc 4f       	sbci	r31, 0xFC	; 252
    166e:	80 81       	ld	r24, Z
        case rgbLED:
        loops = 3;
        ledNumber = getRGBfirstID(ledNumber);
        currentState[0] = getLEDstate(ledNumber);
        currentState[1] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*1);
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);
    1670:	8e 83       	std	Y+6, r24	; 0x06

        newLEDstate[0] = rgbColors[color][0];
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	fa 01       	movw	r30, r20
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	e4 0f       	add	r30, r20
    167c:	f5 1f       	adc	r31, r21
    167e:	ef 5e       	subi	r30, 0xEF	; 239
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 81       	ld	r25, Z
    1686:	91 11       	cpse	r25, r1
    1688:	01 c0       	rjmp	.+2      	; 0x168c <_ZN5Board9handleLEDEh8ledColorb7ledType+0x92>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	89 83       	std	Y+1, r24	; 0x01
        newLEDstate[1] = rgbColors[color][1];
    168e:	fa 01       	movw	r30, r20
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	e4 0f       	add	r30, r20
    1696:	f5 1f       	adc	r31, r21
    1698:	ef 5e       	subi	r30, 0xEF	; 239
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	91 11       	cpse	r25, r1
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xac>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	8a 83       	std	Y+2, r24	; 0x02
        newLEDstate[2] = rgbColors[color][2];
    16a8:	fa 01       	movw	r30, r20
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	4e 0f       	add	r20, r30
    16b0:	5f 1f       	adc	r21, r31
    16b2:	fa 01       	movw	r30, r20
    16b4:	ef 5e       	subi	r30, 0xEF	; 239
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	92 81       	ldd	r25, Z+2	; 0x02
    16bc:	91 11       	cpse	r25, r1
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xc8>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	8b 83       	std	Y+3, r24	; 0x03
        currentState[0] = getLEDstate(ledNumber);
        newLEDstate[0] = (color != colorOff);
        break;

        case rgbLED:
        loops = 3;
    16c4:	03 e0       	ldi	r16, 0x03	; 3
        currentState[2] = getLEDstate(ledNumber+NUMBER_OF_LED_COLUMNS*2);

        newLEDstate[0] = rgbColors[color][0];
        newLEDstate[1] = rgbColors[color][1];
        newLEDstate[2] = rgbColors[color][2];
        break;
    16c6:	3d c0       	rjmp	.+122    	; 0x1742 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x148>

    }

    for (int i=0; i<loops; i++) {
    16c8:	01 e0       	ldi	r16, 0x01	; 1
    16ca:	10 e0       	ldi	r17, 0x00	; 0
    16cc:	de 01       	movw	r26, r28
    16ce:	14 96       	adiw	r26, 0x04	; 4
    16d0:	ae 01       	movw	r20, r28
    16d2:	4f 5f       	subi	r20, 0xFF	; 255
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255

        ledNumber += 8*(bool)i;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	68 94       	set
    16de:	ff 24       	eor	r15, r15
    16e0:	f3 f8       	bld	r15, 3
    16e2:	e1 2c       	mov	r14, r1
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xf6>
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	11 f4       	brne	.+4      	; 0x16ee <_ZN5Board9handleLEDEh8ledColorb7ledType+0xf4>
    16ea:	3e 2d       	mov	r19, r14
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xf6>
    16ee:	3f 2d       	mov	r19, r15
    16f0:	63 0f       	add	r22, r19

        switch (newLEDstate[i]) {
    16f2:	fa 01       	movw	r30, r20
    16f4:	31 91       	ld	r19, Z+
    16f6:	af 01       	movw	r20, r30
    16f8:	31 30       	cpi	r19, 0x01	; 1
    16fa:	11 f0       	breq	.+4      	; 0x1700 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x106>

            case false:
            //turn off the led
            currentState[i] = 0;
    16fc:	1c 92       	st	X, r1
            break;
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <_ZN5Board9handleLEDEh8ledColorb7ledType+0x124>
    1700:	fd 01       	movw	r30, r26

            case true:
            //turn on the led
            //if led was already active, clear the on bits before setting new state
            if (bitRead(currentState[i], LED_ACTIVE_BIT))
    1702:	3c 91       	ld	r19, X
    1704:	32 fd       	sbrc	r19, 2
                currentState[i] = 0;
    1706:	1c 92       	st	X, r1

            bitWrite(currentState[i], LED_ACTIVE_BIT, 1);
    1708:	30 81       	ld	r19, Z
    170a:	73 2f       	mov	r23, r19
    170c:	74 60       	ori	r23, 0x04	; 4
    170e:	70 83       	st	Z, r23
            if (blinkMode)  {
    1710:	22 23       	and	r18, r18
    1712:	19 f0       	breq	.+6      	; 0x171a <_ZN5Board9handleLEDEh8ledColorb7ledType+0x120>

                bitWrite(currentState[i], LED_BLINK_ON_BIT, 1);
                //this will turn the led immediately no matter how little time it's
                //going to blink first time
                bitWrite(currentState[i], LED_BLINK_STATE_BIT, 1);
    1714:	3e 60       	ori	r19, 0x0E	; 14
    1716:	30 83       	st	Z, r19
    1718:	02 c0       	rjmp	.+4      	; 0x171e <_ZN5Board9handleLEDEh8ledColorb7ledType+0x124>

            }   else bitWrite(currentState[i], LED_CONSTANT_ON_BIT, 1);
    171a:	35 60       	ori	r19, 0x05	; 5
    171c:	30 83       	st	Z, r19
            break;

        }   ledState[ledNumber] = currentState[i];
    171e:	e6 2f       	mov	r30, r22
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	3d 91       	ld	r19, X+
    1724:	ef 5f       	subi	r30, 0xFF	; 255
    1726:	fc 4f       	sbci	r31, 0xFC	; 252
    1728:	30 83       	st	Z, r19
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	80 17       	cp	r24, r16
    172e:	91 07       	cpc	r25, r17
    1730:	d4 f2       	brlt	.-76     	; 0x16e6 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xec>
    1732:	09 c0       	rjmp	.+18     	; 0x1746 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x14c>
    uint8_t loops = 1;

    if ((color == colorOnDefault) && (type == rgbLED))
        type = singleLED; //this is a mistake, handle led in single mode instead

    switch(type)    {
    1734:	00 23       	and	r16, r16
    1736:	09 f4       	brne	.+2      	; 0x173a <_ZN5Board9handleLEDEh8ledColorb7ledType+0x140>
    1738:	71 cf       	rjmp	.-286    	; 0x161c <_ZN5Board9handleLEDEh8ledColorb7ledType+0x22>
    173a:	01 30       	cpi	r16, 0x01	; 1
    173c:	09 f4       	brne	.+2      	; 0x1740 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x146>
    173e:	7b cf       	rjmp	.-266    	; 0x1636 <_ZN5Board9handleLEDEh8ledColorb7ledType+0x3c>
    1740:	c3 cf       	rjmp	.-122    	; 0x16c8 <_ZN5Board9handleLEDEh8ledColorb7ledType+0xce>
        newLEDstate[2] = rgbColors[color][2];
        break;

    }

    for (int i=0; i<loops; i++) {
    1742:	10 e0       	ldi	r17, 0x00	; 0
    1744:	c3 cf       	rjmp	.-122    	; 0x16cc <_ZN5Board9handleLEDEh8ledColorb7ledType+0xd2>

        }   ledState[ledNumber] = currentState[i];

    }

}
    1746:	26 96       	adiw	r28, 0x06	; 6
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	08 95       	ret

00001760 <_ZN5Board11setLEDstateEh8ledColorb>:

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;

}

void Board::setLEDstate(uint8_t ledNumber, ledColor color, bool blinkMode)   {
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ec 01       	movw	r28, r24
    1770:	e6 2e       	mov	r14, r22
    1772:	f4 2e       	mov	r15, r20
    1774:	d2 2e       	mov	r13, r18

//LEDs

inline uint8_t getRGBIDFromLEDID(uint8_t ledID) {

    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;
    1776:	96 2f       	mov	r25, r22
    1778:	96 95       	lsr	r25
    177a:	96 95       	lsr	r25
    177c:	96 95       	lsr	r25

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    177e:	eb ea       	ldi	r30, 0xAB	; 171
    1780:	9e 9f       	mul	r25, r30
    1782:	e1 2d       	mov	r30, r1
    1784:	11 24       	eor	r1, r1
    1786:	e6 95       	lsr	r30
    1788:	8e 2f       	mov	r24, r30
    178a:	88 0f       	add	r24, r24
    row -= mod;
    178c:	e8 0f       	add	r30, r24

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	cf 01       	movw	r24, r30
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	0e 94 02 2b 	call	0x5604	; 0x5604 <__divmodhi4>
    uint8_t row = ledID/NUMBER_OF_LED_COLUMNS;

    uint8_t mod = row%3;    //RGB LED = 3 normal LEDs
    row -= mod;

    uint8_t column = ledID % NUMBER_OF_BUTTON_COLUMNS;
    17a6:	1e 2d       	mov	r17, r14
    17a8:	17 70       	andi	r17, 0x07	; 7

    return (row*NUMBER_OF_LED_COLUMNS)/3 + column;
    17aa:	16 0f       	add	r17, r22
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    17ac:	20 91 27 02 	lds	r18, 0x0227
    17b0:	30 91 28 02 	lds	r19, 0x0228
    17b4:	80 91 1f 02 	lds	r24, 0x021F
    17b8:	90 91 20 02 	lds	r25, 0x0220
    17bc:	82 0f       	add	r24, r18
    17be:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    17c0:	20 91 36 02 	lds	r18, 0x0236
    17c4:	22 23       	and	r18, r18
    17c6:	a1 f0       	breq	.+40     	; 0x17f0 <_ZN5Board11setLEDstateEh8ledColorb+0x90>
    17c8:	21 30       	cpi	r18, 0x01	; 1
    17ca:	b9 f4       	brne	.+46     	; 0x17fa <_ZN5Board11setLEDstateEh8ledColorb+0x9a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    17cc:	21 2f       	mov	r18, r17
    17ce:	26 95       	lsr	r18
    17d0:	26 95       	lsr	r18
    17d2:	26 95       	lsr	r18
    17d4:	82 0f       	add	r24, r18
    17d6:	91 1d       	adc	r25, r1
    17d8:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	21 2f       	mov	r18, r17
    17e0:	27 70       	andi	r18, 0x07	; 7
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <_ZN5Board11setLEDstateEh8ledColorb+0x88>
    17e4:	95 95       	asr	r25
    17e6:	87 95       	ror	r24
    17e8:	2a 95       	dec	r18
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <_ZN5Board11setLEDstateEh8ledColorb+0x84>
    17ec:	81 70       	andi	r24, 0x01	; 1
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <_ZN5Board11setLEDstateEh8ledColorb+0x9c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    17f0:	81 0f       	add	r24, r17
    17f2:	91 1d       	adc	r25, r1
    17f4:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <_ZN5Board11setLEDstateEh8ledColorb+0x9c>
            break;

        }   return 0;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
void Board::setLEDstate(uint8_t ledNumber, ledColor color, bool blinkMode)   {

    uint8_t rgbID = getRGBIDFromLEDID(ledNumber);
    bool rgbEnabled = configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, rgbID);

    if (!rgbEnabled)    {
    17fc:	81 11       	cpse	r24, r1
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <_ZN5Board11setLEDstateEh8ledColorb+0xba>

        if (color != colorOff)
    1800:	ff 20       	and	r15, r15
    1802:	19 f0       	breq	.+6      	; 0x180a <_ZN5Board11setLEDstateEh8ledColorb+0xaa>
            color = colorOnDefault;
    1804:	68 94       	set
    1806:	ff 24       	eor	r15, r15
    1808:	f3 f8       	bld	r15, 3
        handleLED(ledNumber, color, blinkMode, singleLED);
    180a:	00 e0       	ldi	r16, 0x00	; 0
    180c:	2d 2d       	mov	r18, r13
    180e:	4f 2d       	mov	r20, r15
    1810:	6e 2d       	mov	r22, r14
    1812:	ce 01       	movw	r24, r28
    1814:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN5Board9handleLEDEh8ledColorb7ledType>
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <_ZN5Board11setLEDstateEh8ledColorb+0xc8>

    }   else handleLED(rgbID, color, blinkMode, rgbLED);
    181a:	01 e0       	ldi	r16, 0x01	; 1
    181c:	2d 2d       	mov	r18, r13
    181e:	4f 2d       	mov	r20, r15
    1820:	61 2f       	mov	r22, r17
    1822:	ce 01       	movw	r24, r28
    1824:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN5Board9handleLEDEh8ledColorb7ledType>

    if (blinkMode && (color != colorOff)) ledBlinkingStart();
    1828:	dd 20       	and	r13, r13
    182a:	31 f0       	breq	.+12     	; 0x1838 <_ZN5Board11setLEDstateEh8ledColorb+0xd8>
    182c:	ff 20       	and	r15, r15
    182e:	21 f0       	breq	.+8      	; 0x1838 <_ZN5Board11setLEDstateEh8ledColorb+0xd8>
    1830:	ce 01       	movw	r24, r28
    1832:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN5Board16ledBlinkingStartEv>
    1836:	03 c0       	rjmp	.+6      	; 0x183e <_ZN5Board11setLEDstateEh8ledColorb+0xde>
    else    checkBlinkLEDs();
    1838:	ce 01       	movw	r24, r28
    183a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN5Board14checkBlinkLEDsEv>

}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	08 95       	ret

0000184e <_ZN5Board19analogDataAvailableEv>:
//analog

bool Board::analogDataAvailable() {

    bool state;
    state = _analogDataAvailable;
    184e:	80 91 ca 02 	lds	r24, 0x02CA
    if (state) {
    1852:	88 23       	and	r24, r24
    1854:	b9 f0       	breq	.+46     	; 0x1884 <_ZN5Board19analogDataAvailableEv+0x36>
    1856:	a7 e4       	ldi	r26, 0x47	; 71
    1858:	b2 e0       	ldi	r27, 0x02	; 2
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
            analogBufferCopy[i] = analogBuffer[i];
    185e:	fc 01       	movw	r30, r24
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	e9 57       	subi	r30, 0x79	; 121
    1866:	fd 4f       	sbci	r31, 0xFD	; 253
    1868:	20 81       	ld	r18, Z
    186a:	31 81       	ldd	r19, Z+1	; 0x01
    186c:	2d 93       	st	X+, r18
    186e:	3d 93       	st	X+, r19
    bool state;
    state = _analogDataAvailable;
    if (state) {

        //no cli/sei needed since adc conversion is stopped at the moment
        for (int i=0; i<ANALOG_BUFFER_SIZE; i++)
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	80 32       	cpi	r24, 0x20	; 32
    1874:	91 05       	cpc	r25, r1
    1876:	99 f7       	brne	.-26     	; 0x185e <_ZN5Board19analogDataAvailableEv+0x10>
            analogBufferCopy[i] = analogBuffer[i];

        _analogDataAvailable = false;
    1878:	10 92 ca 02 	sts	0x02CA, r1
        adcDelayCounter = 0;
    187c:	10 92 46 02 	sts	0x0246, r1
        return true;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	08 95       	ret

    } return false;
    1884:	80 e0       	ldi	r24, 0x00	; 0

}
    1886:	08 95       	ret

00001888 <_ZN5Board14getAnalogValueEh>:

int16_t Board::getAnalogValue(uint8_t analogID) {

    return analogBufferCopy[analogID];
    1888:	e6 2f       	mov	r30, r22
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	e9 5b       	subi	r30, 0xB9	; 185
    1892:	fd 4f       	sbci	r31, 0xFD	; 253

}
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	08 95       	ret

0000189a <_ZN5Board15getEncoderStateEh>:
}


//encoders

encoderPosition Board::getEncoderState(uint8_t encoderNumber)  {
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	e6 2f       	mov	r30, r22

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    18a0:	86 2f       	mov	r24, r22
    18a2:	87 70       	andi	r24, 0x07	; 7
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    18a4:	07 e0       	ldi	r16, 0x07	; 7
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	08 1b       	sub	r16, r24
    18aa:	11 09       	sbc	r17, r1
    18ac:	00 0f       	add	r16, r16
    18ae:	00 0f       	add	r16, r16
    18b0:	00 0f       	add	r16, r16
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    18b2:	20 91 98 03 	lds	r18, 0x0398
    18b6:	30 91 99 03 	lds	r19, 0x0399
    18ba:	40 91 9a 03 	lds	r20, 0x039A
    18be:	50 91 9b 03 	lds	r21, 0x039B
    18c2:	60 91 9c 03 	lds	r22, 0x039C
    18c6:	70 91 9d 03 	lds	r23, 0x039D
    18ca:	80 91 9e 03 	lds	r24, 0x039E
    18ce:	90 91 9f 03 	lds	r25, 0x039F
    18d2:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__lshrdi3>
    pairState = ((pairState >> row) & 0x03);
    18d6:	30 e0       	ldi	r19, 0x00	; 0
//encoders

encoderPosition Board::getEncoderState(uint8_t encoderNumber)  {

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    18d8:	8e 2f       	mov	r24, r30
    18da:	86 95       	lsr	r24
    18dc:	86 95       	lsr	r24
    18de:	86 95       	lsr	r24
    18e0:	88 0f       	add	r24, r24
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <_ZN5Board15getEncoderStateEh+0x4e>
    18e4:	35 95       	asr	r19
    18e6:	27 95       	ror	r18
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <_ZN5Board15getEncoderStateEh+0x4a>

inline encoderPosition readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    18ec:	6e 2f       	mov	r22, r30
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	fb 01       	movw	r30, r22
    18f2:	ee 0f       	add	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	ea 5c       	subi	r30, 0xCA	; 202
    18f8:	fc 4f       	sbci	r31, 0xFC	; 252
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01

    uint8_t column = encoderNumber % NUMBER_OF_BUTTON_COLUMNS;
    uint8_t row  = (encoderNumber/NUMBER_OF_BUTTON_COLUMNS)*2;
    uint8_t shiftAmount = ((NUMBER_OF_BUTTON_COLUMNS-1)*8) - column*8;
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);
    18fe:	23 70       	andi	r18, 0x03	; 3

inline encoderPosition readEncoder(uint8_t encoderID, uint8_t pairState)  {

    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);
    1900:	38 2f       	mov	r19, r24
    1902:	33 0f       	add	r19, r19
    1904:	33 0f       	add	r19, r19
    1906:	3f 70       	andi	r19, 0x0F	; 15
    1908:	23 2b       	or	r18, r19

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    190a:	30 e0       	ldi	r19, 0x00	; 0
    //add new data
    uint8_t newPairData = 0;
    newPairData |= (((encoderData[encoderID] << 2) & 0x000F) | (uint16_t)pairState);

    //remove old data
    encoderData[encoderID] &= ENCODER_CLEAR_TEMP_STATE_MASK;
    190c:	80 7f       	andi	r24, 0xF0	; 240

    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;
    190e:	82 2b       	or	r24, r18
    1910:	93 2b       	or	r25, r19
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24

    int8_t encRead = encoderLookUpTable[newPairData];
    1916:	f9 01       	movw	r30, r18
    1918:	ef 5f       	subi	r30, 0xFF	; 255
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	20 81       	ld	r18, Z

    if (!encRead) return encStopped;
    191e:	22 23       	and	r18, r18
    1920:	09 f4       	brne	.+2      	; 0x1924 <_ZN5Board15getEncoderStateEh+0x8a>
    1922:	45 c0       	rjmp	.+138    	; 0x19ae <_ZN5Board15getEncoderStateEh+0x114>

    bool newEncoderDirection = encRead > 0;
    1924:	31 e0       	ldi	r19, 0x01	; 1
    1926:	12 16       	cp	r1, r18
    1928:	0c f0       	brlt	.+2      	; 0x192c <_ZN5Board15getEncoderStateEh+0x92>
    192a:	30 e0       	ldi	r19, 0x00	; 0
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    192c:	ac 01       	movw	r20, r24
    192e:	52 95       	swap	r21
    1930:	42 95       	swap	r20
    1932:	4f 70       	andi	r20, 0x0F	; 15
    1934:	45 27       	eor	r20, r21
    1936:	5f 70       	andi	r21, 0x0F	; 15
    1938:	45 27       	eor	r20, r21
    193a:	4f 70       	andi	r20, 0x0F	; 15
    currentPulses += encRead;
    193c:	24 0f       	add	r18, r20
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    193e:	e0 e1       	ldi	r30, 0x10	; 16
    1940:	2e 02       	muls	r18, r30
    1942:	a0 01       	movw	r20, r0
    1944:	11 24       	eor	r1, r1
    bool newEncoderDirection = encRead > 0;
    //get current number of pulses from encoderData
    int8_t currentPulses = (encoderData[encoderID] >> 4) & 0x000F;
    currentPulses += encRead;
    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    1946:	8f 70       	andi	r24, 0x0F	; 15
    //shift in new pulse count
    encoderData[encoderID] |= (uint16_t)(currentPulses << 4);
    1948:	84 2b       	or	r24, r20
    194a:	95 2b       	or	r25, r21
    194c:	fb 01       	movw	r30, r22
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	ea 5c       	subi	r30, 0xCA	; 202
    1954:	fc 4f       	sbci	r31, 0xFC	; 252
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    195a:	49 2f       	mov	r20, r25
    195c:	44 1f       	adc	r20, r20
    195e:	44 27       	eor	r20, r20
    1960:	44 1f       	adc	r20, r20
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);
    1962:	33 23       	and	r19, r19
    1964:	49 f0       	breq	.+18     	; 0x1978 <_ZN5Board15getEncoderStateEh+0xde>
    1966:	fb 01       	movw	r30, r22
    1968:	ee 0f       	add	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	ea 5c       	subi	r30, 0xCA	; 202
    196e:	fc 4f       	sbci	r31, 0xFC	; 252
    1970:	90 68       	ori	r25, 0x80	; 128
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	08 c0       	rjmp	.+16     	; 0x1988 <_ZN5Board15getEncoderStateEh+0xee>
    1978:	fb 01       	movw	r30, r22
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ea 5c       	subi	r30, 0xCA	; 202
    1980:	fc 4f       	sbci	r31, 0xFC	; 252
    1982:	9f 77       	andi	r25, 0x7F	; 127
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    1988:	34 13       	cpse	r19, r20
    198a:	13 c0       	rjmp	.+38     	; 0x19b2 <_ZN5Board15getEncoderStateEh+0x118>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    198c:	23 70       	andi	r18, 0x03	; 3
    198e:	99 f4       	brne	.+38     	; 0x19b6 <_ZN5Board15getEncoderStateEh+0x11c>

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	fb 01       	movw	r30, r22
    1996:	ea 5c       	subi	r30, 0xCA	; 202
    1998:	fc 4f       	sbci	r31, 0xFC	; 252

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    if (currentPulses % PULSES_PER_STEP) return encStopped;

    //clear current pulses
    encoderData[encoderID] &= ENCODER_CLEAR_PULSES_MASK;
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	8f 70       	andi	r24, 0x0F	; 15

    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);
    19a0:	80 68       	ori	r24, 0x80	; 128
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    19a6:	31 11       	cpse	r19, r1
    19a8:	08 c0       	rjmp	.+16     	; 0x19ba <_ZN5Board15getEncoderStateEh+0x120>
    else return encMoveLeft;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	07 c0       	rjmp	.+14     	; 0x19bc <_ZN5Board15getEncoderStateEh+0x122>
    //shift in new data
    encoderData[encoderID] |= (uint16_t)newPairData;

    int8_t encRead = encoderLookUpTable[newPairData];

    if (!encRead) return encStopped;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <_ZN5Board15getEncoderStateEh+0x122>
    //get last encoder direction
    bool lastEncoderDirection = bitRead(encoderData[encoderID], ENCODER_DIRECTION_BIT);
    //write new encoder direction
    bitWrite(encoderData[encoderID], ENCODER_DIRECTION_BIT, newEncoderDirection);

    if (lastEncoderDirection != newEncoderDirection) return encStopped;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <_ZN5Board15getEncoderStateEh+0x122>
    if (currentPulses % PULSES_PER_STEP) return encStopped;
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <_ZN5Board15getEncoderStateEh+0x122>
    //set default pulse count
    encoderData[encoderID] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);

    //clear current moving status
    //encoderData[encoderID] &= ENCODER_CLEAR_MOVING_STATUS_MASK;
    if (newEncoderDirection) return encMoveRight;
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    uint8_t pairState = inputMatrixBufferCopy >> shiftAmount;
    pairState = ((pairState >> row) & 0x03);

    return readEncoder(encoderNumber, pairState);

}
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <_ZN5Board20encoderDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    19c2:	80 91 35 03 	lds	r24, 0x0335
    19c6:	88 23       	and	r24, r24
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <_ZN5Board20encoderDataAvailableEv+0x24>
    19ca:	80 91 34 03 	lds	r24, 0x0334
    19ce:	88 23       	and	r24, r24
    19d0:	51 f0       	breq	.+20     	; 0x19e6 <_ZN5Board20encoderDataAvailableEv+0x24>
    19d2:	80 91 33 03 	lds	r24, 0x0333
    19d6:	88 23       	and	r24, r24
    19d8:	51 f0       	breq	.+20     	; 0x19ee <_ZN5Board20encoderDataAvailableEv+0x2c>

        dmBufferCopied = false;
    19da:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    19de:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    19e2:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    19e6:	80 91 33 03 	lds	r24, 0x0333
    19ea:	81 11       	cpse	r24, r1
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <_ZN5Board20encoderDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    19ee:	0e 94 bb 05 	call	0xb76	; 0xb76 <_Z21copyInputMatrixBufferv>
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <_ZN5Board20encoderDataAvailableEv+0x34>

bool Board::encoderDataAvailable()  {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    19f4:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    encodersProcessed = true;
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	90 93 34 03 	sts	0x0334, r25
    return returnValue;

}
    19fc:	08 95       	ret

000019fe <_ZN5Board19buttonDataAvailableEv>:

}

inline void checkInputMatrixBufferCopy()    {

    if ((buttonsProcessed == true) && (encodersProcessed == true) && (dmBufferCopied == true))  {
    19fe:	80 91 35 03 	lds	r24, 0x0335
    1a02:	88 23       	and	r24, r24
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <_ZN5Board19buttonDataAvailableEv+0x24>
    1a06:	80 91 34 03 	lds	r24, 0x0334
    1a0a:	88 23       	and	r24, r24
    1a0c:	51 f0       	breq	.+20     	; 0x1a22 <_ZN5Board19buttonDataAvailableEv+0x24>
    1a0e:	80 91 33 03 	lds	r24, 0x0333
    1a12:	88 23       	and	r24, r24
    1a14:	51 f0       	breq	.+20     	; 0x1a2a <_ZN5Board19buttonDataAvailableEv+0x2c>

        dmBufferCopied = false;
    1a16:	10 92 33 03 	sts	0x0333, r1
        buttonsProcessed = false;
    1a1a:	10 92 35 03 	sts	0x0335, r1
        encodersProcessed = false;
    1a1e:	10 92 34 03 	sts	0x0334, r1

    bool returnValue = true;
    bool _dmBufferCopied;
    _dmBufferCopied = dmBufferCopied;

    if (!_dmBufferCopied)    {   //buffer isn't copied
    1a22:	80 91 33 03 	lds	r24, 0x0333
    1a26:	81 11       	cpse	r24, r1
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <_ZN5Board19buttonDataAvailableEv+0x32>

        returnValue = copyInputMatrixBuffer();
    1a2a:	0e 94 bb 05 	call	0xb76	; 0xb76 <_Z21copyInputMatrixBufferv>
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <_ZN5Board19buttonDataAvailableEv+0x34>

bool Board::buttonDataAvailable()   {

    checkInputMatrixBufferCopy();

    bool returnValue = true;
    1a30:	81 e0       	ldi	r24, 0x01	; 1

        returnValue = copyInputMatrixBuffer();

    }

    buttonsProcessed = true;
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	90 93 35 03 	sts	0x0335, r25
    return returnValue;

}
    1a38:	08 95       	ret

00001a3a <_ZN5Board14getButtonStateEh>:

bool Board::getButtonState(uint8_t buttonIndex) {
    1a3a:	0f 93       	push	r16
    1a3c:	cf 93       	push	r28
    1a3e:	c6 2f       	mov	r28, r22

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    1a40:	06 2f       	mov	r16, r22
    1a42:	06 95       	lsr	r16
    1a44:	06 95       	lsr	r16
    1a46:	06 95       	lsr	r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    1a48:	00 ff       	sbrs	r16, 0
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <_ZN5Board14getButtonStateEh+0x18>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	80 0f       	add	r24, r16
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <_ZN5Board14getButtonStateEh+0x1a>

//inline functions

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    1a52:	80 2f       	mov	r24, r16
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a54:	28 e0       	ldi	r18, 0x08	; 8
    1a56:	82 9f       	mul	r24, r18
    1a58:	c0 01       	movw	r24, r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	95 95       	asr	r25
    1a5e:	87 95       	ror	r24

inline uint8_t getEncoderPairFromButtonIndex(uint8_t buttonIndex)   {

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    if (row%2) row -= 1;   //uneven row, get info from previous (even) row
    uint8_t column = buttonIndex % NUMBER_OF_BUTTON_COLUMNS;
    1a60:	6c 2f       	mov	r22, r28
    1a62:	67 70       	andi	r22, 0x07	; 7
    return (row*NUMBER_OF_BUTTON_COLUMNS)/2 + column;
    1a64:	68 0f       	add	r22, r24
}

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	97 e0       	ldi	r25, 0x07	; 7
    1a6a:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <_ZN8Encoders17getEncoderEnabledEh>
    1a6e:	81 11       	cpse	r24, r1
    1a70:	1c c0       	rjmp	.+56     	; 0x1aaa <_ZN5Board14getButtonStateEh+0x70>
        return false;   //button is member of encoder pair, return "not pressed" state

    uint8_t row = buttonIndex/NUMBER_OF_BUTTON_COLUMNS;
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    1a72:	c0 95       	com	r28
    1a74:	c7 70       	andi	r28, 0x07	; 7
    buttonIndex = column*8 + row;
    1a76:	cc 0f       	add	r28, r28
    1a78:	cc 0f       	add	r28, r28
    1a7a:	cc 0f       	add	r28, r28
    1a7c:	0c 0f       	add	r16, r28

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);
    1a7e:	20 91 98 03 	lds	r18, 0x0398
    1a82:	30 91 99 03 	lds	r19, 0x0399
    1a86:	40 91 9a 03 	lds	r20, 0x039A
    1a8a:	50 91 9b 03 	lds	r21, 0x039B
    1a8e:	60 91 9c 03 	lds	r22, 0x039C
    1a92:	70 91 9d 03 	lds	r23, 0x039D
    1a96:	80 91 9e 03 	lds	r24, 0x039E
    1a9a:	90 91 9f 03 	lds	r25, 0x039F
    1a9e:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__lshrdi3>
    1aa2:	82 2f       	mov	r24, r18
    1aa4:	80 95       	com	r24
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <_ZN5Board14getButtonStateEh+0x72>

bool Board::getButtonState(uint8_t buttonIndex) {

    uint8_t encoderPairIndex = getEncoderPairFromButtonIndex(buttonIndex);
    if (encoders.getEncoderEnabled(encoderPairIndex))
        return false;   //button is member of encoder pair, return "not pressed" state
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t column = (NUMBER_OF_BUTTON_COLUMNS-1) - buttonIndex % NUMBER_OF_BUTTON_COLUMNS; //invert column order
    buttonIndex = column*8 + row;

    return !((inputMatrixBufferCopy >> buttonIndex) & 0x01);

}
    1aac:	cf 91       	pop	r28
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <_ZN6HWmidi4initEhbb>:

    //default constructor

}

void HWmidi::init(uint8_t inChannel, bool inputEnabled, bool outputEnabled) {
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	ec 01       	movw	r28, r24
    1abc:	16 2f       	mov	r17, r22

    USE_SERIAL_PORT.begin(31250, inputEnabled, outputEnabled);
    1abe:	02 2f       	mov	r16, r18
    1ac0:	24 2f       	mov	r18, r20
    1ac2:	42 e1       	ldi	r20, 0x12	; 18
    1ac4:	5a e7       	ldi	r21, 0x7A	; 122
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	86 e6       	ldi	r24, 0x66	; 102
    1acc:	94 e0       	ldi	r25, 0x04	; 4
    1ace:	0e 94 88 14 	call	0x2910	; 0x2910 <_ZN4UART5beginEmbb>

    mInputChannel = inChannel;
    1ad2:	1e 83       	std	Y+6, r17	; 0x06

    mRunningStatus_TX = midiMessageInvalidType;
    1ad4:	1d 82       	std	Y+5, r1	; 0x05
    mRunningStatus_RX = midiMessageInvalidType;
    1ad6:	1c 82       	std	Y+4, r1	; 0x04

    mPendingMessageIndex            = 0;
    1ad8:	1d 86       	std	Y+13, r1	; 0x0d
    1ada:	1c 86       	std	Y+12, r1	; 0x0c
    mPendingMessageExpectedLenght   = 0;
    1adc:	1b 86       	std	Y+11, r1	; 0x0b
    1ade:	1a 86       	std	Y+10, r1	; 0x0a

    mMessage.valid      = false;
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ee 59       	subi	r30, 0x9E	; 158
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	10 82       	st	Z, r1
    mMessage.type       = midiMessageInvalidType;
    1ae8:	1f 86       	std	Y+15, r1	; 0x0f
    mMessage.channel    = 0;
    1aea:	1e 86       	std	Y+14, r1	; 0x0e
    mMessage.data1      = 0;
    1aec:	18 8a       	std	Y+16, r1	; 0x10
    mMessage.data2      = 0;
    1aee:	19 8a       	std	Y+17, r1	; 0x11

    mThruFilterMode     = Off;
    1af0:	19 82       	std	Y+1, r1	; 0x01
    mThruActivated      = false;
    1af2:	18 82       	st	Y, r1
    useRunningStatus    = false;
    1af4:	1a 82       	std	Y+2, r1	; 0x02
    use1byteParsing     = true;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	8b 83       	std	Y+3, r24	; 0x03

}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <_ZN6HWmidi9sendSysExEjPKhb>:
    const unsigned bend = inPitchValue - MIDI_PITCHBEND_MIN;
    send(midiMessagePitchBend, (bend & 0x7f), (bend >> 7) & 0x7f, inChannel);

}

void HWmidi::sendSysEx(uint16_t inLength, const uint8_t* inArray, bool inArrayContainsBoundaries)   {
    1b04:	af 92       	push	r10
    1b06:	bf 92       	push	r11
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	5c 01       	movw	r10, r24
    1b18:	7b 01       	movw	r14, r22
    1b1a:	c4 2f       	mov	r28, r20
    1b1c:	d5 2f       	mov	r29, r21
    1b1e:	d2 2e       	mov	r13, r18
     //inArray:                     The byte array containing the data to send
     //inArrayContainsBoundaries:   When set to 'true', 0xf0 & 0xf7 bytes
                                    //(start & stop SysEx) will NOT be sent
                                    //(and therefore must be included in the array)

    if (!inArrayContainsBoundaries)
    1b20:	21 11       	cpse	r18, r1
    1b22:	24 c0       	rjmp	.+72     	; 0x1b6c <_ZN6HWmidi9sendSysExEjPKhb+0x68>
        USE_SERIAL_PORT.write(0xf0);
    1b24:	60 ef       	ldi	r22, 0xF0	; 240
    1b26:	86 e6       	ldi	r24, 0x66	; 102
    1b28:	94 e0       	ldi	r25, 0x04	; 4
    1b2a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    for (unsigned i = 0; i < inLength; ++i)
    1b2e:	e1 14       	cp	r14, r1
    1b30:	f1 04       	cpc	r15, r1
    1b32:	89 f0       	breq	.+34     	; 0x1b56 <_ZN6HWmidi9sendSysExEjPKhb+0x52>
    1b34:	0c 2f       	mov	r16, r28
    1b36:	1d 2f       	mov	r17, r29
    const unsigned bend = inPitchValue - MIDI_PITCHBEND_MIN;
    send(midiMessagePitchBend, (bend & 0x7f), (bend >> 7) & 0x7f, inChannel);

}

void HWmidi::sendSysEx(uint16_t inLength, const uint8_t* inArray, bool inArrayContainsBoundaries)   {
    1b38:	c0 e0       	ldi	r28, 0x00	; 0
    1b3a:	d0 e0       	ldi	r29, 0x00	; 0

    if (!inArrayContainsBoundaries)
        USE_SERIAL_PORT.write(0xf0);

    for (unsigned i = 0; i < inLength; ++i)
        USE_SERIAL_PORT.write(inArray[i]);
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	61 91       	ld	r22, Z+
    1b40:	8f 01       	movw	r16, r30
    1b42:	86 e6       	ldi	r24, 0x66	; 102
    1b44:	94 e0       	ldi	r25, 0x04	; 4
    1b46:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
                                    //(and therefore must be included in the array)

    if (!inArrayContainsBoundaries)
        USE_SERIAL_PORT.write(0xf0);

    for (unsigned i = 0; i < inLength; ++i)
    1b4a:	21 96       	adiw	r28, 0x01	; 1
    1b4c:	ce 15       	cp	r28, r14
    1b4e:	df 05       	cpc	r29, r15
    1b50:	a8 f3       	brcs	.-22     	; 0x1b3c <_ZN6HWmidi9sendSysExEjPKhb+0x38>
        USE_SERIAL_PORT.write(inArray[i]);

    if (!inArrayContainsBoundaries)
    1b52:	d1 10       	cpse	r13, r1
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <_ZN6HWmidi9sendSysExEjPKhb+0x5c>
        USE_SERIAL_PORT.write(0xf7);
    1b56:	67 ef       	ldi	r22, 0xF7	; 247
    1b58:	86 e6       	ldi	r24, 0x66	; 102
    1b5a:	94 e0       	ldi	r25, 0x04	; 4
    1b5c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    if (useRunningStatus)
    1b60:	f5 01       	movw	r30, r10
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	88 23       	and	r24, r24
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <_ZN6HWmidi9sendSysExEjPKhb+0x6e>
        mRunningStatus_TX = midiMessageInvalidType;
    1b68:	15 82       	std	Z+5, r1	; 0x05
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <_ZN6HWmidi9sendSysExEjPKhb+0x6e>
                                    //(and therefore must be included in the array)

    if (!inArrayContainsBoundaries)
        USE_SERIAL_PORT.write(0xf0);

    for (unsigned i = 0; i < inLength; ++i)
    1b6c:	67 2b       	or	r22, r23
    1b6e:	11 f7       	brne	.-60     	; 0x1b34 <_ZN6HWmidi9sendSysExEjPKhb+0x30>
    1b70:	f7 cf       	rjmp	.-18     	; 0x1b60 <_ZN6HWmidi9sendSysExEjPKhb+0x5c>
        USE_SERIAL_PORT.write(0xf7);

    if (useRunningStatus)
        mRunningStatus_TX = midiMessageInvalidType;

}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	bf 90       	pop	r11
    1b82:	af 90       	pop	r10
    1b84:	08 95       	ret

00001b86 <_ZN6HWmidi24sendTimeCodeQuarterFrameEh>:
    const uint8_t data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    sendTimeCodeQuarterFrame(data);

}

void HWmidi::sendTimeCodeQuarterFrame(uint8_t inData)   {
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	16 2f       	mov	r17, r22

    //inData:   if you want to encode directly the nibbles in your program,
                //you can send the byte here.

    USE_SERIAL_PORT.write((uint8_t)midiMessageTimeCodeQuarterFrame);
    1b90:	61 ef       	ldi	r22, 0xF1	; 241
    1b92:	86 e6       	ldi	r24, 0x66	; 102
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    USE_SERIAL_PORT.write(inData);
    1b9a:	61 2f       	mov	r22, r17
    1b9c:	86 e6       	ldi	r24, 0x66	; 102
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    if (useRunningStatus)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	81 11       	cpse	r24, r1
        mRunningStatus_TX = midiMessageInvalidType;
    1ba8:	1d 82       	std	Y+5, r1	; 0x05

}
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	08 95       	ret

00001bb2 <_ZN6HWmidi24sendTimeCodeQuarterFrameEhh>:
void HWmidi::sendTimeCodeQuarterFrame(uint8_t inTypeNibble, uint8_t inValuesNibble) {

     //inTypeNibble     MTC type
     //inValuesNibble   MTC data

    const uint8_t data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    1bb2:	67 70       	andi	r22, 0x07	; 7
    1bb4:	50 e1       	ldi	r21, 0x10	; 16
    1bb6:	65 9f       	mul	r22, r21
    1bb8:	90 01       	movw	r18, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	64 2f       	mov	r22, r20
    1bbe:	6f 70       	andi	r22, 0x0F	; 15
    1bc0:	62 2b       	or	r22, r18
    sendTimeCodeQuarterFrame(data);
    1bc2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN6HWmidi24sendTimeCodeQuarterFrameEh>
    1bc6:	08 95       	ret

00001bc8 <_ZN6HWmidi16sendSongPositionEj>:
    if (useRunningStatus)
        mRunningStatus_TX = midiMessageInvalidType;

}

void HWmidi::sendSongPosition(uint16_t inBeats) {
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	eb 01       	movw	r28, r22

    //inBeats:  The number of beats since the start of the song

    USE_SERIAL_PORT.write((uint8_t)midiMessageSongPosition);
    1bd4:	62 ef       	ldi	r22, 0xF2	; 242
    1bd6:	86 e6       	ldi	r24, 0x66	; 102
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    USE_SERIAL_PORT.write(inBeats & 0x7f);
    1bde:	6c 2f       	mov	r22, r28
    1be0:	6f 77       	andi	r22, 0x7F	; 127
    1be2:	86 e6       	ldi	r24, 0x66	; 102
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    USE_SERIAL_PORT.write((inBeats >> 7) & 0x7f);
    1bea:	cc 0f       	add	r28, r28
    1bec:	cd 2f       	mov	r28, r29
    1bee:	cc 1f       	adc	r28, r28
    1bf0:	dd 0b       	sbc	r29, r29
    1bf2:	d1 95       	neg	r29
    1bf4:	6c 2f       	mov	r22, r28
    1bf6:	6f 77       	andi	r22, 0x7F	; 127
    1bf8:	86 e6       	ldi	r24, 0x66	; 102
    1bfa:	94 e0       	ldi	r25, 0x04	; 4
    1bfc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    if (useRunningStatus)
    1c00:	f8 01       	movw	r30, r16
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	81 11       	cpse	r24, r1
        mRunningStatus_TX = midiMessageInvalidType;
    1c06:	15 82       	std	Z+5, r1	; 0x05

}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <_ZN6HWmidi14sendSongSelectEh>:

void HWmidi::sendSongSelect(uint8_t inSongNumber)   {
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	ec 01       	movw	r28, r24
    1c1a:	16 2f       	mov	r17, r22

    //inSongNumber: Wanted song number

    USE_SERIAL_PORT.write((uint8_t)midiMessageSongSelect);
    1c1c:	63 ef       	ldi	r22, 0xF3	; 243
    1c1e:	86 e6       	ldi	r24, 0x66	; 102
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    USE_SERIAL_PORT.write(inSongNumber & 0x7f);
    1c26:	61 2f       	mov	r22, r17
    1c28:	6f 77       	andi	r22, 0x7F	; 127
    1c2a:	86 e6       	ldi	r24, 0x66	; 102
    1c2c:	94 e0       	ldi	r25, 0x04	; 4
    1c2e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    if (useRunningStatus)
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	81 11       	cpse	r24, r1
        mRunningStatus_TX = midiMessageInvalidType;
    1c36:	1d 82       	std	Y+5, r1	; 0x05

}
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	08 95       	ret

00001c40 <_ZN6HWmidi12sendRealTimeE15midiMessageType>:

void HWmidi::sendRealTime(midiMessageType inType)   {
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	8c 01       	movw	r16, r24
    1c48:	c6 2f       	mov	r28, r22

     //inType:  The available Real Time types are:
                //Start, Stop, Continue, Clock, ActiveSensing and SystemReset
                //You can also send a Tune Request with this method

    switch (inType) {
    1c4a:	6d 3f       	cpi	r22, 0xFD	; 253
    1c4c:	38 f4       	brcc	.+14     	; 0x1c5c <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x1c>
    1c4e:	6a 3f       	cpi	r22, 0xFA	; 250
    1c50:	38 f4       	brcc	.+14     	; 0x1c60 <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x20>
    1c52:	66 3f       	cpi	r22, 0xF6	; 246
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x20>
    1c56:	68 3f       	cpi	r22, 0xF8	; 248
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x2a>
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x20>
    1c5c:	6e 3f       	cpi	r22, 0xFE	; 254
    1c5e:	28 f0       	brcs	.+10     	; 0x1c6a <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x2a>
        case midiMessageStart:
        case midiMessageStop:
        case midiMessageContinue:
        case midiMessageActiveSensing:
        case midiMessageSystemReset:
        USE_SERIAL_PORT.write((uint8_t)inType);
    1c60:	6c 2f       	mov	r22, r28
    1c62:	86 e6       	ldi	r24, 0x66	; 102
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

    //do not cancel Running Status for real-time messages as they can be
    //interleaved within any message
    //tuneRequest can be sent here, and as it is a System Common message,
    //it must reset Running Status
    if (useRunningStatus && inType == midiMessageTuneRequest)
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	88 23       	and	r24, r24
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x38>
    1c72:	c6 3f       	cpi	r28, 0xF6	; 246
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <_ZN6HWmidi12sendRealTimeE15midiMessageType+0x38>
        mRunningStatus_TX = midiMessageInvalidType;
    1c76:	15 82       	std	Z+5, r1	; 0x05

}
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	08 95       	ret

00001c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>:
    useRunningStatus    = false;
    use1byteParsing     = true;

}

void HWmidi::send(midiMessageType inType, uint8_t inData1, uint8_t inData2, uint8_t inChannel)  {
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    //inData1:      The first data byte
    //inData2:      The second data byte (if the message contains only 1 data byte, set this one to 0)
    //inChannel:    The output channel on which the message will be sent (values from 1 to 16)

    //test if channel is valid
    if (inChannel >= MIDI_CHANNEL_OFF  ||
    1c88:	01 50       	subi	r16, 0x01	; 1
    1c8a:	00 31       	cpi	r16, 0x10	; 16
    1c8c:	10 f4       	brcc	.+4      	; 0x1c92 <_ZN6HWmidi4sendE15midiMessageTypehhh+0x12>
        inChannel == MIDI_CHANNEL_OMNI ||
    1c8e:	66 23       	and	r22, r22
    1c90:	34 f0       	brlt	.+12     	; 0x1c9e <_ZN6HWmidi4sendE15midiMessageTypehhh+0x1e>
        inType < 0x80)  {

        if (useRunningStatus)
    1c92:	fc 01       	movw	r30, r24
    1c94:	22 81       	ldd	r18, Z+2	; 0x02
    1c96:	22 23       	and	r18, r18
    1c98:	81 f1       	breq	.+96     	; 0x1cfa <_ZN6HWmidi4sendE15midiMessageTypehhh+0x7a>
            mRunningStatus_TX = midiMessageInvalidType;
    1c9a:	15 82       	std	Z+5, r1	; 0x05
    1c9c:	2e c0       	rjmp	.+92     	; 0x1cfa <_ZN6HWmidi4sendE15midiMessageTypehhh+0x7a>
    1c9e:	12 2f       	mov	r17, r18
    1ca0:	c6 2f       	mov	r28, r22
    1ca2:	fc 01       	movw	r30, r24

        return; //don't send anything

    }

    if (inType <= midiMessagePitchBend) {
    1ca4:	61 3e       	cpi	r22, 0xE1	; 225
    1ca6:	28 f5       	brcc	.+74     	; 0x1cf2 <_ZN6HWmidi4sendE15midiMessageTypehhh+0x72>

        //channel messages

        //protection: remove MSBs on data
        inData1 &= 0x7f;
    1ca8:	d4 2f       	mov	r29, r20
    1caa:	df 77       	andi	r29, 0x7F	; 127

}

uint8_t HWmidi::getStatus(midiMessageType inType, uint8_t inChannel) const  {

    return ((uint8_t)inType | ((inChannel - 1) & 0x0f));
    1cac:	0f 70       	andi	r16, 0x0F	; 15
    1cae:	60 2f       	mov	r22, r16
    1cb0:	6c 2b       	or	r22, r28
        inData1 &= 0x7f;
        inData2 &= 0x7f;

        const uint8_t status = getStatus(inType, inChannel);

        if (useRunningStatus)   {
    1cb2:	22 81       	ldd	r18, Z+2	; 0x02
    1cb4:	22 23       	and	r18, r18
    1cb6:	49 f0       	breq	.+18     	; 0x1cca <_ZN6HWmidi4sendE15midiMessageTypehhh+0x4a>

            if (mRunningStatus_TX != status)    {
    1cb8:	25 81       	ldd	r18, Z+5	; 0x05
    1cba:	26 17       	cp	r18, r22
    1cbc:	51 f0       	breq	.+20     	; 0x1cd2 <_ZN6HWmidi4sendE15midiMessageTypehhh+0x52>

                //new message, memorize and send header
                mRunningStatus_TX = status;
    1cbe:	65 83       	std	Z+5, r22	; 0x05
                USE_SERIAL_PORT.write(mRunningStatus_TX);
    1cc0:	86 e6       	ldi	r24, 0x66	; 102
    1cc2:	94 e0       	ldi	r25, 0x04	; 4
    1cc4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <_ZN6HWmidi4sendE15midiMessageTypehhh+0x52>
            }

        }   else {

            //don't care about running status, send the status byte
            USE_SERIAL_PORT.write(status);
    1cca:	86 e6       	ldi	r24, 0x66	; 102
    1ccc:	94 e0       	ldi	r25, 0x04	; 4
    1cce:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

        }

        //send data
        USE_SERIAL_PORT.write(inData1);
    1cd2:	6d 2f       	mov	r22, r29
    1cd4:	86 e6       	ldi	r24, 0x66	; 102
    1cd6:	94 e0       	ldi	r25, 0x04	; 4
    1cd8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>

        if (inType != midiMessageProgramChange && inType != midiMessageAfterTouchChannel)
    1cdc:	6c 2f       	mov	r22, r28
    1cde:	6f 7e       	andi	r22, 0xEF	; 239
    1ce0:	60 3c       	cpi	r22, 0xC0	; 192
    1ce2:	59 f0       	breq	.+22     	; 0x1cfa <_ZN6HWmidi4sendE15midiMessageTypehhh+0x7a>

        //channel messages

        //protection: remove MSBs on data
        inData1 &= 0x7f;
        inData2 &= 0x7f;
    1ce4:	61 2f       	mov	r22, r17
    1ce6:	6f 77       	andi	r22, 0x7F	; 127

        //send data
        USE_SERIAL_PORT.write(inData1);

        if (inType != midiMessageProgramChange && inType != midiMessageAfterTouchChannel)
            USE_SERIAL_PORT.write(inData2);
    1ce8:	86 e6       	ldi	r24, 0x66	; 102
    1cea:	94 e0       	ldi	r25, 0x04	; 4
    1cec:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN4UART5writeEh>
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_ZN6HWmidi4sendE15midiMessageTypehhh+0x7a>

    }   else if (inType >= midiMessageTuneRequest && inType <= midiMessageSystemReset)
    1cf2:	66 3f       	cpi	r22, 0xF6	; 246
    1cf4:	10 f0       	brcs	.+4      	; 0x1cfa <_ZN6HWmidi4sendE15midiMessageTypehhh+0x7a>
            sendRealTime(inType); //system real-time and 1 byte
    1cf6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN6HWmidi12sendRealTimeE15midiMessageType>

}
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <_ZN6HWmidi10sendNoteOnEhhh>:

void HWmidi::sendNoteOn(uint8_t inNoteNumber, uint8_t inVelocity, uint8_t inChannel)    {
    1d04:	0f 93       	push	r16

    //inNoteNumber:   Pitch value in the MIDI format (0 to 127)
    //inVelocity:     Note attack velocity (0 to 127)
    //inChannel:      The channel on which the message will be sent (1 to 16).

    send(midiMessageNoteOn, inNoteNumber, inVelocity, inChannel);
    1d06:	02 2f       	mov	r16, r18
    1d08:	24 2f       	mov	r18, r20
    1d0a:	46 2f       	mov	r20, r22
    1d0c:	60 e9       	ldi	r22, 0x90	; 144
    1d0e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>

}
    1d12:	0f 91       	pop	r16
    1d14:	08 95       	ret

00001d16 <_ZN6HWmidi11sendNoteOffEhhh>:

void HWmidi::sendNoteOff(uint8_t inNoteNumber, uint8_t inVelocity, uint8_t inChannel)   {
    1d16:	0f 93       	push	r16

    //inNoteNumber:    Pitch value in the MIDI format (0 to 127)
    //inVelocity:      Release velocity (0 to 127)
    //inChannel:       The channel on which the message will be sent (1 to 16)

    send(midiMessageNoteOff, inNoteNumber, inVelocity, inChannel);
    1d18:	02 2f       	mov	r16, r18
    1d1a:	24 2f       	mov	r18, r20
    1d1c:	46 2f       	mov	r20, r22
    1d1e:	60 e8       	ldi	r22, 0x80	; 128
    1d20:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>

}
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <_ZN6HWmidi17sendProgramChangeEhh>:

void HWmidi::sendProgramChange(uint8_t inProgramNumber, uint8_t inChannel)  {
    1d28:	0f 93       	push	r16

    //inProgramNumber:    The Program to select (0 to 127)
    //inChannel:          The channel on which the message will be sent (1 to 16)

    send(midiMessageProgramChange, inProgramNumber, 0, inChannel);
    1d2a:	04 2f       	mov	r16, r20
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	46 2f       	mov	r20, r22
    1d30:	60 ec       	ldi	r22, 0xC0	; 192
    1d32:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>

}
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <_ZN6HWmidi17sendControlChangeEhhh>:

void HWmidi::sendControlChange(uint8_t inControlNumber, uint8_t inControlValue, uint8_t inChannel)  {
    1d3a:	0f 93       	push	r16

    //inControlNumber:    The controller number (0 to 127)
    //inControlValue:     The value for the specified controller (0 to 127)
    //inChannel:          The channel on which the message will be sent (1 to 16)

    send(midiMessageControlChange, inControlNumber, inControlValue, inChannel);
    1d3c:	02 2f       	mov	r16, r18
    1d3e:	24 2f       	mov	r18, r20
    1d40:	46 2f       	mov	r20, r22
    1d42:	60 eb       	ldi	r22, 0xB0	; 176
    1d44:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>

}
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <_ZN6HWmidi19enableRunningStatusEv>:

}

void HWmidi::enableRunningStatus()  {

    useRunningStatus = true;
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	fc 01       	movw	r30, r24
    1d50:	22 83       	std	Z+2, r18	; 0x02
    1d52:	08 95       	ret

00001d54 <_ZN6HWmidi20disableRunningStatusEv>:

}

void HWmidi::disableRunningStatus() {

    useRunningStatus = false;
    1d54:	fc 01       	movw	r30, r24
    1d56:	12 82       	std	Z+2, r1	; 0x02
    1d58:	08 95       	ret

00001d5a <_ZN6HWmidi11inputFilterEh>:

    }

}

bool HWmidi::inputFilter(uint8_t inChannel) {
    1d5a:	fc 01       	movw	r30, r24

    //check if the received message is on the listened channel

    if (mMessage.type == midiMessageInvalidType)
    1d5c:	97 85       	ldd	r25, Z+15	; 0x0f
    1d5e:	99 23       	and	r25, r25
    1d60:	59 f0       	breq	.+22     	; 0x1d78 <_ZN6HWmidi11inputFilterEh+0x1e>
        return false;

    //first, check if the received message is Channel
    if (mMessage.type >= midiMessageNoteOff && mMessage.type <= midiMessagePitchBend)   {
    1d62:	90 58       	subi	r25, 0x80	; 128
    1d64:	91 36       	cpi	r25, 0x61	; 97
    1d66:	50 f4       	brcc	.+20     	; 0x1d7c <_ZN6HWmidi11inputFilterEh+0x22>

        //then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
    1d68:	86 85       	ldd	r24, Z+14	; 0x0e
    1d6a:	86 17       	cp	r24, r22
    1d6c:	49 f0       	breq	.+18     	; 0x1d80 <_ZN6HWmidi11inputFilterEh+0x26>
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	66 23       	and	r22, r22
    1d72:	39 f0       	breq	.+14     	; 0x1d82 <_ZN6HWmidi11inputFilterEh+0x28>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	08 95       	ret
bool HWmidi::inputFilter(uint8_t inChannel) {

    //check if the received message is on the listened channel

    if (mMessage.type == midiMessageInvalidType)
        return false;
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	08 95       	ret
        }

    }   else {

        //system messages are always received
        return true;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	08 95       	ret
    if (mMessage.type >= midiMessageNoteOff && mMessage.type <= midiMessagePitchBend)   {

        //then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
                    (inChannel == MIDI_CHANNEL_OMNI))
            return true;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
        //system messages are always received
        return true;

    }

}
    1d82:	08 95       	ret

00001d84 <_ZNK6HWmidi7getTypeEv>:
midiMessageType HWmidi::getType() const {

    //get the last received message's type
    return mMessage.type;

}
    1d84:	fc 01       	movw	r30, r24
    1d86:	87 85       	ldd	r24, Z+15	; 0x0f
    1d88:	08 95       	ret

00001d8a <_ZNK6HWmidi8getData1Ev>:
uint8_t HWmidi::getData1() const    {

    //get the first data byte of the last received message
    return mMessage.data1;

}
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	80 89       	ldd	r24, Z+16	; 0x10
    1d8e:	08 95       	ret

00001d90 <_ZNK6HWmidi8getData2Ev>:
uint8_t HWmidi::getData2() const    {

    //get the second data byte of the last received message
    return mMessage.data2;

}
    1d90:	fc 01       	movw	r30, r24
    1d92:	81 89       	ldd	r24, Z+17	; 0x11
    1d94:	08 95       	ret

00001d96 <_ZNK6HWmidi13getSysExArrayEv>:
const uint8_t* HWmidi::getSysExArray() const    {

    //get the System Exclusive byte array
    return mMessage.sysexArray;

}
    1d96:	42 96       	adiw	r24, 0x12	; 18
    1d98:	08 95       	ret

00001d9a <_ZNK6HWmidi19getSysExArrayLengthEv>:
uint16_t HWmidi::getSysExArrayLength() const    {

    //get the length of the System Exclusive array
    //it is coded using data1 as LSB and data2 as MSB

    const unsigned size = unsigned(mMessage.data2) << 8 | mMessage.data1;
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	21 89       	ldd	r18, Z+17	; 0x11
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	32 2f       	mov	r19, r18
    1da2:	22 27       	eor	r18, r18
    1da4:	80 89       	ldd	r24, Z+16	; 0x10
    1da6:	a9 01       	movw	r20, r18
    1da8:	48 2b       	or	r20, r24
    1daa:	ca 01       	movw	r24, r20
    return size > MIDI_SYSEX_ARRAY_SIZE ? MIDI_SYSEX_ARRAY_SIZE : size;
    1dac:	81 35       	cpi	r24, 0x51	; 81
    1dae:	91 05       	cpc	r25, r1
    1db0:	10 f0       	brcs	.+4      	; 0x1db6 <_ZNK6HWmidi19getSysExArrayLengthEv+0x1c>
    1db2:	80 e5       	ldi	r24, 0x50	; 80
    1db4:	90 e0       	ldi	r25, 0x00	; 0

}
    1db6:	08 95       	ret

00001db8 <_ZN6HWmidi21getTypeFromStatusByteEh>:

midiMessageType HWmidi::getTypeFromStatusByte(uint8_t inStatus) {

    //extract an enumerated MIDI type from a status byte

    if ((inStatus  < 0x80) ||
    1db8:	66 23       	and	r22, r22
    1dba:	6c f4       	brge	.+26     	; 0x1dd6 <_ZN6HWmidi21getTypeFromStatusByteEh+0x1e>
    1dbc:	8c e0       	ldi	r24, 0x0C	; 12
    1dbe:	86 0f       	add	r24, r22
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	58 f0       	brcs	.+22     	; 0x1dda <_ZN6HWmidi21getTypeFromStatusByteEh+0x22>
        (inStatus == 0xf4) ||
        (inStatus == 0xf5) ||
    1dc4:	86 2f       	mov	r24, r22
    1dc6:	8b 7f       	andi	r24, 0xFB	; 251
    1dc8:	89 3f       	cpi	r24, 0xF9	; 249
    1dca:	49 f0       	breq	.+18     	; 0x1dde <_ZN6HWmidi21getTypeFromStatusByteEh+0x26>
        //data bytes and undefined
        return midiMessageInvalidType;

    }

    if (inStatus < 0xf0)    {
    1dcc:	60 3f       	cpi	r22, 0xF0	; 240
    1dce:	48 f4       	brcc	.+18     	; 0x1de2 <_ZN6HWmidi21getTypeFromStatusByteEh+0x2a>

        //channel message, remove channel nibble
        return midiMessageType(inStatus & 0xf0);
    1dd0:	86 2f       	mov	r24, r22
    1dd2:	80 7f       	andi	r24, 0xF0	; 240
    1dd4:	08 95       	ret
        (inStatus == 0xf5) ||
        (inStatus == 0xf9) ||
        (inStatus == 0xfD)) {

        //data bytes and undefined
        return midiMessageInvalidType;
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	08 95       	ret
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	08 95       	ret
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	08 95       	ret
        //channel message, remove channel nibble
        return midiMessageType(inStatus & 0xf0);

    }

    return midiMessageType(inStatus);
    1de2:	86 2f       	mov	r24, r22

}
    1de4:	08 95       	ret

00001de6 <_ZN6HWmidi16isChannelMessageE15midiMessageType>:
    return (inType == midiMessageNoteOff           ||
            inType == midiMessageNoteOn            ||
            inType == midiMessageControlChange     ||
            inType == midiMessageAfterTouchPoly    ||
            inType == midiMessageAfterTouchChannel ||
            inType == midiMessagePitchBend         ||
    1de6:	86 2f       	mov	r24, r22
    1de8:	8f 7e       	andi	r24, 0xEF	; 239
    1dea:	80 38       	cpi	r24, 0x80	; 128
    1dec:	59 f0       	breq	.+22     	; 0x1e04 <_ZN6HWmidi16isChannelMessageE15midiMessageType+0x1e>

bool HWmidi::isChannelMessage(midiMessageType inType)   {

    return (inType == midiMessageNoteOff           ||
            inType == midiMessageNoteOn            ||
            inType == midiMessageControlChange     ||
    1dee:	80 3a       	cpi	r24, 0xA0	; 160
    1df0:	59 f0       	breq	.+22     	; 0x1e08 <_ZN6HWmidi16isChannelMessageE15midiMessageType+0x22>
            inType == midiMessageAfterTouchPoly    ||
    1df2:	60 3d       	cpi	r22, 0xD0	; 208
    1df4:	59 f0       	breq	.+22     	; 0x1e0c <_ZN6HWmidi16isChannelMessageE15midiMessageType+0x26>
            inType == midiMessageAfterTouchChannel ||
    1df6:	60 3e       	cpi	r22, 0xE0	; 224
    1df8:	59 f0       	breq	.+22     	; 0x1e10 <_ZN6HWmidi16isChannelMessageE15midiMessageType+0x2a>
            inType == midiMessagePitchBend         ||
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	60 3c       	cpi	r22, 0xC0	; 192
    1dfe:	49 f0       	breq	.+18     	; 0x1e12 <_ZN6HWmidi16isChannelMessageE15midiMessageType+0x2c>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	08 95       	ret
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	08 95       	ret
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	08 95       	ret
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	08 95       	ret
    1e10:	81 e0       	ldi	r24, 0x01	; 1
            inType == midiMessageProgramChange);

}
    1e12:	08 95       	ret

00001e14 <_ZN6HWmidi5parseEv>:

    return channelMatch;

}

bool HWmidi::parse()    {
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24

    if (USE_SERIAL_PORT.available() == 0)
    1e22:	86 e6       	ldi	r24, 0x66	; 102
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN4UART9availableEv>
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <_ZN6HWmidi5parseEv+0x1c>
    1e2e:	26 c1       	rjmp	.+588    	; 0x207c <_ZN6HWmidi5parseEv+0x268>
    //look for other bytes in buffer, call parser recursively,
    //until the message is assembled or the buffer is empty
    //else, add the extracted byte to the pending message, and check validity
    //when the message is done, store it

    const uint8_t extracted = USE_SERIAL_PORT.read();
    1e30:	86 e6       	ldi	r24, 0x66	; 102
    1e32:	94 e0       	ldi	r25, 0x04	; 4
    1e34:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN4UART4readEv>
    1e38:	18 2f       	mov	r17, r24

    if (mPendingMessageIndex == 0)  {
    1e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <_ZN6HWmidi5parseEv+0x30>
    1e42:	80 c0       	rjmp	.+256    	; 0x1f44 <_ZN6HWmidi5parseEv+0x130>

        //start a new pending message
        mPendingMessage[0] = extracted;
    1e44:	1f 83       	std	Y+7, r17	; 0x07

        //check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
    1e46:	0c 81       	ldd	r16, Y+4	; 0x04
    1e48:	60 2f       	mov	r22, r16
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN6HWmidi21getTypeFromStatusByteEh>
    1e50:	68 2f       	mov	r22, r24
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN6HWmidi16isChannelMessageE15midiMessageType>
    1e58:	88 23       	and	r24, r24
    1e5a:	41 f0       	breq	.+16     	; 0x1e6c <_ZN6HWmidi5parseEv+0x58>

            //only channel messages allow Running Status
            //if the status byte is not received, prepend it to the pending message
            if (extracted < 0x80)   {
    1e5c:	11 23       	and	r17, r17
    1e5e:	34 f0       	brlt	.+12     	; 0x1e6c <_ZN6HWmidi5parseEv+0x58>

                mPendingMessage[0]   = mRunningStatus_RX;
    1e60:	0f 83       	std	Y+7, r16	; 0x07
                mPendingMessage[1]   = extracted;
    1e62:	18 87       	std	Y+8, r17	; 0x08
                mPendingMessageIndex = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9d 87       	std	Y+13, r25	; 0x0d
    1e6a:	8c 87       	std	Y+12, r24	; 0x0c
            //else: well, we received another status byte,
            //so the running status does not apply here
            //it will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))  {
    1e6c:	1f 81       	ldd	r17, Y+7	; 0x07
    1e6e:	61 2f       	mov	r22, r17
    1e70:	ce 01       	movw	r24, r28
    1e72:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN6HWmidi21getTypeFromStatusByteEh>
    1e76:	48 2f       	mov	r20, r24
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	fa 01       	movw	r30, r20
    1e7c:	e0 58       	subi	r30, 0x80	; 128
    1e7e:	f1 09       	sbc	r31, r1
    1e80:	e0 38       	cpi	r30, 0x80	; 128
    1e82:	f1 05       	cpc	r31, r1
    1e84:	a8 f5       	brcc	.+106    	; 0x1ef0 <_ZN6HWmidi5parseEv+0xdc>
    1e86:	ea 5a       	subi	r30, 0xAA	; 170
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__tablejump2__>
            case midiMessageClock:
            case midiMessageActiveSensing:
            case midiMessageSystemReset:
            case midiMessageTuneRequest:
            //handle the message type directly here.
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    1e8e:	8f 87       	std	Y+15, r24	; 0x0f
            mMessage.channel = 0;
    1e90:	1e 86       	std	Y+14, r1	; 0x0e
            mMessage.data1   = 0;
    1e92:	18 8a       	std	Y+16, r1	; 0x10
            mMessage.data2   = 0;
    1e94:	19 8a       	std	Y+17, r1	; 0x11
            mMessage.valid   = true;
    1e96:	fe 01       	movw	r30, r28
    1e98:	ee 59       	subi	r30, 0x9E	; 158
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	80 83       	st	Z, r24
            // \fix Running Status broken when receiving Clock messages.
            // Do not reset all input attributes, Running Status must remain unchanged.
            //resetInput();

            //we still need to reset these
            mPendingMessageIndex = 0;
    1ea0:	1d 86       	std	Y+13, r1	; 0x0d
    1ea2:	1c 86       	std	Y+12, r1	; 0x0c
            mPendingMessageExpectedLenght = 0;
    1ea4:	1b 86       	std	Y+11, r1	; 0x0b
    1ea6:	1a 86       	std	Y+10, r1	; 0x0a

            return true;
    1ea8:	ff c0       	rjmp	.+510    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
            //2 bytes messages
            case midiMessageProgramChange:
            case midiMessageAfterTouchChannel:
            case midiMessageTimeCodeQuarterFrame:
            case midiMessageSongSelect:
            mPendingMessageExpectedLenght = 2;
    1eaa:	22 e0       	ldi	r18, 0x02	; 2
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	3b 87       	std	Y+11, r19	; 0x0b
    1eb0:	2a 87       	std	Y+10, r18	; 0x0a
            return false;
            break;

        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {
    1eb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eb4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eb6:	21 15       	cp	r18, r1
    1eb8:	31 05       	cpc	r19, r1
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <_ZN6HWmidi5parseEv+0xaa>
    1ebc:	ed c0       	rjmp	.+474    	; 0x2098 <_ZN6HWmidi5parseEv+0x284>
    1ebe:	37 c0       	rjmp	.+110    	; 0x1f2e <_ZN6HWmidi5parseEv+0x11a>
            case midiMessageNoteOff:
            case midiMessageControlChange:
            case midiMessagePitchBend:
            case midiMessageAfterTouchPoly:
            case midiMessageSongPosition:
            mPendingMessageExpectedLenght = 3;
    1ec0:	23 e0       	ldi	r18, 0x03	; 3
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3b 87       	std	Y+11, r19	; 0x0b
    1ec6:	2a 87       	std	Y+10, r18	; 0x0a
            return false;
            break;

        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {
    1ec8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eca:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <_ZN6HWmidi5parseEv+0xc0>
    1ed2:	da c0       	rjmp	.+436    	; 0x2088 <_ZN6HWmidi5parseEv+0x274>
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <_ZN6HWmidi5parseEv+0x11a>
            mPendingMessageExpectedLenght = 3;
            break;

            case midiMessageSystemExclusive:
            //the message can be any length between 3 and MIDI_SYSEX_ARRAY_SIZE
            mPendingMessageExpectedLenght = MIDI_SYSEX_ARRAY_SIZE;
    1ed6:	80 e5       	ldi	r24, 0x50	; 80
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9b 87       	std	Y+11, r25	; 0x0b
    1edc:	8a 87       	std	Y+10, r24	; 0x0a
            mRunningStatus_RX = midiMessageInvalidType;
    1ede:	1c 82       	std	Y+4, r1	; 0x04
            mMessage.sysexArray[0] = midiMessageSystemExclusive;
    1ee0:	80 ef       	ldi	r24, 0xF0	; 240
    1ee2:	8a 8b       	std	Y+18, r24	; 0x12
            return false;
            break;

        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {
    1ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ee8:	2f 34       	cpi	r18, 0x4F	; 79
    1eea:	31 05       	cpc	r19, r1
    1eec:	40 f4       	brcc	.+16     	; 0x1efe <_ZN6HWmidi5parseEv+0xea>
    1eee:	1f c0       	rjmp	.+62     	; 0x1f2e <_ZN6HWmidi5parseEv+0x11a>

void HWmidi::resetInput()   {

    //reset input attributes

    mPendingMessageIndex = 0;
    1ef0:	1d 86       	std	Y+13, r1	; 0x0d
    1ef2:	1c 86       	std	Y+12, r1	; 0x0c
    mPendingMessageExpectedLenght = 0;
    1ef4:	1b 86       	std	Y+11, r1	; 0x0b
    1ef6:	1a 86       	std	Y+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    1ef8:	1c 82       	std	Y+4, r1	; 0x04
            case midiMessageInvalidType:
            default:
            //this is obviously wrong
            //let's get the hell out'a here
            resetInput();
            return false;
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	d5 c0       	rjmp	.+426    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    1efe:	80 ef       	ldi	r24, 0xF0	; 240
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    1f02:	1f 70       	andi	r17, 0x0F	; 15
    1f04:	1f 5f       	subi	r17, 0xFF	; 255

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    1f06:	1e 87       	std	Y+14, r17	; 0x0e
            mMessage.data1   = mPendingMessage[1];
    1f08:	88 85       	ldd	r24, Y+8	; 0x08
    1f0a:	88 8b       	std	Y+16, r24	; 0x10

            //save data2 only if applicable
            if (mPendingMessageExpectedLenght == 3)
    1f0c:	80 e5       	ldi	r24, 0x50	; 80
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	03 97       	sbiw	r24, 0x03	; 3
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <_ZN6HWmidi5parseEv+0x106>
                mMessage.data2 = mPendingMessage[2];
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	89 8b       	std	Y+17, r24	; 0x11
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <_ZN6HWmidi5parseEv+0x108>
            else mMessage.data2 = 0;
    1f1a:	19 8a       	std	Y+17, r1	; 0x11

            mPendingMessageIndex = 0;
    1f1c:	1d 86       	std	Y+13, r1	; 0x0d
    1f1e:	1c 86       	std	Y+12, r1	; 0x0c
            mPendingMessageExpectedLenght = 0;
    1f20:	1b 86       	std	Y+11, r1	; 0x0b
    1f22:	1a 86       	std	Y+10, r1	; 0x0a
            mMessage.valid = true;
    1f24:	ce 59       	subi	r28, 0x9E	; 158
    1f26:	df 4f       	sbci	r29, 0xFF	; 255
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	88 83       	st	Y, r24
            return true;
    1f2c:	bd c0       	rjmp	.+378    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>

        }   else {

            //waiting for more data
            mPendingMessageIndex++;
    1f2e:	2f 5f       	subi	r18, 0xFF	; 255
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	3d 87       	std	Y+13, r19	; 0x0d
    1f34:	2c 87       	std	Y+12, r18	; 0x0c

        }

        if (use1byteParsing)    {
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	81 11       	cpse	r24, r1
    1f3a:	a2 c0       	rjmp	.+324    	; 0x2080 <_ZN6HWmidi5parseEv+0x26c>

        } else {

            //call the parser recursively
            //to parse the rest of the message.
            return parse();
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6HWmidi5parseEv>
    1f42:	b2 c0       	rjmp	.+356    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
        }

    }   else {

        //first, test if this is a status byte
        if (extracted >= 0x80)  {
    1f44:	11 23       	and	r17, r17
    1f46:	b4 f5       	brge	.+108    	; 0x1fb4 <_ZN6HWmidi5parseEv+0x1a0>

            //reception of status bytes in the middle of an uncompleted message
            //are allowed only for interleaved Real Time message or EOX
            switch (extracted)  {
    1f48:	1d 3f       	cpi	r17, 0xFD	; 253
    1f4a:	38 f4       	brcc	.+14     	; 0x1f5a <_ZN6HWmidi5parseEv+0x146>
    1f4c:	1a 3f       	cpi	r17, 0xFA	; 250
    1f4e:	38 f4       	brcc	.+14     	; 0x1f5e <_ZN6HWmidi5parseEv+0x14a>
    1f50:	17 3f       	cpi	r17, 0xF7	; 247
    1f52:	71 f0       	breq	.+28     	; 0x1f70 <_ZN6HWmidi5parseEv+0x15c>
    1f54:	18 3f       	cpi	r17, 0xF8	; 248
    1f56:	71 f5       	brne	.+92     	; 0x1fb4 <_ZN6HWmidi5parseEv+0x1a0>
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <_ZN6HWmidi5parseEv+0x14a>
    1f5a:	1e 3f       	cpi	r17, 0xFE	; 254
    1f5c:	58 f1       	brcs	.+86     	; 0x1fb4 <_ZN6HWmidi5parseEv+0x1a0>
                //pass it to the structure for being read outside
                //the MIDI class, and recompose the message it was
                //interleaved into without killing the running status..
                //this is done by leaving the pending message as is,
                //it will be completed on next calls
                mMessage.type    = (midiMessageType)extracted;
    1f5e:	1f 87       	std	Y+15, r17	; 0x0f
                mMessage.data1   = 0;
    1f60:	18 8a       	std	Y+16, r1	; 0x10
                mMessage.data2   = 0;
    1f62:	19 8a       	std	Y+17, r1	; 0x11
                mMessage.channel = 0;
    1f64:	1e 86       	std	Y+14, r1	; 0x0e
                mMessage.valid   = true;
    1f66:	ce 59       	subi	r28, 0x9E	; 158
    1f68:	df 4f       	sbci	r29, 0xFF	; 255
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	88 83       	st	Y, r24
                return true;
    1f6e:	9c c0       	rjmp	.+312    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
                break;

                //end of sysex
                case 0xf7:
                if (mMessage.sysexArray[0] == midiMessageSystemExclusive)   {
    1f70:	2a 89       	ldd	r18, Y+18	; 0x12
    1f72:	20 3f       	cpi	r18, 0xF0	; 240
    1f74:	c1 f4       	brne	.+48     	; 0x1fa6 <_ZN6HWmidi5parseEv+0x192>

                    //store the last byte (EOX)
                    mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
    1f76:	9c 01       	movw	r18, r24
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e8 0f       	add	r30, r24
    1f80:	f9 1f       	adc	r31, r25
    1f82:	47 ef       	ldi	r20, 0xF7	; 247
    1f84:	42 8b       	std	Z+18, r20	; 0x12
                    mMessage.type = midiMessageSystemExclusive;
    1f86:	80 ef       	ldi	r24, 0xF0	; 240
    1f88:	8f 87       	std	Y+15, r24	; 0x0f

                    //get length
                    mMessage.data1   = mPendingMessageIndex & 0xff; //LSB
    1f8a:	28 8b       	std	Y+16, r18	; 0x10
                    mMessage.data2   = mPendingMessageIndex >> 8;   //MSB
    1f8c:	39 8b       	std	Y+17, r19	; 0x11
                    mMessage.channel = 0;
    1f8e:	1e 86       	std	Y+14, r1	; 0x0e
                    mMessage.valid   = true;
    1f90:	fe 01       	movw	r30, r28
    1f92:	ee 59       	subi	r30, 0x9E	; 158
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 83       	st	Z, r24

void HWmidi::resetInput()   {

    //reset input attributes

    mPendingMessageIndex = 0;
    1f9a:	1d 86       	std	Y+13, r1	; 0x0d
    1f9c:	1c 86       	std	Y+12, r1	; 0x0c
    mPendingMessageExpectedLenght = 0;
    1f9e:	1b 86       	std	Y+11, r1	; 0x0b
    1fa0:	1a 86       	std	Y+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    1fa2:	1c 82       	std	Y+4, r1	; 0x04
    1fa4:	81 c0       	rjmp	.+258    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>

void HWmidi::resetInput()   {

    //reset input attributes

    mPendingMessageIndex = 0;
    1fa6:	1d 86       	std	Y+13, r1	; 0x0d
    1fa8:	1c 86       	std	Y+12, r1	; 0x0c
    mPendingMessageExpectedLenght = 0;
    1faa:	1b 86       	std	Y+11, r1	; 0x0b
    1fac:	1a 86       	std	Y+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    1fae:	1c 82       	std	Y+4, r1	; 0x04

                }   else {

                        //error
                        resetInput();
                        return false;
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	7a c0       	rjmp	.+244    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
            }

        }

        //add extracted data byte to pending message
        if (mPendingMessage[0] == midiMessageSystemExclusive)
    1fb4:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb6:	20 3f       	cpi	r18, 0xF0	; 240
    1fb8:	29 f4       	brne	.+10     	; 0x1fc4 <_ZN6HWmidi5parseEv+0x1b0>
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e8 0f       	add	r30, r24
    1fbe:	f9 1f       	adc	r31, r25
    1fc0:	12 8b       	std	Z+18, r17	; 0x12
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <_ZN6HWmidi5parseEv+0x1b8>
        else mPendingMessage[mPendingMessageIndex] = extracted;
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e8 0f       	add	r30, r24
    1fc8:	f9 1f       	adc	r31, r25
    1fca:	17 83       	std	Z+7, r17	; 0x07

        //now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {
    1fcc:	ea 84       	ldd	r14, Y+10	; 0x0a
    1fce:	fb 84       	ldd	r15, Y+11	; 0x0b
    1fd0:	97 01       	movw	r18, r14
    1fd2:	21 50       	subi	r18, 0x01	; 1
    1fd4:	31 09       	sbc	r19, r1
    1fd6:	82 17       	cp	r24, r18
    1fd8:	93 07       	cpc	r25, r19
    1fda:	08 f4       	brcc	.+2      	; 0x1fde <_ZN6HWmidi5parseEv+0x1ca>
    1fdc:	45 c0       	rjmp	.+138    	; 0x2068 <_ZN6HWmidi5parseEv+0x254>

            //"FML" case: fall down here with an overflown SysEx..
            //this means we received the last possible data byte that can fit the buffer
            //if this happens, try increasing MIDI_SYSEX_ARRAY_SIZE
            if (mPendingMessage[0] == midiMessageSystemExclusive)   {
    1fde:	0f 81       	ldd	r16, Y+7	; 0x07
    1fe0:	00 3f       	cpi	r16, 0xF0	; 240
    1fe2:	39 f4       	brne	.+14     	; 0x1ff2 <_ZN6HWmidi5parseEv+0x1de>

void HWmidi::resetInput()   {

    //reset input attributes

    mPendingMessageIndex = 0;
    1fe4:	1d 86       	std	Y+13, r1	; 0x0d
    1fe6:	1c 86       	std	Y+12, r1	; 0x0c
    mPendingMessageExpectedLenght = 0;
    1fe8:	1b 86       	std	Y+11, r1	; 0x0b
    1fea:	1a 86       	std	Y+10, r1	; 0x0a
    mRunningStatus_RX = midiMessageInvalidType;
    1fec:	1c 82       	std	Y+4, r1	; 0x04
            //this means we received the last possible data byte that can fit the buffer
            //if this happens, try increasing MIDI_SYSEX_ARRAY_SIZE
            if (mPendingMessage[0] == midiMessageSystemExclusive)   {

                resetInput();
                return false;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	5b c0       	rjmp	.+182    	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>

            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    1ff2:	60 2f       	mov	r22, r16
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZN6HWmidi21getTypeFromStatusByteEh>
    1ffa:	18 2f       	mov	r17, r24
    1ffc:	8f 87       	std	Y+15, r24	; 0x0f

            if (isChannelMessage(mMessage.type))
    1ffe:	68 2f       	mov	r22, r24
    2000:	ce 01       	movw	r24, r28
    2002:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN6HWmidi16isChannelMessageE15midiMessageType>
    2006:	88 23       	and	r24, r24
    2008:	29 f0       	breq	.+10     	; 0x2014 <_ZN6HWmidi5parseEv+0x200>
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    200a:	80 2f       	mov	r24, r16
    200c:	8f 70       	andi	r24, 0x0F	; 15
    200e:	8f 5f       	subi	r24, 0xFF	; 255
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    2010:	8e 87       	std	Y+14, r24	; 0x0e
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <_ZN6HWmidi5parseEv+0x202>
            else mMessage.channel = 0;
    2014:	1e 86       	std	Y+14, r1	; 0x0e

            mMessage.data1 = mPendingMessage[1];
    2016:	88 85       	ldd	r24, Y+8	; 0x08
    2018:	88 8b       	std	Y+16, r24	; 0x10

            //save data2 only if applicable
            if (mPendingMessageExpectedLenght == 3)
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	e8 16       	cp	r14, r24
    201e:	f1 04       	cpc	r15, r1
    2020:	19 f4       	brne	.+6      	; 0x2028 <_ZN6HWmidi5parseEv+0x214>
                mMessage.data2 = mPendingMessage[2];
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	89 8b       	std	Y+17, r24	; 0x11
    2026:	01 c0       	rjmp	.+2      	; 0x202a <_ZN6HWmidi5parseEv+0x216>
            else
                mMessage.data2 = 0;
    2028:	19 8a       	std	Y+17, r1	; 0x11

            //reset local variables
            mPendingMessageIndex = 0;
    202a:	1d 86       	std	Y+13, r1	; 0x0d
    202c:	1c 86       	std	Y+12, r1	; 0x0c
            mPendingMessageExpectedLenght = 0;
    202e:	1b 86       	std	Y+11, r1	; 0x0b
    2030:	1a 86       	std	Y+10, r1	; 0x0a

            mMessage.valid = true;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	fe 01       	movw	r30, r28
    2036:	ee 59       	subi	r30, 0x9E	; 158
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 83       	st	Z, r24

            //activate running status (if enabled for the received type)
            switch (mMessage.type)  {
    203c:	10 3b       	cpi	r17, 0xB0	; 176
    203e:	71 f0       	breq	.+28     	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    2040:	38 f4       	brcc	.+14     	; 0x2050 <_ZN6HWmidi5parseEv+0x23c>
    2042:	10 39       	cpi	r17, 0x90	; 144
    2044:	59 f0       	breq	.+22     	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    2046:	10 3a       	cpi	r17, 0xA0	; 160
    2048:	49 f0       	breq	.+18     	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    204a:	10 38       	cpi	r17, 0x80	; 128
    204c:	51 f4       	brne	.+20     	; 0x2062 <_ZN6HWmidi5parseEv+0x24e>
    204e:	06 c0       	rjmp	.+12     	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    2050:	10 3d       	cpi	r17, 0xD0	; 208
    2052:	21 f0       	breq	.+8      	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    2054:	10 3e       	cpi	r17, 0xE0	; 224
    2056:	11 f0       	breq	.+4      	; 0x205c <_ZN6HWmidi5parseEv+0x248>
    2058:	10 3c       	cpi	r17, 0xC0	; 192
    205a:	19 f4       	brne	.+6      	; 0x2062 <_ZN6HWmidi5parseEv+0x24e>
                case midiMessageControlChange:
                case midiMessageProgramChange:
                case midiMessageAfterTouchChannel:
                case midiMessagePitchBend:
                //running status enabled: store it from received message
                mRunningStatus_RX = mPendingMessage[0];
    205c:	0c 83       	std	Y+4, r16	; 0x04
                mRunningStatus_RX = midiMessageInvalidType;
                break;

            }

            return true;
    205e:	81 e0       	ldi	r24, 0x01	; 1
                case midiMessageProgramChange:
                case midiMessageAfterTouchChannel:
                case midiMessagePitchBend:
                //running status enabled: store it from received message
                mRunningStatus_RX = mPendingMessage[0];
                break;
    2060:	23 c0       	rjmp	.+70     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>

                default:
                //no running status
                mRunningStatus_RX = midiMessageInvalidType;
    2062:	1c 82       	std	Y+4, r1	; 0x04
                break;

            }

            return true;
    2064:	81 e0       	ldi	r24, 0x01	; 1
                break;

                default:
                //no running status
                mRunningStatus_RX = midiMessageInvalidType;
                break;
    2066:	20 c0       	rjmp	.+64     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
            return true;

        }   else {

            //update the index of the pending message
            mPendingMessageIndex++;
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	9d 87       	std	Y+13, r25	; 0x0d
    206c:	8c 87       	std	Y+12, r24	; 0x0c

            if (use1byteParsing)    {
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	81 11       	cpse	r24, r1
    2072:	08 c0       	rjmp	.+16     	; 0x2084 <_ZN6HWmidi5parseEv+0x270>
                return false;

            }   else {

                //call the parser recursively to parse the rest of the message.
                return parse();
    2074:	ce 01       	movw	r24, r28
    2076:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6HWmidi5parseEv>
    207a:	16 c0       	rjmp	.+44     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>

bool HWmidi::parse()    {

    if (USE_SERIAL_PORT.available() == 0)
        //no data available
        return false;
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
        }

        if (use1byteParsing)    {

            //message is not complete.
            return false;
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	12 c0       	rjmp	.+36     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
            mPendingMessageIndex++;

            if (use1byteParsing)    {

                //message is not complete.
                return false;
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	10 c0       	rjmp	.+32     	; 0x20a8 <_ZN6HWmidi5parseEv+0x294>
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    2088:	8f 87       	std	Y+15, r24	; 0x0f
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    208a:	81 2f       	mov	r24, r17
    208c:	8f 70       	andi	r24, 0x0F	; 15
    208e:	8f 5f       	subi	r24, 0xFF	; 255

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    2090:	8e 87       	std	Y+14, r24	; 0x0e
            mMessage.data1   = mPendingMessage[1];
    2092:	88 85       	ldd	r24, Y+8	; 0x08
    2094:	88 8b       	std	Y+16, r24	; 0x10
    2096:	3e cf       	rjmp	.-388    	; 0x1f14 <_ZN6HWmidi5parseEv+0x100>
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    2098:	8f 87       	std	Y+15, r24	; 0x0f
}

uint8_t HWmidi::getChannelFromStatusByte(uint8_t inStatus)   {

    //returns channel in the range 1-16
    return (inStatus & 0x0f) + 1;
    209a:	81 2f       	mov	r24, r17
    209c:	8f 70       	andi	r24, 0x0F	; 15
    209e:	8f 5f       	subi	r24, 0xFF	; 255

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))    {

            //reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    20a0:	8e 87       	std	Y+14, r24	; 0x0e
            mMessage.data1   = mPendingMessage[1];
    20a2:	88 85       	ldd	r24, Y+8	; 0x08
    20a4:	88 8b       	std	Y+16, r24	; 0x10
    20a6:	39 cf       	rjmp	.-398    	; 0x1f1a <_ZN6HWmidi5parseEv+0x106>

        }

    }

}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	08 95       	ret

000020b6 <_ZN6HWmidi10thruFilterEh>:
    mThruActivated = false;
    mThruFilterMode = Off;

}

void HWmidi::thruFilter(uint8_t inChannel)  {
    20b6:	0f 93       	push	r16
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29

    //channel messages are passed to the output if their channel
    //is matching the input channel and the filter setting

    //if the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Off))
    20bc:	fc 01       	movw	r30, r24
    20be:	20 81       	ld	r18, Z
    20c0:	22 23       	and	r18, r18
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <_ZN6HWmidi10thruFilterEh+0x10>
    20c4:	68 c0       	rjmp	.+208    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
    20c6:	31 81       	ldd	r19, Z+1	; 0x01
    20c8:	33 23       	and	r19, r19
    20ca:	09 f4       	brne	.+2      	; 0x20ce <_ZN6HWmidi10thruFilterEh+0x18>
    20cc:	64 c0       	rjmp	.+200    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
    20ce:	ec 01       	movw	r28, r24
        return;

    //first, check if the received message is Channel
    if (mMessage.type >= midiMessageNoteOff && mMessage.type <= midiMessagePitchBend)   {
    20d0:	67 85       	ldd	r22, Z+15	; 0x0f
    20d2:	80 e8       	ldi	r24, 0x80	; 128
    20d4:	86 0f       	add	r24, r22
    20d6:	81 36       	cpi	r24, 0x61	; 97
    20d8:	30 f5       	brcc	.+76     	; 0x2126 <_ZN6HWmidi10thruFilterEh+0x70>

        const bool filter_condition = ((mMessage.channel == mInputChannel) ||
    20da:	06 85       	ldd	r16, Z+14	; 0x0e
    20dc:	86 81       	ldd	r24, Z+6	; 0x06
    20de:	08 17       	cp	r16, r24
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <_ZN6HWmidi10thruFilterEh+0x2e>
    20e2:	53 c0       	rjmp	.+166    	; 0x218a <_ZN6HWmidi10thruFilterEh+0xd4>
    20e4:	21 e0       	ldi	r18, 0x01	; 1
    20e6:	81 11       	cpse	r24, r1
    20e8:	20 e0       	ldi	r18, 0x00	; 0
                                       (mInputChannel == MIDI_CHANNEL_OMNI));

        //now let's pass it to the output
        switch (mThruFilterMode)    {
    20ea:	32 30       	cpi	r19, 0x02	; 2
    20ec:	59 f0       	breq	.+22     	; 0x2104 <_ZN6HWmidi10thruFilterEh+0x4e>
    20ee:	33 30       	cpi	r19, 0x03	; 3
    20f0:	91 f0       	breq	.+36     	; 0x2116 <_ZN6HWmidi10thruFilterEh+0x60>
    20f2:	31 30       	cpi	r19, 0x01	; 1
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <_ZN6HWmidi10thruFilterEh+0x42>
    20f6:	4f c0       	rjmp	.+158    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case Full:
            send(mMessage.type, mMessage.data1, mMessage.data2, mMessage.channel);
    20f8:	29 89       	ldd	r18, Y+17	; 0x11
    20fa:	48 89       	ldd	r20, Y+16	; 0x10
    20fc:	ce 01       	movw	r24, r28
    20fe:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>
            break;
    2102:	49 c0       	rjmp	.+146    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case SameChannel:
            if (filter_condition)
    2104:	22 23       	and	r18, r18
    2106:	09 f4       	brne	.+2      	; 0x210a <_ZN6HWmidi10thruFilterEh+0x54>
    2108:	46 c0       	rjmp	.+140    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
                send(mMessage.type, mMessage.data1, mMessage.data2, mMessage.channel);
    210a:	29 89       	ldd	r18, Y+17	; 0x11
    210c:	48 89       	ldd	r20, Y+16	; 0x10
    210e:	ce 01       	movw	r24, r28
    2110:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>
    2114:	40 c0       	rjmp	.+128    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
            break;

            case DifferentChannel:
            if (!filter_condition)
    2116:	21 11       	cpse	r18, r1
    2118:	3e c0       	rjmp	.+124    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
                send(mMessage.type, mMessage.data1, mMessage.data2, mMessage.channel);
    211a:	29 89       	ldd	r18, Y+17	; 0x11
    211c:	48 89       	ldd	r20, Y+16	; 0x10
    211e:	ce 01       	movw	r24, r28
    2120:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN6HWmidi4sendE15midiMessageTypehhh>
    2124:	38 c0       	rjmp	.+112    	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
        }

    }   else {

        //send the message to the output
        switch (mMessage.type)  {
    2126:	86 2f       	mov	r24, r22
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	fc 01       	movw	r30, r24
    212c:	e0 5f       	subi	r30, 0xF0	; 240
    212e:	f1 09       	sbc	r31, r1
    2130:	e0 31       	cpi	r30, 0x10	; 16
    2132:	f1 05       	cpc	r31, r1
    2134:	80 f5       	brcc	.+96     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
    2136:	ea 52       	subi	r30, 0x2A	; 42
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__tablejump2__>
            case midiMessageStop:
            case midiMessageContinue:
            case midiMessageActiveSensing:
            case midiMessageSystemReset:
            case midiMessageTuneRequest:
            sendRealTime(mMessage.type);
    213e:	ce 01       	movw	r24, r28
    2140:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN6HWmidi12sendRealTimeE15midiMessageType>
            break;
    2144:	28 c0       	rjmp	.+80     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case midiMessageSystemExclusive:
            //send SysEx (0xf0 and 0xf7 are included in the buffer)
            sendSysEx(getSysExArrayLength(), getSysExArray(), true);
    2146:	ce 01       	movw	r24, r28
    2148:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZNK6HWmidi19getSysExArrayLengthEv>
}

const uint8_t* HWmidi::getSysExArray() const    {

    //get the System Exclusive byte array
    return mMessage.sysexArray;
    214c:	ae 01       	movw	r20, r28
    214e:	4e 5e       	subi	r20, 0xEE	; 238
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
            sendRealTime(mMessage.type);
            break;

            case midiMessageSystemExclusive:
            //send SysEx (0xf0 and 0xf7 are included in the buffer)
            sendSysEx(getSysExArrayLength(), getSysExArray(), true);
    2152:	21 e0       	ldi	r18, 0x01	; 1
    2154:	bc 01       	movw	r22, r24
    2156:	ce 01       	movw	r24, r28
    2158:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_ZN6HWmidi9sendSysExEjPKhb>
            break;
    215c:	1c c0       	rjmp	.+56     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case midiMessageSongSelect:
            sendSongSelect(mMessage.data1);
    215e:	68 89       	ldd	r22, Y+16	; 0x10
    2160:	ce 01       	movw	r24, r28
    2162:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN6HWmidi14sendSongSelectEh>
            break;
    2166:	17 c0       	rjmp	.+46     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case midiMessageSongPosition:
            sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
    2168:	69 89       	ldd	r22, Y+17	; 0x11
    216a:	f0 e8       	ldi	r31, 0x80	; 128
    216c:	6f 9f       	mul	r22, r31
    216e:	b0 01       	movw	r22, r0
    2170:	11 24       	eor	r1, r1
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	68 2b       	or	r22, r24
    2176:	ce 01       	movw	r24, r28
    2178:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_ZN6HWmidi16sendSongPositionEj>
            break;
    217c:	0c c0       	rjmp	.+24     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

            case midiMessageTimeCodeQuarterFrame:
            sendTimeCodeQuarterFrame(mMessage.data1,mMessage.data2);
    217e:	49 89       	ldd	r20, Y+17	; 0x11
    2180:	68 89       	ldd	r22, Y+16	; 0x10
    2182:	ce 01       	movw	r24, r28
    2184:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN6HWmidi24sendTimeCodeQuarterFrameEhh>
            break;
    2188:	06 c0       	rjmp	.+12     	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>

        const bool filter_condition = ((mMessage.channel == mInputChannel) ||
                                       (mInputChannel == MIDI_CHANNEL_OMNI));

        //now let's pass it to the output
        switch (mThruFilterMode)    {
    218a:	31 30       	cpi	r19, 0x01	; 1
    218c:	09 f4       	brne	.+2      	; 0x2190 <_ZN6HWmidi10thruFilterEh+0xda>
    218e:	b4 cf       	rjmp	.-152    	; 0x20f8 <_ZN6HWmidi10thruFilterEh+0x42>
    2190:	32 30       	cpi	r19, 0x02	; 2
    2192:	09 f4       	brne	.+2      	; 0x2196 <_ZN6HWmidi10thruFilterEh+0xe0>
    2194:	b7 cf       	rjmp	.-146    	; 0x2104 <_ZN6HWmidi10thruFilterEh+0x4e>

        }

    }

}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <_ZN6HWmidi4readEh>:

    return read(mInputChannel);

}

bool HWmidi::read(uint8_t inChannel)    {
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29

    if (inChannel >= MIDI_CHANNEL_OFF)
    21a6:	61 31       	cpi	r22, 0x11	; 17
    21a8:	88 f4       	brcc	.+34     	; 0x21cc <_ZN6HWmidi4readEh+0x2e>
    21aa:	c6 2f       	mov	r28, r22
    21ac:	8c 01       	movw	r16, r24
        return false; //MIDI Input disabled

    if (!parse()) return false;
    21ae:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6HWmidi5parseEv>
    21b2:	88 23       	and	r24, r24
    21b4:	61 f0       	breq	.+24     	; 0x21ce <_ZN6HWmidi4readEh+0x30>

    const bool channelMatch = inputFilter(inChannel);
    21b6:	6c 2f       	mov	r22, r28
    21b8:	c8 01       	movw	r24, r16
    21ba:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN6HWmidi11inputFilterEh>
    21be:	d8 2f       	mov	r29, r24

    thruFilter(inChannel);
    21c0:	6c 2f       	mov	r22, r28
    21c2:	c8 01       	movw	r24, r16
    21c4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN6HWmidi10thruFilterEh>

    return channelMatch;
    21c8:	8d 2f       	mov	r24, r29
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <_ZN6HWmidi4readEh+0x30>
}

bool HWmidi::read(uint8_t inChannel)    {

    if (inChannel >= MIDI_CHANNEL_OFF)
        return false; //MIDI Input disabled
    21cc:	80 e0       	ldi	r24, 0x00	; 0

    thruFilter(inChannel);

    return channelMatch;

}
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <_ZN6HWmidi4readEv>:
    //returns true if a valid message has been stored in the structure, false if not
    //a valid message is a message that matches the input channel
    //if the Thru is enabled and the message matches the filter,
    //it is sent back on the MIDI output

    return read(mInputChannel);
    21d8:	fc 01       	movw	r30, r24
    21da:	66 81       	ldd	r22, Z+6	; 0x06
    21dc:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN6HWmidi4readEh>

}
    21e0:	08 95       	ret

000021e2 <_ZN14usb_midi_class4initEh>:
#include "../../usb/usb_common.h"
#include "../../usb/usb_private.h"
#include "USBmidi.h"
#include "CIN.h"

void usb_midi_class::init(uint8_t channel) {
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
    21ea:	16 2f       	mov	r17, r22

    usb_init();
    21ec:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <usb_init>
    inChannel = channel;
    21f0:	18 83       	st	Y, r17

}
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	08 95       	ret

000021fa <_ZN14usb_midi_class8send_rawEhhhh>:

    }

}

void usb_midi_class::send_raw(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)   {
    21fa:	0f 93       	push	r16
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29

    uint8_t intr_state, timeout;

    if (!usb_configuration) return;
    2200:	80 91 f0 07 	lds	r24, 0x07F0
    2204:	88 23       	and	r24, r24
    2206:	c9 f1       	breq	.+114    	; 0x227a <_ZN14usb_midi_class8send_rawEhhhh+0x80>
    intr_state = SREG;
    2208:	8f b7       	in	r24, 0x3f	; 63
    cli();
    220a:	f8 94       	cli
    UENUM = MIDI_TX_ENDPOINT;
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	90 93 e9 00 	sts	0x00E9, r25
    timeout = UDFNUML + 2;
    2212:	30 91 e4 00 	lds	r19, 0x00E4
    2216:	3e 5f       	subi	r19, 0xFE	; 254

    while (1) {

        //are we ready to transmit?
        if (UEINTX & (1<<RWAL)) break;
    2218:	90 91 e8 00 	lds	r25, 0x00E8
    221c:	95 fd       	sbrc	r25, 5
    221e:	1f c0       	rjmp	.+62     	; 0x225e <_ZN14usb_midi_class8send_rawEhhhh+0x64>
        SREG = intr_state;
    2220:	8f bf       	out	0x3f, r24	; 63
        if (UDFNUML == timeout) return;
    2222:	80 91 e4 00 	lds	r24, 0x00E4
    2226:	38 17       	cp	r19, r24
    2228:	41 f1       	breq	.+80     	; 0x227a <_ZN14usb_midi_class8send_rawEhhhh+0x80>
        if (!usb_configuration) return;
    222a:	80 91 f0 07 	lds	r24, 0x07F0
    222e:	88 23       	and	r24, r24
    2230:	21 f1       	breq	.+72     	; 0x227a <_ZN14usb_midi_class8send_rawEhhhh+0x80>
        intr_state = SREG;
        cli();
        UENUM = MIDI_TX_ENDPOINT;
    2232:	a9 ee       	ldi	r26, 0xE9	; 233
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	53 e0       	ldi	r21, 0x03	; 3
    timeout = UDFNUML + 2;

    while (1) {

        //are we ready to transmit?
        if (UEINTX & (1<<RWAL)) break;
    2238:	e8 ee       	ldi	r30, 0xE8	; 232
    223a:	f0 e0       	ldi	r31, 0x00	; 0
        SREG = intr_state;
        if (UDFNUML == timeout) return;
    223c:	c4 ee       	ldi	r28, 0xE4	; 228
    223e:	d0 e0       	ldi	r29, 0x00	; 0
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <_ZN14usb_midi_class8send_rawEhhhh+0x58>

    while (1) {

        //are we ready to transmit?
        if (UEINTX & (1<<RWAL)) break;
        SREG = intr_state;
    2242:	8f bf       	out	0x3f, r24	; 63
        if (UDFNUML == timeout) return;
    2244:	88 81       	ld	r24, Y
    2246:	38 17       	cp	r19, r24
    2248:	c1 f0       	breq	.+48     	; 0x227a <_ZN14usb_midi_class8send_rawEhhhh+0x80>
        if (!usb_configuration) return;
    224a:	80 91 f0 07 	lds	r24, 0x07F0
    224e:	88 23       	and	r24, r24
    2250:	a1 f0       	breq	.+40     	; 0x227a <_ZN14usb_midi_class8send_rawEhhhh+0x80>
        intr_state = SREG;
    2252:	8f b7       	in	r24, 0x3f	; 63
        cli();
    2254:	f8 94       	cli
        UENUM = MIDI_TX_ENDPOINT;
    2256:	5c 93       	st	X, r21
    timeout = UDFNUML + 2;

    while (1) {

        //are we ready to transmit?
        if (UEINTX & (1<<RWAL)) break;
    2258:	90 81       	ld	r25, Z
    225a:	95 ff       	sbrs	r25, 5
    225c:	f2 cf       	rjmp	.-28     	; 0x2242 <_ZN14usb_midi_class8send_rawEhhhh+0x48>
        cli();
        UENUM = MIDI_TX_ENDPOINT;

    }

    UEDATX = b0;
    225e:	e1 ef       	ldi	r30, 0xF1	; 241
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	60 83       	st	Z, r22
    UEDATX = b1;
    2264:	40 83       	st	Z, r20
    UEDATX = b2;
    2266:	20 83       	st	Z, r18
    UEDATX = b3;
    2268:	00 83       	st	Z, r16

    if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    226a:	90 91 e8 00 	lds	r25, 0x00E8
    226e:	95 fd       	sbrc	r25, 5
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <_ZN14usb_midi_class8send_rawEhhhh+0x7e>
    2272:	9a e3       	ldi	r25, 0x3A	; 58
    2274:	90 93 e8 00 	sts	0x00E8, r25
    SREG = intr_state;
    2278:	8f bf       	out	0x3f, r24	; 63

}
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <_ZN14usb_midi_class11sendNoteOffEhhh>:
    usb_init();
    inChannel = channel;

}

void usb_midi_class::sendNoteOff(uint8_t note, uint8_t velocity, uint8_t channel)   {
    2282:	0f 93       	push	r16
    2284:	32 2f       	mov	r19, r18

    send_raw(CIN_NOTE_OFF, midiMessageNoteOff | normalizeChannel(channel), normalizeData(note), normalizeData(velocity));
    2286:	04 2f       	mov	r16, r20
    2288:	0f 77       	andi	r16, 0x7F	; 127
    228a:	26 2f       	mov	r18, r22
    228c:	2f 77       	andi	r18, 0x7F	; 127
    228e:	4f ef       	ldi	r20, 0xFF	; 255
    2290:	43 0f       	add	r20, r19
    2292:	4f 70       	andi	r20, 0x0F	; 15
    2294:	40 68       	ori	r20, 0x80	; 128
    2296:	68 e0       	ldi	r22, 0x08	; 8
    2298:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>

}
    229c:	0f 91       	pop	r16
    229e:	08 95       	ret

000022a0 <_ZN14usb_midi_class10sendNoteOnEhhh>:

void usb_midi_class::sendNoteOn(uint8_t note, uint8_t velocity, uint8_t channel)    {
    22a0:	0f 93       	push	r16
    22a2:	32 2f       	mov	r19, r18

    send_raw(CIN_NOTE_ON, midiMessageNoteOn | normalizeChannel(channel), normalizeData(note), normalizeData(velocity));
    22a4:	04 2f       	mov	r16, r20
    22a6:	0f 77       	andi	r16, 0x7F	; 127
    22a8:	26 2f       	mov	r18, r22
    22aa:	2f 77       	andi	r18, 0x7F	; 127
    22ac:	4f ef       	ldi	r20, 0xFF	; 255
    22ae:	43 0f       	add	r20, r19
    22b0:	4f 70       	andi	r20, 0x0F	; 15
    22b2:	40 69       	ori	r20, 0x90	; 144
    22b4:	69 e0       	ldi	r22, 0x09	; 9
    22b6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>

}
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <_ZN14usb_midi_class17sendControlChangeEhhh>:

void usb_midi_class::sendControlChange(uint8_t control, uint8_t value, uint8_t channel) {
    22be:	0f 93       	push	r16
    22c0:	32 2f       	mov	r19, r18

    send_raw(CIN_CONTROL_CHANGE, midiMessageControlChange | normalizeChannel(channel), normalizeData(control), normalizeData(value));
    22c2:	04 2f       	mov	r16, r20
    22c4:	0f 77       	andi	r16, 0x7F	; 127
    22c6:	26 2f       	mov	r18, r22
    22c8:	2f 77       	andi	r18, 0x7F	; 127
    22ca:	4f ef       	ldi	r20, 0xFF	; 255
    22cc:	43 0f       	add	r20, r19
    22ce:	4f 70       	andi	r20, 0x0F	; 15
    22d0:	40 6b       	ori	r20, 0xB0	; 176
    22d2:	6b e0       	ldi	r22, 0x0B	; 11
    22d4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>

}
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <_ZN14usb_midi_class17sendProgramChangeEhh>:

void usb_midi_class::sendProgramChange(uint8_t program, uint8_t channel)    {
    22dc:	0f 93       	push	r16

    send_raw(CIN_PROGRAM_CHANGE, midiMessageProgramChange | normalizeChannel(channel), normalizeData(program), 0);
    22de:	26 2f       	mov	r18, r22
    22e0:	2f 77       	andi	r18, 0x7F	; 127
    22e2:	41 50       	subi	r20, 0x01	; 1
    22e4:	4f 70       	andi	r20, 0x0F	; 15
    22e6:	40 6c       	ori	r20, 0xC0	; 192
    22e8:	00 e0       	ldi	r16, 0x00	; 0
    22ea:	6c e0       	ldi	r22, 0x0C	; 12
    22ec:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>

}
    22f0:	0f 91       	pop	r16
    22f2:	08 95       	ret

000022f4 <_ZN14usb_midi_class14sendAfterTouchEhh>:

void usb_midi_class::sendAfterTouch(uint8_t pressure, uint8_t channel)  {
    22f4:	0f 93       	push	r16

    send_raw(CIN_AFTERTOUCH, midiMessageAfterTouchChannel | normalizeChannel(channel), normalizeData(pressure), 0);
    22f6:	26 2f       	mov	r18, r22
    22f8:	2f 77       	andi	r18, 0x7F	; 127
    22fa:	41 50       	subi	r20, 0x01	; 1
    22fc:	4f 70       	andi	r20, 0x0F	; 15
    22fe:	40 6d       	ori	r20, 0xD0	; 208
    2300:	00 e0       	ldi	r16, 0x00	; 0
    2302:	6d e0       	ldi	r22, 0x0D	; 13
    2304:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>

}
    2308:	0f 91       	pop	r16
    230a:	08 95       	ret

0000230c <_ZN14usb_midi_class9sendSysExEhPKhb>:

    send_raw(CIN_PITCH_BEND, midiMessagePitchBend | normalizeChannel(channel), normalizeData(value), normalizeData(value >> 7));

}

void usb_midi_class::sendSysEx(uint8_t length, const uint8_t *data, bool ArrayContainsBoundaries) {
    230c:	bf 92       	push	r11
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	6c 01       	movw	r12, r24
    2320:	16 2f       	mov	r17, r22
    2322:	ea 01       	movw	r28, r20

    //TODO: MIDI 2.5 lib automatically adds start and stop bytes
    //done!

    if (!ArrayContainsBoundaries)   {
    2324:	22 23       	and	r18, r18
    2326:	21 f0       	breq	.+8      	; 0x2330 <_ZN14usb_midi_class9sendSysExEhPKhb+0x24>

        }

    }   else {

        while (length > 3) {
    2328:	64 30       	cpi	r22, 0x04	; 4
    232a:	08 f0       	brcs	.+2      	; 0x232e <_ZN14usb_midi_class9sendSysExEhPKhb+0x22>
    232c:	74 c0       	rjmp	.+232    	; 0x2416 <_ZN14usb_midi_class9sendSysExEhPKhb+0x10a>
    232e:	88 c0       	rjmp	.+272    	; 0x2440 <_ZN14usb_midi_class9sendSysExEhPKhb+0x134>
        //append sysex start (0xF0) and stop (0xF7) bytes to array

        bool firstByte = true;
        bool startSent = false;

        while (length > 3) {
    2330:	64 30       	cpi	r22, 0x04	; 4
    2332:	08 f4       	brcc	.+2      	; 0x2336 <_ZN14usb_midi_class9sendSysExEhPKhb+0x2a>
    2334:	a3 c0       	rjmp	.+326    	; 0x247c <_ZN14usb_midi_class9sendSysExEhPKhb+0x170>
    2336:	e1 2c       	mov	r14, r1
    2338:	81 e0       	ldi	r24, 0x01	; 1

            if (firstByte)  {

                send_raw(CIN_SYSEX_START, 0xF0, data[0], data[1]);
                firstByte = false;
                startSent = true;
    233a:	bb 24       	eor	r11, r11
    233c:	b3 94       	inc	r11
    233e:	f1 2c       	mov	r15, r1
        bool firstByte = true;
        bool startSent = false;

        while (length > 3) {

            if (firstByte)  {
    2340:	88 23       	and	r24, r24
    2342:	59 f0       	breq	.+22     	; 0x235a <_ZN14usb_midi_class9sendSysExEhPKhb+0x4e>

                send_raw(CIN_SYSEX_START, 0xF0, data[0], data[1]);
    2344:	09 81       	ldd	r16, Y+1	; 0x01
    2346:	28 81       	ld	r18, Y
    2348:	40 ef       	ldi	r20, 0xF0	; 240
    234a:	64 e0       	ldi	r22, 0x04	; 4
    234c:	c6 01       	movw	r24, r12
    234e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
                firstByte = false;
                startSent = true;
                data += 2;
    2352:	22 96       	adiw	r28, 0x02	; 2
                length -= 2;
    2354:	12 50       	subi	r17, 0x02	; 2

            if (firstByte)  {

                send_raw(CIN_SYSEX_START, 0xF0, data[0], data[1]);
                firstByte = false;
                startSent = true;
    2356:	eb 2c       	mov	r14, r11
    2358:	09 c0       	rjmp	.+18     	; 0x236c <_ZN14usb_midi_class9sendSysExEhPKhb+0x60>
                data += 2;
                length -= 2;

            }   else {

                send_raw(CIN_SYSEX_START, data[0], data[1], data[2]);
    235a:	0a 81       	ldd	r16, Y+2	; 0x02
    235c:	29 81       	ldd	r18, Y+1	; 0x01
    235e:	48 81       	ld	r20, Y
    2360:	64 e0       	ldi	r22, 0x04	; 4
    2362:	c6 01       	movw	r24, r12
    2364:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
                data += 3;
    2368:	23 96       	adiw	r28, 0x03	; 3
                length -= 3;
    236a:	13 50       	subi	r17, 0x03	; 3
    236c:	8f 2d       	mov	r24, r15
        //append sysex start (0xF0) and stop (0xF7) bytes to array

        bool firstByte = true;
        bool startSent = false;

        while (length > 3) {
    236e:	14 30       	cpi	r17, 0x04	; 4
    2370:	38 f7       	brcc	.-50     	; 0x2340 <_ZN14usb_midi_class9sendSysExEhPKhb+0x34>

            }

        }

        if (length == 3)    {
    2372:	13 30       	cpi	r17, 0x03	; 3
    2374:	01 f5       	brne	.+64     	; 0x23b6 <_ZN14usb_midi_class9sendSysExEhPKhb+0xaa>

            if (startSent)  {
    2376:	ee 20       	and	r14, r14
    2378:	79 f0       	breq	.+30     	; 0x2398 <_ZN14usb_midi_class9sendSysExEhPKhb+0x8c>

                send_raw(CIN_SYSEX_START, data[0], data[1], data[2]);
    237a:	0a 81       	ldd	r16, Y+2	; 0x02
    237c:	29 81       	ldd	r18, Y+1	; 0x01
    237e:	48 81       	ld	r20, Y
    2380:	64 e0       	ldi	r22, 0x04	; 4
    2382:	c6 01       	movw	r24, r12
    2384:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
                send_raw(CIN_SYSEX_STOP_1BYTE, 0xF7, 0, 0);
    2388:	00 e0       	ldi	r16, 0x00	; 0
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	47 ef       	ldi	r20, 0xF7	; 247
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	c6 01       	movw	r24, r12
    2392:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    2396:	7a c0       	rjmp	.+244    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            }   else {

                send_raw(CIN_SYSEX_START, 0xF0, data[0], data[1]);
    2398:	09 81       	ldd	r16, Y+1	; 0x01
    239a:	28 81       	ld	r18, Y
    239c:	40 ef       	ldi	r20, 0xF0	; 240
    239e:	64 e0       	ldi	r22, 0x04	; 4
    23a0:	c6 01       	movw	r24, r12
    23a2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
                send_raw(CIN_SYSEX_STOP_2BYTE, data[2], 0xF7, 0);
    23a6:	00 e0       	ldi	r16, 0x00	; 0
    23a8:	27 ef       	ldi	r18, 0xF7	; 247
    23aa:	4a 81       	ldd	r20, Y+2	; 0x02
    23ac:	66 e0       	ldi	r22, 0x06	; 6
    23ae:	c6 01       	movw	r24, r12
    23b0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    23b4:	6b c0       	rjmp	.+214    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            }

        }

        else if (length == 2) {
    23b6:	12 30       	cpi	r17, 0x02	; 2
    23b8:	c9 f4       	brne	.+50     	; 0x23ec <_ZN14usb_midi_class9sendSysExEhPKhb+0xe0>

            if (startSent)
    23ba:	ee 20       	and	r14, r14
    23bc:	41 f0       	breq	.+16     	; 0x23ce <_ZN14usb_midi_class9sendSysExEhPKhb+0xc2>
                send_raw(CIN_SYSEX_STOP_3BYTE, data[0], data[1], 0xF7);
    23be:	07 ef       	ldi	r16, 0xF7	; 247
    23c0:	29 81       	ldd	r18, Y+1	; 0x01
    23c2:	48 81       	ld	r20, Y
    23c4:	67 e0       	ldi	r22, 0x07	; 7
    23c6:	c6 01       	movw	r24, r12
    23c8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    23cc:	5f c0       	rjmp	.+190    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            else {

                send_raw(CIN_SYSEX_START, 0xF0, data[0], data[1]);
    23ce:	09 81       	ldd	r16, Y+1	; 0x01
    23d0:	28 81       	ld	r18, Y
    23d2:	40 ef       	ldi	r20, 0xF0	; 240
    23d4:	64 e0       	ldi	r22, 0x04	; 4
    23d6:	c6 01       	movw	r24, r12
    23d8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
                send_raw(CIN_SYSEX_STOP_1BYTE, 0xF7, 0, 0);
    23dc:	00 e0       	ldi	r16, 0x00	; 0
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	47 ef       	ldi	r20, 0xF7	; 247
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	c6 01       	movw	r24, r12
    23e6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    23ea:	50 c0       	rjmp	.+160    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            }

        }

        else if (length == 1) {
    23ec:	11 30       	cpi	r17, 0x01	; 1
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <_ZN14usb_midi_class9sendSysExEhPKhb+0xe6>
    23f0:	4d c0       	rjmp	.+154    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            if (startSent)  send_raw(CIN_SYSEX_STOP_2BYTE, data[0], 0xF7, 0);
    23f2:	ee 20       	and	r14, r14
    23f4:	41 f0       	breq	.+16     	; 0x2406 <_ZN14usb_midi_class9sendSysExEhPKhb+0xfa>
    23f6:	00 e0       	ldi	r16, 0x00	; 0
    23f8:	27 ef       	ldi	r18, 0xF7	; 247
    23fa:	48 81       	ld	r20, Y
    23fc:	66 e0       	ldi	r22, 0x06	; 6
    23fe:	c6 01       	movw	r24, r12
    2400:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    2404:	43 c0       	rjmp	.+134    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>
            else            send_raw(CIN_SYSEX_STOP_3BYTE, 0xF0, data[0], 0xF7);
    2406:	07 ef       	ldi	r16, 0xF7	; 247
    2408:	28 81       	ld	r18, Y
    240a:	40 ef       	ldi	r20, 0xF0	; 240
    240c:	67 e0       	ldi	r22, 0x07	; 7
    240e:	c6 01       	movw	r24, r12
    2410:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    2414:	3b c0       	rjmp	.+118    	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>
    2416:	7a 01       	movw	r14, r20
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	e8 0e       	add	r14, r24
    241c:	f1 1c       	adc	r15, r1
    241e:	f7 01       	movw	r30, r14
    2420:	31 97       	sbiw	r30, 0x01	; 1

    }   else {

        while (length > 3) {

            send_raw(CIN_SYSEX_START, data[0], data[1], data[2]);
    2422:	d7 01       	movw	r26, r14
    2424:	0c 91       	ld	r16, X
    2426:	20 81       	ld	r18, Z
    2428:	48 81       	ld	r20, Y
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	c6 01       	movw	r24, r12
    242e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
            data += 3;
    2432:	23 96       	adiw	r28, 0x03	; 3
            length -= 3;
    2434:	13 50       	subi	r17, 0x03	; 3
    2436:	b3 e0       	ldi	r27, 0x03	; 3
    2438:	eb 0e       	add	r14, r27
    243a:	f1 1c       	adc	r15, r1

        }

    }   else {

        while (length > 3) {
    243c:	14 30       	cpi	r17, 0x04	; 4
    243e:	78 f7       	brcc	.-34     	; 0x241e <_ZN14usb_midi_class9sendSysExEhPKhb+0x112>
            data += 3;
            length -= 3;

        }

        if (length == 3)        send_raw(CIN_SYSEX_STOP_3BYTE, data[0], data[1], data[2]);
    2440:	13 30       	cpi	r17, 0x03	; 3
    2442:	41 f4       	brne	.+16     	; 0x2454 <_ZN14usb_midi_class9sendSysExEhPKhb+0x148>
    2444:	0a 81       	ldd	r16, Y+2	; 0x02
    2446:	29 81       	ldd	r18, Y+1	; 0x01
    2448:	48 81       	ld	r20, Y
    244a:	67 e0       	ldi	r22, 0x07	; 7
    244c:	c6 01       	movw	r24, r12
    244e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    2452:	1c c0       	rjmp	.+56     	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>
        else if (length == 2)   send_raw(CIN_SYSEX_STOP_2BYTE, data[0], data[1], 0);
    2454:	12 30       	cpi	r17, 0x02	; 2
    2456:	41 f4       	brne	.+16     	; 0x2468 <_ZN14usb_midi_class9sendSysExEhPKhb+0x15c>
    2458:	00 e0       	ldi	r16, 0x00	; 0
    245a:	29 81       	ldd	r18, Y+1	; 0x01
    245c:	48 81       	ld	r20, Y
    245e:	66 e0       	ldi	r22, 0x06	; 6
    2460:	c6 01       	movw	r24, r12
    2462:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    2466:	12 c0       	rjmp	.+36     	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>
        else if (length == 1)   send_raw(CIN_SYSEX_STOP_1BYTE, data[0], 0, 0);
    2468:	11 30       	cpi	r17, 0x01	; 1
    246a:	81 f4       	brne	.+32     	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>
    246c:	00 e0       	ldi	r16, 0x00	; 0
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	48 81       	ld	r20, Y
    2472:	65 e0       	ldi	r22, 0x05	; 5
    2474:	c6 01       	movw	r24, r12
    2476:	0e 94 fd 10 	call	0x21fa	; 0x21fa <_ZN14usb_midi_class8send_rawEhhhh>
    247a:	08 c0       	rjmp	.+16     	; 0x248c <_ZN14usb_midi_class9sendSysExEhPKhb+0x180>

            }

        }

        if (length == 3)    {
    247c:	63 30       	cpi	r22, 0x03	; 3
    247e:	09 f4       	brne	.+2      	; 0x2482 <_ZN14usb_midi_class9sendSysExEhPKhb+0x176>
    2480:	8b cf       	rjmp	.-234    	; 0x2398 <_ZN14usb_midi_class9sendSysExEhPKhb+0x8c>

            }

        }

        else if (length == 2) {
    2482:	62 30       	cpi	r22, 0x02	; 2
    2484:	09 f4       	brne	.+2      	; 0x2488 <_ZN14usb_midi_class9sendSysExEhPKhb+0x17c>
    2486:	a3 cf       	rjmp	.-186    	; 0x23ce <_ZN14usb_midi_class9sendSysExEhPKhb+0xc2>
    2488:	e1 2c       	mov	r14, r1
    248a:	b0 cf       	rjmp	.-160    	; 0x23ec <_ZN14usb_midi_class9sendSysExEhPKhb+0xe0>
        else if (length == 2)   send_raw(CIN_SYSEX_STOP_2BYTE, data[0], data[1], 0);
        else if (length == 1)   send_raw(CIN_SYSEX_STOP_1BYTE, data[0], 0, 0);

    }

}
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	bf 90       	pop	r11
    249e:	08 95       	ret

000024a0 <_ZN14usb_midi_class15read_sysex_byteEh>:

}

void usb_midi_class::read_sysex_byte(uint8_t b) {

    if (msg_sysex_len < MIDI_SYSEX_ARRAY_SIZE)
    24a0:	fc 01       	movw	r30, r24
    24a2:	eb 5a       	subi	r30, 0xAB	; 171
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	20 81       	ld	r18, Z
    24a8:	20 35       	cpi	r18, 0x50	; 80
    24aa:	38 f4       	brcc	.+14     	; 0x24ba <_ZN14usb_midi_class15read_sysex_byteEh+0x1a>
        msg_sysex[msg_sysex_len++] = b;
    24ac:	31 e0       	ldi	r19, 0x01	; 1
    24ae:	32 0f       	add	r19, r18
    24b0:	30 83       	st	Z, r19
    24b2:	fc 01       	movw	r30, r24
    24b4:	e2 0f       	add	r30, r18
    24b6:	f1 1d       	adc	r31, r1
    24b8:	65 83       	std	Z+5, r22	; 0x05
    24ba:	08 95       	ret

000024bc <_ZN14usb_midi_class4readEv>:

    SREG = intr_state;

}

bool usb_midi_class::read() {
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	dc 01       	movw	r26, r24

    uint8_t decodedChannel, intr_state;
    uint8_t b0, b1, b2, b3, cin, messageType;

    intr_state = SREG;
    24ca:	3f b7       	in	r19, 0x3f	; 63
    cli();
    24cc:	f8 94       	cli

    if (!usb_configuration) {
    24ce:	90 91 f0 07 	lds	r25, 0x07F0
    24d2:	91 11       	cpse	r25, r1
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <_ZN14usb_midi_class4readEv+0x20>

        SREG = intr_state;
    24d6:	3f bf       	out	0x3f, r19	; 63
        return false;
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	09 c1       	rjmp	.+530    	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

    }

    UENUM = MIDI_RX_ENDPOINT;
    24dc:	84 e0       	ldi	r24, 0x04	; 4
    24de:	80 93 e9 00 	sts	0x00E9, r24

    retry:
    decodedChannel = UEINTX;
    24e2:	90 91 e8 00 	lds	r25, 0x00E8

    if (!(decodedChannel & (1<<RWAL))) {
    24e6:	95 fd       	sbrc	r25, 5
    24e8:	11 c0       	rjmp	.+34     	; 0x250c <_ZN14usb_midi_class4readEv+0x50>

        if (decodedChannel & (1<<RXOUTI)) {
    24ea:	92 fd       	sbrc	r25, 2
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <_ZN14usb_midi_class4readEv+0x3a>
    24ee:	0b c0       	rjmp	.+22     	; 0x2506 <_ZN14usb_midi_class4readEv+0x4a>
    24f0:	92 fd       	sbrc	r25, 2
    24f2:	04 c0       	rjmp	.+8      	; 0x24fc <_ZN14usb_midi_class4readEv+0x40>
    24f4:	08 c0       	rjmp	.+16     	; 0x2506 <_ZN14usb_midi_class4readEv+0x4a>

            UEINTX = 0x6B;
    24f6:	e8 ee       	ldi	r30, 0xE8	; 232
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	2b e6       	ldi	r18, 0x6B	; 107
    24fc:	20 83       	st	Z, r18
    }

    UENUM = MIDI_RX_ENDPOINT;

    retry:
    decodedChannel = UEINTX;
    24fe:	90 81       	ld	r25, Z

    if (!(decodedChannel & (1<<RWAL))) {
    2500:	95 ff       	sbrs	r25, 5
    2502:	f6 cf       	rjmp	.-20     	; 0x24f0 <_ZN14usb_midi_class4readEv+0x34>
    2504:	03 c0       	rjmp	.+6      	; 0x250c <_ZN14usb_midi_class4readEv+0x50>
            UEINTX = 0x6B;
            goto retry;

        }

        SREG = intr_state;
    2506:	3f bf       	out	0x3f, r19	; 63
        return false;
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	f1 c0       	rjmp	.+482    	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

    }

    b0 = UEDATX;
    250c:	e1 ef       	ldi	r30, 0xF1	; 241
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	c0 81       	ld	r28, Z
    b1 = UEDATX;
    2512:	60 81       	ld	r22, Z
    b2 = UEDATX;
    2514:	f0 80       	ld	r15, Z
    b3 = UEDATX;
    2516:	e0 80       	ld	r14, Z

    if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    2518:	80 91 e8 00 	lds	r24, 0x00E8
    251c:	85 fd       	sbrc	r24, 5
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <_ZN14usb_midi_class4readEv+0x6a>
    2520:	8b e6       	ldi	r24, 0x6B	; 107
    2522:	80 93 e8 00 	sts	0x00E8, r24
    2526:	8d 01       	movw	r16, r26
    SREG = intr_state;
    2528:	3f bf       	out	0x3f, r19	; 63

    cin = b0 & 0x0F;
    252a:	cf 70       	andi	r28, 0x0F	; 15
    messageType = b1 & 0xF0;
    decodedChannel = (b1 & 0x0F) + 1;

    if (cin >= CIN_NOTE_OFF && cin <= CIN_PITCH_BEND) {
    252c:	88 ef       	ldi	r24, 0xF8	; 248
    252e:	8c 0f       	add	r24, r28
    2530:	87 30       	cpi	r24, 0x07	; 7
    2532:	08 f0       	brcs	.+2      	; 0x2536 <_ZN14usb_midi_class4readEv+0x7a>
    2534:	9b c0       	rjmp	.+310    	; 0x266c <_ZN14usb_midi_class4readEv+0x1b0>
    if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    SREG = intr_state;

    cin = b0 & 0x0F;
    messageType = b1 & 0xF0;
    decodedChannel = (b1 & 0x0F) + 1;
    2536:	d6 2f       	mov	r29, r22
    2538:	df 70       	andi	r29, 0x0F	; 15
    253a:	df 5f       	subi	r29, 0xFF	; 255

    if (cin >= CIN_NOTE_OFF && cin <= CIN_PITCH_BEND) {

        if (inChannel && inChannel != decodedChannel) {
    253c:	8c 91       	ld	r24, X
    253e:	88 23       	and	r24, r24
    2540:	11 f0       	breq	.+4      	; 0x2546 <_ZN14usb_midi_class4readEv+0x8a>
    2542:	d8 13       	cpse	r29, r24
    2544:	c3 c0       	rjmp	.+390    	; 0x26cc <_ZN14usb_midi_class4readEv+0x210>

    if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    SREG = intr_state;

    cin = b0 & 0x0F;
    messageType = b1 & 0xF0;
    2546:	96 2f       	mov	r25, r22
    2548:	90 7f       	andi	r25, 0xF0	; 240
            //ignore other channels when user wants single channel read
            return false;

        }

        if (cin == CIN_NOTE_OFF && messageType == midiMessageNoteOff) {
    254a:	c8 30       	cpi	r28, 0x08	; 8
    254c:	a9 f4       	brne	.+42     	; 0x2578 <_ZN14usb_midi_class4readEv+0xbc>
    254e:	90 38       	cpi	r25, 0x80	; 128
    2550:	09 f0       	breq	.+2      	; 0x2554 <_ZN14usb_midi_class4readEv+0x98>
    2552:	be c0       	rjmp	.+380    	; 0x26d0 <_ZN14usb_midi_class4readEv+0x214>

            //note off
            msg_type = midiMessageNoteOff;
    2554:	80 e8       	ldi	r24, 0x80	; 128
    2556:	d8 01       	movw	r26, r16
    2558:	12 96       	adiw	r26, 0x02	; 2
    255a:	8c 93       	st	X, r24
            if (handleNoteOff) (*handleNoteOff)(decodedChannel, b2, b3);
    255c:	f8 01       	movw	r30, r16
    255e:	ea 5a       	subi	r30, 0xAA	; 170
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	30 97       	sbiw	r30, 0x00	; 0
    256a:	09 f4       	brne	.+2      	; 0x256e <_ZN14usb_midi_class4readEv+0xb2>
    256c:	74 c0       	rjmp	.+232    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    256e:	4e 2d       	mov	r20, r14
    2570:	6f 2d       	mov	r22, r15
    2572:	8d 2f       	mov	r24, r29
    2574:	09 95       	icall
    2576:	6f c0       	rjmp	.+222    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>

            goto return_message;

        }

        if (cin == CIN_NOTE_ON && messageType == midiMessageNoteOn) {
    2578:	c9 30       	cpi	r28, 0x09	; 9
    257a:	99 f4       	brne	.+38     	; 0x25a2 <_ZN14usb_midi_class4readEv+0xe6>
    257c:	90 39       	cpi	r25, 0x90	; 144
    257e:	09 f0       	breq	.+2      	; 0x2582 <_ZN14usb_midi_class4readEv+0xc6>
    2580:	a9 c0       	rjmp	.+338    	; 0x26d4 <_ZN14usb_midi_class4readEv+0x218>

            //note on
            msg_type = midiMessageNoteOn;
    2582:	80 e9       	ldi	r24, 0x90	; 144
    2584:	f8 01       	movw	r30, r16
    2586:	82 83       	std	Z+2, r24	; 0x02
            if (handleNoteOn) (*handleNoteOn)(decodedChannel, b2, b3);
    2588:	e8 5a       	subi	r30, 0xA8	; 168
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	01 90       	ld	r0, Z+
    258e:	f0 81       	ld	r31, Z
    2590:	e0 2d       	mov	r30, r0
    2592:	30 97       	sbiw	r30, 0x00	; 0
    2594:	09 f4       	brne	.+2      	; 0x2598 <_ZN14usb_midi_class4readEv+0xdc>
    2596:	5f c0       	rjmp	.+190    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    2598:	4e 2d       	mov	r20, r14
    259a:	6f 2d       	mov	r22, r15
    259c:	8d 2f       	mov	r24, r29
    259e:	09 95       	icall
    25a0:	5a c0       	rjmp	.+180    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>

            goto return_message;

        }

        if (cin == CIN_CONTROL_CHANGE && messageType == midiMessageControlChange) {
    25a2:	cb 30       	cpi	r28, 0x0B	; 11
    25a4:	a9 f4       	brne	.+42     	; 0x25d0 <_ZN14usb_midi_class4readEv+0x114>
    25a6:	90 3b       	cpi	r25, 0xB0	; 176
    25a8:	09 f0       	breq	.+2      	; 0x25ac <_ZN14usb_midi_class4readEv+0xf0>
    25aa:	96 c0       	rjmp	.+300    	; 0x26d8 <_ZN14usb_midi_class4readEv+0x21c>

            //control change
            msg_type = midiMessageControlChange;
    25ac:	80 eb       	ldi	r24, 0xB0	; 176
    25ae:	d8 01       	movw	r26, r16
    25b0:	12 96       	adiw	r26, 0x02	; 2
    25b2:	8c 93       	st	X, r24
            if (handleControlChange) (*handleControlChange)(decodedChannel, b2, b3);
    25b4:	f8 01       	movw	r30, r16
    25b6:	e6 5a       	subi	r30, 0xA6	; 166
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	01 90       	ld	r0, Z+
    25bc:	f0 81       	ld	r31, Z
    25be:	e0 2d       	mov	r30, r0
    25c0:	30 97       	sbiw	r30, 0x00	; 0
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <_ZN14usb_midi_class4readEv+0x10a>
    25c4:	48 c0       	rjmp	.+144    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    25c6:	4e 2d       	mov	r20, r14
    25c8:	6f 2d       	mov	r22, r15
    25ca:	8d 2f       	mov	r24, r29
    25cc:	09 95       	icall
    25ce:	43 c0       	rjmp	.+134    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>

            goto return_message;

        }

        if (cin == CIN_PROGRAM_CHANGE && messageType == midiMessageProgramChange) {
    25d0:	cc 30       	cpi	r28, 0x0C	; 12
    25d2:	89 f4       	brne	.+34     	; 0x25f6 <_ZN14usb_midi_class4readEv+0x13a>
    25d4:	90 3c       	cpi	r25, 0xC0	; 192
    25d6:	09 f0       	breq	.+2      	; 0x25da <_ZN14usb_midi_class4readEv+0x11e>
    25d8:	81 c0       	rjmp	.+258    	; 0x26dc <_ZN14usb_midi_class4readEv+0x220>

            //program change
            msg_type = midiMessageProgramChange;
    25da:	80 ec       	ldi	r24, 0xC0	; 192
    25dc:	f8 01       	movw	r30, r16
    25de:	82 83       	std	Z+2, r24	; 0x02
            if (handleProgramChange) (*handleProgramChange)(decodedChannel, b2);
    25e0:	e4 5a       	subi	r30, 0xA4	; 164
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	01 90       	ld	r0, Z+
    25e6:	f0 81       	ld	r31, Z
    25e8:	e0 2d       	mov	r30, r0
    25ea:	30 97       	sbiw	r30, 0x00	; 0
    25ec:	a1 f1       	breq	.+104    	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    25ee:	6f 2d       	mov	r22, r15
    25f0:	8d 2f       	mov	r24, r29
    25f2:	09 95       	icall
    25f4:	30 c0       	rjmp	.+96     	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>

            goto return_message;

        }

        if (cin == CIN_AFTERTOUCH && messageType == midiMessageAfterTouchChannel) {
    25f6:	cd 30       	cpi	r28, 0x0D	; 13
    25f8:	99 f4       	brne	.+38     	; 0x2620 <_ZN14usb_midi_class4readEv+0x164>
    25fa:	90 3d       	cpi	r25, 0xD0	; 208
    25fc:	09 f0       	breq	.+2      	; 0x2600 <_ZN14usb_midi_class4readEv+0x144>
    25fe:	70 c0       	rjmp	.+224    	; 0x26e0 <_ZN14usb_midi_class4readEv+0x224>

            //aftertouch
            msg_type = midiMessageAfterTouchChannel;
    2600:	80 ed       	ldi	r24, 0xD0	; 208
    2602:	d8 01       	movw	r26, r16
    2604:	12 96       	adiw	r26, 0x02	; 2
    2606:	8c 93       	st	X, r24
            if (handleAfterTouch) (*handleAfterTouch)(decodedChannel, b2);
    2608:	f8 01       	movw	r30, r16
    260a:	e2 5a       	subi	r30, 0xA2	; 162
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	01 90       	ld	r0, Z+
    2610:	f0 81       	ld	r31, Z
    2612:	e0 2d       	mov	r30, r0
    2614:	30 97       	sbiw	r30, 0x00	; 0
    2616:	f9 f0       	breq	.+62     	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    2618:	6f 2d       	mov	r22, r15
    261a:	8d 2f       	mov	r24, r29
    261c:	09 95       	icall
    261e:	1b c0       	rjmp	.+54     	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>

            goto return_message;

        }

        if (cin == CIN_PITCH_BEND && messageType == midiMessagePitchBend) {
    2620:	ce 30       	cpi	r28, 0x0E	; 14
    2622:	09 f0       	breq	.+2      	; 0x2626 <_ZN14usb_midi_class4readEv+0x16a>
    2624:	5f c0       	rjmp	.+190    	; 0x26e4 <_ZN14usb_midi_class4readEv+0x228>
    2626:	90 3e       	cpi	r25, 0xE0	; 224
    2628:	09 f0       	breq	.+2      	; 0x262c <_ZN14usb_midi_class4readEv+0x170>
    262a:	5e c0       	rjmp	.+188    	; 0x26e8 <_ZN14usb_midi_class4readEv+0x22c>

            //pitch bend
            msg_type = midiMessagePitchBend;
    262c:	80 ee       	ldi	r24, 0xE0	; 224
    262e:	f8 01       	movw	r30, r16
    2630:	82 83       	std	Z+2, r24	; 0x02
            if (handlePitchChange) (*handlePitchChange)(decodedChannel, (b2 & 0x7F) | ((b3 & 0x7F) << 7));
    2632:	e0 5a       	subi	r30, 0xA0	; 160
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	01 90       	ld	r0, Z+
    2638:	f0 81       	ld	r31, Z
    263a:	e0 2d       	mov	r30, r0
    263c:	30 97       	sbiw	r30, 0x00	; 0
    263e:	59 f0       	breq	.+22     	; 0x2656 <_ZN14usb_midi_class4readEv+0x19a>
    2640:	6e 2d       	mov	r22, r14
    2642:	6f 77       	andi	r22, 0x7F	; 127
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	68 9f       	mul	r22, r24
    2648:	b0 01       	movw	r22, r0
    264a:	11 24       	eor	r1, r1
    264c:	8f 2d       	mov	r24, r15
    264e:	8f 77       	andi	r24, 0x7F	; 127
    2650:	68 2b       	or	r22, r24
    2652:	8d 2f       	mov	r24, r29
    2654:	09 95       	icall
        return false;

        return_message:
        // only update these when returning true for a parsed message
        // all other return cases will preserve these user-visible values
        msg_channel = decodedChannel;
    2656:	d8 01       	movw	r26, r16
    2658:	11 96       	adiw	r26, 0x01	; 1
    265a:	dc 93       	st	X, r29
    265c:	11 97       	sbiw	r26, 0x01	; 1
        msg_data1 = b2;
    265e:	13 96       	adiw	r26, 0x03	; 3
    2660:	fc 92       	st	X, r15
    2662:	13 97       	sbiw	r26, 0x03	; 3
        msg_data2 = b3;
    2664:	14 96       	adiw	r26, 0x04	; 4
    2666:	ec 92       	st	X, r14
        return true;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	41 c0       	rjmp	.+130    	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

    }

    if (cin == CIN_SYSEX_START) {
    266c:	c4 30       	cpi	r28, 0x04	; 4
    266e:	69 f4       	brne	.+26     	; 0x268a <_ZN14usb_midi_class4readEv+0x1ce>

        read_sysex_byte(b1);
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        read_sysex_byte(b2);
    2676:	6f 2d       	mov	r22, r15
    2678:	c8 01       	movw	r24, r16
    267a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        read_sysex_byte(b3);
    267e:	6e 2d       	mov	r22, r14
    2680:	c8 01       	movw	r24, r16
    2682:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        return false;
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	32 c0       	rjmp	.+100    	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

    }

    if (cin >= CIN_SYSEX_STOP_1BYTE && cin <= CIN_SYSEX_STOP_3BYTE) {
    268a:	8b ef       	ldi	r24, 0xFB	; 251
    268c:	8c 0f       	add	r24, r28
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	68 f5       	brcc	.+90     	; 0x26ec <_ZN14usb_midi_class4readEv+0x230>

        read_sysex_byte(b1);
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        if (cin >= CIN_SYSEX_STOP_2BYTE) read_sysex_byte(b2);
    2698:	c6 30       	cpi	r28, 0x06	; 6
    269a:	20 f0       	brcs	.+8      	; 0x26a4 <_ZN14usb_midi_class4readEv+0x1e8>
    269c:	6f 2d       	mov	r22, r15
    269e:	c8 01       	movw	r24, r16
    26a0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        if (cin == CIN_SYSEX_STOP_3BYTE) read_sysex_byte(b3);
    26a4:	c7 30       	cpi	r28, 0x07	; 7
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <_ZN14usb_midi_class4readEv+0x1f4>
    26a8:	6e 2d       	mov	r22, r14
    26aa:	c8 01       	movw	r24, r16
    26ac:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN14usb_midi_class15read_sysex_byteEh>
        msg_data1 = msg_sysex_len;
    26b0:	f8 01       	movw	r30, r16
    26b2:	eb 5a       	subi	r30, 0xAB	; 171
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	d8 01       	movw	r26, r16
    26ba:	13 96       	adiw	r26, 0x03	; 3
    26bc:	8c 93       	st	X, r24
    26be:	13 97       	sbiw	r26, 0x03	; 3
        msg_sysex_len = 0;
    26c0:	10 82       	st	Z, r1
        msg_type = midiMessageSystemExclusive;
    26c2:	80 ef       	ldi	r24, 0xF0	; 240
    26c4:	12 96       	adiw	r26, 0x02	; 2
    26c6:	8c 93       	st	X, r24
        return true;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	11 c0       	rjmp	.+34     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    if (cin >= CIN_NOTE_OFF && cin <= CIN_PITCH_BEND) {

        if (inChannel && inChannel != decodedChannel) {

            //ignore other channels when user wants single channel read
            return false;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

            goto return_message;

        }

        return false;
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	0b c0       	rjmp	.+22     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	09 c0       	rjmp	.+18     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	07 c0       	rjmp	.+14     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <_ZN14usb_midi_class4readEv+0x232>

        }

    }

    return false;
    26ec:	80 e0       	ldi	r24, 0x00	; 0

}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	08 95       	ret

000026fc <_Z18disablePeripheralsv>:
}

void disablePeripherals(void)   {

    //disable eeprom
    EECR = 0;
    26fc:	1f ba       	out	0x1f, r1	; 31

    //disable analog comparator
    ACSR = 0;
    26fe:	10 be       	out	0x30, r1	; 48

    //disable SPI
    SPCR = 0;
    2700:	1c bc       	out	0x2c, r1	; 44

    //disable external interrupts
    EIMSK = 0;
    2702:	1d ba       	out	0x1d, r1	; 29

    //disable pin change interrupts
    PCICR = 0;
    2704:	10 92 68 00 	sts	0x0068, r1

    //disable ADC
    ADCSRA = 0;
    2708:	10 92 7a 00 	sts	0x007A, r1

    //disable timers
    TIMSK0 = 0;
    270c:	10 92 6e 00 	sts	0x006E, r1
    TIMSK1 = 0;
    2710:	10 92 6f 00 	sts	0x006F, r1
    TIMSK3 = 0;
    2714:	10 92 71 00 	sts	0x0071, r1
    TIMSK4 = 0;
    2718:	10 92 72 00 	sts	0x0072, r1

    //disable USART
    UCSR1B = 0;
    271c:	10 92 c9 00 	sts	0x00C9, r1

    //disable I2C
    TWCR = 0;
    2720:	10 92 bc 00 	sts	0x00BC, r1

    //write low to all pins
    PORTB = 0;
    2724:	15 b8       	out	0x05, r1	; 5
    PORTC = 0;
    2726:	18 b8       	out	0x08, r1	; 8
    PORTD = 0;
    2728:	1b b8       	out	0x0b, r1	; 11
    PORTE = 0;
    272a:	1e b8       	out	0x0e, r1	; 14
    PORTF = 0;
    272c:	11 ba       	out	0x11, r1	; 17

    //set all pins to inputs
    DDRB = 0;
    272e:	14 b8       	out	0x04, r1	; 4
    DDRC = 0;
    2730:	17 b8       	out	0x07, r1	; 7
    DDRD = 0;
    2732:	1a b8       	out	0x0a, r1	; 10
    DDRE = 0;
    2734:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0;
    2736:	10 ba       	out	0x10, r1	; 16
    2738:	08 95       	ret

0000273a <_Z6rebooth>:

}

void reboot(uint8_t mode)    {
    273a:	cf 93       	push	r28
    273c:	c8 2f       	mov	r28, r24

    cli();
    273e:	f8 94       	cli
    //stop watchdog timer, if running
    MCUSR &= ~(1<<WDFR);
    2740:	94 b7       	in	r25, 0x34	; 52
    2742:	97 7f       	andi	r25, 0xF7	; 247
    2744:	94 bf       	out	0x34, r25	; 52
    WDTCSR |= (1<<WDCE);
    2746:	e0 e6       	ldi	r30, 0x60	; 96
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	90 81       	ld	r25, Z
    274c:	90 61       	ori	r25, 0x10	; 16
    274e:	90 83       	st	Z, r25
    WDTCSR = 0;
    2750:	10 82       	st	Z, r1
    2752:	8f e1       	ldi	r24, 0x1F	; 31
    2754:	9e e4       	ldi	r25, 0x4E	; 78
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <_Z6rebooth+0x1c>
    275a:	00 c0       	rjmp	.+0      	; 0x275c <_Z6rebooth+0x22>
    275c:	00 00       	nop
    _delay_ms(5);
    UDCON = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 e0 00 	sts	0x00E0, r24
    USBCON = (1<<FRZCLK);
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	80 93 d8 00 	sts	0x00D8, r24
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	27 ea       	ldi	r18, 0xA7	; 167
    276e:	81 e6       	ldi	r24, 0x61	; 97
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	20 40       	sbci	r18, 0x00	; 0
    2774:	80 40       	sbci	r24, 0x00	; 0
    2776:	e1 f7       	brne	.-8      	; 0x2770 <_Z6rebooth+0x36>
    2778:	00 c0       	rjmp	.+0      	; 0x277a <_Z6rebooth+0x40>
    277a:	00 00       	nop
    _delay_ms(2000);
    disablePeripherals();
    277c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z18disablePeripheralsv>

    switch(mode)    {
    2780:	cc 23       	and	r28, r28
    2782:	19 f0       	breq	.+6      	; 0x278a <_Z6rebooth+0x50>
    2784:	c1 30       	cpi	r28, 0x01	; 1
    2786:	61 f0       	breq	.+24     	; 0x27a0 <_Z6rebooth+0x66>
    2788:	22 c0       	rjmp	.+68     	; 0x27ce <_Z6rebooth+0x94>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    278a:	9c e0       	ldi	r25, 0x0C	; 12
    278c:	88 e1       	ldi	r24, 0x18	; 24
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	a8 95       	wdr
    2794:	80 93 60 00 	sts	0x0060, r24
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	90 93 60 00 	sts	0x0060, r25
    279e:	ff cf       	rjmp	.-2      	; 0x279e <_Z6rebooth+0x64>
        for (;;);
        break;

        case BTLDR_REBOOT:
        //set the bootloader key to the magic value and force a reset
        Boot_Key = MAGIC_BOOT_KEY;
    27a0:	8a ec       	ldi	r24, 0xCA	; 202
    27a2:	9c ea       	ldi	r25, 0xAC	; 172
    27a4:	a2 e4       	ldi	r26, 0x42	; 66
    27a6:	bc ed       	ldi	r27, 0xDC	; 220
    27a8:	80 93 ea 07 	sts	0x07EA, r24
    27ac:	90 93 eb 07 	sts	0x07EB, r25
    27b0:	a0 93 ec 07 	sts	0x07EC, r26
    27b4:	b0 93 ed 07 	sts	0x07ED, r27
    27b8:	9c e0       	ldi	r25, 0x0C	; 12
    27ba:	88 e1       	ldi	r24, 0x18	; 24
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	a8 95       	wdr
    27c2:	80 93 60 00 	sts	0x0060, r24
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	90 93 60 00 	sts	0x0060, r25
    UDCON = 1;
    USBCON = (1<<FRZCLK);
    _delay_ms(2000);
    disablePeripherals();

    switch(mode)    {
    27cc:	ff cf       	rjmp	.-2      	; 0x27cc <_Z6rebooth+0x92>
        for (;;);
        break;

    }

    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <__vector_25>:
bool    rxEnabled,
        txEnabled;

//isr functions

ISR(USART1_RX_vect) {
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	2f 93       	push	r18
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	ef 93       	push	r30
    27e4:	ff 93       	push	r31

    uint8_t data, bufferIndex;

    data = UDR1;
    27e6:	20 91 ce 00 	lds	r18, 0x00CE
    bufferIndex = rx_buffer_head + 1;
    27ea:	80 91 6c 04 	lds	r24, 0x046C
    27ee:	8f 5f       	subi	r24, 0xFF	; 255

    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    27f0:	80 35       	cpi	r24, 0x50	; 80
    27f2:	08 f0       	brcs	.+2      	; 0x27f6 <__vector_25+0x24>
    27f4:	80 e0       	ldi	r24, 0x00	; 0

    if (bufferIndex != rx_buffer_tail) {
    27f6:	90 91 6b 04 	lds	r25, 0x046B
    27fa:	89 17       	cp	r24, r25
    27fc:	39 f0       	breq	.+14     	; 0x280c <__vector_25+0x3a>

        rx_buffer[bufferIndex] = data;
    27fe:	e8 2f       	mov	r30, r24
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	e3 59       	subi	r30, 0x93	; 147
    2804:	fb 4f       	sbci	r31, 0xFB	; 251
    2806:	20 83       	st	Z, r18
        rx_buffer_head = bufferIndex;
    2808:	80 93 6c 04 	sts	0x046C, r24

    }

}
    280c:	ff 91       	pop	r31
    280e:	ef 91       	pop	r30
    2810:	9f 91       	pop	r25
    2812:	8f 91       	pop	r24
    2814:	2f 91       	pop	r18
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <__vector_26>:

ISR(USART1_UDRE_vect)   {
    2820:	1f 92       	push	r1
    2822:	0f 92       	push	r0
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	0f 92       	push	r0
    2828:	11 24       	eor	r1, r1
    282a:	8f 93       	push	r24
    282c:	9f 93       	push	r25
    282e:	ef 93       	push	r30
    2830:	ff 93       	push	r31

    uint8_t bufferIndex;

    if (tx_buffer_head == tx_buffer_tail) {
    2832:	90 91 6a 04 	lds	r25, 0x046A
    2836:	80 91 69 04 	lds	r24, 0x0469
    283a:	98 13       	cpse	r25, r24
    283c:	0c c0       	rjmp	.+24     	; 0x2856 <__vector_26+0x36>

        // buffer is empty, disable transmit interrupt
        if (!rxEnabled)
    283e:	80 91 68 04 	lds	r24, 0x0468
    2842:	81 11       	cpse	r24, r1
    2844:	04 c0       	rjmp	.+8      	; 0x284e <__vector_26+0x2e>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    2846:	88 e4       	ldi	r24, 0x48	; 72
    2848:	80 93 c9 00 	sts	0x00C9, r24
    284c:	13 c0       	rjmp	.+38     	; 0x2874 <__vector_26+0x54>
        else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    284e:	88 ed       	ldi	r24, 0xD8	; 216
    2850:	80 93 c9 00 	sts	0x00C9, r24
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <__vector_26+0x54>

    } else {

        bufferIndex = tx_buffer_tail + 1;
    2856:	80 91 69 04 	lds	r24, 0x0469
    285a:	8f 5f       	subi	r24, 0xFF	; 255
        if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    285c:	80 35       	cpi	r24, 0x50	; 80
    285e:	08 f0       	brcs	.+2      	; 0x2862 <__vector_26+0x42>
    2860:	80 e0       	ldi	r24, 0x00	; 0
        UDR1 = tx_buffer[bufferIndex];
    2862:	e8 2f       	mov	r30, r24
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	e3 54       	subi	r30, 0x43	; 67
    2868:	fb 4f       	sbci	r31, 0xFB	; 251
    286a:	90 81       	ld	r25, Z
    286c:	90 93 ce 00 	sts	0x00CE, r25
        tx_buffer_tail = bufferIndex;
    2870:	80 93 69 04 	sts	0x0469, r24

    }

}
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	0f 90       	pop	r0
    2882:	1f 90       	pop	r1
    2884:	18 95       	reti

00002886 <__vector_27>:

ISR(USART1_TX_vect) {}
    2886:	1f 92       	push	r1
    2888:	0f 92       	push	r0
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	0f 92       	push	r0
    288e:	11 24       	eor	r1, r1
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	0f 90       	pop	r0
    2896:	1f 90       	pop	r1
    2898:	18 95       	reti

0000289a <_ZN4UART4readEv>:

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    289a:	90 91 6c 04 	lds	r25, 0x046C
    289e:	80 91 6b 04 	lds	r24, 0x046B
    28a2:	98 17       	cp	r25, r24
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <_ZN4UART4readEv+0x28>
    bufferIndex = rx_buffer_tail + 1;
    28a6:	90 91 6b 04 	lds	r25, 0x046B
    28aa:	9f 5f       	subi	r25, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    28ac:	90 35       	cpi	r25, 0x50	; 80
    28ae:	08 f0       	brcs	.+2      	; 0x28b2 <_ZN4UART4readEv+0x18>
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    data = rx_buffer[bufferIndex];
    28b2:	e9 2f       	mov	r30, r25
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	e3 59       	subi	r30, 0x93	; 147
    28b8:	fb 4f       	sbci	r31, 0xFB	; 251
    28ba:	80 81       	ld	r24, Z
    rx_buffer_tail = bufferIndex;
    28bc:	90 93 6b 04 	sts	0x046B, r25
    return data;
    28c0:	08 95       	ret

int8_t UART::read(void)   {

    uint8_t data, bufferIndex;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    28c2:	8f ef       	ldi	r24, 0xFF	; 255
    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    data = rx_buffer[bufferIndex];
    rx_buffer_tail = bufferIndex;
    return data;

}
    28c4:	08 95       	ret

000028c6 <_ZN4UART5writeEh>:

void UART::write(uint8_t data)  {

    if (!txEnabled) return;
    28c6:	80 91 67 04 	lds	r24, 0x0467
    28ca:	88 23       	and	r24, r24
    28cc:	01 f1       	breq	.+64     	; 0x290e <_ZN4UART5writeEh+0x48>

    uint8_t bufferIndex;

    if (!(UCSR1B & (1<<TXEN1))) return;
    28ce:	80 91 c9 00 	lds	r24, 0x00C9
    28d2:	83 ff       	sbrs	r24, 3
    28d4:	1c c0       	rjmp	.+56     	; 0x290e <_ZN4UART5writeEh+0x48>

    bufferIndex = tx_buffer_head + 1;
    28d6:	90 91 6a 04 	lds	r25, 0x046A
    28da:	9f 5f       	subi	r25, 0xFF	; 255

    if (bufferIndex >= SERIAL_BUFFER_SIZE) bufferIndex = 0;
    28dc:	90 35       	cpi	r25, 0x50	; 80
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <_ZN4UART5writeEh+0x1c>
    28e0:	90 e0       	ldi	r25, 0x00	; 0

    while (tx_buffer_tail == bufferIndex); // wait until space in buffer
    28e2:	80 91 69 04 	lds	r24, 0x0469
    28e6:	98 17       	cp	r25, r24
    28e8:	e1 f3       	breq	.-8      	; 0x28e2 <_ZN4UART5writeEh+0x1c>

    tx_buffer[bufferIndex] = data;
    28ea:	e9 2f       	mov	r30, r25
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	e3 54       	subi	r30, 0x43	; 67
    28f0:	fb 4f       	sbci	r31, 0xFB	; 251
    28f2:	60 83       	st	Z, r22

    tx_buffer_head = bufferIndex;
    28f4:	90 93 6a 04 	sts	0x046A, r25

    if (!rxEnabled)
    28f8:	80 91 68 04 	lds	r24, 0x0468
    28fc:	81 11       	cpse	r24, r1
    28fe:	04 c0       	rjmp	.+8      	; 0x2908 <_ZN4UART5writeEh+0x42>
        UCSR1B = (1<<TXCIE1) | (1<<TXEN1) | (1<<UDRIE1);
    2900:	88 e6       	ldi	r24, 0x68	; 104
    2902:	80 93 c9 00 	sts	0x00C9, r24
    2906:	08 95       	ret
    else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
    2908:	88 ef       	ldi	r24, 0xF8	; 248
    290a:	80 93 c9 00 	sts	0x00C9, r24
    290e:	08 95       	ret

00002910 <_ZN4UART5beginEmbb>:

}

void UART::begin(uint32_t baudRate, bool enableRX, bool enableTX)   {
    2910:	cf 92       	push	r12
    2912:	df 92       	push	r13
    2914:	ef 92       	push	r14
    2916:	ff 92       	push	r15
    2918:	0f 93       	push	r16
    291a:	cf 93       	push	r28
    291c:	6a 01       	movw	r12, r20
    291e:	7b 01       	movw	r14, r22
    2920:	c2 2f       	mov	r28, r18

    rxEnabled = enableRX;
    2922:	20 93 68 04 	sts	0x0468, r18
    txEnabled = enableTX;
    2926:	00 93 67 04 	sts	0x0467, r16

    int16_t baud_count = ((F_CPU / 8) + (baudRate / 2)) / baudRate;
    292a:	db 01       	movw	r26, r22
    292c:	ca 01       	movw	r24, r20
    292e:	b6 95       	lsr	r27
    2930:	a7 95       	ror	r26
    2932:	97 95       	ror	r25
    2934:	87 95       	ror	r24
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	60 58       	subi	r22, 0x80	; 128
    293c:	7b 47       	sbci	r23, 0x7B	; 123
    293e:	81 4e       	sbci	r24, 0xE1	; 225
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	a7 01       	movw	r20, r14
    2944:	96 01       	movw	r18, r12
    2946:	0e 94 16 2b 	call	0x562c	; 0x562c <__udivmodsi4>

    if ((baud_count & 1) && baud_count <= 4096) {
    294a:	c9 01       	movw	r24, r18
    294c:	81 70       	andi	r24, 0x01	; 1
    294e:	99 27       	eor	r25, r25
    2950:	89 2b       	or	r24, r25
    2952:	71 f0       	breq	.+28     	; 0x2970 <_ZN4UART5beginEmbb+0x60>
    2954:	21 30       	cpi	r18, 0x01	; 1
    2956:	80 e1       	ldi	r24, 0x10	; 16
    2958:	38 07       	cpc	r19, r24
    295a:	54 f4       	brge	.+20     	; 0x2970 <_ZN4UART5beginEmbb+0x60>

        UCSR1A = (1<<U2X1); //double speed uart
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	80 93 c8 00 	sts	0x00C8, r24
        UBRR1 = baud_count - 1;
    2962:	21 50       	subi	r18, 0x01	; 1
    2964:	31 09       	sbc	r19, r1
    2966:	30 93 cd 00 	sts	0x00CD, r19
    296a:	20 93 cc 00 	sts	0x00CC, r18
    296e:	0a c0       	rjmp	.+20     	; 0x2984 <_ZN4UART5beginEmbb+0x74>

    }   else {

        UCSR1A = 0;
    2970:	10 92 c8 00 	sts	0x00C8, r1
        UBRR1 = (baud_count >> 1) - 1;
    2974:	35 95       	asr	r19
    2976:	27 95       	ror	r18
    2978:	21 50       	subi	r18, 0x01	; 1
    297a:	31 09       	sbc	r19, r1
    297c:	30 93 cd 00 	sts	0x00CD, r19
    2980:	20 93 cc 00 	sts	0x00CC, r18

    }

    if (!(UCSR1B & (1<<TXEN1))) {
    2984:	80 91 c9 00 	lds	r24, 0x00C9
    2988:	83 fd       	sbrc	r24, 3
    298a:	1c c0       	rjmp	.+56     	; 0x29c4 <_ZN4UART5beginEmbb+0xb4>

        rx_buffer_head = 0;
    298c:	10 92 6c 04 	sts	0x046C, r1
        rx_buffer_tail = 0;
    2990:	10 92 6b 04 	sts	0x046B, r1
        tx_buffer_head = 0;
    2994:	10 92 6a 04 	sts	0x046A, r1
        tx_buffer_tail = 0;
    2998:	10 92 69 04 	sts	0x0469, r1

        UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); //8 bit, no parity, 1 stop bit
    299c:	86 e0       	ldi	r24, 0x06	; 6
    299e:	80 93 ca 00 	sts	0x00CA, r24

        if (enableRX && enableTX)   //enable both rx and tx
    29a2:	cc 23       	and	r28, r28
    29a4:	51 f0       	breq	.+20     	; 0x29ba <_ZN4UART5beginEmbb+0xaa>
    29a6:	00 23       	and	r16, r16
    29a8:	21 f0       	breq	.+8      	; 0x29b2 <_ZN4UART5beginEmbb+0xa2>
            UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    29aa:	88 ed       	ldi	r24, 0xD8	; 216
    29ac:	80 93 c9 00 	sts	0x00C9, r24
    29b0:	09 c0       	rjmp	.+18     	; 0x29c4 <_ZN4UART5beginEmbb+0xb4>
        else if (enableRX && !enableTX) //enable only receive
            UCSR1B = (1<<RXEN1) | (1<<RXCIE1);
    29b2:	80 e9       	ldi	r24, 0x90	; 144
    29b4:	80 93 c9 00 	sts	0x00C9, r24
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <_ZN4UART5beginEmbb+0xb4>
        else if (enableTX & !enableRX)  //enable only transmit
    29ba:	00 23       	and	r16, r16
    29bc:	19 f0       	breq	.+6      	; 0x29c4 <_ZN4UART5beginEmbb+0xb4>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    29be:	88 e4       	ldi	r24, 0x48	; 72
    29c0:	80 93 c9 00 	sts	0x00C9, r24

    }

}
    29c4:	cf 91       	pop	r28
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	08 95       	ret

000029d2 <_ZN4UART9availableEv>:

    //return available number of bytes in incoming buffer

    uint8_t head, tail;

    head = rx_buffer_head;
    29d2:	80 91 6c 04 	lds	r24, 0x046C
    tail = rx_buffer_tail;
    29d6:	90 91 6b 04 	lds	r25, 0x046B

    if (head >= tail) return head - tail;
    29da:	89 17       	cp	r24, r25
    29dc:	10 f0       	brcs	.+4      	; 0x29e2 <_ZN4UART9availableEv+0x10>
    29de:	89 1b       	sub	r24, r25
    29e0:	08 95       	ret
    29e2:	80 5b       	subi	r24, 0xB0	; 176
    return SERIAL_BUFFER_SIZE + head - tail;
    29e4:	89 1b       	sub	r24, r25

}
    29e6:	08 95       	ret

000029e8 <usb_init>:
 **************************************************************************/

//initialize USB
void usb_init(void) {

    cli();
    29e8:	f8 94       	cli
    uint8_t u;

    u = USBCON;
    29ea:	80 91 d8 00 	lds	r24, 0x00D8
    if ((u & (1<<USBE)) && !(u & (1<<FRZCLK))) return;
    29ee:	88 23       	and	r24, r24
    29f0:	14 f4       	brge	.+4      	; 0x29f6 <usb_init+0xe>
    29f2:	85 ff       	sbrs	r24, 5
    29f4:	1c c0       	rjmp	.+56     	; 0x2a2e <usb_init+0x46>
    HW_CONFIG();
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 d7 00 	sts	0x00D7, r24
    USB_FREEZE();                   //enable USB
    29fc:	80 ea       	ldi	r24, 0xA0	; 160
    29fe:	80 93 d8 00 	sts	0x00D8, r24
    PLL_CONFIG();                   //config PLL
    2a02:	82 e1       	ldi	r24, 0x12	; 18
    2a04:	89 bd       	out	0x29, r24	; 41
    while (!(PLLCSR & (1<<PLOCK))); //wait for PLL lock
    2a06:	09 b4       	in	r0, 0x29	; 41
    2a08:	00 fe       	sbrs	r0, 0
    2a0a:	fd cf       	rjmp	.-6      	; 0x2a06 <usb_init+0x1e>
    USB_CONFIG();                   //start USB clock
    2a0c:	80 e9       	ldi	r24, 0x90	; 144
    2a0e:	80 93 d8 00 	sts	0x00D8, r24
    UDCON = 0;                      //enable attach resistor
    2a12:	10 92 e0 00 	sts	0x00E0, r1
    usb_configuration = 0;
    2a16:	10 92 f0 07 	sts	0x07F0, r1
    usb_suspended = 0;
    2a1a:	10 92 ef 07 	sts	0x07EF, r1
    debug_flush_timer = 0;
    2a1e:	10 92 ee 07 	sts	0x07EE, r1
    UDINT = 0;
    2a22:	10 92 e1 00 	sts	0x00E1, r1
    UDIEN = (1<<EORSTE)|(1<<SOFE);
    2a26:	8c e0       	ldi	r24, 0x0C	; 12
    2a28:	80 93 e2 00 	sts	0x00E2, r24
    sei();
    2a2c:	78 94       	sei
    2a2e:	08 95       	ret

00002a30 <__vector_10>:
 **************************************************************************/


//USB Device Interrupt - handle all device-level events
//the transmit buffer flushing is triggered by the start of frame
ISR(USB_GEN_vect)   {
    2a30:	1f 92       	push	r1
    2a32:	0f 92       	push	r0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	0f 92       	push	r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	af 93       	push	r26
    2a40:	bf 93       	push	r27
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31

    uint8_t intbits, t;
    intbits = UDINT;
    2a46:	e1 ee       	ldi	r30, 0xE1	; 225
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    UDINT = 0;
    2a4c:	10 82       	st	Z, r1

    if (intbits & (1<<EORSTI)) {
    2a4e:	83 ff       	sbrs	r24, 3
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <__vector_10+0x40>

        UENUM = 0;
    2a52:	10 92 e9 00 	sts	0x00E9, r1
        UECONX = 1;
    2a56:	91 e0       	ldi	r25, 0x01	; 1
    2a58:	90 93 eb 00 	sts	0x00EB, r25
        UECFG0X = EP_TYPE_CONTROL;
    2a5c:	10 92 ec 00 	sts	0x00EC, r1
        UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2a60:	92 e3       	ldi	r25, 0x32	; 50
    2a62:	90 93 ed 00 	sts	0x00ED, r25
        UEIENX = (1<<RXSTPE);
    2a66:	98 e0       	ldi	r25, 0x08	; 8
    2a68:	90 93 f0 00 	sts	0x00F0, r25
        usb_configuration = 0;
    2a6c:	10 92 f0 07 	sts	0x07F0, r1

    }

    if ((intbits & (1<<SOFI)) && usb_configuration) {
    2a70:	82 ff       	sbrs	r24, 2
    2a72:	29 c0       	rjmp	.+82     	; 0x2ac6 <__vector_10+0x96>
    2a74:	90 91 f0 07 	lds	r25, 0x07F0
    2a78:	99 23       	and	r25, r25
    2a7a:	29 f1       	breq	.+74     	; 0x2ac6 <__vector_10+0x96>

        t = debug_flush_timer;
    2a7c:	90 91 ee 07 	lds	r25, 0x07EE

        if (t) {
    2a80:	99 23       	and	r25, r25
    2a82:	b9 f0       	breq	.+46     	; 0x2ab2 <__vector_10+0x82>

            debug_flush_timer = --t;
    2a84:	91 50       	subi	r25, 0x01	; 1
    2a86:	90 93 ee 07 	sts	0x07EE, r25

            if (!t) {
    2a8a:	91 11       	cpse	r25, r1
    2a8c:	12 c0       	rjmp	.+36     	; 0x2ab2 <__vector_10+0x82>

                UENUM = DEBUG_TX_ENDPOINT;
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	90 93 e9 00 	sts	0x00E9, r25

                while ((UEINTX & (1<<RWAL))) {
    2a94:	90 91 e8 00 	lds	r25, 0x00E8
    2a98:	95 ff       	sbrs	r25, 5
    2a9a:	08 c0       	rjmp	.+16     	; 0x2aac <__vector_10+0x7c>

                    UEDATX = 0;
    2a9c:	a1 ef       	ldi	r26, 0xF1	; 241
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0

            if (!t) {

                UENUM = DEBUG_TX_ENDPOINT;

                while ((UEINTX & (1<<RWAL))) {
    2aa0:	e8 ee       	ldi	r30, 0xE8	; 232
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0

                    UEDATX = 0;
    2aa4:	1c 92       	st	X, r1

            if (!t) {

                UENUM = DEBUG_TX_ENDPOINT;

                while ((UEINTX & (1<<RWAL))) {
    2aa6:	90 81       	ld	r25, Z
    2aa8:	95 fd       	sbrc	r25, 5
    2aaa:	fc cf       	rjmp	.-8      	; 0x2aa4 <__vector_10+0x74>

                    UEDATX = 0;

                }

                UEINTX = 0x3A;
    2aac:	9a e3       	ldi	r25, 0x3A	; 58
    2aae:	90 93 e8 00 	sts	0x00E8, r25

            }

        }

        UENUM = MIDI_TX_ENDPOINT;
    2ab2:	93 e0       	ldi	r25, 0x03	; 3
    2ab4:	90 93 e9 00 	sts	0x00E9, r25
        if (UEBCLX) UEINTX = 0x3A;
    2ab8:	90 91 f2 00 	lds	r25, 0x00F2
    2abc:	99 23       	and	r25, r25
    2abe:	19 f0       	breq	.+6      	; 0x2ac6 <__vector_10+0x96>
    2ac0:	9a e3       	ldi	r25, 0x3A	; 58
    2ac2:	90 93 e8 00 	sts	0x00E8, r25

    }

    if (intbits & (1<<SUSPI)) {
    2ac6:	80 ff       	sbrs	r24, 0
    2ac8:	0c c0       	rjmp	.+24     	; 0x2ae2 <__vector_10+0xb2>

        //USB Suspend (inactivity for 3ms)
        UDIEN = (1<<WAKEUPE);
    2aca:	90 e1       	ldi	r25, 0x10	; 16
    2acc:	90 93 e2 00 	sts	0x00E2, r25
        usb_configuration = 0;
    2ad0:	10 92 f0 07 	sts	0x07F0, r1
        usb_suspended = 1;
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	90 93 ef 07 	sts	0x07EF, r25

        #if (F_CPU >= 8000000L)
        //WAKEUPI does not work with USB clock freeze 
        //when CPU is running less than 8 MHz.
        //Is this a hardware bug?
        USB_FREEZE();   //shut off USB
    2ada:	90 ea       	ldi	r25, 0xA0	; 160
    2adc:	90 93 d8 00 	sts	0x00D8, r25
        PLLCSR = 0;     //shut off PLL
    2ae0:	19 bc       	out	0x29, r1	; 41
        //powerdown mode, but that breaks the Arduino
        //user's paradigm....

    }

    if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    2ae2:	90 91 ef 07 	lds	r25, 0x07EF
    2ae6:	99 23       	and	r25, r25
    2ae8:	79 f0       	breq	.+30     	; 0x2b08 <__vector_10+0xd8>
    2aea:	84 ff       	sbrs	r24, 4
    2aec:	0d c0       	rjmp	.+26     	; 0x2b08 <__vector_10+0xd8>

        //USB Resume (pretty much any activity)
        #if (F_CPU >= 8000000L)
        PLL_CONFIG();
    2aee:	82 e1       	ldi	r24, 0x12	; 18
    2af0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;
    2af2:	09 b4       	in	r0, 0x29	; 41
    2af4:	00 fe       	sbrs	r0, 0
    2af6:	fd cf       	rjmp	.-6      	; 0x2af2 <__vector_10+0xc2>
        USB_CONFIG();
    2af8:	80 e9       	ldi	r24, 0x90	; 144
    2afa:	80 93 d8 00 	sts	0x00D8, r24
        #endif

        UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    2afe:	8d e0       	ldi	r24, 0x0D	; 13
    2b00:	80 93 e2 00 	sts	0x00E2, r24
        usb_suspended = 0;
    2b04:	10 92 ef 07 	sts	0x07EF, r1

        return;

    }

}
    2b08:	ff 91       	pop	r31
    2b0a:	ef 91       	pop	r30
    2b0c:	bf 91       	pop	r27
    2b0e:	af 91       	pop	r26
    2b10:	9f 91       	pop	r25
    2b12:	8f 91       	pop	r24
    2b14:	0f 90       	pop	r0
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	0f 90       	pop	r0
    2b1a:	1f 90       	pop	r1
    2b1c:	18 95       	reti

00002b1e <__vector_11>:


//USB Endpoint Interrupt - endpoint 0 is handled here.  The
//other endpoints are manipulated by the user-callable
//functions, and the start-of-frame interrupt.
ISR(USB_COM_vect)   {
    2b1e:	1f 92       	push	r1
    2b20:	0f 92       	push	r0
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	0f 92       	push	r0
    2b26:	11 24       	eor	r1, r1
    2b28:	2f 93       	push	r18
    2b2a:	3f 93       	push	r19
    2b2c:	4f 93       	push	r20
    2b2e:	5f 93       	push	r21
    2b30:	6f 93       	push	r22
    2b32:	7f 93       	push	r23
    2b34:	8f 93       	push	r24
    2b36:	9f 93       	push	r25
    2b38:	af 93       	push	r26
    2b3a:	bf 93       	push	r27
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	ef 93       	push	r30
    2b42:	ff 93       	push	r31
    uint16_t wLength;
    uint16_t desc_val;
    const uint8_t *desc_addr;
    uint8_t desc_length;

    UENUM = 0;
    2b44:	10 92 e9 00 	sts	0x00E9, r1
    intbits = UEINTX;
    2b48:	80 91 e8 00 	lds	r24, 0x00E8

    if (intbits & (1<<RXSTPI)) {
    2b4c:	83 ff       	sbrs	r24, 3
    2b4e:	f5 c0       	rjmp	.+490    	; 0x2d3a <__vector_11+0x21c>

        bmRequestType = UEDATX;
    2b50:	e1 ef       	ldi	r30, 0xF1	; 241
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	40 81       	ld	r20, Z
        bRequest = UEDATX;
    2b56:	80 81       	ld	r24, Z

        read_word_lsbfirst(wValue, UEDATX);
    2b58:	20 91 f1 00 	lds	r18, 0x00F1
    2b5c:	30 91 f1 00 	lds	r19, 0x00F1
        read_word_lsbfirst(wIndex, UEDATX);
    2b60:	a0 91 f1 00 	lds	r26, 0x00F1
    2b64:	b0 91 f1 00 	lds	r27, 0x00F1
        read_word_lsbfirst(wLength, UEDATX);
    2b68:	60 91 f1 00 	lds	r22, 0x00F1
    2b6c:	70 91 f1 00 	lds	r23, 0x00F1

        UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2b70:	92 ef       	ldi	r25, 0xF2	; 242
    2b72:	90 93 e8 00 	sts	0x00E8, r25

        if (bRequest == GET_DESCRIPTOR) {
    2b76:	86 30       	cpi	r24, 0x06	; 6
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <__vector_11+0x5e>
    2b7a:	46 c0       	rjmp	.+140    	; 0x2c08 <__vector_11+0xea>
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <__vector_11+0x68>

            for (i=0; ; i++) {

                if (i >= NUM_DESC_LIST) {

                    UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2b7e:	81 e2       	ldi	r24, 0x21	; 33
    2b80:	80 93 eb 00 	sts	0x00EB, r24
                    return;
    2b84:	da c0       	rjmp	.+436    	; 0x2d3a <__vector_11+0x21c>
    2b86:	86 e0       	ldi	r24, 0x06	; 6
    2b88:	ea ee       	ldi	r30, 0xEA	; 234
    2b8a:	f1 e0       	ldi	r31, 0x01	; 1

                }

                pgm_read_word_postinc(desc_val, list);
    2b8c:	45 91       	lpm	r20, Z+
    2b8e:	55 91       	lpm	r21, Z+

                if (desc_val != wValue) {
    2b90:	42 17       	cp	r20, r18
    2b92:	53 07       	cpc	r21, r19
    2b94:	11 f0       	breq	.+4      	; 0x2b9a <__vector_11+0x7c>

                    list += sizeof(struct descriptor_list_struct)-2;
    2b96:	35 96       	adiw	r30, 0x05	; 5
                    continue;
    2b98:	19 c0       	rjmp	.+50     	; 0x2bcc <__vector_11+0xae>

                }

                pgm_read_word_postinc(desc_val, list);
    2b9a:	c5 91       	lpm	r28, Z+
    2b9c:	d5 91       	lpm	r29, Z+

                if (desc_val != wIndex) {
    2b9e:	ca 17       	cp	r28, r26
    2ba0:	db 07       	cpc	r29, r27
    2ba2:	11 f0       	breq	.+4      	; 0x2ba8 <__vector_11+0x8a>

                    list += sizeof(struct descriptor_list_struct)-4;
    2ba4:	33 96       	adiw	r30, 0x03	; 3
                    continue;
    2ba6:	12 c0       	rjmp	.+36     	; 0x2bcc <__vector_11+0xae>

                }

                pgm_read_word_postinc(desc_addr, list);
    2ba8:	85 91       	lpm	r24, Z+
    2baa:	95 91       	lpm	r25, Z+

                desc_length = pgm_read_byte(list);
    2bac:	44 91       	lpm	r20, Z
                break;

            }

            len = (wLength < 256) ? wLength : 255;
    2bae:	6f 3f       	cpi	r22, 0xFF	; 255
    2bb0:	71 05       	cpc	r23, r1
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <__vector_11+0x9c>
    2bb4:	10 f0       	brcs	.+4      	; 0x2bba <__vector_11+0x9c>
    2bb6:	6f ef       	ldi	r22, 0xFF	; 255
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	64 17       	cp	r22, r20
    2bbc:	08 f4       	brcc	.+2      	; 0x2bc0 <__vector_11+0xa2>
    2bbe:	46 2f       	mov	r20, r22
            do {

                //wait for host ready for IN packet
                do {

                    i = UEINTX;
    2bc0:	a8 ee       	ldi	r26, 0xE8	; 232
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2bc4:	5e ef       	ldi	r21, 0xFE	; 254
                //send IN packet
                n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;

                for (i = n; i; i--) {

                    pgm_read_byte_postinc(UEDATX, list);
    2bc6:	c1 ef       	ldi	r28, 0xF1	; 241
    2bc8:	d0 e0       	ldi	r29, 0x00	; 0
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <__vector_11+0xb4>
    2bcc:	81 50       	subi	r24, 0x01	; 1

            list = (const uint8_t *)descriptor_list;

            for (i=0; ; i++) {

                if (i >= NUM_DESC_LIST) {
    2bce:	f1 f6       	brne	.-68     	; 0x2b8c <__vector_11+0x6e>
    2bd0:	d6 cf       	rjmp	.-84     	; 0x2b7e <__vector_11+0x60>
            do {

                //wait for host ready for IN packet
                do {

                    i = UEINTX;
    2bd2:	2c 91       	ld	r18, X

                } while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2bd4:	32 2f       	mov	r19, r18
    2bd6:	35 70       	andi	r19, 0x05	; 5
    2bd8:	e1 f3       	breq	.-8      	; 0x2bd2 <__vector_11+0xb4>

                if (i & (1<<RXOUTI)) return;    //abort
    2bda:	22 fd       	sbrc	r18, 2
    2bdc:	ae c0       	rjmp	.+348    	; 0x2d3a <__vector_11+0x21c>

                //send IN packet
                n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2bde:	34 2f       	mov	r19, r20
    2be0:	41 34       	cpi	r20, 0x41	; 65
    2be2:	08 f0       	brcs	.+2      	; 0x2be6 <__vector_11+0xc8>
    2be4:	30 e4       	ldi	r19, 0x40	; 64

                for (i = n; i; i--) {
    2be6:	33 23       	and	r19, r19
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__vector_11+0xce>
    2bea:	a4 c0       	rjmp	.+328    	; 0x2d34 <__vector_11+0x216>
    2bec:	23 2f       	mov	r18, r19

                    pgm_read_byte_postinc(UEDATX, list);
    2bee:	fc 01       	movw	r30, r24
    2bf0:	85 91       	lpm	r24, Z+
    2bf2:	88 83       	st	Y, r24
    2bf4:	cf 01       	movw	r24, r30
                if (i & (1<<RXOUTI)) return;    //abort

                //send IN packet
                n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;

                for (i = n; i; i--) {
    2bf6:	21 50       	subi	r18, 0x01	; 1
    2bf8:	d1 f7       	brne	.-12     	; 0x2bee <__vector_11+0xd0>

                    pgm_read_byte_postinc(UEDATX, list);

                }

                len -= n;
    2bfa:	43 1b       	sub	r20, r19

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2bfc:	5c 93       	st	X, r21
                }

                len -= n;
                usb_send_in();

            } while (len || n == ENDPOINT0_SIZE);
    2bfe:	41 11       	cpse	r20, r1
    2c00:	e8 cf       	rjmp	.-48     	; 0x2bd2 <__vector_11+0xb4>
    2c02:	30 34       	cpi	r19, 0x40	; 64
    2c04:	31 f3       	breq	.-52     	; 0x2bd2 <__vector_11+0xb4>
    2c06:	99 c0       	rjmp	.+306    	; 0x2d3a <__vector_11+0x21c>

            return;

        }

        if (bRequest == SET_ADDRESS) {
    2c08:	85 30       	cpi	r24, 0x05	; 5
    2c0a:	61 f4       	brne	.+24     	; 0x2c24 <__vector_11+0x106>

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2c0c:	8e ef       	ldi	r24, 0xFE	; 254
    2c0e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)  {

    while (!(UEINTX & (1<<TXINI))) ;
    2c12:	e8 ee       	ldi	r30, 0xE8	; 232
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 ff       	sbrs	r24, 0
    2c1a:	fd cf       	rjmp	.-6      	; 0x2c16 <__vector_11+0xf8>

        if (bRequest == SET_ADDRESS) {

            usb_send_in();
            usb_wait_in_ready();
            UDADDR = wValue | (1<<ADDEN);
    2c1c:	20 68       	ori	r18, 0x80	; 128
    2c1e:	20 93 e3 00 	sts	0x00E3, r18
            return;
    2c22:	8b c0       	rjmp	.+278    	; 0x2d3a <__vector_11+0x21c>

        }

        if (bRequest == SET_CONFIGURATION && bmRequestType == 0)    {
    2c24:	89 30       	cpi	r24, 0x09	; 9
    2c26:	69 f5       	brne	.+90     	; 0x2c82 <__vector_11+0x164>
    2c28:	41 11       	cpse	r20, r1
    2c2a:	80 c0       	rjmp	.+256    	; 0x2d2c <__vector_11+0x20e>

            usb_configuration = wValue;
    2c2c:	20 93 f0 07 	sts	0x07F0, r18
            debug_flush_timer = 0;
    2c30:	10 92 ee 07 	sts	0x07EE, r1

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2c34:	8e ef       	ldi	r24, 0xFE	; 254
    2c36:	80 93 e8 00 	sts	0x00E8, r24
            usb_configuration = wValue;
            debug_flush_timer = 0;
            usb_send_in();
            cfg = endpoint_config_table;

            for (i=1; i<NUM_ENDPOINTS; i++) {
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
        if (bRequest == SET_CONFIGURATION && bmRequestType == 0)    {

            usb_configuration = wValue;
            debug_flush_timer = 0;
            usb_send_in();
            cfg = endpoint_config_table;
    2c3c:	22 ed       	ldi	r18, 0xD2	; 210
    2c3e:	32 e0       	ldi	r19, 0x02	; 2

            for (i=1; i<NUM_ENDPOINTS; i++) {

                UENUM = i;
    2c40:	c9 ee       	ldi	r28, 0xE9	; 233
    2c42:	d0 e0       	ldi	r29, 0x00	; 0
                pgm_read_byte_postinc(en, cfg);
                UECONX = en;
    2c44:	ab ee       	ldi	r26, 0xEB	; 235
    2c46:	b0 e0       	ldi	r27, 0x00	; 0

                if (en) {

                    pgm_read_byte_postinc(UECFG0X, cfg);
    2c48:	6c ee       	ldi	r22, 0xEC	; 236
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
                    pgm_read_byte_postinc(UECFG1X, cfg);
    2c4c:	4d ee       	ldi	r20, 0xED	; 237
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
            usb_send_in();
            cfg = endpoint_config_table;

            for (i=1; i<NUM_ENDPOINTS; i++) {

                UENUM = i;
    2c50:	88 83       	st	Y, r24
                pgm_read_byte_postinc(en, cfg);
    2c52:	f9 01       	movw	r30, r18
    2c54:	95 91       	lpm	r25, Z+
    2c56:	9f 01       	movw	r18, r30
                UECONX = en;
    2c58:	9c 93       	st	X, r25

                if (en) {
    2c5a:	99 23       	and	r25, r25
    2c5c:	49 f0       	breq	.+18     	; 0x2c70 <__vector_11+0x152>

                    pgm_read_byte_postinc(UECFG0X, cfg);
    2c5e:	95 91       	lpm	r25, Z+
    2c60:	9f 01       	movw	r18, r30
    2c62:	fb 01       	movw	r30, r22
    2c64:	90 83       	st	Z, r25
                    pgm_read_byte_postinc(UECFG1X, cfg);
    2c66:	f9 01       	movw	r30, r18
    2c68:	95 91       	lpm	r25, Z+
    2c6a:	9f 01       	movw	r18, r30
    2c6c:	fa 01       	movw	r30, r20
    2c6e:	90 83       	st	Z, r25
            usb_configuration = wValue;
            debug_flush_timer = 0;
            usb_send_in();
            cfg = endpoint_config_table;

            for (i=1; i<NUM_ENDPOINTS; i++) {
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	85 30       	cpi	r24, 0x05	; 5
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <__vector_11+0x132>

                }

            }

            UERST = 0x1E;
    2c76:	ea ee       	ldi	r30, 0xEA	; 234
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	8e e1       	ldi	r24, 0x1E	; 30
    2c7c:	80 83       	st	Z, r24
            UERST = 0;
    2c7e:	10 82       	st	Z, r1

            return;
    2c80:	5c c0       	rjmp	.+184    	; 0x2d3a <__vector_11+0x21c>

        }

        if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2c82:	88 30       	cpi	r24, 0x08	; 8
    2c84:	81 f4       	brne	.+32     	; 0x2ca6 <__vector_11+0x188>
    2c86:	40 38       	cpi	r20, 0x80	; 128
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <__vector_11+0x16e>
    2c8a:	50 c0       	rjmp	.+160    	; 0x2d2c <__vector_11+0x20e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)  {

    while (!(UEINTX & (1<<TXINI))) ;
    2c8c:	e8 ee       	ldi	r30, 0xE8	; 232
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 ff       	sbrs	r24, 0
    2c94:	fd cf       	rjmp	.-6      	; 0x2c90 <__vector_11+0x172>
        }

        if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {

            usb_wait_in_ready();
            UEDATX = usb_configuration;
    2c96:	80 91 f0 07 	lds	r24, 0x07F0
    2c9a:	80 93 f1 00 	sts	0x00F1, r24

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2c9e:	8e ef       	ldi	r24, 0xFE	; 254
    2ca0:	80 93 e8 00 	sts	0x00E8, r24
    2ca4:	4a c0       	rjmp	.+148    	; 0x2d3a <__vector_11+0x21c>
            usb_send_in();
            return;

        }

        if (bRequest == GET_STATUS) {
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	1a c0       	rjmp	.+52     	; 0x2cde <__vector_11+0x1c0>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)  {

    while (!(UEINTX & (1<<TXINI))) ;
    2caa:	e8 ee       	ldi	r30, 0xE8	; 232
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	80 ff       	sbrs	r24, 0
    2cb2:	fd cf       	rjmp	.-6      	; 0x2cae <__vector_11+0x190>
        if (bRequest == GET_STATUS) {

            usb_wait_in_ready();
            i = 0;

            if (bmRequestType == 0x82) {
    2cb4:	42 38       	cpi	r20, 0x82	; 130
    2cb6:	51 f4       	brne	.+20     	; 0x2ccc <__vector_11+0x1ae>

                UENUM = wIndex;
    2cb8:	e9 ee       	ldi	r30, 0xE9	; 233
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	a0 83       	st	Z, r26
                if (UECONX & (1<<STALLRQ)) i = 1;
    2cbe:	80 91 eb 00 	lds	r24, 0x00EB
    2cc2:	85 fb       	bst	r24, 5
    2cc4:	88 27       	eor	r24, r24
    2cc6:	80 f9       	bld	r24, 0
                UENUM = 0;
    2cc8:	10 82       	st	Z, r1
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <__vector_11+0x1b0>
        }

        if (bRequest == GET_STATUS) {

            usb_wait_in_ready();
            i = 0;
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
                if (UECONX & (1<<STALLRQ)) i = 1;
                UENUM = 0;

            }

            UEDATX = i;
    2cce:	e1 ef       	ldi	r30, 0xF1	; 241
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 83       	st	Z, r24
            UEDATX = 0;
    2cd4:	10 82       	st	Z, r1

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2cd6:	8e ef       	ldi	r24, 0xFE	; 254
    2cd8:	80 93 e8 00 	sts	0x00E8, r24
    2cdc:	2e c0       	rjmp	.+92     	; 0x2d3a <__vector_11+0x21c>
            usb_send_in();
            return;

        }

        if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2cde:	98 2f       	mov	r25, r24
    2ce0:	9d 7f       	andi	r25, 0xFD	; 253
    2ce2:	91 30       	cpi	r25, 0x01	; 1
    2ce4:	19 f5       	brne	.+70     	; 0x2d2c <__vector_11+0x20e>
          && bmRequestType == 0x02 && wValue == 0) {
    2ce6:	42 30       	cpi	r20, 0x02	; 2
    2ce8:	09 f5       	brne	.+66     	; 0x2d2c <__vector_11+0x20e>
    2cea:	23 2b       	or	r18, r19
    2cec:	f9 f4       	brne	.+62     	; 0x2d2c <__vector_11+0x20e>

            i = wIndex & 0x7F;
    2cee:	af 77       	andi	r26, 0x7F	; 127

            if (i >= 1 && i <= MAX_ENDPOINT) {
    2cf0:	9f ef       	ldi	r25, 0xFF	; 255
    2cf2:	9a 0f       	add	r25, r26
    2cf4:	96 30       	cpi	r25, 0x06	; 6
    2cf6:	d0 f4       	brcc	.+52     	; 0x2d2c <__vector_11+0x20e>

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2cf8:	9e ef       	ldi	r25, 0xFE	; 254
    2cfa:	90 93 e8 00 	sts	0x00E8, r25
            i = wIndex & 0x7F;

            if (i >= 1 && i <= MAX_ENDPOINT) {

                usb_send_in();
                UENUM = i;
    2cfe:	a0 93 e9 00 	sts	0x00E9, r26

                if (bRequest == SET_FEATURE) {
    2d02:	83 30       	cpi	r24, 0x03	; 3
    2d04:	21 f4       	brne	.+8      	; 0x2d0e <__vector_11+0x1f0>
                    UECONX = (1<<STALLRQ)|(1<<EPEN);
    2d06:	81 e2       	ldi	r24, 0x21	; 33
    2d08:	80 93 eb 00 	sts	0x00EB, r24
    2d0c:	16 c0       	rjmp	.+44     	; 0x2d3a <__vector_11+0x21c>
                } else {

                    UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2d0e:	89 e1       	ldi	r24, 0x19	; 25
    2d10:	80 93 eb 00 	sts	0x00EB, r24
                    UERST = (1 << i);
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <__vector_11+0x200>
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	aa 95       	dec	r26
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <__vector_11+0x1fc>
    2d22:	ea ee       	ldi	r30, 0xEA	; 234
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 83       	st	Z, r24
                    UERST = 0;
    2d28:	10 82       	st	Z, r1
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <__vector_11+0x21c>
            //usb_wait_in_ready();
            //_restart_Teensyduino_();
//
        //}

        UECONX = (1<<STALLRQ) | (1<<EPEN);  // stall
    2d2c:	81 e2       	ldi	r24, 0x21	; 33
    2d2e:	80 93 eb 00 	sts	0x00EB, r24
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <__vector_11+0x21c>

}

static inline void usb_send_in(void)    {

    UEINTX = ~(1<<TXINI);
    2d34:	5c 93       	st	X, r21
                }

                len -= n;
                usb_send_in();

            } while (len || n == ENDPOINT0_SIZE);
    2d36:	41 11       	cpse	r20, r1
    2d38:	4c cf       	rjmp	.-360    	; 0x2bd2 <__vector_11+0xb4>

        UECONX = (1<<STALLRQ) | (1<<EPEN);  // stall

    }

    2d3a:	ff 91       	pop	r31
    2d3c:	ef 91       	pop	r30
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	bf 91       	pop	r27
    2d44:	af 91       	pop	r26
    2d46:	9f 91       	pop	r25
    2d48:	8f 91       	pop	r24
    2d4a:	7f 91       	pop	r23
    2d4c:	6f 91       	pop	r22
    2d4e:	5f 91       	pop	r21
    2d50:	4f 91       	pop	r20
    2d52:	3f 91       	pop	r19
    2d54:	2f 91       	pop	r18
    2d56:	0f 90       	pop	r0
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	0f 90       	pop	r0
    2d5c:	1f 90       	pop	r1
    2d5e:	18 95       	reti

00002d60 <_ZN6Analog4initEv>:

    //def const

}

void Analog::init() {
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	6e 97       	sbiw	r28, 0x1e	; 30
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61

    const subtype analogEnabledSubtype       = { MAX_NUMBER_OF_ANALOG, 0, 1 };
    2d7e:	80 e2       	ldi	r24, 0x20	; 32
    2d80:	8c 8f       	std	Y+28, r24	; 0x1c
    2d82:	1d 8e       	std	Y+29, r1	; 0x1d
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	9e 8f       	std	Y+30, r25	; 0x1e
    const subtype analogInvertedSubtype      = { MAX_NUMBER_OF_ANALOG, 0, 1 };
    2d88:	89 8f       	std	Y+25, r24	; 0x19
    2d8a:	1a 8e       	std	Y+26, r1	; 0x1a
    2d8c:	9b 8f       	std	Y+27, r25	; 0x1b
    const subtype analogTypeSubtype          = { MAX_NUMBER_OF_ANALOG, 0, ANALOG_TYPES-1 };
    2d8e:	8e 8b       	std	Y+22, r24	; 0x16
    2d90:	1f 8a       	std	Y+23, r1	; 0x17
    2d92:	92 e0       	ldi	r25, 0x02	; 2
    2d94:	98 8f       	std	Y+24, r25	; 0x18
    const subtype analogMIDIidSubtype        = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    2d96:	8b 8b       	std	Y+19, r24	; 0x13
    2d98:	1c 8a       	std	Y+20, r1	; 0x14
    2d9a:	9f e7       	ldi	r25, 0x7F	; 127
    2d9c:	9d 8b       	std	Y+21, r25	; 0x15
    const subtype analogCClowerLimitSubtype  = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    2d9e:	88 8b       	std	Y+16, r24	; 0x10
    2da0:	19 8a       	std	Y+17, r1	; 0x11
    2da2:	9a 8b       	std	Y+18, r25	; 0x12
    const subtype analogCCupperLimitSubtype  = { MAX_NUMBER_OF_ANALOG, 0, 127 };
    2da4:	8d 87       	std	Y+13, r24	; 0x0d
    2da6:	1e 86       	std	Y+14, r1	; 0x0e
    2da8:	9f 87       	std	Y+15, r25	; 0x0f
        &analogInvertedSubtype,
        &analogMIDIidSubtype,
        &analogCClowerLimitSubtype,
        &analogCCupperLimitSubtype

    };
    2daa:	ce 01       	movw	r24, r28
    2dac:	4c 96       	adiw	r24, 0x1c	; 28
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	06 97       	sbiw	r24, 0x06	; 6
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	03 96       	adiw	r24, 0x03	; 3
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	06 97       	sbiw	r24, 0x06	; 6
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	8f 83       	std	Y+7, r24	; 0x07
    2dc4:	03 97       	sbiw	r24, 0x03	; 3
    2dc6:	9a 87       	std	Y+10, r25	; 0x0a
    2dc8:	89 87       	std	Y+9, r24	; 0x09
    2dca:	03 97       	sbiw	r24, 0x03	; 3
    2dcc:	9c 87       	std	Y+12, r25	; 0x0c
    2dce:	8b 87       	std	Y+11, r24	; 0x0b

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ANALOG_BLOCK, ANALOG_SUBTYPES);
    2dd0:	46 e0       	ldi	r20, 0x06	; 6
    2dd2:	63 e0       	ldi	r22, 0x03	; 3
    2dd4:	8b e0       	ldi	r24, 0x0B	; 11
    2dd6:	97 e0       	ldi	r25, 0x07	; 7
    2dd8:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN5SysEx14addMessageTypeEhh>
    2ddc:	ce 01       	movw	r24, r28
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	6c 01       	movw	r12, r24
    2de2:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<ANALOG_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_ANALOG_BLOCK, i, analogSubtypeArray[i]->parameters, analogSubtypeArray[i]->lowValue, analogSubtypeArray[i]->highValue);
    2de4:	d6 01       	movw	r26, r12
    2de6:	ed 91       	ld	r30, X+
    2de8:	fd 91       	ld	r31, X+
    2dea:	6d 01       	movw	r12, r26
    2dec:	e2 80       	ldd	r14, Z+2	; 0x02
    2dee:	01 81       	ldd	r16, Z+1	; 0x01
    2df0:	20 81       	ld	r18, Z
    2df2:	41 2f       	mov	r20, r17
    2df4:	63 e0       	ldi	r22, 0x03	; 3
    2df6:	8b e0       	ldi	r24, 0x0B	; 11
    2df8:	97 e0       	ldi	r25, 0x07	; 7
    2dfa:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    2dfe:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ANALOG_BLOCK, ANALOG_SUBTYPES);

    for (int i=0; i<ANALOG_SUBTYPES; i++)   {
    2e00:	16 30       	cpi	r17, 0x06	; 6
    2e02:	81 f7       	brne	.-32     	; 0x2de4 <_ZN6Analog4initEv+0x84>
        //define subtype messages
        sysEx.addMessageSubType(CONF_ANALOG_BLOCK, i, analogSubtypeArray[i]->parameters, analogSubtypeArray[i]->lowValue, analogSubtypeArray[i]->highValue);

    }

}
    2e04:	6e 96       	adiw	r28, 0x1e	; 30
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
    2e1e:	08 95       	ret

00002e20 <_ZN6Analog14getMedianValueEh>:

    }   return false;

}

int16_t Analog::getMedianValue(uint8_t analogID)  {
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29

    int16_t medianValue = 0;

    if ((analogSample[analogID][0] <= analogSample[analogID][1]) && (analogSample[analogID][0] <= analogSample[analogID][2]))
    2e24:	46 2f       	mov	r20, r22
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	9c 01       	movw	r18, r24
    2e2a:	78 e0       	ldi	r23, 0x08	; 8
    2e2c:	67 9f       	mul	r22, r23
    2e2e:	20 0d       	add	r18, r0
    2e30:	31 1d       	adc	r19, r1
    2e32:	11 24       	eor	r1, r1
    2e34:	f9 01       	movw	r30, r18
    2e36:	eb 59       	subi	r30, 0x9B	; 155
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	32 96       	adiw	r30, 0x02	; 2
    2e40:	a0 81       	ld	r26, Z
    2e42:	b1 81       	ldd	r27, Z+1	; 0x01
    2e44:	a6 17       	cp	r26, r22
    2e46:	b7 07       	cpc	r27, r23
    2e48:	cc f0       	brlt	.+50     	; 0x2e7c <_ZN6Analog14getMedianValueEh+0x5c>
    2e4a:	ea 01       	movw	r28, r20
    2e4c:	cc 0f       	add	r28, r28
    2e4e:	dd 1f       	adc	r29, r29
    2e50:	cc 0f       	add	r28, r28
    2e52:	dd 1f       	adc	r29, r29
    2e54:	cc 0f       	add	r28, r28
    2e56:	dd 1f       	adc	r29, r29
    2e58:	c8 0f       	add	r28, r24
    2e5a:	d9 1f       	adc	r29, r25
    2e5c:	c7 59       	subi	r28, 0x97	; 151
    2e5e:	df 4f       	sbci	r29, 0xFF	; 255
    2e60:	28 81       	ld	r18, Y
    2e62:	39 81       	ldd	r19, Y+1	; 0x01
    2e64:	26 17       	cp	r18, r22
    2e66:	37 07       	cpc	r19, r23
    2e68:	34 f0       	brlt	.+12     	; 0x2e76 <_ZN6Analog14getMedianValueEh+0x56>
    2e6a:	c9 01       	movw	r24, r18
    2e6c:	a2 17       	cp	r26, r18
    2e6e:	b3 07       	cpc	r27, r19
    2e70:	fc f4       	brge	.+62     	; 0x2eb0 <_ZN6Analog14getMedianValueEh+0x90>
    2e72:	cd 01       	movw	r24, r26
    2e74:	1d c0       	rjmp	.+58     	; 0x2eb0 <_ZN6Analog14getMedianValueEh+0x90>
    medianValue = (analogSample[analogID][1] <= analogSample[analogID][2]) ? analogSample[analogID][1] : analogSample[analogID][2];

    else if ((analogSample[analogID][1] <= analogSample[analogID][0]) && (analogSample[analogID][1] <= analogSample[analogID][2]))
    2e76:	6a 17       	cp	r22, r26
    2e78:	7b 07       	cpc	r23, r27
    2e7a:	ac f0       	brlt	.+42     	; 0x2ea6 <_ZN6Analog14getMedianValueEh+0x86>
    2e7c:	44 0f       	add	r20, r20
    2e7e:	55 1f       	adc	r21, r21
    2e80:	44 0f       	add	r20, r20
    2e82:	55 1f       	adc	r21, r21
    2e84:	44 0f       	add	r20, r20
    2e86:	55 1f       	adc	r21, r21
    2e88:	84 0f       	add	r24, r20
    2e8a:	95 1f       	adc	r25, r21
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e7 59       	subi	r30, 0x97	; 151
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	8a 17       	cp	r24, r26
    2e98:	9b 07       	cpc	r25, r27
    2e9a:	2c f0       	brlt	.+10     	; 0x2ea6 <_ZN6Analog14getMedianValueEh+0x86>
    2e9c:	68 17       	cp	r22, r24
    2e9e:	79 07       	cpc	r23, r25
    2ea0:	3c f4       	brge	.+14     	; 0x2eb0 <_ZN6Analog14getMedianValueEh+0x90>
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <_ZN6Analog14getMedianValueEh+0x90>
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	6a 17       	cp	r22, r26
    2eaa:	7b 07       	cpc	r23, r27
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <_ZN6Analog14getMedianValueEh+0x90>
    2eae:	cb 01       	movw	r24, r22
    medianValue = (analogSample[analogID][0] <= analogSample[analogID][1]) ? analogSample[analogID][0] : analogSample[analogID][1];


    return medianValue;

}
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <_ZN6Analog16getAnalogEnabledEh>:

bool Analog::getAnalogEnabled(uint8_t analogID) {
    2eb6:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    2eb8:	20 91 00 02 	lds	r18, 0x0200
    2ebc:	30 91 01 02 	lds	r19, 0x0201
    2ec0:	80 91 fe 01 	lds	r24, 0x01FE
    2ec4:	90 91 ff 01 	lds	r25, 0x01FF
    2ec8:	82 0f       	add	r24, r18
    2eca:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    2ecc:	20 91 12 02 	lds	r18, 0x0212
    2ed0:	22 23       	and	r18, r18
    2ed2:	a9 f0       	breq	.+42     	; 0x2efe <_ZN6Analog16getAnalogEnabledEh+0x48>
    2ed4:	21 30       	cpi	r18, 0x01	; 1
    2ed6:	c9 f4       	brne	.+50     	; 0x2f0a <_ZN6Analog16getAnalogEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    2ed8:	26 2f       	mov	r18, r22
    2eda:	26 95       	lsr	r18
    2edc:	26 95       	lsr	r18
    2ede:	26 95       	lsr	r18
    2ee0:	c6 2f       	mov	r28, r22
    2ee2:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    2ee4:	82 0f       	add	r24, r18
    2ee6:	91 1d       	adc	r25, r1
    2ee8:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <_ZN6Analog16getAnalogEnabledEh+0x3e>
    2ef0:	95 95       	asr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	ca 95       	dec	r28
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <_ZN6Analog16getAnalogEnabledEh+0x3a>
    2ef8:	98 2f       	mov	r25, r24
    2efa:	91 70       	andi	r25, 0x01	; 1
    2efc:	07 c0       	rjmp	.+14     	; 0x2f0c <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    2efe:	86 0f       	add	r24, r22
    2f00:	91 1d       	adc	r25, r1
    2f02:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2f06:	98 2f       	mov	r25, r24
    2f08:	01 c0       	rjmp	.+2      	; 0x2f0c <_ZN6Analog16getAnalogEnabledEh+0x56>
            break;

        }   return 0;
    2f0a:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	91 11       	cpse	r25, r1
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <_ZN6Analog16getAnalogEnabledEh+0x5e>
    2f12:	80 e0       	ldi	r24, 0x00	; 0

}
    2f14:	cf 91       	pop	r28
    2f16:	08 95       	ret

00002f18 <_ZN6Analog20getAnalogInvertStateEh>:

bool Analog::getAnalogInvertState(uint8_t analogID) {
    2f18:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    2f1a:	20 91 04 02 	lds	r18, 0x0204
    2f1e:	30 91 05 02 	lds	r19, 0x0205
    2f22:	80 91 fe 01 	lds	r24, 0x01FE
    2f26:	90 91 ff 01 	lds	r25, 0x01FF
    2f2a:	82 0f       	add	r24, r18
    2f2c:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    2f2e:	20 91 14 02 	lds	r18, 0x0214
    2f32:	22 23       	and	r18, r18
    2f34:	a9 f0       	breq	.+42     	; 0x2f60 <_ZN6Analog20getAnalogInvertStateEh+0x48>
    2f36:	21 30       	cpi	r18, 0x01	; 1
    2f38:	c9 f4       	brne	.+50     	; 0x2f6c <_ZN6Analog20getAnalogInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    2f3a:	26 2f       	mov	r18, r22
    2f3c:	26 95       	lsr	r18
    2f3e:	26 95       	lsr	r18
    2f40:	26 95       	lsr	r18
    2f42:	c6 2f       	mov	r28, r22
    2f44:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    2f46:	82 0f       	add	r24, r18
    2f48:	91 1d       	adc	r25, r1
    2f4a:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <_ZN6Analog20getAnalogInvertStateEh+0x3e>
    2f52:	95 95       	asr	r25
    2f54:	87 95       	ror	r24
    2f56:	ca 95       	dec	r28
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <_ZN6Analog20getAnalogInvertStateEh+0x3a>
    2f5a:	98 2f       	mov	r25, r24
    2f5c:	91 70       	andi	r25, 0x01	; 1
    2f5e:	07 c0       	rjmp	.+14     	; 0x2f6e <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    2f60:	86 0f       	add	r24, r22
    2f62:	91 1d       	adc	r25, r1
    2f64:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2f68:	98 2f       	mov	r25, r24
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <_ZN6Analog20getAnalogInvertStateEh+0x56>
            break;

        }   return 0;
    2f6c:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID);
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	91 11       	cpse	r25, r1
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <_ZN6Analog20getAnalogInvertStateEh+0x5e>
    2f74:	80 e0       	ldi	r24, 0x00	; 0

}
    2f76:	cf 91       	pop	r28
    2f78:	08 95       	ret

00002f7a <_ZN6Analog13getAnalogTypeEh>:

analogType Analog::getAnalogType(uint8_t analogID) {
    2f7a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    2f7c:	20 91 02 02 	lds	r18, 0x0202
    2f80:	30 91 03 02 	lds	r19, 0x0203
    2f84:	80 91 fe 01 	lds	r24, 0x01FE
    2f88:	90 91 ff 01 	lds	r25, 0x01FF
    2f8c:	82 0f       	add	r24, r18
    2f8e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    2f90:	20 91 13 02 	lds	r18, 0x0213
    2f94:	22 23       	and	r18, r18
    2f96:	a1 f0       	breq	.+40     	; 0x2fc0 <_ZN6Analog13getAnalogTypeEh+0x46>
    2f98:	21 30       	cpi	r18, 0x01	; 1
    2f9a:	b9 f4       	brne	.+46     	; 0x2fca <_ZN6Analog13getAnalogTypeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    2f9c:	26 2f       	mov	r18, r22
    2f9e:	26 95       	lsr	r18
    2fa0:	26 95       	lsr	r18
    2fa2:	26 95       	lsr	r18
    2fa4:	c6 2f       	mov	r28, r22
    2fa6:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    2fa8:	82 0f       	add	r24, r18
    2faa:	91 1d       	adc	r25, r1
    2fac:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <_ZN6Analog13getAnalogTypeEh+0x3e>
    2fb4:	95 95       	asr	r25
    2fb6:	87 95       	ror	r24
    2fb8:	ca 95       	dec	r28
    2fba:	e2 f7       	brpl	.-8      	; 0x2fb4 <_ZN6Analog13getAnalogTypeEh+0x3a>
    2fbc:	81 70       	andi	r24, 0x01	; 1
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    2fc0:	86 0f       	add	r24, r22
    2fc2:	91 1d       	adc	r25, r1
    2fc4:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <_ZN6Analog13getAnalogTypeEh+0x52>
            break;

        }   return 0;
    2fca:	80 e0       	ldi	r24, 0x00	; 0

    return (analogType)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}
    2fcc:	cf 91       	pop	r28
    2fce:	08 95       	ret

00002fd0 <_ZN6Analog6updateEv>:

    }

}

void Analog::update()   {
    2fd0:	df 92       	push	r13
    2fd2:	ef 92       	push	r14
    2fd4:	ff 92       	push	r15
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	8c 01       	movw	r16, r24

    if (!board.analogDataAvailable()) return;
    2fe0:	81 e4       	ldi	r24, 0x41	; 65
    2fe2:	92 e0       	ldi	r25, 0x02	; 2
    2fe4:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN5Board19analogDataAvailableEv>
    2fe8:	88 23       	and	r24, r24
    2fea:	09 f4       	brne	.+2      	; 0x2fee <_ZN6Analog6updateEv+0x1e>
    2fec:	4e c0       	rjmp	.+156    	; 0x308a <_ZN6Analog6updateEv+0xba>
    2fee:	c0 e0       	ldi	r28, 0x00	; 0
    2ff0:	d0 e0       	ldi	r29, 0x00	; 0
    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {

        analogData = board.getAnalogValue(i); //get raw analog reading
    2ff2:	6c 2f       	mov	r22, r28
    2ff4:	81 e4       	ldi	r24, 0x41	; 65
    2ff6:	92 e0       	ldi	r25, 0x02	; 2
    2ff8:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN5Board14getAnalogValueEh>
    2ffc:	7c 01       	movw	r14, r24
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
    2ffe:	6c 2f       	mov	r22, r28
    3000:	c8 01       	movw	r24, r16
    3002:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6Analog16getAnalogEnabledEh>
    3006:	88 23       	and	r24, r24
    3008:	d9 f1       	breq	.+118    	; 0x3080 <_ZN6Analog6updateEv+0xb0>

}

void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];
    300a:	ce 01       	movw	r24, r28
    300c:	99 27       	eor	r25, r25
    300e:	f8 01       	movw	r30, r16
    3010:	e8 0f       	add	r30, r24
    3012:	f9 1f       	adc	r31, r25
    3014:	20 81       	ld	r18, Z

    analogSample[analogID][sampleIndex] = sample;
    3016:	fc 01       	movw	r30, r24
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	e2 0f       	add	r30, r18
    3022:	f1 1d       	adc	r31, r1
    3024:	ee 0f       	add	r30, r30
    3026:	ff 1f       	adc	r31, r31
    3028:	e0 0f       	add	r30, r16
    302a:	f1 1f       	adc	r31, r17
    302c:	eb 59       	subi	r30, 0x9B	; 155
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	f1 82       	std	Z+1, r15	; 0x01
    3032:	e0 82       	st	Z, r14
    analogDebounceCounter[analogID]++;
    3034:	2f 5f       	subi	r18, 0xFF	; 255

}

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {
    3036:	23 30       	cpi	r18, 0x03	; 3
    3038:	29 f0       	breq	.+10     	; 0x3044 <_ZN6Analog6updateEv+0x74>
void Analog::addAnalogSample(uint8_t analogID, int16_t sample) {

    uint8_t sampleIndex = analogDebounceCounter[analogID];

    analogSample[analogID][sampleIndex] = sample;
    analogDebounceCounter[analogID]++;
    303a:	f8 01       	movw	r30, r16
    303c:	e8 0f       	add	r30, r24
    303e:	f9 1f       	adc	r31, r25
    3040:	20 83       	st	Z, r18
    3042:	1e c0       	rjmp	.+60     	; 0x3080 <_ZN6Analog6updateEv+0xb0>

bool Analog::analogValueSampled(uint8_t analogID) {

    if (analogDebounceCounter[analogID] == NUMBER_OF_SAMPLES) {

        analogDebounceCounter[analogID] = 0;
    3044:	f8 01       	movw	r30, r16
    3046:	e8 0f       	add	r30, r24
    3048:	f9 1f       	adc	r31, r25
    304a:	10 82       	st	Z, r1

        analogData = board.getAnalogValue(i); //get raw analog reading
        if (!getAnalogEnabled(i)) continue; //don't process component if it's not enabled
        addAnalogSample(i, analogData);
        if (!analogValueSampled(i)) continue;  //three samples are needed
        analogData = getMedianValue(i);  //get median value from three analog samples for better accuracy
    304c:	6c 2f       	mov	r22, r28
    304e:	c8 01       	movw	r24, r16
    3050:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_ZN6Analog14getMedianValueEh>
    3054:	7c 01       	movw	r14, r24
        analogType type = getAnalogType(i);
    3056:	6c 2f       	mov	r22, r28
    3058:	c8 01       	movw	r24, r16
    305a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6Analog13getAnalogTypeEh>

        switch(type) {
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	51 f0       	breq	.+20     	; 0x3076 <_ZN6Analog6updateEv+0xa6>
    3062:	18 f0       	brcs	.+6      	; 0x306a <_ZN6Analog6updateEv+0x9a>
    3064:	82 30       	cpi	r24, 0x02	; 2
    3066:	61 f0       	breq	.+24     	; 0x3080 <_ZN6Analog6updateEv+0xb0>
    3068:	10 c0       	rjmp	.+32     	; 0x308a <_ZN6Analog6updateEv+0xba>

            case potentiometer:
            checkPotentiometerValue(i, analogData);
    306a:	a7 01       	movw	r20, r14
    306c:	6c 2f       	mov	r22, r28
    306e:	c8 01       	movw	r24, r16
    3070:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN6Analog23checkPotentiometerValueEhi>
            break;
    3074:	05 c0       	rjmp	.+10     	; 0x3080 <_ZN6Analog6updateEv+0xb0>

            case fsr:
            checkFSRvalue(i, analogData);
    3076:	a7 01       	movw	r20, r14
    3078:	6c 2f       	mov	r22, r28
    307a:	c8 01       	movw	r24, r16
    307c:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN6Analog13checkFSRvalueEhi>
    if (!board.analogDataAvailable()) return;

    int16_t analogData;

    //check values
    for (int i=0; i<MAX_NUMBER_OF_ANALOG; i++)    {
    3080:	21 96       	adiw	r28, 0x01	; 1
    3082:	c0 32       	cpi	r28, 0x20	; 32
    3084:	d1 05       	cpc	r29, r1
    3086:	09 f0       	breq	.+2      	; 0x308a <_ZN6Analog6updateEv+0xba>
    3088:	b4 cf       	rjmp	.-152    	; 0x2ff2 <_ZN6Analog6updateEv+0x22>

        }

    }

}
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	df 90       	pop	r13
    3098:	08 95       	ret

0000309a <_ZN6Analog9getMIDIidEh>:

    return (analogType)configuration.readParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID);

}

uint8_t Analog::getMIDIid(uint8_t analogID)    {
    309a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    309c:	20 91 06 02 	lds	r18, 0x0206
    30a0:	30 91 07 02 	lds	r19, 0x0207
    30a4:	80 91 fe 01 	lds	r24, 0x01FE
    30a8:	90 91 ff 01 	lds	r25, 0x01FF
    30ac:	82 0f       	add	r24, r18
    30ae:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    30b0:	20 91 15 02 	lds	r18, 0x0215
    30b4:	22 23       	and	r18, r18
    30b6:	a1 f0       	breq	.+40     	; 0x30e0 <_ZN6Analog9getMIDIidEh+0x46>
    30b8:	21 30       	cpi	r18, 0x01	; 1
    30ba:	b9 f4       	brne	.+46     	; 0x30ea <_ZN6Analog9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    30bc:	26 2f       	mov	r18, r22
    30be:	26 95       	lsr	r18
    30c0:	26 95       	lsr	r18
    30c2:	26 95       	lsr	r18
    30c4:	c6 2f       	mov	r28, r22
    30c6:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    30c8:	82 0f       	add	r24, r18
    30ca:	91 1d       	adc	r25, r1
    30cc:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <_ZN6Analog9getMIDIidEh+0x3e>
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	ca 95       	dec	r28
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <_ZN6Analog9getMIDIidEh+0x3a>
    30dc:	81 70       	andi	r24, 0x01	; 1
    30de:	06 c0       	rjmp	.+12     	; 0x30ec <_ZN6Analog9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    30e0:	86 0f       	add	r24, r22
    30e2:	91 1d       	adc	r25, r1
    30e4:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    30e8:	01 c0       	rjmp	.+2      	; 0x30ec <_ZN6Analog9getMIDIidEh+0x52>
            break;

        }   return 0;
    30ea:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID);

}
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <_ZN6Analog10getCClimitEh11ccLimitType>:

uint8_t Analog::getCClimit(uint8_t analogID, ccLimitType type)  {
    30f0:	cf 93       	push	r28

    switch(type)    {
    30f2:	44 23       	and	r20, r20
    30f4:	19 f0       	breq	.+6      	; 0x30fc <_ZN6Analog10getCClimitEh11ccLimitType+0xc>
    30f6:	41 30       	cpi	r20, 0x01	; 1
    30f8:	49 f1       	breq	.+82     	; 0x314c <_ZN6Analog10getCClimitEh11ccLimitType+0x5c>
    30fa:	4f c0       	rjmp	.+158    	; 0x319a <_ZN6Analog10getCClimitEh11ccLimitType+0xaa>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    30fc:	20 91 08 02 	lds	r18, 0x0208
    3100:	30 91 09 02 	lds	r19, 0x0209
    3104:	80 91 fe 01 	lds	r24, 0x01FE
    3108:	90 91 ff 01 	lds	r25, 0x01FF
    310c:	82 0f       	add	r24, r18
    310e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3110:	20 91 16 02 	lds	r18, 0x0216
    3114:	22 23       	and	r18, r18
    3116:	a9 f0       	breq	.+42     	; 0x3142 <_ZN6Analog10getCClimitEh11ccLimitType+0x52>
    3118:	21 30       	cpi	r18, 0x01	; 1
    311a:	09 f0       	breq	.+2      	; 0x311e <_ZN6Analog10getCClimitEh11ccLimitType+0x2e>
    311c:	40 c0       	rjmp	.+128    	; 0x319e <_ZN6Analog10getCClimitEh11ccLimitType+0xae>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    311e:	26 2f       	mov	r18, r22
    3120:	26 95       	lsr	r18
    3122:	26 95       	lsr	r18
    3124:	26 95       	lsr	r18
    3126:	c6 2f       	mov	r28, r22
    3128:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    312a:	82 0f       	add	r24, r18
    312c:	91 1d       	adc	r25, r1
    312e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	02 c0       	rjmp	.+4      	; 0x313a <_ZN6Analog10getCClimitEh11ccLimitType+0x4a>
    3136:	95 95       	asr	r25
    3138:	87 95       	ror	r24
    313a:	ca 95       	dec	r28
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <_ZN6Analog10getCClimitEh11ccLimitType+0x46>
    313e:	81 70       	andi	r24, 0x01	; 1
    3140:	31 c0       	rjmp	.+98     	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3142:	86 0f       	add	r24, r22
    3144:	91 1d       	adc	r25, r1
    3146:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    314a:	2c c0       	rjmp	.+88     	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    314c:	20 91 0a 02 	lds	r18, 0x020A
    3150:	30 91 0b 02 	lds	r19, 0x020B
    3154:	80 91 fe 01 	lds	r24, 0x01FE
    3158:	90 91 ff 01 	lds	r25, 0x01FF
    315c:	82 0f       	add	r24, r18
    315e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3160:	20 91 17 02 	lds	r18, 0x0217
    3164:	22 23       	and	r18, r18
    3166:	a1 f0       	breq	.+40     	; 0x3190 <_ZN6Analog10getCClimitEh11ccLimitType+0xa0>
    3168:	21 30       	cpi	r18, 0x01	; 1
    316a:	d9 f4       	brne	.+54     	; 0x31a2 <_ZN6Analog10getCClimitEh11ccLimitType+0xb2>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    316c:	26 2f       	mov	r18, r22
    316e:	26 95       	lsr	r18
    3170:	26 95       	lsr	r18
    3172:	26 95       	lsr	r18
    3174:	c6 2f       	mov	r28, r22
    3176:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3178:	82 0f       	add	r24, r18
    317a:	91 1d       	adc	r25, r1
    317c:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <_ZN6Analog10getCClimitEh11ccLimitType+0x98>
    3184:	95 95       	asr	r25
    3186:	87 95       	ror	r24
    3188:	ca 95       	dec	r28
    318a:	e2 f7       	brpl	.-8      	; 0x3184 <_ZN6Analog10getCClimitEh11ccLimitType+0x94>
    318c:	81 70       	andi	r24, 0x01	; 1
    318e:	0a c0       	rjmp	.+20     	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3190:	86 0f       	add	r24, r22
    3192:	91 1d       	adc	r25, r1
    3194:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3198:	05 c0       	rjmp	.+10     	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>

        case ccLimitHigh:
        return configuration.readParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID);
        break;

    }   return 0;
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>
            break;

        }   return 0;
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <_ZN6Analog10getCClimitEh11ccLimitType+0xb4>
    31a2:	80 e0       	ldi	r24, 0x00	; 0

}
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <_ZN6Analog12getParameterEhh>:

uint8_t Analog::getParameter(uint8_t messageType, uint8_t parameter) {
    31a8:	24 2f       	mov	r18, r20

    switch(messageType) {
    31aa:	62 30       	cpi	r22, 0x02	; 2
    31ac:	a1 f0       	breq	.+40     	; 0x31d6 <_ZN6Analog12getParameterEhh+0x2e>
    31ae:	28 f4       	brcc	.+10     	; 0x31ba <_ZN6Analog12getParameterEhh+0x12>
    31b0:	66 23       	and	r22, r22
    31b2:	49 f0       	breq	.+18     	; 0x31c6 <_ZN6Analog12getParameterEhh+0x1e>
    31b4:	61 30       	cpi	r22, 0x01	; 1
    31b6:	59 f0       	breq	.+22     	; 0x31ce <_ZN6Analog12getParameterEhh+0x26>
    31b8:	20 c0       	rjmp	.+64     	; 0x31fa <_ZN6Analog12getParameterEhh+0x52>
    31ba:	64 30       	cpi	r22, 0x04	; 4
    31bc:	a1 f0       	breq	.+40     	; 0x31e6 <_ZN6Analog12getParameterEhh+0x3e>
    31be:	78 f0       	brcs	.+30     	; 0x31de <_ZN6Analog12getParameterEhh+0x36>
    31c0:	65 30       	cpi	r22, 0x05	; 5
    31c2:	b1 f0       	breq	.+44     	; 0x31f0 <_ZN6Analog12getParameterEhh+0x48>
    31c4:	1a c0       	rjmp	.+52     	; 0x31fa <_ZN6Analog12getParameterEhh+0x52>

        case analogEnabledConf:
        return getAnalogEnabled(parameter);
    31c6:	64 2f       	mov	r22, r20
    31c8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6Analog16getAnalogEnabledEh>
    31cc:	08 95       	ret
        break;

        case analogInvertedConf:
        return getAnalogInvertState(parameter);
    31ce:	64 2f       	mov	r22, r20
    31d0:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <_ZN6Analog20getAnalogInvertStateEh>
    31d4:	08 95       	ret
        break;

        case analogTypeConf:
        return getAnalogType(parameter);
    31d6:	64 2f       	mov	r22, r20
    31d8:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6Analog13getAnalogTypeEh>
    31dc:	08 95       	ret
        break;

        case analogMIDIidConf:
        return getMIDIid(parameter);
    31de:	64 2f       	mov	r22, r20
    31e0:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN6Analog9getMIDIidEh>
    31e4:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return getCClimit(parameter, ccLimitLow);
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	62 2f       	mov	r22, r18
    31ea:	0e 94 78 18 	call	0x30f0	; 0x30f0 <_ZN6Analog10getCClimitEh11ccLimitType>
    31ee:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return getCClimit(parameter, ccLimitHigh);
    31f0:	41 e0       	ldi	r20, 0x01	; 1
    31f2:	62 2f       	mov	r22, r18
    31f4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <_ZN6Analog10getCClimitEh11ccLimitType>
    31f8:	08 95       	ret
        break;

    }   return 0;
    31fa:	80 e0       	ldi	r24, 0x00	; 0

}
    31fc:	08 95       	ret

000031fe <_ZN6Analog16setAnalogEnabledEhb>:


bool Analog::setAnalogEnabled(uint8_t analogID, bool state)    {
    31fe:	0f 93       	push	r16
    3200:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogEnabledSection, analogID, state);
    3202:	04 2f       	mov	r16, r20
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	63 e0       	ldi	r22, 0x03	; 3
    3208:	8a e9       	ldi	r24, 0x9A	; 154
    320a:	91 e0       	ldi	r25, 0x01	; 1
    320c:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3210:	0f 91       	pop	r16
    3212:	08 95       	ret

00003214 <_ZN6Analog20setAnalogInvertStateEhh>:

bool Analog::setAnalogInvertState(uint8_t analogID, uint8_t state) {
    3214:	0f 93       	push	r16
    3216:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogInvertedSection, analogID, state);
    3218:	04 2f       	mov	r16, r20
    321a:	42 e0       	ldi	r20, 0x02	; 2
    321c:	63 e0       	ldi	r22, 0x03	; 3
    321e:	8a e9       	ldi	r24, 0x9A	; 154
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3226:	0f 91       	pop	r16
    3228:	08 95       	ret

0000322a <_ZN6Analog13setAnalogTypeEhh>:

bool Analog::setAnalogType(uint8_t analogID, uint8_t type)    {
    322a:	0f 93       	push	r16
    322c:	26 2f       	mov	r18, r22

    lastAnalogueValue[analogID] = 0;
    322e:	e6 2f       	mov	r30, r22
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	ee 0f       	add	r30, r30
    3234:	ff 1f       	adc	r31, r31
    3236:	8e 0f       	add	r24, r30
    3238:	9f 1f       	adc	r25, r31
    323a:	fc 01       	movw	r30, r24
    323c:	eb 59       	subi	r30, 0x9B	; 155
    323e:	fe 4f       	sbci	r31, 0xFE	; 254
    3240:	11 82       	std	Z+1, r1	; 0x01
    3242:	10 82       	st	Z, r1

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogTypeSection, analogID, type);
    3244:	04 2f       	mov	r16, r20
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	63 e0       	ldi	r22, 0x03	; 3
    324a:	8a e9       	ldi	r24, 0x9A	; 154
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3252:	0f 91       	pop	r16
    3254:	08 95       	ret

00003256 <_ZN6Analog9setMIDIidEhh>:

bool Analog::setMIDIid(uint8_t analogID, uint8_t midiID)   {
    3256:	0f 93       	push	r16
    3258:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_ANALOG_BLOCK, analogMIDIidSection, analogID, midiID);
    325a:	04 2f       	mov	r16, r20
    325c:	43 e0       	ldi	r20, 0x03	; 3
    325e:	63 e0       	ldi	r22, 0x03	; 3
    3260:	8a e9       	ldi	r24, 0x9A	; 154
    3262:	91 e0       	ldi	r25, 0x01	; 1
    3264:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3268:	0f 91       	pop	r16
    326a:	08 95       	ret

0000326c <_ZN6Analog10setCClimitE11ccLimitTypehh>:

bool Analog::setCClimit(ccLimitType type, uint8_t analogID, uint8_t limit)  {
    326c:	0f 93       	push	r16

    switch (type)  {
    326e:	66 23       	and	r22, r22
    3270:	19 f0       	breq	.+6      	; 0x3278 <_ZN6Analog10setCClimitE11ccLimitTypehh+0xc>
    3272:	61 30       	cpi	r22, 0x01	; 1
    3274:	51 f0       	breq	.+20     	; 0x328a <_ZN6Analog10setCClimitE11ccLimitTypehh+0x1e>
    3276:	12 c0       	rjmp	.+36     	; 0x329c <_ZN6Analog10setCClimitE11ccLimitTypehh+0x30>

        case ccLimitLow:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCClowerLimitSection, analogID, limit);
    3278:	02 2f       	mov	r16, r18
    327a:	24 2f       	mov	r18, r20
    327c:	44 e0       	ldi	r20, 0x04	; 4
    327e:	63 e0       	ldi	r22, 0x03	; 3
    3280:	8a e9       	ldi	r24, 0x9A	; 154
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>
    3288:	0a c0       	rjmp	.+20     	; 0x329e <_ZN6Analog10setCClimitE11ccLimitTypehh+0x32>
        break;

        case ccLimitHigh:
        return configuration.writeParameter(CONF_ANALOG_BLOCK, analogCCupperLimitSection, analogID, limit);
    328a:	02 2f       	mov	r16, r18
    328c:	24 2f       	mov	r18, r20
    328e:	45 e0       	ldi	r20, 0x05	; 5
    3290:	63 e0       	ldi	r22, 0x03	; 3
    3292:	8a e9       	ldi	r24, 0x9A	; 154
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>
    329a:	01 c0       	rjmp	.+2      	; 0x329e <_ZN6Analog10setCClimitE11ccLimitTypehh+0x32>
        break;

        default:
        return false;
    329c:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }

}
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

000032a2 <_ZN6Analog12setParameterEhhh>:

bool Analog::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    32a2:	34 2f       	mov	r19, r20

    switch(messageType) {
    32a4:	62 30       	cpi	r22, 0x02	; 2
    32a6:	c9 f0       	breq	.+50     	; 0x32da <_ZN6Analog12setParameterEhhh+0x38>
    32a8:	28 f4       	brcc	.+10     	; 0x32b4 <_ZN6Analog12setParameterEhhh+0x12>
    32aa:	66 23       	and	r22, r22
    32ac:	49 f0       	breq	.+18     	; 0x32c0 <_ZN6Analog12setParameterEhhh+0x1e>
    32ae:	61 30       	cpi	r22, 0x01	; 1
    32b0:	79 f0       	breq	.+30     	; 0x32d0 <_ZN6Analog12setParameterEhhh+0x2e>
    32b2:	25 c0       	rjmp	.+74     	; 0x32fe <_ZN6Analog12setParameterEhhh+0x5c>
    32b4:	64 30       	cpi	r22, 0x04	; 4
    32b6:	d9 f0       	breq	.+54     	; 0x32ee <_ZN6Analog12setParameterEhhh+0x4c>
    32b8:	a8 f0       	brcs	.+42     	; 0x32e4 <_ZN6Analog12setParameterEhhh+0x42>
    32ba:	65 30       	cpi	r22, 0x05	; 5
    32bc:	e1 f0       	breq	.+56     	; 0x32f6 <_ZN6Analog12setParameterEhhh+0x54>
    32be:	1f c0       	rjmp	.+62     	; 0x32fe <_ZN6Analog12setParameterEhhh+0x5c>

        case analogEnabledConf:
        return setAnalogEnabled(parameter, newParameter);
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	21 11       	cpse	r18, r1
    32c4:	01 c0       	rjmp	.+2      	; 0x32c8 <_ZN6Analog12setParameterEhhh+0x26>
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	63 2f       	mov	r22, r19
    32ca:	0e 94 ff 18 	call	0x31fe	; 0x31fe <_ZN6Analog16setAnalogEnabledEhb>
    32ce:	08 95       	ret
        break;

        case analogInvertedConf:
        return setAnalogInvertState(parameter, newParameter);
    32d0:	42 2f       	mov	r20, r18
    32d2:	63 2f       	mov	r22, r19
    32d4:	0e 94 0a 19 	call	0x3214	; 0x3214 <_ZN6Analog20setAnalogInvertStateEhh>
    32d8:	08 95       	ret
        break;

        case analogTypeConf:
        return setAnalogType(parameter, newParameter);
    32da:	42 2f       	mov	r20, r18
    32dc:	63 2f       	mov	r22, r19
    32de:	0e 94 15 19 	call	0x322a	; 0x322a <_ZN6Analog13setAnalogTypeEhh>
    32e2:	08 95       	ret
        break;

        case analogMIDIidConf:
        return setMIDIid(parameter, newParameter);
    32e4:	42 2f       	mov	r20, r18
    32e6:	63 2f       	mov	r22, r19
    32e8:	0e 94 2b 19 	call	0x3256	; 0x3256 <_ZN6Analog9setMIDIidEhh>
    32ec:	08 95       	ret
        break;

        case analogCClowerLimitConf:
        return setCClimit(ccLimitLow, parameter, newParameter);
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN6Analog10setCClimitE11ccLimitTypehh>
    32f4:	08 95       	ret
        break;

        case analogCCupperLimitConf:
        return setCClimit(ccLimitHigh, parameter, newParameter);
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN6Analog10setCClimitE11ccLimitTypehh>
    32fc:	08 95       	ret
        break;

    }   return false;
    32fe:	80 e0       	ldi	r24, 0x00	; 0

}
    3300:	08 95       	ret

00003302 <_ZN6Analog13getFsrPressedEh>:

}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    3302:	26 2f       	mov	r18, r22
    3304:	26 95       	lsr	r18
    3306:	26 95       	lsr	r18
    3308:	26 95       	lsr	r18
    uint8_t fsrIndex = fsrID - 8*arrayIndex;

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    330a:	82 0f       	add	r24, r18
    330c:	91 1d       	adc	r25, r1
    330e:	fc 01       	movw	r30, r24
    3310:	80 a1       	ldd	r24, Z+32	; 0x20
    3312:	90 e0       	ldi	r25, 0x00	; 0
}

bool Analog::getFsrPressed(uint8_t fsrID)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    3314:	22 0f       	add	r18, r18
    3316:	22 0f       	add	r18, r18
    3318:	22 0f       	add	r18, r18
    331a:	62 1b       	sub	r22, r18

    return bitRead(fsrPressed[arrayIndex], fsrIndex);
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <_ZN6Analog13getFsrPressedEh+0x20>
    331e:	95 95       	asr	r25
    3320:	87 95       	ror	r24
    3322:	6a 95       	dec	r22
    3324:	e2 f7       	brpl	.-8      	; 0x331e <_ZN6Analog13getFsrPressedEh+0x1c>

}
    3326:	81 70       	andi	r24, 0x01	; 1
    3328:	08 95       	ret

0000332a <_ZN6Analog13setFsrPressedEhb>:

void Analog::setFsrPressed(uint8_t fsrID, bool state)   {

    uint8_t arrayIndex = fsrID/8;
    uint8_t fsrIndex = fsrID - 8*arrayIndex;
    332a:	26 2f       	mov	r18, r22
    332c:	26 95       	lsr	r18
    332e:	26 95       	lsr	r18
    3330:	26 95       	lsr	r18
    3332:	67 70       	andi	r22, 0x07	; 7

    bitWrite(fsrPressed[arrayIndex], fsrIndex, state);
    3334:	44 23       	and	r20, r20
    3336:	91 f0       	breq	.+36     	; 0x335c <_ZN6Analog13setFsrPressedEhb+0x32>
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f1 1d       	adc	r31, r1
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	04 c0       	rjmp	.+8      	; 0x3350 <_ZN6Analog13setFsrPressedEhb+0x26>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	6a 95       	dec	r22
    3352:	d2 f7       	brpl	.-12     	; 0x3348 <_ZN6Analog13setFsrPressedEhb+0x1e>
    3354:	20 a1       	ldd	r18, Z+32	; 0x20
    3356:	82 2b       	or	r24, r18
    3358:	80 a3       	std	Z+32, r24	; 0x20
    335a:	08 95       	ret
    335c:	fc 01       	movw	r30, r24
    335e:	e2 0f       	add	r30, r18
    3360:	f1 1d       	adc	r31, r1
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	04 c0       	rjmp	.+8      	; 0x3374 <_ZN6Analog13setFsrPressedEhb+0x4a>
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	aa 1f       	adc	r26, r26
    3372:	bb 1f       	adc	r27, r27
    3374:	6a 95       	dec	r22
    3376:	d2 f7       	brpl	.-12     	; 0x336c <_ZN6Analog13setFsrPressedEhb+0x42>
    3378:	80 95       	com	r24
    337a:	90 a1       	ldd	r25, Z+32	; 0x20
    337c:	89 23       	and	r24, r25
    337e:	80 a3       	std	Z+32, r24	; 0x20
    3380:	08 95       	ret

00003382 <_ZN6Analog13checkFSRvalueEhi>:

}

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	8c 01       	movw	r16, r24
    3390:	36 2f       	mov	r19, r22
inline int16_t calibratePressure(int16_t value, pressureType type)  {

    switch(type)    {

        case velocity:
        return mapAnalog_int16(constrain(value, FSR_MIN_VALUE, FSR_MAX_VALUE), FSR_MIN_VALUE, FSR_MAX_VALUE, 0, 127);
    3392:	48 32       	cpi	r20, 0x28	; 40
    3394:	51 05       	cpc	r21, r1
    3396:	3c f0       	brlt	.+14     	; 0x33a6 <_ZN6Analog13checkFSRvalueEhi+0x24>
    3398:	45 35       	cpi	r20, 0x55	; 85
    339a:	21 e0       	ldi	r18, 0x01	; 1
    339c:	52 07       	cpc	r21, r18
    339e:	2c f0       	brlt	.+10     	; 0x33aa <_ZN6Analog13checkFSRvalueEhi+0x28>
    33a0:	44 e5       	ldi	r20, 0x54	; 84
    33a2:	51 e0       	ldi	r21, 0x01	; 1
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <_ZN6Analog13checkFSRvalueEhi+0x28>
    33a6:	48 e2       	ldi	r20, 0x28	; 40
    33a8:	50 e0       	ldi	r21, 0x00	; 0

void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    33aa:	c3 2f       	mov	r28, r19
    33ac:	d0 e0       	ldi	r29, 0x00	; 0
    33ae:	f8 01       	movw	r30, r16
    33b0:	ec 0f       	add	r30, r28
    33b2:	fd 1f       	adc	r31, r29
    33b4:	eb 5b       	subi	r30, 0xBB	; 187
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	20 81       	ld	r18, Z
    33ba:	2f 5f       	subi	r18, 0xFF	; 255
    33bc:	20 83       	st	Z, r18
    lastAnalogueValue[analogID] += calibratedPressure;
    33be:	fe 01       	movw	r30, r28
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	e0 0f       	add	r30, r16
    33c6:	f1 1f       	adc	r31, r17
    33c8:	eb 59       	subi	r30, 0x9B	; 155
    33ca:	fe 4f       	sbci	r31, 0xFE	; 254

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

inline int16_t mapAnalog_int16(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    33cc:	48 52       	subi	r20, 0x28	; 40
    33ce:	51 09       	sbc	r21, r1
    33d0:	ca 01       	movw	r24, r20
    33d2:	96 95       	lsr	r25
    33d4:	98 2f       	mov	r25, r24
    33d6:	88 27       	eor	r24, r24
    33d8:	97 95       	ror	r25
    33da:	87 95       	ror	r24
    33dc:	84 1b       	sub	r24, r20
    33de:	95 0b       	sbc	r25, r21
    33e0:	6c e2       	ldi	r22, 0x2C	; 44
    33e2:	71 e0       	ldi	r23, 0x01	; 1
    33e4:	0e 94 02 2b 	call	0x5604	; 0x5604 <__divmodhi4>
void Analog::checkFSRvalue(uint8_t analogID, int16_t pressure)  {

    uint8_t calibratedPressure = calibratePressure(pressure, velocity);

    fsrMedianRunCounter[analogID]++;
    lastAnalogueValue[analogID] += calibratedPressure;
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	86 0f       	add	r24, r22
    33ee:	91 1d       	adc	r25, r1
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	80 83       	st	Z, r24

    if (fsrMedianRunCounter[analogID] == FSR_MEDIAN_RUNS) {
    33f4:	22 30       	cpi	r18, 0x02	; 2
    33f6:	09 f0       	breq	.+2      	; 0x33fa <_ZN6Analog13checkFSRvalueEhi+0x78>
    33f8:	64 c0       	rjmp	.+200    	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>

        fsrMedianRunCounter[analogID] = 0;
    33fa:	f8 01       	movw	r30, r16
    33fc:	ec 0f       	add	r30, r28
    33fe:	fd 1f       	adc	r31, r29
    3400:	eb 5b       	subi	r30, 0xBB	; 187
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	10 82       	st	Z, r1
        calibratedPressure = lastAnalogueValue[analogID] / FSR_MEDIAN_RUNS;
    3406:	7c 01       	movw	r14, r24
    3408:	99 23       	and	r25, r25
    340a:	1c f4       	brge	.+6      	; 0x3412 <_ZN6Analog13checkFSRvalueEhi+0x90>
    340c:	2f ef       	ldi	r18, 0xFF	; 255
    340e:	e2 1a       	sub	r14, r18
    3410:	f2 0a       	sbc	r15, r18
    3412:	f5 94       	asr	r15
    3414:	e7 94       	ror	r14
        lastAnalogueValue[analogID] = 0;
    3416:	cc 0f       	add	r28, r28
    3418:	dd 1f       	adc	r29, r29
    341a:	c0 0f       	add	r28, r16
    341c:	d1 1f       	adc	r29, r17
    341e:	cb 59       	subi	r28, 0x9B	; 155
    3420:	de 4f       	sbci	r29, 0xFE	; 254
    3422:	19 82       	std	Y+1, r1	; 0x01
    3424:	18 82       	st	Y, r1

    }   else return;

    bool pressDetected = (calibratedPressure > 0);
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	e1 10       	cpse	r14, r1
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <_ZN6Analog13checkFSRvalueEhi+0xb0>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	c3 2f       	mov	r28, r19

    switch (pressDetected)    {
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	19 f5       	brne	.+70     	; 0x347e <_ZN6Analog13checkFSRvalueEhi+0xfc>

        case true:

        if (!getFsrPressed(analogID)) {
    3438:	63 2f       	mov	r22, r19
    343a:	c8 01       	movw	r24, r16
    343c:	0e 94 81 19 	call	0x3302	; 0x3302 <_ZN6Analog13getFsrPressedEh>
    3440:	81 11       	cpse	r24, r1
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>

            //sensor is really pressed
            setFsrPressed(analogID, true);
    3444:	41 e0       	ldi	r20, 0x01	; 1
    3446:	6c 2f       	mov	r22, r28
    3448:	c8 01       	movw	r24, r16
    344a:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), true, calibratedPressure);
    344e:	6c 2f       	mov	r22, r28
    3450:	c8 01       	movw	r24, r16
    3452:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN6Analog9getMIDIidEh>
    3456:	2e 2d       	mov	r18, r14
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	68 2f       	mov	r22, r24
    345c:	86 e0       	ldi	r24, 0x06	; 6
    345e:	97 e0       	ldi	r25, 0x07	; 7
    3460:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3464:	8b e0       	ldi	r24, 0x0B	; 11
    3466:	97 e0       	ldi	r25, 0x07	; 7
    3468:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    346c:	88 23       	and	r24, r24
    346e:	49 f1       	breq	.+82     	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>
    3470:	4c 2f       	mov	r20, r28
    3472:	63 e0       	ldi	r22, 0x03	; 3
    3474:	8b e0       	ldi	r24, 0x0B	; 11
    3476:	97 e0       	ldi	r25, 0x07	; 7
    3478:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>
    347c:	22 c0       	rjmp	.+68     	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>
        }
        break;

        case false:

        if (getFsrPressed(analogID))  {
    347e:	63 2f       	mov	r22, r19
    3480:	c8 01       	movw	r24, r16
    3482:	0e 94 81 19 	call	0x3302	; 0x3302 <_ZN6Analog13getFsrPressedEh>
    3486:	88 23       	and	r24, r24
    3488:	e1 f0       	breq	.+56     	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>

            setFsrPressed(analogID, false);
    348a:	40 e0       	ldi	r20, 0x00	; 0
    348c:	6c 2f       	mov	r22, r28
    348e:	c8 01       	movw	r24, r16
    3490:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN6Analog13setFsrPressedEhb>
            midi.sendMIDInote(getMIDIid(analogID), false, 0);
    3494:	6c 2f       	mov	r22, r28
    3496:	c8 01       	movw	r24, r16
    3498:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN6Analog9getMIDIidEh>
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	68 2f       	mov	r22, r24
    34a2:	86 e0       	ldi	r24, 0x06	; 6
    34a4:	97 e0       	ldi	r25, 0x07	; 7
    34a6:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    34aa:	8b e0       	ldi	r24, 0x0B	; 11
    34ac:	97 e0       	ldi	r25, 0x07	; 7
    34ae:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    34b2:	88 23       	and	r24, r24
    34b4:	31 f0       	breq	.+12     	; 0x34c2 <_ZN6Analog13checkFSRvalueEhi+0x140>
    34b6:	4c 2f       	mov	r20, r28
    34b8:	63 e0       	ldi	r22, 0x03	; 3
    34ba:	8b e0       	ldi	r24, 0x0B	; 11
    34bc:	97 e0       	ldi	r25, 0x07	; 7
    34be:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>

        break;

    }

}
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	08 95       	ret

000034d0 <_ZN6Analog23checkPotentiometerValueEhi>:
#include "../../eeprom/Blocks.h"

//potentiometer must exceed this value before sending new value
#define POTENTIOMETER_CC_STEP 8

void Analog::checkPotentiometerValue(uint8_t analogID, int16_t tempValue)  {
    34d0:	8f 92       	push	r8
    34d2:	9f 92       	push	r9
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29

    //calculate difference between current and previous reading
    int16_t analogDiff = tempValue - lastAnalogueValue[analogID];
    34e6:	c6 2f       	mov	r28, r22
    34e8:	d0 e0       	ldi	r29, 0x00	; 0
    34ea:	fe 01       	movw	r30, r28
    34ec:	ee 0f       	add	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	e8 0f       	add	r30, r24
    34f2:	f9 1f       	adc	r31, r25
    34f4:	eb 59       	subi	r30, 0x9B	; 155
    34f6:	fe 4f       	sbci	r31, 0xFE	; 254
    34f8:	20 81       	ld	r18, Z
    34fa:	31 81       	ldd	r19, Z+1	; 0x01
    34fc:	fa 01       	movw	r30, r20
    34fe:	e2 1b       	sub	r30, r18
    3500:	f3 0b       	sbc	r31, r19
    3502:	9f 01       	movw	r18, r30
    3504:	22 f4       	brpl	.+8      	; 0x350e <_ZN6Analog23checkPotentiometerValueEhi+0x3e>
    3506:	22 27       	eor	r18, r18
    3508:	33 27       	eor	r19, r19
    350a:	2e 1b       	sub	r18, r30
    350c:	3f 0b       	sbc	r19, r31

    //get absolute difference
    if (analogDiff < 0)   analogDiff *= -1;

    if (!(analogDiff >= POTENTIOMETER_CC_STEP)) return;
    350e:	28 30       	cpi	r18, 0x08	; 8
    3510:	31 05       	cpc	r19, r1
    3512:	0c f4       	brge	.+2      	; 0x3516 <_ZN6Analog23checkPotentiometerValueEhi+0x46>
    3514:	64 c0       	rjmp	.+200    	; 0x35de <_ZN6Analog23checkPotentiometerValueEhi+0x10e>
    3516:	8a 01       	movw	r16, r20
    3518:	d6 2e       	mov	r13, r22
    351a:	7c 01       	movw	r14, r24

    uint8_t ccValue = tempValue >> 3;
    351c:	4a 01       	movw	r8, r20
    351e:	95 94       	asr	r9
    3520:	87 94       	ror	r8
    3522:	95 94       	asr	r9
    3524:	87 94       	ror	r8
    3526:	95 94       	asr	r9
    3528:	87 94       	ror	r8
    352a:	b8 2c       	mov	r11, r8

    //invert CC data if potInverted is true
    if (getAnalogInvertState(analogID))   ccValue = 127 - ccValue;
    352c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <_ZN6Analog20getAnalogInvertStateEh>
    3530:	88 23       	and	r24, r24
    3532:	19 f0       	breq	.+6      	; 0x353a <_ZN6Analog23checkPotentiometerValueEhi+0x6a>
    3534:	8f e7       	ldi	r24, 0x7F	; 127
    3536:	b8 2e       	mov	r11, r24
    3538:	b8 18       	sub	r11, r8

    uint8_t lowerCClimit = getCClimit(analogID, ccLimitLow);
    353a:	40 e0       	ldi	r20, 0x00	; 0
    353c:	6d 2d       	mov	r22, r13
    353e:	c7 01       	movw	r24, r14
    3540:	0e 94 78 18 	call	0x30f0	; 0x30f0 <_ZN6Analog10getCClimitEh11ccLimitType>
    3544:	c8 2e       	mov	r12, r24
    uint8_t upperCClimit = getCClimit(analogID, ccLimitHigh);
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	6d 2d       	mov	r22, r13
    354a:	c7 01       	movw	r24, r14
    354c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <_ZN6Analog10getCClimitEh11ccLimitType>

    //only use map when cc limits are different from defaults
    if ((lowerCClimit != 0) || (upperCClimit != 127))   {
    3550:	c1 10       	cpse	r12, r1
    3552:	02 c0       	rjmp	.+4      	; 0x3558 <_ZN6Analog23checkPotentiometerValueEhi+0x88>
    3554:	8f 37       	cpi	r24, 0x7F	; 127
    3556:	29 f1       	breq	.+74     	; 0x35a2 <_ZN6Analog23checkPotentiometerValueEhi+0xd2>
    int16_t getMedianValue(uint8_t analogID);
    void addAnalogSample(uint8_t analogID, int16_t sample);
    bool analogValueSampled(uint8_t analogID);
    inline uint8_t mapAnalog_uint8(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max) {

        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	2c 19       	sub	r18, r12
    355e:	31 09       	sbc	r19, r1
    3560:	b2 9e       	mul	r11, r18
    3562:	c0 01       	movw	r24, r0
    3564:	b3 9e       	mul	r11, r19
    3566:	90 0d       	add	r25, r0
    3568:	11 24       	eor	r1, r1
    356a:	6f e7       	ldi	r22, 0x7F	; 127
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	0e 94 02 2b 	call	0x5604	; 0x5604 <__divmodhi4>
    3572:	c6 0e       	add	r12, r22

        midi.sendControlChange(getMIDIid(analogID), mapAnalog_uint8(ccValue, 0, 127, lowerCClimit, upperCClimit));
    3574:	6d 2d       	mov	r22, r13
    3576:	c7 01       	movw	r24, r14
    3578:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN6Analog9getMIDIidEh>
    357c:	4c 2d       	mov	r20, r12
    357e:	68 2f       	mov	r22, r24
    3580:	86 e0       	ldi	r24, 0x06	; 6
    3582:	97 e0       	ldi	r25, 0x07	; 7
    3584:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    3588:	8b e0       	ldi	r24, 0x0B	; 11
    358a:	97 e0       	ldi	r25, 0x07	; 7
    358c:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    3590:	88 23       	and	r24, r24
    3592:	e9 f0       	breq	.+58     	; 0x35ce <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    3594:	4d 2d       	mov	r20, r13
    3596:	63 e0       	ldi	r22, 0x03	; 3
    3598:	8b e0       	ldi	r24, 0x0B	; 11
    359a:	97 e0       	ldi	r25, 0x07	; 7
    359c:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>
    35a0:	16 c0       	rjmp	.+44     	; 0x35ce <_ZN6Analog23checkPotentiometerValueEhi+0xfe>

    }

    else {

        midi.sendControlChange(getMIDIid(analogID), ccValue);
    35a2:	6d 2d       	mov	r22, r13
    35a4:	c7 01       	movw	r24, r14
    35a6:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN6Analog9getMIDIidEh>
    35aa:	4b 2d       	mov	r20, r11
    35ac:	68 2f       	mov	r22, r24
    35ae:	86 e0       	ldi	r24, 0x06	; 6
    35b0:	97 e0       	ldi	r25, 0x07	; 7
    35b2:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ANALOG_BLOCK, analogID);
    35b6:	8b e0       	ldi	r24, 0x0B	; 11
    35b8:	97 e0       	ldi	r25, 0x07	; 7
    35ba:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    35be:	88 23       	and	r24, r24
    35c0:	31 f0       	breq	.+12     	; 0x35ce <_ZN6Analog23checkPotentiometerValueEhi+0xfe>
    35c2:	4d 2d       	mov	r20, r13
    35c4:	63 e0       	ldi	r22, 0x03	; 3
    35c6:	8b e0       	ldi	r24, 0x0B	; 11
    35c8:	97 e0       	ldi	r25, 0x07	; 7
    35ca:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>

    }

    //update values
    lastAnalogueValue[analogID] = tempValue;
    35ce:	cc 0f       	add	r28, r28
    35d0:	dd 1f       	adc	r29, r29
    35d2:	ce 0d       	add	r28, r14
    35d4:	df 1d       	adc	r29, r15
    35d6:	cb 59       	subi	r28, 0x9B	; 155
    35d8:	de 4f       	sbci	r29, 0xFE	; 254
    35da:	19 83       	std	Y+1, r17	; 0x01
    35dc:	08 83       	st	Y, r16

}
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	ff 90       	pop	r15
    35e8:	ef 90       	pop	r14
    35ea:	df 90       	pop	r13
    35ec:	cf 90       	pop	r12
    35ee:	bf 90       	pop	r11
    35f0:	9f 90       	pop	r9
    35f2:	8f 90       	pop	r8
    35f4:	08 95       	ret

000035f6 <_ZN7Buttons4initEv>:

    //def const

}

void Buttons::init()    {
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	2f 97       	sbiw	r28, 0x0f	; 15
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61

    const subtype buttonTypeSubtype                   = { MAX_NUMBER_OF_BUTTONS, 0, BUTTON_TYPES-1 };
    3614:	80 e4       	ldi	r24, 0x40	; 64
    3616:	8d 87       	std	Y+13, r24	; 0x0d
    3618:	1e 86       	std	Y+14, r1	; 0x0e
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	9f 87       	std	Y+15, r25	; 0x0f
    const subtype buttonProgramChangeEnabledSubtype   = { MAX_NUMBER_OF_BUTTONS, 0, 1 };
    361e:	8a 87       	std	Y+10, r24	; 0x0a
    3620:	1b 86       	std	Y+11, r1	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    const subtype buttonMIDIidSubtype                 = { MAX_NUMBER_OF_BUTTONS, 0, 127 };
    3624:	8f 83       	std	Y+7, r24	; 0x07
    3626:	18 86       	std	Y+8, r1	; 0x08
    3628:	8f e7       	ldi	r24, 0x7F	; 127
    362a:	89 87       	std	Y+9, r24	; 0x09

        &buttonTypeSubtype,
        &buttonProgramChangeEnabledSubtype,
        &buttonMIDIidSubtype

    };
    362c:	ce 01       	movw	r24, r28
    362e:	0d 96       	adiw	r24, 0x0d	; 13
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	03 97       	sbiw	r24, 0x03	; 3
    3636:	9c 83       	std	Y+4, r25	; 0x04
    3638:	8b 83       	std	Y+3, r24	; 0x03
    363a:	03 97       	sbiw	r24, 0x03	; 3
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);
    3640:	43 e0       	ldi	r20, 0x03	; 3
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	8b e0       	ldi	r24, 0x0B	; 11
    3646:	97 e0       	ldi	r25, 0x07	; 7
    3648:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN5SysEx14addMessageTypeEhh>
    364c:	ce 01       	movw	r24, r28
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	6c 01       	movw	r12, r24
    3652:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);
    3654:	d6 01       	movw	r26, r12
    3656:	ed 91       	ld	r30, X+
    3658:	fd 91       	ld	r31, X+
    365a:	6d 01       	movw	r12, r26
    365c:	e2 80       	ldd	r14, Z+2	; 0x02
    365e:	01 81       	ldd	r16, Z+1	; 0x01
    3660:	20 81       	ld	r18, Z
    3662:	41 2f       	mov	r20, r17
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	8b e0       	ldi	r24, 0x0B	; 11
    3668:	97 e0       	ldi	r25, 0x07	; 7
    366a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    366e:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_BUTTON_BLOCK, BUTTON_SUBTYPES);

    for (int i=0; i<BUTTON_SUBTYPES; i++)   {
    3670:	13 30       	cpi	r17, 0x03	; 3
    3672:	81 f7       	brne	.-32     	; 0x3654 <_ZN7Buttons4initEv+0x5e>
        //define subtype messages
        sysEx.addMessageSubType(CONF_BUTTON_BLOCK, i, buttonSubtypeArray[i]->parameters, buttonSubtypeArray[i]->lowValue, buttonSubtypeArray[i]->highValue);

    }

}
    3674:	2f 96       	adiw	r28, 0x0f	; 15
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	ef 90       	pop	r14
    368a:	df 90       	pop	r13
    368c:	cf 90       	pop	r12
    368e:	08 95       	ret

00003690 <_ZN7Buttons16setButtonPressedEhb>:

void Buttons::setButtonPressed(uint8_t buttonID, bool state)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    3690:	26 2f       	mov	r18, r22
    3692:	26 95       	lsr	r18
    3694:	26 95       	lsr	r18
    3696:	26 95       	lsr	r18
    3698:	67 70       	andi	r22, 0x07	; 7

    bitWrite(buttonPressed[arrayIndex], buttonIndex, state);
    369a:	44 23       	and	r20, r20
    369c:	91 f0       	breq	.+36     	; 0x36c2 <_ZN7Buttons16setButtonPressedEhb+0x32>
    369e:	fc 01       	movw	r30, r24
    36a0:	e2 0f       	add	r30, r18
    36a2:	f1 1d       	adc	r31, r1
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e0       	ldi	r26, 0x00	; 0
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <_ZN7Buttons16setButtonPressedEhb+0x26>
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	aa 1f       	adc	r26, r26
    36b4:	bb 1f       	adc	r27, r27
    36b6:	6a 95       	dec	r22
    36b8:	d2 f7       	brpl	.-12     	; 0x36ae <_ZN7Buttons16setButtonPressedEhb+0x1e>
    36ba:	21 85       	ldd	r18, Z+9	; 0x09
    36bc:	82 2b       	or	r24, r18
    36be:	81 87       	std	Z+9, r24	; 0x09
    36c0:	08 95       	ret
    36c2:	fc 01       	movw	r30, r24
    36c4:	e2 0f       	add	r30, r18
    36c6:	f1 1d       	adc	r31, r1
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a0 e0       	ldi	r26, 0x00	; 0
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	04 c0       	rjmp	.+8      	; 0x36da <_ZN7Buttons16setButtonPressedEhb+0x4a>
    36d2:	88 0f       	add	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	aa 1f       	adc	r26, r26
    36d8:	bb 1f       	adc	r27, r27
    36da:	6a 95       	dec	r22
    36dc:	d2 f7       	brpl	.-12     	; 0x36d2 <_ZN7Buttons16setButtonPressedEhb+0x42>
    36de:	80 95       	com	r24
    36e0:	91 85       	ldd	r25, Z+9	; 0x09
    36e2:	89 23       	and	r24, r25
    36e4:	81 87       	std	Z+9, r24	; 0x09
    36e6:	08 95       	ret

000036e8 <_ZN7Buttons16getButtonPressedEh>:

}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    36e8:	26 2f       	mov	r18, r22
    36ea:	26 95       	lsr	r18
    36ec:	26 95       	lsr	r18
    36ee:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    36f0:	82 0f       	add	r24, r18
    36f2:	91 1d       	adc	r25, r1
    36f4:	fc 01       	movw	r30, r24
    36f6:	81 85       	ldd	r24, Z+9	; 0x09
    36f8:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getButtonPressed(uint8_t buttonID)   {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    36fa:	22 0f       	add	r18, r18
    36fc:	22 0f       	add	r18, r18
    36fe:	22 0f       	add	r18, r18
    3700:	62 1b       	sub	r22, r18

    return bitRead(buttonPressed[arrayIndex], buttonIndex);
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <_ZN7Buttons16getButtonPressedEh+0x20>
    3704:	95 95       	asr	r25
    3706:	87 95       	ror	r24
    3708:	6a 95       	dec	r22
    370a:	e2 f7       	brpl	.-8      	; 0x3704 <_ZN7Buttons16getButtonPressedEh+0x1c>

}
    370c:	81 70       	andi	r24, 0x01	; 1
    370e:	08 95       	ret

00003710 <_ZN7Buttons17updateButtonStateEhh>:

    }

}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {
    3710:	0f 93       	push	r16
    3712:	1f 93       	push	r17
    3714:	cf 93       	push	r28
    3716:	df 93       	push	r29
    3718:	dc 01       	movw	r26, r24

    uint8_t arrayIndex = buttonID/8;
    371a:	96 2f       	mov	r25, r22
    371c:	96 95       	lsr	r25
    371e:	96 95       	lsr	r25
    3720:	96 95       	lsr	r25
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    3722:	e9 2f       	mov	r30, r25
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	ed 01       	movw	r28, r26
    3728:	ce 0f       	add	r28, r30
    372a:	df 1f       	adc	r29, r31
    372c:	58 81       	ld	r21, Y
}

void Buttons::updateButtonState(uint8_t buttonID, uint8_t buttonState) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    372e:	99 0f       	add	r25, r25
    3730:	99 0f       	add	r25, r25
    3732:	99 0f       	add	r25, r25
    3734:	69 1b       	sub	r22, r25

    //update state if it's different than last one
    if (bitRead(previousButtonState[arrayIndex], buttonIndex) != buttonState)
    3736:	25 2f       	mov	r18, r21
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	06 2e       	mov	r0, r22
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <_ZN7Buttons17updateButtonStateEhh+0x32>
    373e:	35 95       	asr	r19
    3740:	27 95       	ror	r18
    3742:	0a 94       	dec	r0
    3744:	e2 f7       	brpl	.-8      	; 0x373e <_ZN7Buttons17updateButtonStateEhh+0x2e>
    3746:	21 70       	andi	r18, 0x01	; 1
    3748:	33 27       	eor	r19, r19
    374a:	84 2f       	mov	r24, r20
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	28 17       	cp	r18, r24
    3750:	39 07       	cpc	r19, r25
    3752:	01 f1       	breq	.+64     	; 0x3794 <_ZN7Buttons17updateButtonStateEhh+0x84>
        bitWrite(previousButtonState[arrayIndex], buttonIndex, buttonState);
    3754:	44 23       	and	r20, r20
    3756:	71 f0       	breq	.+28     	; 0x3774 <_ZN7Buttons17updateButtonStateEhh+0x64>
    3758:	01 e0       	ldi	r16, 0x01	; 1
    375a:	10 e0       	ldi	r17, 0x00	; 0
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	04 c0       	rjmp	.+8      	; 0x376a <_ZN7Buttons17updateButtonStateEhh+0x5a>
    3762:	00 0f       	add	r16, r16
    3764:	11 1f       	adc	r17, r17
    3766:	22 1f       	adc	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	6a 95       	dec	r22
    376c:	d2 f7       	brpl	.-12     	; 0x3762 <_ZN7Buttons17updateButtonStateEhh+0x52>
    376e:	05 2b       	or	r16, r21
    3770:	08 83       	st	Y, r16
    3772:	10 c0       	rjmp	.+32     	; 0x3794 <_ZN7Buttons17updateButtonStateEhh+0x84>
    3774:	ea 0f       	add	r30, r26
    3776:	fb 1f       	adc	r31, r27
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a0 e0       	ldi	r26, 0x00	; 0
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	04 c0       	rjmp	.+8      	; 0x378a <_ZN7Buttons17updateButtonStateEhh+0x7a>
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	aa 1f       	adc	r26, r26
    3788:	bb 1f       	adc	r27, r27
    378a:	6a 95       	dec	r22
    378c:	d2 f7       	brpl	.-12     	; 0x3782 <_ZN7Buttons17updateButtonStateEhh+0x72>
    378e:	80 95       	com	r24
    3790:	58 23       	and	r21, r24
    3792:	50 83       	st	Z, r21

}
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	08 95       	ret

0000379e <_ZN7Buttons22getPreviousButtonStateEh>:

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    379e:	26 2f       	mov	r18, r22
    37a0:	26 95       	lsr	r18
    37a2:	26 95       	lsr	r18
    37a4:	26 95       	lsr	r18
    uint8_t buttonIndex = buttonID - 8*arrayIndex;

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    37a6:	82 0f       	add	r24, r18
    37a8:	91 1d       	adc	r25, r1
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 81       	ld	r24, Z
    37ae:	90 e0       	ldi	r25, 0x00	; 0
}

bool Buttons::getPreviousButtonState(uint8_t buttonID) {

    uint8_t arrayIndex = buttonID/8;
    uint8_t buttonIndex = buttonID - 8*arrayIndex;
    37b0:	22 0f       	add	r18, r18
    37b2:	22 0f       	add	r18, r18
    37b4:	22 0f       	add	r18, r18
    37b6:	62 1b       	sub	r22, r18

    return bitRead(previousButtonState[arrayIndex], buttonIndex);
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <_ZN7Buttons22getPreviousButtonStateEh+0x20>
    37ba:	95 95       	asr	r25
    37bc:	87 95       	ror	r24
    37be:	6a 95       	dec	r22
    37c0:	e2 f7       	brpl	.-8      	; 0x37ba <_ZN7Buttons22getPreviousButtonStateEh+0x1c>

}
    37c2:	81 70       	andi	r24, 0x01	; 1
    37c4:	08 95       	ret

000037c6 <_ZN7Buttons15buttonDebouncedEhb>:

bool Buttons::buttonDebounced(uint8_t buttonID, bool buttonState)   {
    37c6:	40 68       	ori	r20, 0x80	; 128

    //shift new button reading into previousButtonState
    buttonDebounceCounter[buttonID] = (buttonDebounceCounter[buttonID] << 1) | buttonState | buttonDebounceCompare;
    37c8:	fc 01       	movw	r30, r24
    37ca:	e6 0f       	add	r30, r22
    37cc:	f1 1d       	adc	r31, r1
    37ce:	92 89       	ldd	r25, Z+18	; 0x12
    37d0:	99 0f       	add	r25, r25
    37d2:	49 2b       	or	r20, r25
    37d4:	42 8b       	std	Z+18, r20	; 0x12

    //if button is debounced, return true
    return ((buttonDebounceCounter[buttonID] == buttonDebounceCompare) || (buttonDebounceCounter[buttonID] == 0xFF));
    37d6:	40 38       	cpi	r20, 0x80	; 128
    37d8:	29 f0       	breq	.+10     	; 0x37e4 <_ZN7Buttons15buttonDebouncedEhb+0x1e>
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	4f 3f       	cpi	r20, 0xFF	; 255
    37de:	19 f0       	breq	.+6      	; 0x37e6 <_ZN7Buttons15buttonDebouncedEhb+0x20>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	08 95       	ret
    37e4:	81 e0       	ldi	r24, 0x01	; 1

}
    37e6:	08 95       	ret

000037e8 <_ZN7Buttons13getButtonTypeEh>:

buttonType Buttons::getButtonType(uint8_t buttonID)  {
    37e8:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    37ea:	ea e9       	ldi	r30, 0x9A	; 154
    37ec:	f1 e0       	ldi	r31, 0x01	; 1
    37ee:	24 a1       	ldd	r18, Z+36	; 0x24
    37f0:	35 a1       	ldd	r19, Z+37	; 0x25
    37f2:	82 a1       	ldd	r24, Z+34	; 0x22
    37f4:	93 a1       	ldd	r25, Z+35	; 0x23
    37f6:	82 0f       	add	r24, r18
    37f8:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    37fa:	26 a9       	ldd	r18, Z+54	; 0x36
    37fc:	22 23       	and	r18, r18
    37fe:	a1 f0       	breq	.+40     	; 0x3828 <_ZN7Buttons13getButtonTypeEh+0x40>
    3800:	21 30       	cpi	r18, 0x01	; 1
    3802:	b9 f4       	brne	.+46     	; 0x3832 <_ZN7Buttons13getButtonTypeEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3804:	26 2f       	mov	r18, r22
    3806:	26 95       	lsr	r18
    3808:	26 95       	lsr	r18
    380a:	26 95       	lsr	r18
    380c:	c6 2f       	mov	r28, r22
    380e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3810:	82 0f       	add	r24, r18
    3812:	91 1d       	adc	r25, r1
    3814:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <_ZN7Buttons13getButtonTypeEh+0x38>
    381c:	95 95       	asr	r25
    381e:	87 95       	ror	r24
    3820:	ca 95       	dec	r28
    3822:	e2 f7       	brpl	.-8      	; 0x381c <_ZN7Buttons13getButtonTypeEh+0x34>
    3824:	81 70       	andi	r24, 0x01	; 1
    3826:	06 c0       	rjmp	.+12     	; 0x3834 <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3828:	86 0f       	add	r24, r22
    382a:	91 1d       	adc	r25, r1
    382c:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3830:	01 c0       	rjmp	.+2      	; 0x3834 <_ZN7Buttons13getButtonTypeEh+0x4c>
            break;

        }   return 0;
    3832:	80 e0       	ldi	r24, 0x00	; 0

    return (buttonType)configuration.readParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID);

}
    3834:	cf 91       	pop	r28
    3836:	08 95       	ret

00003838 <_ZN7Buttons18getButtonPCenabledEh>:

bool Buttons::getButtonPCenabled(uint8_t buttonID)   {
    3838:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    383a:	ea e9       	ldi	r30, 0x9A	; 154
    383c:	f1 e0       	ldi	r31, 0x01	; 1
    383e:	26 a1       	ldd	r18, Z+38	; 0x26
    3840:	37 a1       	ldd	r19, Z+39	; 0x27
    3842:	82 a1       	ldd	r24, Z+34	; 0x22
    3844:	93 a1       	ldd	r25, Z+35	; 0x23
    3846:	82 0f       	add	r24, r18
    3848:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    384a:	27 a9       	ldd	r18, Z+55	; 0x37
    384c:	22 23       	and	r18, r18
    384e:	a9 f0       	breq	.+42     	; 0x387a <_ZN7Buttons18getButtonPCenabledEh+0x42>
    3850:	21 30       	cpi	r18, 0x01	; 1
    3852:	c9 f4       	brne	.+50     	; 0x3886 <_ZN7Buttons18getButtonPCenabledEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3854:	26 2f       	mov	r18, r22
    3856:	26 95       	lsr	r18
    3858:	26 95       	lsr	r18
    385a:	26 95       	lsr	r18
    385c:	c6 2f       	mov	r28, r22
    385e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3860:	82 0f       	add	r24, r18
    3862:	91 1d       	adc	r25, r1
    3864:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <_ZN7Buttons18getButtonPCenabledEh+0x38>
    386c:	95 95       	asr	r25
    386e:	87 95       	ror	r24
    3870:	ca 95       	dec	r28
    3872:	e2 f7       	brpl	.-8      	; 0x386c <_ZN7Buttons18getButtonPCenabledEh+0x34>
    3874:	98 2f       	mov	r25, r24
    3876:	91 70       	andi	r25, 0x01	; 1
    3878:	07 c0       	rjmp	.+14     	; 0x3888 <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    387a:	86 0f       	add	r24, r22
    387c:	91 1d       	adc	r25, r1
    387e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3882:	98 2f       	mov	r25, r24
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <_ZN7Buttons18getButtonPCenabledEh+0x50>
            break;

        }   return 0;
    3886:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID);
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	91 11       	cpse	r25, r1
    388c:	01 c0       	rjmp	.+2      	; 0x3890 <_ZN7Buttons18getButtonPCenabledEh+0x58>
    388e:	80 e0       	ldi	r24, 0x00	; 0

}
    3890:	cf 91       	pop	r28
    3892:	08 95       	ret

00003894 <_ZN7Buttons9getMIDIidEh>:

uint8_t Buttons::getMIDIid(uint8_t buttonID)   {
    3894:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3896:	ea e9       	ldi	r30, 0x9A	; 154
    3898:	f1 e0       	ldi	r31, 0x01	; 1
    389a:	20 a5       	ldd	r18, Z+40	; 0x28
    389c:	31 a5       	ldd	r19, Z+41	; 0x29
    389e:	82 a1       	ldd	r24, Z+34	; 0x22
    38a0:	93 a1       	ldd	r25, Z+35	; 0x23
    38a2:	82 0f       	add	r24, r18
    38a4:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    38a6:	20 ad       	ldd	r18, Z+56	; 0x38
    38a8:	22 23       	and	r18, r18
    38aa:	a1 f0       	breq	.+40     	; 0x38d4 <_ZN7Buttons9getMIDIidEh+0x40>
    38ac:	21 30       	cpi	r18, 0x01	; 1
    38ae:	b9 f4       	brne	.+46     	; 0x38de <_ZN7Buttons9getMIDIidEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    38b0:	26 2f       	mov	r18, r22
    38b2:	26 95       	lsr	r18
    38b4:	26 95       	lsr	r18
    38b6:	26 95       	lsr	r18
    38b8:	c6 2f       	mov	r28, r22
    38ba:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    38bc:	82 0f       	add	r24, r18
    38be:	91 1d       	adc	r25, r1
    38c0:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <_ZN7Buttons9getMIDIidEh+0x38>
    38c8:	95 95       	asr	r25
    38ca:	87 95       	ror	r24
    38cc:	ca 95       	dec	r28
    38ce:	e2 f7       	brpl	.-8      	; 0x38c8 <_ZN7Buttons9getMIDIidEh+0x34>
    38d0:	81 70       	andi	r24, 0x01	; 1
    38d2:	06 c0       	rjmp	.+12     	; 0x38e0 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    38d4:	86 0f       	add	r24, r22
    38d6:	91 1d       	adc	r25, r1
    38d8:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    38dc:	01 c0       	rjmp	.+2      	; 0x38e0 <_ZN7Buttons9getMIDIidEh+0x4c>
            break;

        }   return 0;
    38de:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID);

}
    38e0:	cf 91       	pop	r28
    38e2:	08 95       	ret

000038e4 <_ZN7Buttons20processProgramChangeEhb>:

    return bitRead(buttonPressed[arrayIndex], buttonIndex);

}

void Buttons::processProgramChange(uint8_t buttonID, bool buttonState)   {
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	cf 93       	push	r28
    38ea:	8c 01       	movw	r16, r24
    38ec:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    38ee:	44 23       	and	r20, r20
    38f0:	f9 f0       	breq	.+62     	; 0x3930 <_ZN7Buttons20processProgramChangeEhb+0x4c>

        if (!getButtonPressed(buttonID))    {
    38f2:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN7Buttons16getButtonPressedEh>
    38f6:	81 11       	cpse	r24, r1
    38f8:	24 c0       	rjmp	.+72     	; 0x3942 <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, true);
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	6c 2f       	mov	r22, r28
    38fe:	c8 01       	movw	r24, r16
    3900:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>
            midi.sendProgramChange(getMIDIid(buttonID));
    3904:	6c 2f       	mov	r22, r28
    3906:	c8 01       	movw	r24, r16
    3908:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    390c:	68 2f       	mov	r22, r24
    390e:	86 e0       	ldi	r24, 0x06	; 6
    3910:	97 e0       	ldi	r25, 0x07	; 7
    3912:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <_ZN4MIDI17sendProgramChangeEh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    3916:	8b e0       	ldi	r24, 0x0B	; 11
    3918:	97 e0       	ldi	r25, 0x07	; 7
    391a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    391e:	88 23       	and	r24, r24
    3920:	81 f0       	breq	.+32     	; 0x3942 <_ZN7Buttons20processProgramChangeEhb+0x5e>
    3922:	4c 2f       	mov	r20, r28
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	8b e0       	ldi	r24, 0x0B	; 11
    3928:	97 e0       	ldi	r25, 0x07	; 7
    392a:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>
    392e:	09 c0       	rjmp	.+18     	; 0x3942 <_ZN7Buttons20processProgramChangeEhb+0x5e>

        }

    }   else {

        if (getButtonPressed(buttonID)) {
    3930:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN7Buttons16getButtonPressedEh>
    3934:	88 23       	and	r24, r24
    3936:	29 f0       	breq	.+10     	; 0x3942 <_ZN7Buttons20processProgramChangeEhb+0x5e>

            setButtonPressed(buttonID, false);
    3938:	40 e0       	ldi	r20, 0x00	; 0
    393a:	6c 2f       	mov	r22, r28
    393c:	c8 01       	movw	r24, r16
    393e:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	08 95       	ret

0000394a <_ZN7Buttons22processMomentaryButtonEhb>:

void Buttons::processMomentaryButton(uint8_t buttonID, bool buttonState)   {
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	cf 93       	push	r28
    3950:	8c 01       	movw	r16, r24
    3952:	c6 2f       	mov	r28, r22

    if (buttonState)    {
    3954:	44 23       	and	r20, r20
    3956:	09 f1       	breq	.+66     	; 0x399a <_ZN7Buttons22processMomentaryButtonEhb+0x50>

        //send note on only once
        if (!getButtonPressed(buttonID))    {
    3958:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN7Buttons16getButtonPressedEh>
    395c:	81 11       	cpse	r24, r1
    395e:	3d c0       	rjmp	.+122    	; 0x39da <_ZN7Buttons22processMomentaryButtonEhb+0x90>

            setButtonPressed(buttonID, true);
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	6c 2f       	mov	r22, r28
    3964:	c8 01       	movw	r24, r16
    3966:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>

            midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    396a:	6c 2f       	mov	r22, r28
    396c:	c8 01       	movw	r24, r16
    396e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    3972:	2f e7       	ldi	r18, 0x7F	; 127
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	68 2f       	mov	r22, r24
    3978:	86 e0       	ldi	r24, 0x06	; 6
    397a:	97 e0       	ldi	r25, 0x07	; 7
    397c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
            if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    3980:	8b e0       	ldi	r24, 0x0B	; 11
    3982:	97 e0       	ldi	r25, 0x07	; 7
    3984:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    3988:	88 23       	and	r24, r24
    398a:	39 f1       	breq	.+78     	; 0x39da <_ZN7Buttons22processMomentaryButtonEhb+0x90>
    398c:	4c 2f       	mov	r20, r28
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	8b e0       	ldi	r24, 0x0B	; 11
    3992:	97 e0       	ldi	r25, 0x07	; 7
    3994:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>
    3998:	20 c0       	rjmp	.+64     	; 0x39da <_ZN7Buttons22processMomentaryButtonEhb+0x90>

        }

    }   else {  //button is released

            if (getButtonPressed(buttonID))    {
    399a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN7Buttons16getButtonPressedEh>
    399e:	88 23       	and	r24, r24
    39a0:	e1 f0       	breq	.+56     	; 0x39da <_ZN7Buttons22processMomentaryButtonEhb+0x90>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    39a2:	6c 2f       	mov	r22, r28
    39a4:	c8 01       	movw	r24, r16
    39a6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	68 2f       	mov	r22, r24
    39b0:	86 e0       	ldi	r24, 0x06	; 6
    39b2:	97 e0       	ldi	r25, 0x07	; 7
    39b4:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    39b8:	8b e0       	ldi	r24, 0x0B	; 11
    39ba:	97 e0       	ldi	r25, 0x07	; 7
    39bc:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    39c0:	88 23       	and	r24, r24
    39c2:	31 f0       	breq	.+12     	; 0x39d0 <_ZN7Buttons22processMomentaryButtonEhb+0x86>
    39c4:	4c 2f       	mov	r20, r28
    39c6:	61 e0       	ldi	r22, 0x01	; 1
    39c8:	8b e0       	ldi	r24, 0x0B	; 11
    39ca:	97 e0       	ldi	r25, 0x07	; 7
    39cc:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>

                setButtonPressed(buttonID, false);
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	6c 2f       	mov	r22, r28
    39d4:	c8 01       	movw	r24, r16
    39d6:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>

            }

        }

}
    39da:	cf 91       	pop	r28
    39dc:	1f 91       	pop	r17
    39de:	0f 91       	pop	r16
    39e0:	08 95       	ret

000039e2 <_ZN7Buttons21processLatchingButtonEhb>:

void Buttons::processLatchingButton(uint8_t buttonID, bool buttonState)    {
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	8c 01       	movw	r16, r24
    39ec:	c6 2f       	mov	r28, r22
    39ee:	d4 2f       	mov	r29, r20

    if (buttonState != getPreviousButtonState(buttonID)) {
    39f0:	0e 94 cf 1b 	call	0x379e	; 0x379e <_ZN7Buttons22getPreviousButtonStateEh>
    39f4:	8d 17       	cp	r24, r29
    39f6:	09 f4       	brne	.+2      	; 0x39fa <_ZN7Buttons21processLatchingButtonEhb+0x18>
    39f8:	42 c0       	rjmp	.+132    	; 0x3a7e <_ZN7Buttons21processLatchingButtonEhb+0x9c>

        if (buttonState) {
    39fa:	dd 23       	and	r29, r29
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <_ZN7Buttons21processLatchingButtonEhb+0x1e>
    39fe:	3f c0       	rjmp	.+126    	; 0x3a7e <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            //button is pressed
            //if a button has been already pressed
            if (getButtonPressed(buttonID)) {
    3a00:	6c 2f       	mov	r22, r28
    3a02:	c8 01       	movw	r24, r16
    3a04:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <_ZN7Buttons16getButtonPressedEh>
    3a08:	88 23       	and	r24, r24
    3a0a:	e9 f0       	breq	.+58     	; 0x3a46 <_ZN7Buttons21processLatchingButtonEhb+0x64>

                midi.sendMIDInote(getMIDIid(buttonID), false, velocityOff);
    3a0c:	6c 2f       	mov	r22, r28
    3a0e:	c8 01       	movw	r24, r16
    3a10:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	68 2f       	mov	r22, r24
    3a1a:	86 e0       	ldi	r24, 0x06	; 6
    3a1c:	97 e0       	ldi	r25, 0x07	; 7
    3a1e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    3a22:	8b e0       	ldi	r24, 0x0B	; 11
    3a24:	97 e0       	ldi	r25, 0x07	; 7
    3a26:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    3a2a:	88 23       	and	r24, r24
    3a2c:	31 f0       	breq	.+12     	; 0x3a3a <_ZN7Buttons21processLatchingButtonEhb+0x58>
    3a2e:	4c 2f       	mov	r20, r28
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	8b e0       	ldi	r24, 0x0B	; 11
    3a34:	97 e0       	ldi	r25, 0x07	; 7
    3a36:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>

                //reset pressed state
                setButtonPressed(buttonID, false);
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	6c 2f       	mov	r22, r28
    3a3e:	c8 01       	movw	r24, r16
    3a40:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>
    3a44:	1c c0       	rjmp	.+56     	; 0x3a7e <_ZN7Buttons21processLatchingButtonEhb+0x9c>

            } else {

                //send note on
                midi.sendMIDInote(getMIDIid(buttonID), true, velocityOn);
    3a46:	6c 2f       	mov	r22, r28
    3a48:	c8 01       	movw	r24, r16
    3a4a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    3a4e:	2f e7       	ldi	r18, 0x7F	; 127
    3a50:	41 e0       	ldi	r20, 0x01	; 1
    3a52:	68 2f       	mov	r22, r24
    3a54:	86 e0       	ldi	r24, 0x06	; 6
    3a56:	97 e0       	ldi	r25, 0x07	; 7
    3a58:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <_ZN4MIDI12sendMIDInoteEhbh>
                if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_BUTTON_BLOCK, buttonID);
    3a5c:	8b e0       	ldi	r24, 0x0B	; 11
    3a5e:	97 e0       	ldi	r25, 0x07	; 7
    3a60:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    3a64:	88 23       	and	r24, r24
    3a66:	31 f0       	breq	.+12     	; 0x3a74 <_ZN7Buttons21processLatchingButtonEhb+0x92>
    3a68:	4c 2f       	mov	r20, r28
    3a6a:	61 e0       	ldi	r22, 0x01	; 1
    3a6c:	8b e0       	ldi	r24, 0x0B	; 11
    3a6e:	97 e0       	ldi	r25, 0x07	; 7
    3a70:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>

                //toggle buttonPressed flag to true
                setButtonPressed(buttonID, true);
    3a74:	41 e0       	ldi	r20, 0x01	; 1
    3a76:	6c 2f       	mov	r22, r28
    3a78:	c8 01       	movw	r24, r16
    3a7a:	0e 94 48 1b 	call	0x3690	; 0x3690 <_ZN7Buttons16setButtonPressedEhb>

        }

    }

}
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	08 95       	ret

00003a88 <_ZN7Buttons6updateEv>:

void Buttons::update()    {
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	8c 01       	movw	r16, r24

    if (!board.buttonDataAvailable()) return;
    3a92:	81 e4       	ldi	r24, 0x41	; 65
    3a94:	92 e0       	ldi	r25, 0x02	; 2
    3a96:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN5Board19buttonDataAvailableEv>
    3a9a:	88 23       	and	r24, r24
    3a9c:	a9 f1       	breq	.+106    	; 0x3b08 <_ZN7Buttons6updateEv+0x80>
    3a9e:	c0 e0       	ldi	r28, 0x00	; 0

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        uint8_t buttonState = board.getButtonState(i);
    3aa0:	6c 2f       	mov	r22, r28
    3aa2:	81 e4       	ldi	r24, 0x41	; 65
    3aa4:	92 e0       	ldi	r25, 0x02	; 2
    3aa6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN5Board14getButtonStateEh>
    3aaa:	d8 2f       	mov	r29, r24

        if (buttonDebounced(i, buttonState))  {
    3aac:	48 2f       	mov	r20, r24
    3aae:	6c 2f       	mov	r22, r28
    3ab0:	c8 01       	movw	r24, r16
    3ab2:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_ZN7Buttons15buttonDebouncedEhb>
    3ab6:	88 23       	and	r24, r24
    3ab8:	21 f1       	breq	.+72     	; 0x3b02 <_ZN7Buttons6updateEv+0x7a>

            if (getButtonPCenabled(i))  {
    3aba:	6c 2f       	mov	r22, r28
    3abc:	c8 01       	movw	r24, r16
    3abe:	0e 94 1c 1c 	call	0x3838	; 0x3838 <_ZN7Buttons18getButtonPCenabledEh>
    3ac2:	88 23       	and	r24, r24
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <_ZN7Buttons6updateEv+0x4a>

                //ignore momentary/latching modes if button sends program change
                //when in program change, button has latching mode since momentary mode makes no sense
                processProgramChange(i, buttonState);
    3ac6:	4d 2f       	mov	r20, r29
    3ac8:	6c 2f       	mov	r22, r28
    3aca:	c8 01       	movw	r24, r16
    3acc:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <_ZN7Buttons20processProgramChangeEhb>
    3ad0:	13 c0       	rjmp	.+38     	; 0x3af8 <_ZN7Buttons6updateEv+0x70>

            }   else {

                switch (getButtonType(i))   {
    3ad2:	6c 2f       	mov	r22, r28
    3ad4:	c8 01       	movw	r24, r16
    3ad6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN7Buttons13getButtonTypeEh>
    3ada:	88 23       	and	r24, r24
    3adc:	41 f0       	breq	.+16     	; 0x3aee <_ZN7Buttons6updateEv+0x66>
    3ade:	81 30       	cpi	r24, 0x01	; 1
    3ae0:	59 f4       	brne	.+22     	; 0x3af8 <_ZN7Buttons6updateEv+0x70>

                    case buttonLatching:
                    processLatchingButton(i, buttonState);
    3ae2:	4d 2f       	mov	r20, r29
    3ae4:	6c 2f       	mov	r22, r28
    3ae6:	c8 01       	movw	r24, r16
    3ae8:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <_ZN7Buttons21processLatchingButtonEhb>
                    break;
    3aec:	05 c0       	rjmp	.+10     	; 0x3af8 <_ZN7Buttons6updateEv+0x70>

                    case buttonMomentary:
                    processMomentaryButton(i, buttonState);
    3aee:	4d 2f       	mov	r20, r29
    3af0:	6c 2f       	mov	r22, r28
    3af2:	c8 01       	movw	r24, r16
    3af4:	0e 94 a5 1c 	call	0x394a	; 0x394a <_ZN7Buttons22processMomentaryButtonEhb>

                }

            }

            updateButtonState(i, buttonState);
    3af8:	4d 2f       	mov	r20, r29
    3afa:	6c 2f       	mov	r22, r28
    3afc:	c8 01       	movw	r24, r16
    3afe:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN7Buttons17updateButtonStateEhh>
    3b02:	cf 5f       	subi	r28, 0xFF	; 255

void Buttons::update()    {

    if (!board.buttonDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    3b04:	c0 34       	cpi	r28, 0x40	; 64
    3b06:	61 f6       	brne	.-104    	; 0x3aa0 <_ZN7Buttons6updateEv+0x18>

        }

    }

}
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	08 95       	ret

00003b12 <_ZN7Buttons12getParameterEhh>:

}

uint8_t Buttons::getParameter(uint8_t messageType, uint8_t parameterID) {

    switch(messageType) {
    3b12:	61 30       	cpi	r22, 0x01	; 1
    3b14:	41 f0       	breq	.+16     	; 0x3b26 <_ZN7Buttons12getParameterEhh+0x14>
    3b16:	18 f0       	brcs	.+6      	; 0x3b1e <_ZN7Buttons12getParameterEhh+0xc>
    3b18:	62 30       	cpi	r22, 0x02	; 2
    3b1a:	49 f0       	breq	.+18     	; 0x3b2e <_ZN7Buttons12getParameterEhh+0x1c>
    3b1c:	0c c0       	rjmp	.+24     	; 0x3b36 <_ZN7Buttons12getParameterEhh+0x24>

        case buttonTypeConf:
        return getButtonType(parameterID);
    3b1e:	64 2f       	mov	r22, r20
    3b20:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN7Buttons13getButtonTypeEh>
    3b24:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return getButtonPCenabled(parameterID);
    3b26:	64 2f       	mov	r22, r20
    3b28:	0e 94 1c 1c 	call	0x3838	; 0x3838 <_ZN7Buttons18getButtonPCenabledEh>
    3b2c:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return getMIDIid(parameterID);
    3b2e:	64 2f       	mov	r22, r20
    3b30:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN7Buttons9getMIDIidEh>
    3b34:	08 95       	ret
        break;

    }   return 0;
    3b36:	80 e0       	ldi	r24, 0x00	; 0
}
    3b38:	08 95       	ret

00003b3a <_ZN7Buttons13setButtonTypeEhh>:

bool Buttons::setButtonType(uint8_t buttonID, uint8_t type)  {
    3b3a:	0f 93       	push	r16
    3b3c:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonTypeSection, buttonID, type);
    3b3e:	04 2f       	mov	r16, r20
    3b40:	40 e0       	ldi	r20, 0x00	; 0
    3b42:	61 e0       	ldi	r22, 0x01	; 1
    3b44:	8a e9       	ldi	r24, 0x9A	; 154
    3b46:	91 e0       	ldi	r25, 0x01	; 1
    3b48:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <_ZN7Buttons18setButtonPCenabledEhh>:

bool Buttons::setButtonPCenabled(uint8_t buttonID, uint8_t state)  {
    3b50:	0f 93       	push	r16
    3b52:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonProgramChangeEnabledSection, buttonID, state);
    3b54:	04 2f       	mov	r16, r20
    3b56:	41 e0       	ldi	r20, 0x01	; 1
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	8a e9       	ldi	r24, 0x9A	; 154
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3b62:	0f 91       	pop	r16
    3b64:	08 95       	ret

00003b66 <_ZN7Buttons9setMIDIidEhh>:

bool Buttons::setMIDIid(uint8_t buttonID, uint8_t midiID)    {
    3b66:	0f 93       	push	r16
    3b68:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_BUTTON_BLOCK, buttonMIDIidSection, buttonID, midiID);
    3b6a:	04 2f       	mov	r16, r20
    3b6c:	42 e0       	ldi	r20, 0x02	; 2
    3b6e:	61 e0       	ldi	r22, 0x01	; 1
    3b70:	8a e9       	ldi	r24, 0x9A	; 154
    3b72:	91 e0       	ldi	r25, 0x01	; 1
    3b74:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3b78:	0f 91       	pop	r16
    3b7a:	08 95       	ret

00003b7c <_ZN7Buttons12setParameterEhhh>:

bool Buttons::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)    {
    3b7c:	34 2f       	mov	r19, r20

    switch(messageType) {
    3b7e:	61 30       	cpi	r22, 0x01	; 1
    3b80:	49 f0       	breq	.+18     	; 0x3b94 <_ZN7Buttons12setParameterEhhh+0x18>
    3b82:	18 f0       	brcs	.+6      	; 0x3b8a <_ZN7Buttons12setParameterEhhh+0xe>
    3b84:	62 30       	cpi	r22, 0x02	; 2
    3b86:	59 f0       	breq	.+22     	; 0x3b9e <_ZN7Buttons12setParameterEhhh+0x22>
    3b88:	0f c0       	rjmp	.+30     	; 0x3ba8 <_ZN7Buttons12setParameterEhhh+0x2c>

        case buttonTypeConf:
        return setButtonType(parameter, newParameter);
    3b8a:	42 2f       	mov	r20, r18
    3b8c:	63 2f       	mov	r22, r19
    3b8e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN7Buttons13setButtonTypeEhh>
    3b92:	08 95       	ret
        break;

        case buttonProgramChangeEnabledConf:
        return setButtonPCenabled(parameter, newParameter);
    3b94:	42 2f       	mov	r20, r18
    3b96:	63 2f       	mov	r22, r19
    3b98:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <_ZN7Buttons18setButtonPCenabledEhh>
    3b9c:	08 95       	ret
        break;

        case buttonMIDIidConf:
        return setMIDIid(parameter, newParameter);
    3b9e:	42 2f       	mov	r20, r18
    3ba0:	63 2f       	mov	r22, r19
    3ba2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <_ZN7Buttons9setMIDIidEhh>
    3ba6:	08 95       	ret
        break;

    }   return false;
    3ba8:	80 e0       	ldi	r24, 0x00	; 0

}
    3baa:	08 95       	ret

00003bac <_ZN8Encoders4initEv>:

    //def const

}

void Encoders::init()   {
    3bac:	cf 92       	push	r12
    3bae:	df 92       	push	r13
    3bb0:	ef 92       	push	r14
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	64 97       	sbiw	r28, 0x14	; 20
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61

    const subtype encoderEnabledSubtype       = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    3bca:	80 e2       	ldi	r24, 0x20	; 32
    3bcc:	8a 8b       	std	Y+18, r24	; 0x12
    3bce:	1b 8a       	std	Y+19, r1	; 0x13
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	9c 8b       	std	Y+20, r25	; 0x14
    const subtype encoderInvertedSubtype      = { MAX_NUMBER_OF_ENCODERS, 0, 1 };
    3bd4:	8f 87       	std	Y+15, r24	; 0x0f
    3bd6:	18 8a       	std	Y+16, r1	; 0x10
    3bd8:	99 8b       	std	Y+17, r25	; 0x11
    const subtype encoderEncodingModeSubtype  = { MAX_NUMBER_OF_ENCODERS, 0, ENCODING_MODES-1 };
    3bda:	8c 87       	std	Y+12, r24	; 0x0c
    3bdc:	1d 86       	std	Y+13, r1	; 0x0d
    3bde:	9e 87       	std	Y+14, r25	; 0x0e
    const subtype encoderMIDIidSubtype        = { MAX_NUMBER_OF_ENCODERS, 0, 127 };
    3be0:	89 87       	std	Y+9, r24	; 0x09
    3be2:	1a 86       	std	Y+10, r1	; 0x0a
    3be4:	8f e7       	ldi	r24, 0x7F	; 127
    3be6:	8b 87       	std	Y+11, r24	; 0x0b
        &encoderEnabledSubtype,
        &encoderInvertedSubtype,
        &encoderEncodingModeSubtype,
        &encoderMIDIidSubtype

    };
    3be8:	ce 01       	movw	r24, r28
    3bea:	42 96       	adiw	r24, 0x12	; 18
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	03 97       	sbiw	r24, 0x03	; 3
    3bf2:	9c 83       	std	Y+4, r25	; 0x04
    3bf4:	8b 83       	std	Y+3, r24	; 0x03
    3bf6:	03 97       	sbiw	r24, 0x03	; 3
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	03 97       	sbiw	r24, 0x03	; 3
    3bfe:	98 87       	std	Y+8, r25	; 0x08
    3c00:	8f 83       	std	Y+7, r24	; 0x07

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);
    3c02:	44 e0       	ldi	r20, 0x04	; 4
    3c04:	62 e0       	ldi	r22, 0x02	; 2
    3c06:	8b e0       	ldi	r24, 0x0B	; 11
    3c08:	97 e0       	ldi	r25, 0x07	; 7
    3c0a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN5SysEx14addMessageTypeEhh>
    3c0e:	ce 01       	movw	r24, r28
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	6c 01       	movw	r12, r24
    3c14:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);
    3c16:	d6 01       	movw	r26, r12
    3c18:	ed 91       	ld	r30, X+
    3c1a:	fd 91       	ld	r31, X+
    3c1c:	6d 01       	movw	r12, r26
    3c1e:	e2 80       	ldd	r14, Z+2	; 0x02
    3c20:	01 81       	ldd	r16, Z+1	; 0x01
    3c22:	20 81       	ld	r18, Z
    3c24:	41 2f       	mov	r20, r17
    3c26:	62 e0       	ldi	r22, 0x02	; 2
    3c28:	8b e0       	ldi	r24, 0x0B	; 11
    3c2a:	97 e0       	ldi	r25, 0x07	; 7
    3c2c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    3c30:	1f 5f       	subi	r17, 0xFF	; 255
    };

    //define message for sysex configuration
    sysEx.addMessageType(CONF_ENCODER_BLOCK, ENCODER_SUBTYPES);

    for (int i=0; i<ENCODER_SUBTYPES; i++)   {
    3c32:	14 30       	cpi	r17, 0x04	; 4
    3c34:	81 f7       	brne	.-32     	; 0x3c16 <_ZN8Encoders4initEv+0x6a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_ENCODER_BLOCK, i, encodersSubtypeArray[i]->parameters, encodersSubtypeArray[i]->lowValue, encodersSubtypeArray[i]->highValue);

    }

}
    3c36:	64 96       	adiw	r28, 0x14	; 20
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ef 90       	pop	r14
    3c4c:	df 90       	pop	r13
    3c4e:	cf 90       	pop	r12
    3c50:	08 95       	ret

00003c52 <_ZN8Encoders17getEncoderEnabledEh>:

    }

}

bool Encoders::getEncoderEnabled(uint8_t encoderID) {
    3c52:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3c54:	20 91 df 01 	lds	r18, 0x01DF
    3c58:	30 91 e0 01 	lds	r19, 0x01E0
    3c5c:	80 91 dd 01 	lds	r24, 0x01DD
    3c60:	90 91 de 01 	lds	r25, 0x01DE
    3c64:	82 0f       	add	r24, r18
    3c66:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3c68:	20 91 f1 01 	lds	r18, 0x01F1
    3c6c:	22 23       	and	r18, r18
    3c6e:	a9 f0       	breq	.+42     	; 0x3c9a <_ZN8Encoders17getEncoderEnabledEh+0x48>
    3c70:	21 30       	cpi	r18, 0x01	; 1
    3c72:	c9 f4       	brne	.+50     	; 0x3ca6 <_ZN8Encoders17getEncoderEnabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3c74:	26 2f       	mov	r18, r22
    3c76:	26 95       	lsr	r18
    3c78:	26 95       	lsr	r18
    3c7a:	26 95       	lsr	r18
    3c7c:	c6 2f       	mov	r28, r22
    3c7e:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3c80:	82 0f       	add	r24, r18
    3c82:	91 1d       	adc	r25, r1
    3c84:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <_ZN8Encoders17getEncoderEnabledEh+0x3e>
    3c8c:	95 95       	asr	r25
    3c8e:	87 95       	ror	r24
    3c90:	ca 95       	dec	r28
    3c92:	e2 f7       	brpl	.-8      	; 0x3c8c <_ZN8Encoders17getEncoderEnabledEh+0x3a>
    3c94:	98 2f       	mov	r25, r24
    3c96:	91 70       	andi	r25, 0x01	; 1
    3c98:	07 c0       	rjmp	.+14     	; 0x3ca8 <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3c9a:	86 0f       	add	r24, r22
    3c9c:	91 1d       	adc	r25, r1
    3c9e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	01 c0       	rjmp	.+2      	; 0x3ca8 <_ZN8Encoders17getEncoderEnabledEh+0x56>
            break;

        }   return 0;
    3ca6:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	91 11       	cpse	r25, r1
    3cac:	01 c0       	rjmp	.+2      	; 0x3cb0 <_ZN8Encoders17getEncoderEnabledEh+0x5e>
    3cae:	80 e0       	ldi	r24, 0x00	; 0

}
    3cb0:	cf 91       	pop	r28
    3cb2:	08 95       	ret

00003cb4 <_ZN8Encoders21getEncoderInvertStateEh>:

bool Encoders::getEncoderInvertState(uint8_t encoderID) {
    3cb4:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3cb6:	20 91 e1 01 	lds	r18, 0x01E1
    3cba:	30 91 e2 01 	lds	r19, 0x01E2
    3cbe:	80 91 dd 01 	lds	r24, 0x01DD
    3cc2:	90 91 de 01 	lds	r25, 0x01DE
    3cc6:	82 0f       	add	r24, r18
    3cc8:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3cca:	20 91 f2 01 	lds	r18, 0x01F2
    3cce:	22 23       	and	r18, r18
    3cd0:	a9 f0       	breq	.+42     	; 0x3cfc <_ZN8Encoders21getEncoderInvertStateEh+0x48>
    3cd2:	21 30       	cpi	r18, 0x01	; 1
    3cd4:	c9 f4       	brne	.+50     	; 0x3d08 <_ZN8Encoders21getEncoderInvertStateEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3cd6:	26 2f       	mov	r18, r22
    3cd8:	26 95       	lsr	r18
    3cda:	26 95       	lsr	r18
    3cdc:	26 95       	lsr	r18
    3cde:	c6 2f       	mov	r28, r22
    3ce0:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3ce2:	82 0f       	add	r24, r18
    3ce4:	91 1d       	adc	r25, r1
    3ce6:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <_ZN8Encoders21getEncoderInvertStateEh+0x3e>
    3cee:	95 95       	asr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	ca 95       	dec	r28
    3cf4:	e2 f7       	brpl	.-8      	; 0x3cee <_ZN8Encoders21getEncoderInvertStateEh+0x3a>
    3cf6:	98 2f       	mov	r25, r24
    3cf8:	91 70       	andi	r25, 0x01	; 1
    3cfa:	07 c0       	rjmp	.+14     	; 0x3d0a <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3cfc:	86 0f       	add	r24, r22
    3cfe:	91 1d       	adc	r25, r1
    3d00:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3d04:	98 2f       	mov	r25, r24
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <_ZN8Encoders21getEncoderInvertStateEh+0x56>
            break;

        }   return 0;
    3d08:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID);
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	91 11       	cpse	r25, r1
    3d0e:	01 c0       	rjmp	.+2      	; 0x3d12 <_ZN8Encoders21getEncoderInvertStateEh+0x5e>
    3d10:	80 e0       	ldi	r24, 0x00	; 0

}
    3d12:	cf 91       	pop	r28
    3d14:	08 95       	ret

00003d16 <_ZN8Encoders15getEncodingModeEh>:

encoderType Encoders::getEncodingMode(uint8_t encoderID)  {
    3d16:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3d18:	20 91 e3 01 	lds	r18, 0x01E3
    3d1c:	30 91 e4 01 	lds	r19, 0x01E4
    3d20:	80 91 dd 01 	lds	r24, 0x01DD
    3d24:	90 91 de 01 	lds	r25, 0x01DE
    3d28:	82 0f       	add	r24, r18
    3d2a:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3d2c:	20 91 f3 01 	lds	r18, 0x01F3
    3d30:	22 23       	and	r18, r18
    3d32:	a1 f0       	breq	.+40     	; 0x3d5c <_ZN8Encoders15getEncodingModeEh+0x46>
    3d34:	21 30       	cpi	r18, 0x01	; 1
    3d36:	b9 f4       	brne	.+46     	; 0x3d66 <_ZN8Encoders15getEncodingModeEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3d38:	26 2f       	mov	r18, r22
    3d3a:	26 95       	lsr	r18
    3d3c:	26 95       	lsr	r18
    3d3e:	26 95       	lsr	r18
    3d40:	c6 2f       	mov	r28, r22
    3d42:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3d44:	82 0f       	add	r24, r18
    3d46:	91 1d       	adc	r25, r1
    3d48:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <_ZN8Encoders15getEncodingModeEh+0x3e>
    3d50:	95 95       	asr	r25
    3d52:	87 95       	ror	r24
    3d54:	ca 95       	dec	r28
    3d56:	e2 f7       	brpl	.-8      	; 0x3d50 <_ZN8Encoders15getEncodingModeEh+0x3a>
    3d58:	81 70       	andi	r24, 0x01	; 1
    3d5a:	06 c0       	rjmp	.+12     	; 0x3d68 <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3d5c:	86 0f       	add	r24, r22
    3d5e:	91 1d       	adc	r25, r1
    3d60:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <_ZN8Encoders15getEncodingModeEh+0x52>
            break;

        }   return 0;
    3d66:	80 e0       	ldi	r24, 0x00	; 0

    return (encoderType)configuration.readParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID);

}
    3d68:	cf 91       	pop	r28
    3d6a:	08 95       	ret

00003d6c <_ZN8Encoders9getMIDIidEh>:

uint8_t Encoders::getMIDIid(uint8_t encoderID)  {
    3d6c:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3d6e:	20 91 e5 01 	lds	r18, 0x01E5
    3d72:	30 91 e6 01 	lds	r19, 0x01E6
    3d76:	80 91 dd 01 	lds	r24, 0x01DD
    3d7a:	90 91 de 01 	lds	r25, 0x01DE
    3d7e:	82 0f       	add	r24, r18
    3d80:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3d82:	20 91 f4 01 	lds	r18, 0x01F4
    3d86:	22 23       	and	r18, r18
    3d88:	a1 f0       	breq	.+40     	; 0x3db2 <_ZN8Encoders9getMIDIidEh+0x46>
    3d8a:	21 30       	cpi	r18, 0x01	; 1
    3d8c:	b9 f4       	brne	.+46     	; 0x3dbc <_ZN8Encoders9getMIDIidEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3d8e:	26 2f       	mov	r18, r22
    3d90:	26 95       	lsr	r18
    3d92:	26 95       	lsr	r18
    3d94:	26 95       	lsr	r18
    3d96:	c6 2f       	mov	r28, r22
    3d98:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    3d9a:	82 0f       	add	r24, r18
    3d9c:	91 1d       	adc	r25, r1
    3d9e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <_ZN8Encoders9getMIDIidEh+0x3e>
    3da6:	95 95       	asr	r25
    3da8:	87 95       	ror	r24
    3daa:	ca 95       	dec	r28
    3dac:	e2 f7       	brpl	.-8      	; 0x3da6 <_ZN8Encoders9getMIDIidEh+0x3a>
    3dae:	81 70       	andi	r24, 0x01	; 1
    3db0:	06 c0       	rjmp	.+12     	; 0x3dbe <_ZN8Encoders9getMIDIidEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    3db2:	86 0f       	add	r24, r22
    3db4:	91 1d       	adc	r25, r1
    3db6:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <_ZN8Encoders9getMIDIidEh+0x52>
            break;

        }   return 0;
    3dbc:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID);

}
    3dbe:	cf 91       	pop	r28
    3dc0:	08 95       	ret

00003dc2 <_ZN8Encoders6updateEv>:

    }

}

void Encoders::update()   {
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	8c 01       	movw	r16, r24

    if (!board.encoderDataAvailable()) return;
    3dd2:	81 e4       	ldi	r24, 0x41	; 65
    3dd4:	92 e0       	ldi	r25, 0x02	; 2
    3dd6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN5Board20encoderDataAvailableEv>
    3dda:	88 23       	and	r24, r24
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <_ZN8Encoders6updateEv+0x1e>
    3dde:	52 c0       	rjmp	.+164    	; 0x3e84 <_ZN8Encoders6updateEv+0xc2>
    3de0:	c0 e0       	ldi	r28, 0x00	; 0
        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    3de2:	0f 2e       	mov	r0, r31
    3de4:	ff e7       	ldi	r31, 0x7F	; 127
    3de6:	df 2e       	mov	r13, r31
    3de8:	f0 2d       	mov	r31, r0
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    3dea:	ff 24       	eor	r15, r15
    3dec:	f3 94       	inc	r15

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    3dee:	e1 2c       	mov	r14, r1

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {

        if (!getEncoderEnabled(i)) continue;
    3df0:	6c 2f       	mov	r22, r28
    3df2:	c8 01       	movw	r24, r16
    3df4:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <_ZN8Encoders17getEncoderEnabledEh>
    3df8:	88 23       	and	r24, r24
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <_ZN8Encoders6updateEv+0x3c>
    3dfc:	3f c0       	rjmp	.+126    	; 0x3e7c <_ZN8Encoders6updateEv+0xba>

        encoderPosition encoderState = board.getEncoderState(i);
    3dfe:	6c 2f       	mov	r22, r28
    3e00:	81 e4       	ldi	r24, 0x41	; 65
    3e02:	92 e0       	ldi	r25, 0x02	; 2
    3e04:	0e 94 4d 0c 	call	0x189a	; 0x189a <_ZN5Board15getEncoderStateEh>
    3e08:	d8 2f       	mov	r29, r24
        if (encoderState == encStopped) continue;
    3e0a:	88 23       	and	r24, r24
    3e0c:	b9 f1       	breq	.+110    	; 0x3e7c <_ZN8Encoders6updateEv+0xba>

        if (getEncoderInvertState(i))   {
    3e0e:	6c 2f       	mov	r22, r28
    3e10:	c8 01       	movw	r24, r16
    3e12:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN8Encoders21getEncoderInvertStateEh>
    3e16:	88 23       	and	r24, r24
    3e18:	29 f0       	breq	.+10     	; 0x3e24 <_ZN8Encoders6updateEv+0x62>

            if (encoderState == encMoveLeft)
    3e1a:	d1 30       	cpi	r29, 0x01	; 1
    3e1c:	11 f0       	breq	.+4      	; 0x3e22 <_ZN8Encoders6updateEv+0x60>
                encoderState = encMoveRight;

             else encoderState = encMoveLeft;
    3e1e:	df 2d       	mov	r29, r15
    3e20:	01 c0       	rjmp	.+2      	; 0x3e24 <_ZN8Encoders6updateEv+0x62>
        if (encoderState == encStopped) continue;

        if (getEncoderInvertState(i))   {

            if (encoderState == encMoveLeft)
                encoderState = encMoveRight;
    3e22:	d2 e0       	ldi	r29, 0x02	; 2

        }

        uint8_t encoderValue = 0;

        switch(getEncodingMode(i)) {
    3e24:	6c 2f       	mov	r22, r28
    3e26:	c8 01       	movw	r24, r16
    3e28:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <_ZN8Encoders15getEncodingModeEh>
    3e2c:	88 23       	and	r24, r24
    3e2e:	19 f0       	breq	.+6      	; 0x3e36 <_ZN8Encoders6updateEv+0x74>
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	29 f0       	breq	.+10     	; 0x3e3e <_ZN8Encoders6updateEv+0x7c>
    3e34:	08 c0       	rjmp	.+16     	; 0x3e46 <_ZN8Encoders6updateEv+0x84>

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    3e36:	d1 30       	cpi	r29, 0x01	; 1
    3e38:	41 f0       	breq	.+16     	; 0x3e4a <_ZN8Encoders6updateEv+0x88>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
    3e3a:	df 2d       	mov	r29, r15
    3e3c:	09 c0       	rjmp	.+18     	; 0x3e50 <_ZN8Encoders6updateEv+0x8e>
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    3e3e:	d1 30       	cpi	r29, 0x01	; 1
    3e40:	31 f0       	breq	.+12     	; 0x3e4e <_ZN8Encoders6updateEv+0x8c>
            else encoderValue = ENCODER_VALUE_RIGHT_3FH41H;
    3e42:	d1 e4       	ldi	r29, 0x41	; 65
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <_ZN8Encoders6updateEv+0x8e>

             else encoderState = encMoveLeft;

        }

        uint8_t encoderValue = 0;
    3e46:	de 2d       	mov	r29, r14
    3e48:	03 c0       	rjmp	.+6      	; 0x3e50 <_ZN8Encoders6updateEv+0x8e>

        switch(getEncodingMode(i)) {

            case enc7Fh01h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_7FH01H;
    3e4a:	dd 2d       	mov	r29, r13
    3e4c:	01 c0       	rjmp	.+2      	; 0x3e50 <_ZN8Encoders6updateEv+0x8e>
            else encoderValue = ENCODER_VALUE_RIGHT_7FH01H;
            break;

            case enc3Fh41h:
            if (encoderState == encMoveLeft) encoderValue = ENCODER_VALUE_LEFT_3FH41H;
    3e4e:	df e3       	ldi	r29, 0x3F	; 63
            default:
            break;

        }

        midi.sendControlChange(getMIDIid(i), encoderValue);
    3e50:	6c 2f       	mov	r22, r28
    3e52:	c8 01       	movw	r24, r16
    3e54:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN8Encoders9getMIDIidEh>
    3e58:	4d 2f       	mov	r20, r29
    3e5a:	68 2f       	mov	r22, r24
    3e5c:	86 e0       	ldi	r24, 0x06	; 6
    3e5e:	97 e0       	ldi	r25, 0x07	; 7
    3e60:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_ZN4MIDI17sendControlChangeEhh>
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);
    3e64:	8b e0       	ldi	r24, 0x0B	; 11
    3e66:	97 e0       	ldi	r25, 0x07	; 7
    3e68:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <_ZN5SysEx20configurationEnabledEv>
    3e6c:	88 23       	and	r24, r24
    3e6e:	31 f0       	breq	.+12     	; 0x3e7c <_ZN8Encoders6updateEv+0xba>
    3e70:	4c 2f       	mov	r20, r28
    3e72:	62 e0       	ldi	r22, 0x02	; 2
    3e74:	8b e0       	ldi	r24, 0x0B	; 11
    3e76:	97 e0       	ldi	r25, 0x07	; 7
    3e78:	0e 94 8f 29 	call	0x531e	; 0x531e <_ZN5SysEx15sendComponentIDEhh>
    3e7c:	cf 5f       	subi	r28, 0xFF	; 255

void Encoders::update()   {

    if (!board.encoderDataAvailable()) return;

    for (int i=0; i<MAX_NUMBER_OF_ENCODERS; i++)    {
    3e7e:	c0 32       	cpi	r28, 0x20	; 32
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <_ZN8Encoders6updateEv+0xc2>
    3e82:	b6 cf       	rjmp	.-148    	; 0x3df0 <_ZN8Encoders6updateEv+0x2e>
        midi.sendControlChange(getMIDIid(i), encoderValue);
        if (sysEx.configurationEnabled()) sysEx.sendComponentID(CONF_ENCODER_BLOCK, i);

    }

}
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	1f 91       	pop	r17
    3e8a:	0f 91       	pop	r16
    3e8c:	ff 90       	pop	r15
    3e8e:	ef 90       	pop	r14
    3e90:	df 90       	pop	r13
    3e92:	08 95       	ret

00003e94 <_ZN8Encoders12getParameterEhh>:

}

uint8_t Encoders::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    3e94:	61 30       	cpi	r22, 0x01	; 1
    3e96:	51 f0       	breq	.+20     	; 0x3eac <_ZN8Encoders12getParameterEhh+0x18>
    3e98:	28 f0       	brcs	.+10     	; 0x3ea4 <_ZN8Encoders12getParameterEhh+0x10>
    3e9a:	62 30       	cpi	r22, 0x02	; 2
    3e9c:	59 f0       	breq	.+22     	; 0x3eb4 <_ZN8Encoders12getParameterEhh+0x20>
    3e9e:	63 30       	cpi	r22, 0x03	; 3
    3ea0:	69 f0       	breq	.+26     	; 0x3ebc <_ZN8Encoders12getParameterEhh+0x28>
    3ea2:	10 c0       	rjmp	.+32     	; 0x3ec4 <_ZN8Encoders12getParameterEhh+0x30>

        case encoderEnabledConf:
        return getEncoderEnabled(parameterID);
    3ea4:	64 2f       	mov	r22, r20
    3ea6:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <_ZN8Encoders17getEncoderEnabledEh>
    3eaa:	08 95       	ret
        break;

        case encoderInvertedConf:
        return getEncoderInvertState(parameterID);
    3eac:	64 2f       	mov	r22, r20
    3eae:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN8Encoders21getEncoderInvertStateEh>
    3eb2:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return getEncodingMode(parameterID);
    3eb4:	64 2f       	mov	r22, r20
    3eb6:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <_ZN8Encoders15getEncodingModeEh>
    3eba:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return getMIDIid(parameterID);
    3ebc:	64 2f       	mov	r22, r20
    3ebe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN8Encoders9getMIDIidEh>
    3ec2:	08 95       	ret
        break;

    }   return 0;
    3ec4:	80 e0       	ldi	r24, 0x00	; 0

}
    3ec6:	08 95       	ret

00003ec8 <_ZN8Encoders17setEncoderEnabledEhh>:

bool Encoders::setEncoderEnabled(uint8_t encoderID, uint8_t state)    {
    3ec8:	0f 93       	push	r16
    3eca:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEnabledSection, encoderID, state);
    3ecc:	04 2f       	mov	r16, r20
    3ece:	40 e0       	ldi	r20, 0x00	; 0
    3ed0:	62 e0       	ldi	r22, 0x02	; 2
    3ed2:	8a e9       	ldi	r24, 0x9A	; 154
    3ed4:	91 e0       	ldi	r25, 0x01	; 1
    3ed6:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3eda:	0f 91       	pop	r16
    3edc:	08 95       	ret

00003ede <_ZN8Encoders21setEncoderInvertStateEhh>:

bool Encoders::setEncoderInvertState(uint8_t encoderID, uint8_t state)    {
    3ede:	0f 93       	push	r16
    3ee0:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderInvertedSection, encoderID, state);
    3ee2:	04 2f       	mov	r16, r20
    3ee4:	41 e0       	ldi	r20, 0x01	; 1
    3ee6:	62 e0       	ldi	r22, 0x02	; 2
    3ee8:	8a e9       	ldi	r24, 0x9A	; 154
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3ef0:	0f 91       	pop	r16
    3ef2:	08 95       	ret

00003ef4 <_ZN8Encoders15setEncodingModeEhh>:

bool Encoders::setEncodingMode(uint8_t encoderID, uint8_t type)  {
    3ef4:	0f 93       	push	r16
    3ef6:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderEncodingModeSection, encoderID, type);
    3ef8:	04 2f       	mov	r16, r20
    3efa:	42 e0       	ldi	r20, 0x02	; 2
    3efc:	62 e0       	ldi	r22, 0x02	; 2
    3efe:	8a e9       	ldi	r24, 0x9A	; 154
    3f00:	91 e0       	ldi	r25, 0x01	; 1
    3f02:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3f06:	0f 91       	pop	r16
    3f08:	08 95       	ret

00003f0a <_ZN8Encoders9setMIDIidEhh>:

bool Encoders::setMIDIid(uint8_t encoderID, uint8_t midiID)  {
    3f0a:	0f 93       	push	r16
    3f0c:	26 2f       	mov	r18, r22

   return configuration.writeParameter(CONF_ENCODER_BLOCK, encoderMIDIidSection, encoderID, midiID);
    3f0e:	04 2f       	mov	r16, r20
    3f10:	43 e0       	ldi	r20, 0x03	; 3
    3f12:	62 e0       	ldi	r22, 0x02	; 2
    3f14:	8a e9       	ldi	r24, 0x9A	; 154
    3f16:	91 e0       	ldi	r25, 0x01	; 1
    3f18:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    3f1c:	0f 91       	pop	r16
    3f1e:	08 95       	ret

00003f20 <_ZN8Encoders12setParameterEhhh>:

bool Encoders::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    3f20:	34 2f       	mov	r19, r20

    switch(messageType) {
    3f22:	61 30       	cpi	r22, 0x01	; 1
    3f24:	59 f0       	breq	.+22     	; 0x3f3c <_ZN8Encoders12setParameterEhhh+0x1c>
    3f26:	28 f0       	brcs	.+10     	; 0x3f32 <_ZN8Encoders12setParameterEhhh+0x12>
    3f28:	62 30       	cpi	r22, 0x02	; 2
    3f2a:	69 f0       	breq	.+26     	; 0x3f46 <_ZN8Encoders12setParameterEhhh+0x26>
    3f2c:	63 30       	cpi	r22, 0x03	; 3
    3f2e:	81 f0       	breq	.+32     	; 0x3f50 <_ZN8Encoders12setParameterEhhh+0x30>
    3f30:	14 c0       	rjmp	.+40     	; 0x3f5a <_ZN8Encoders12setParameterEhhh+0x3a>

        case encoderEnabledConf:
        return setEncoderEnabled(parameter, newParameter);
    3f32:	42 2f       	mov	r20, r18
    3f34:	63 2f       	mov	r22, r19
    3f36:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN8Encoders17setEncoderEnabledEhh>
    3f3a:	08 95       	ret
        break;

        case encoderInvertedConf:
        return setEncoderInvertState(parameter, newParameter);
    3f3c:	42 2f       	mov	r20, r18
    3f3e:	63 2f       	mov	r22, r19
    3f40:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <_ZN8Encoders21setEncoderInvertStateEhh>
    3f44:	08 95       	ret
        break;

        case encoderEncodingModeConf:
        return setEncodingMode(parameter, newParameter);
    3f46:	42 2f       	mov	r20, r18
    3f48:	63 2f       	mov	r22, r19
    3f4a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <_ZN8Encoders15setEncodingModeEhh>
    3f4e:	08 95       	ret
        break;

        case encoderMIDIidConf:
        return setMIDIid(parameter, newParameter);
    3f50:	42 2f       	mov	r20, r18
    3f52:	63 2f       	mov	r22, r19
    3f54:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN8Encoders9setMIDIidEhh>
    3f58:	08 95       	ret
        break;

    }   return 0;
    3f5a:	80 e0       	ldi	r24, 0x00	; 0

}
    3f5c:	08 95       	ret

00003f5e <_ZN4LEDs14velocity2colorEbh>:
    96-111 yellow
    112-127 green

    */

    switch(blinkEnabled) {
    3f5e:	61 30       	cpi	r22, 0x01	; 1
    3f60:	21 f0       	breq	.+8      	; 0x3f6a <_ZN4LEDs14velocity2colorEbh+0xc>

        case false:
        return (ledColor)(receivedVelocity/16);
    3f62:	84 2f       	mov	r24, r20
    3f64:	82 95       	swap	r24
    3f66:	8f 70       	andi	r24, 0x0F	; 15
    3f68:	08 95       	ret
        break;

        case true:
        if (receivedVelocity > 63) receivedVelocity -= 64;
    3f6a:	40 34       	cpi	r20, 0x40	; 64
    3f6c:	08 f0       	brcs	.+2      	; 0x3f70 <_ZN4LEDs14velocity2colorEbh+0x12>
    3f6e:	40 54       	subi	r20, 0x40	; 64
        return (ledColor)(receivedVelocity/8);
    3f70:	84 2f       	mov	r24, r20
    3f72:	86 95       	lsr	r24
    3f74:	86 95       	lsr	r24
    3f76:	86 95       	lsr	r24
        break;

    }

}
    3f78:	08 95       	ret

00003f7a <_ZN4LEDs9allLEDsOnEv>:

    }

}

void LEDs::allLEDsOn()  {
    3f7a:	cf 93       	push	r28
    3f7c:	c0 e0       	ldi	r28, 0x00	; 0

    //turn on all LEDs
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    board.setLEDstate(i, colorOnDefault, false);
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	48 e0       	ldi	r20, 0x08	; 8
    3f82:	6c 2f       	mov	r22, r28
    3f84:	81 e4       	ldi	r24, 0x41	; 65
    3f86:	92 e0       	ldi	r25, 0x02	; 2
    3f88:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
    3f8c:	cf 5f       	subi	r28, 0xFF	; 255
    3f8e:	c0 33       	cpi	r28, 0x30	; 48
    3f90:	b1 f7       	brne	.-20     	; 0x3f7e <_ZN4LEDs9allLEDsOnEv+0x4>

}
    3f92:	cf 91       	pop	r28
    3f94:	08 95       	ret

00003f96 <_ZN4LEDs10allLEDsOffEv>:

void LEDs::allLEDsOff() {
    3f96:	cf 93       	push	r28
    3f98:	c0 e0       	ldi	r28, 0x00	; 0

    //turn off all LEDs
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    board.setLEDstate(i, colorOff, false);
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	6c 2f       	mov	r22, r28
    3fa0:	81 e4       	ldi	r24, 0x41	; 65
    3fa2:	92 e0       	ldi	r25, 0x02	; 2
    3fa4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
    3fa8:	cf 5f       	subi	r28, 0xFF	; 255
    3faa:	c0 33       	cpi	r28, 0x30	; 48
    3fac:	b1 f7       	brne	.-20     	; 0x3f9a <_ZN4LEDs10allLEDsOffEv+0x4>

}
    3fae:	cf 91       	pop	r28
    3fb0:	08 95       	ret

00003fb2 <_ZN4LEDs12checkLEDsOffEv>:
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (board.getLEDstate(i))   return false;
    return true;

}

bool LEDs::checkLEDsOff()   {
    3fb2:	cf 93       	push	r28
    3fb4:	c0 e0       	ldi	r28, 0x00	; 0

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    3fb6:	6c 2f       	mov	r22, r28
    3fb8:	81 e4       	ldi	r24, 0x41	; 65
    3fba:	92 e0       	ldi	r25, 0x02	; 2
    3fbc:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    3fc0:	88 23       	and	r24, r24
    3fc2:	29 f0       	breq	.+10     	; 0x3fce <_ZN4LEDs12checkLEDsOffEv+0x1c>
    3fc4:	cf 5f       	subi	r28, 0xFF	; 255
    3fc6:	c0 33       	cpi	r28, 0x30	; 48
    3fc8:	b1 f7       	brne	.-20     	; 0x3fb6 <_ZN4LEDs12checkLEDsOffEv+0x4>
    return true;
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	01 c0       	rjmp	.+2      	; 0x3fd0 <_ZN4LEDs12checkLEDsOffEv+0x1e>
}

bool LEDs::checkLEDsOff()   {

    //return true if all LEDs are off
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    if (!board.getLEDstate(i))   return false;
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    return true;

}
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

00003fd4 <_ZN4LEDs17getLEDHwParameterEh>:

uint8_t LEDs::getLEDHwParameter(uint8_t parameter)  {
    3fd4:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    3fd6:	20 91 21 02 	lds	r18, 0x0221
    3fda:	30 91 22 02 	lds	r19, 0x0222
    3fde:	80 91 1f 02 	lds	r24, 0x021F
    3fe2:	90 91 20 02 	lds	r25, 0x0220
    3fe6:	82 0f       	add	r24, r18
    3fe8:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    3fea:	20 91 33 02 	lds	r18, 0x0233
    3fee:	22 23       	and	r18, r18
    3ff0:	a1 f0       	breq	.+40     	; 0x401a <_ZN4LEDs17getLEDHwParameterEh+0x46>
    3ff2:	21 30       	cpi	r18, 0x01	; 1
    3ff4:	b9 f4       	brne	.+46     	; 0x4024 <_ZN4LEDs17getLEDHwParameterEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    3ff6:	26 2f       	mov	r18, r22
    3ff8:	26 95       	lsr	r18
    3ffa:	26 95       	lsr	r18
    3ffc:	26 95       	lsr	r18
    3ffe:	c6 2f       	mov	r28, r22
    4000:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4002:	82 0f       	add	r24, r18
    4004:	91 1d       	adc	r25, r1
    4006:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <_ZN4LEDs17getLEDHwParameterEh+0x3e>
    400e:	95 95       	asr	r25
    4010:	87 95       	ror	r24
    4012:	ca 95       	dec	r28
    4014:	e2 f7       	brpl	.-8      	; 0x400e <_ZN4LEDs17getLEDHwParameterEh+0x3a>
    4016:	81 70       	andi	r24, 0x01	; 1
    4018:	06 c0       	rjmp	.+12     	; 0x4026 <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    401a:	86 0f       	add	r24, r22
    401c:	91 1d       	adc	r25, r1
    401e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4022:	01 c0       	rjmp	.+2      	; 0x4026 <_ZN4LEDs17getLEDHwParameterEh+0x52>
            break;

        }   return 0;
    4024:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter);

}
    4026:	cf 91       	pop	r28
    4028:	08 95       	ret

0000402a <_ZN4LEDs20getLEDActivationNoteEh>:

uint8_t LEDs::getLEDActivationNote(uint8_t ledNumber)   {
    402a:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    402c:	20 91 23 02 	lds	r18, 0x0223
    4030:	30 91 24 02 	lds	r19, 0x0224
    4034:	80 91 1f 02 	lds	r24, 0x021F
    4038:	90 91 20 02 	lds	r25, 0x0220
    403c:	82 0f       	add	r24, r18
    403e:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4040:	20 91 34 02 	lds	r18, 0x0234
    4044:	22 23       	and	r18, r18
    4046:	a1 f0       	breq	.+40     	; 0x4070 <_ZN4LEDs20getLEDActivationNoteEh+0x46>
    4048:	21 30       	cpi	r18, 0x01	; 1
    404a:	b9 f4       	brne	.+46     	; 0x407a <_ZN4LEDs20getLEDActivationNoteEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    404c:	26 2f       	mov	r18, r22
    404e:	26 95       	lsr	r18
    4050:	26 95       	lsr	r18
    4052:	26 95       	lsr	r18
    4054:	c6 2f       	mov	r28, r22
    4056:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4058:	82 0f       	add	r24, r18
    405a:	91 1d       	adc	r25, r1
    405c:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	02 c0       	rjmp	.+4      	; 0x4068 <_ZN4LEDs20getLEDActivationNoteEh+0x3e>
    4064:	95 95       	asr	r25
    4066:	87 95       	ror	r24
    4068:	ca 95       	dec	r28
    406a:	e2 f7       	brpl	.-8      	; 0x4064 <_ZN4LEDs20getLEDActivationNoteEh+0x3a>
    406c:	81 70       	andi	r24, 0x01	; 1
    406e:	06 c0       	rjmp	.+12     	; 0x407c <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4070:	86 0f       	add	r24, r22
    4072:	91 1d       	adc	r25, r1
    4074:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4078:	01 c0       	rjmp	.+2      	; 0x407c <_ZN4LEDs20getLEDActivationNoteEh+0x52>
            break;

        }   return 0;
    407a:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

00004080 <_ZN4LEDs14noteToLEDstateEhh>:

    return (receivedVelocity > 63);

}

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	8c 01       	movw	r16, r24
    408e:	d6 2f       	mov	r29, r22
    4090:	c4 2f       	mov	r28, r20

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    4092:	61 e0       	ldi	r22, 0x01	; 1
    4094:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    4098:	61 e0       	ldi	r22, 0x01	; 1
    409a:	81 11       	cpse	r24, r1
    409c:	01 c0       	rjmp	.+2      	; 0x40a0 <_ZN4LEDs14noteToLEDstateEhh+0x20>
    409e:	60 e0       	ldi	r22, 0x00	; 0
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    40a0:	66 23       	and	r22, r22
    40a2:	31 f0       	breq	.+12     	; 0x40b0 <_ZN4LEDs14noteToLEDstateEhh+0x30>

}

bool LEDs::velocity2blinkState(uint8_t receivedVelocity)    {

    return (receivedVelocity > 63);
    40a4:	ff 24       	eor	r15, r15
    40a6:	f3 94       	inc	r15
    40a8:	c0 34       	cpi	r28, 0x40	; 64
    40aa:	18 f4       	brcc	.+6      	; 0x40b2 <_ZN4LEDs14noteToLEDstateEhh+0x32>
    40ac:	f1 2c       	mov	r15, r1
    40ae:	01 c0       	rjmp	.+2      	; 0x40b2 <_ZN4LEDs14noteToLEDstateEhh+0x32>

void LEDs::noteToLEDstate(uint8_t receivedNote, uint8_t receivedVelocity)    {

    bool blinkEnabled_global = getLEDHwParameter(ledHwParameterBlinkTime);
    bool blinkEnabled_led;
    if (!blinkEnabled_global) blinkEnabled_led = false;
    40b0:	f1 2c       	mov	r15, r1
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor color = velocity2color(blinkEnabled_global, receivedVelocity);
    40b2:	4c 2f       	mov	r20, r28
    40b4:	c8 01       	movw	r24, r16
    40b6:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_ZN4LEDs14velocity2colorEbh>
    40ba:	e8 2e       	mov	r14, r24
    40bc:	c0 e0       	ldi	r28, 0x00	; 0

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {

        if (getLEDActivationNote(i) == receivedNote)  {
    40be:	6c 2f       	mov	r22, r28
    40c0:	c8 01       	movw	r24, r16
    40c2:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN4LEDs20getLEDActivationNoteEh>
    40c6:	8d 13       	cpse	r24, r29
    40c8:	07 c0       	rjmp	.+14     	; 0x40d8 <_ZN4LEDs14noteToLEDstateEhh+0x58>

            board.setLEDstate(i, color, blinkEnabled_led);
    40ca:	2f 2d       	mov	r18, r15
    40cc:	4e 2d       	mov	r20, r14
    40ce:	6c 2f       	mov	r22, r28
    40d0:	81 e4       	ldi	r24, 0x41	; 65
    40d2:	92 e0       	ldi	r25, 0x02	; 2
    40d4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
    40d8:	cf 5f       	subi	r28, 0xFF	; 255
    else blinkEnabled_led = velocity2blinkState(receivedVelocity);

    ledColor color = velocity2color(blinkEnabled_global, receivedVelocity);

    //match LED activation note with its index
    for (int i=0; i<MAX_NUMBER_OF_LEDS; i++)    {
    40da:	c0 33       	cpi	r28, 0x30	; 48
    40dc:	81 f7       	brne	.-32     	; 0x40be <_ZN4LEDs14noteToLEDstateEhh+0x3e>

        }

    }

}
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	1f 91       	pop	r17
    40e4:	0f 91       	pop	r16
    40e6:	ff 90       	pop	r15
    40e8:	ef 90       	pop	r14
    40ea:	08 95       	ret

000040ec <_ZN4LEDs19getLEDstartUpNumberEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber);

}

uint8_t LEDs::getLEDstartUpNumber(uint8_t ledNumber)    {
    40ec:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    40ee:	20 91 25 02 	lds	r18, 0x0225
    40f2:	30 91 26 02 	lds	r19, 0x0226
    40f6:	80 91 1f 02 	lds	r24, 0x021F
    40fa:	90 91 20 02 	lds	r25, 0x0220
    40fe:	82 0f       	add	r24, r18
    4100:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4102:	20 91 35 02 	lds	r18, 0x0235
    4106:	22 23       	and	r18, r18
    4108:	a1 f0       	breq	.+40     	; 0x4132 <_ZN4LEDs19getLEDstartUpNumberEh+0x46>
    410a:	21 30       	cpi	r18, 0x01	; 1
    410c:	b9 f4       	brne	.+46     	; 0x413c <_ZN4LEDs19getLEDstartUpNumberEh+0x50>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    410e:	26 2f       	mov	r18, r22
    4110:	26 95       	lsr	r18
    4112:	26 95       	lsr	r18
    4114:	26 95       	lsr	r18
    4116:	c6 2f       	mov	r28, r22
    4118:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    411a:	82 0f       	add	r24, r18
    411c:	91 1d       	adc	r25, r1
    411e:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	02 c0       	rjmp	.+4      	; 0x412a <_ZN4LEDs19getLEDstartUpNumberEh+0x3e>
    4126:	95 95       	asr	r25
    4128:	87 95       	ror	r24
    412a:	ca 95       	dec	r28
    412c:	e2 f7       	brpl	.-8      	; 0x4126 <_ZN4LEDs19getLEDstartUpNumberEh+0x3a>
    412e:	81 70       	andi	r24, 0x01	; 1
    4130:	06 c0       	rjmp	.+12     	; 0x413e <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4132:	86 0f       	add	r24, r22
    4134:	91 1d       	adc	r25, r1
    4136:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    413a:	01 c0       	rjmp	.+2      	; 0x413e <_ZN4LEDs19getLEDstartUpNumberEh+0x52>
            break;

        }   return 0;
    413c:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}
    413e:	cf 91       	pop	r28
    4140:	08 95       	ret

00004142 <_ZN4LEDs11oneByOneLEDEbbb>:
    wait(1000);

}


void LEDs::oneByOneLED(bool ledDirection, bool singleLED, bool turnOn)  {
    4142:	2f 92       	push	r2
    4144:	3f 92       	push	r3
    4146:	4f 92       	push	r4
    4148:	5f 92       	push	r5
    414a:	6f 92       	push	r6
    414c:	7f 92       	push	r7
    414e:	8f 92       	push	r8
    4150:	9f 92       	push	r9
    4152:	af 92       	push	r10
    4154:	bf 92       	push	r11
    4156:	cf 92       	push	r12
    4158:	df 92       	push	r13
    415a:	ef 92       	push	r14
    415c:	ff 92       	push	r15
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
    416a:	e4 97       	sbiw	r28, 0x34	; 52
    416c:	0f b6       	in	r0, 0x3f	; 63
    416e:	f8 94       	cli
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	7c 01       	movw	r14, r24
    4178:	26 2e       	mov	r2, r22
    417a:	44 2e       	mov	r4, r20
    417c:	82 2e       	mov	r8, r18
                    false means that all LEDs are lighted up and they turn off one by one, depending
                    on second argument

    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;
    417e:	62 e0       	ldi	r22, 0x02	; 2
    4180:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	9c 01       	movw	r18, r24
    4188:	22 0f       	add	r18, r18
    418a:	33 1f       	adc	r19, r19
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	a9 01       	movw	r20, r18
    419a:	48 0f       	add	r20, r24
    419c:	59 1f       	adc	r21, r25
    419e:	5a ab       	std	Y+50, r21	; 0x32
    41a0:	49 ab       	std	Y+49, r20	; 0x31

    //index of LED to be processed next
    uint8_t ledNumber,
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	c7 01       	movw	r24, r14
    41a6:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    41aa:	98 2e       	mov	r9, r24

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    41ac:	68 2e       	mov	r6, r24
    41ae:	71 2c       	mov	r7, r1
    41b0:	16 14       	cp	r1, r6
    41b2:	17 04       	cpc	r1, r7
    41b4:	94 f4       	brge	.+36     	; 0x41da <_ZN4LEDs11oneByOneLEDEbbb+0x98>
    41b6:	ce 01       	movw	r24, r28
    41b8:	01 96       	adiw	r24, 0x01	; 1
    41ba:	6c 01       	movw	r12, r24
    41bc:	5c 01       	movw	r10, r24
    41be:	a9 0c       	add	r10, r9
    41c0:	b1 1c       	adc	r11, r1
    41c2:	8c 01       	movw	r16, r24
    41c4:	60 2f       	mov	r22, r16
    41c6:	6c 19       	sub	r22, r12
        _ledNumber[i] = getLEDstartUpNumber(i);
    41c8:	c7 01       	movw	r24, r14
    41ca:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4LEDs19getLEDstartUpNumberEh>
    41ce:	d8 01       	movw	r26, r16
    41d0:	8d 93       	st	X+, r24
    41d2:	8d 01       	movw	r16, r26
            _ledNumber[MAX_NUMBER_OF_LEDS];

    uint8_t totalNumberOfLEDs = getLEDHwParameter(ledHwParameterTotalLEDnumber);

    //get LED order for start-up routine
    for (int i=0; i<totalNumberOfLEDs; i++)
    41d4:	aa 15       	cp	r26, r10
    41d6:	bb 05       	cpc	r27, r11
    41d8:	a9 f7       	brne	.-22     	; 0x41c4 <_ZN4LEDs11oneByOneLEDEbbb+0x82>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    41da:	41 10       	cpse	r4, r1
    41dc:	03 c0       	rjmp	.+6      	; 0x41e4 <_ZN4LEDs11oneByOneLEDEbbb+0xa2>
    41de:	81 10       	cpse	r8, r1
    41e0:	b9 c0       	rjmp	.+370    	; 0x4354 <_ZN4LEDs11oneByOneLEDEbbb+0x212>
    41e2:	07 c0       	rjmp	.+14     	; 0x41f2 <_ZN4LEDs11oneByOneLEDEbbb+0xb0>
    41e4:	c7 01       	movw	r24, r14
    41e6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_ZN4LEDs12checkLEDsOffEv>
    41ea:	88 23       	and	r24, r24
    41ec:	29 f0       	breq	.+10     	; 0x41f8 <_ZN4LEDs11oneByOneLEDEbbb+0xb6>
    41ee:	81 10       	cpse	r8, r1
    41f0:	05 c0       	rjmp	.+10     	; 0x41fc <_ZN4LEDs11oneByOneLEDEbbb+0xba>
    41f2:	c7 01       	movw	r24, r14
    41f4:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN4LEDs9allLEDsOnEv>

    if (turnOn) {
    41f8:	88 20       	and	r8, r8
    41fa:	a1 f1       	breq	.+104    	; 0x4264 <_ZN4LEDs11oneByOneLEDEbbb+0x122>
    //it is we increment or decrement ledNumber by one, depending on previous and current direction.
    //When function is called second time with direction different than previous one, the number of
    //times it needs to execute is reduced by one, therefore passCounter is incremented.

        //right-to-left direction
        if (!ledDirection)  {
    41fc:	21 10       	cpse	r2, r1
    41fe:	15 c0       	rjmp	.+42     	; 0x422a <_ZN4LEDs11oneByOneLEDEbbb+0xe8>

            //if last LED is turned on
            if (board.getLEDstate(_ledNumber[totalNumberOfLEDs-1]))  {
    4200:	fe 01       	movw	r30, r28
    4202:	e6 0d       	add	r30, r6
    4204:	f7 1d       	adc	r31, r7
    4206:	30 80       	ld	r3, Z
    4208:	63 2d       	mov	r22, r3
    420a:	81 e4       	ldi	r24, 0x41	; 65
    420c:	92 e0       	ldi	r25, 0x02	; 2
    420e:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    4212:	88 23       	and	r24, r24
    4214:	b1 f0       	breq	.+44     	; 0x4242 <_ZN4LEDs11oneByOneLEDEbbb+0x100>

                //LED index is penultimate LED number
                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    4216:	ef ef       	ldi	r30, 0xFF	; 255
    4218:	ff ef       	ldi	r31, 0xFF	; 255
    421a:	ec 0f       	add	r30, r28
    421c:	fd 1f       	adc	r31, r29
    421e:	e6 0d       	add	r30, r6
    4220:	f7 1d       	adc	r31, r7
    4222:	30 80       	ld	r3, Z
                //increment counter since the loop has to run one cycle less
                passCounter++;
    4224:	55 24       	eor	r5, r5
    4226:	53 94       	inc	r5
    4228:	13 c0       	rjmp	.+38     	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>

        }   else {

            //left-to-right direction
            //if first LED is already on
            if (board.getLEDstate(_ledNumber[0]))    {
    422a:	39 80       	ldd	r3, Y+1	; 0x01
    422c:	63 2d       	mov	r22, r3
    422e:	81 e4       	ldi	r24, 0x41	; 65
    4230:	92 e0       	ldi	r25, 0x02	; 2
    4232:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    4236:	88 23       	and	r24, r24
    4238:	31 f0       	breq	.+12     	; 0x4246 <_ZN4LEDs11oneByOneLEDEbbb+0x104>

                //led index is 1
                ledNumber = _ledNumber[1];
    423a:	3a 80       	ldd	r3, Y+2	; 0x02
                //increment counter
                passCounter++;
    423c:	55 24       	eor	r5, r5
    423e:	53 94       	inc	r5
    4240:	07 c0       	rjmp	.+14     	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    */

    uint16_t startUpLEDswitchTime = getLEDHwParameter(ledHwParameterStartUpSwitchTime) * 10;

    //while loop counter
    uint8_t passCounter = 0;
    4242:	51 2c       	mov	r5, r1
    4244:	05 c0       	rjmp	.+10     	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    4246:	51 2c       	mov	r5, r1
    4248:	03 c0       	rjmp	.+6      	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    424a:	51 2c       	mov	r5, r1
    424c:	01 c0       	rjmp	.+2      	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
    424e:	51 2c       	mov	r5, r1

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4250:	05 2d       	mov	r16, r5
    4252:	10 e0       	ldi	r17, 0x00	; 0
    4254:	63 01       	movw	r12, r6
    4256:	bf ef       	ldi	r27, 0xFF	; 255
    4258:	cb 1a       	sub	r12, r27
    425a:	db 0a       	sbc	r13, r27
    425c:	0c 15       	cp	r16, r12
    425e:	1d 05       	cpc	r17, r13
    4260:	24 f1       	brlt	.+72     	; 0x42aa <_ZN4LEDs11oneByOneLEDEbbb+0x168>
    4262:	7e c0       	rjmp	.+252    	; 0x4360 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>
        //This is situation when all LEDs are turned on and we're turning them off one by one. Same
        //logic applies in both cases (see above). In this case we're not checking for whether the LED
        //is already turned on, but whether it's already turned off.

        //right-to-left direction
        if (!ledDirection)  {
    4264:	21 10       	cpse	r2, r1
    4266:	15 c0       	rjmp	.+42     	; 0x4292 <_ZN4LEDs11oneByOneLEDEbbb+0x150>

            if (!(board.getLEDstate(_ledNumber[totalNumberOfLEDs-1])))   {
    4268:	fe 01       	movw	r30, r28
    426a:	e6 0d       	add	r30, r6
    426c:	f7 1d       	adc	r31, r7
    426e:	30 80       	ld	r3, Z
    4270:	63 2d       	mov	r22, r3
    4272:	81 e4       	ldi	r24, 0x41	; 65
    4274:	92 e0       	ldi	r25, 0x02	; 2
    4276:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    427a:	81 11       	cpse	r24, r1
    427c:	e6 cf       	rjmp	.-52     	; 0x424a <_ZN4LEDs11oneByOneLEDEbbb+0x108>

                ledNumber = _ledNumber[totalNumberOfLEDs-2];
    427e:	ef ef       	ldi	r30, 0xFF	; 255
    4280:	ff ef       	ldi	r31, 0xFF	; 255
    4282:	ec 0f       	add	r30, r28
    4284:	fd 1f       	adc	r31, r29
    4286:	e6 0d       	add	r30, r6
    4288:	f7 1d       	adc	r31, r7
    428a:	30 80       	ld	r3, Z
                passCounter++;
    428c:	55 24       	eor	r5, r5
    428e:	53 94       	inc	r5
    4290:	df cf       	rjmp	.-66     	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            }   else ledNumber = _ledNumber[totalNumberOfLEDs-1];

            }   else {

            //left-to-right direction
            if (!(board.getLEDstate(_ledNumber[0]))) {
    4292:	39 80       	ldd	r3, Y+1	; 0x01
    4294:	63 2d       	mov	r22, r3
    4296:	81 e4       	ldi	r24, 0x41	; 65
    4298:	92 e0       	ldi	r25, 0x02	; 2
    429a:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    429e:	81 11       	cpse	r24, r1
    42a0:	d6 cf       	rjmp	.-84     	; 0x424e <_ZN4LEDs11oneByOneLEDEbbb+0x10c>

                ledNumber = _ledNumber[1];
    42a2:	3a 80       	ldd	r3, Y+2	; 0x02
                passCounter++;
    42a4:	55 24       	eor	r5, r5
    42a6:	53 94       	inc	r5
    42a8:	d3 cf       	rjmp	.-90     	; 0x4250 <_ZN4LEDs11oneByOneLEDEbbb+0x10e>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    42aa:	53 01       	movw	r10, r6
    42ac:	e1 e0       	ldi	r30, 0x01	; 1
    42ae:	ae 1a       	sub	r10, r30
    42b0:	b1 08       	sbc	r11, r1

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    42b2:	f2 e0       	ldi	r31, 0x02	; 2
    42b4:	6f 1a       	sub	r6, r31
    42b6:	71 08       	sbc	r7, r1
        }

        //always increment pass counter
        passCounter++;

        wait(startUpLEDswitchTime);
    42b8:	a9 a9       	ldd	r26, Y+49	; 0x31
    42ba:	ba a9       	ldd	r27, Y+50	; 0x32
    42bc:	cd 01       	movw	r24, r26
    42be:	a0 e0       	ldi	r26, 0x00	; 0
    42c0:	b0 e0       	ldi	r27, 0x00	; 0
    42c2:	89 ab       	std	Y+49, r24	; 0x31
    42c4:	9a ab       	std	Y+50, r25	; 0x32
    42c6:	ab ab       	std	Y+51, r26	; 0x33
    42c8:	bc ab       	std	Y+52, r27	; 0x34

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {

        if (passCounter < totalNumberOfLEDs)    {
    42ca:	59 14       	cp	r5, r9
    42cc:	30 f5       	brcc	.+76     	; 0x431a <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

            //if we're turning LEDs on one by one, turn all the other LEDs off
            if (singleLED && turnOn)            allLEDsOff();
    42ce:	44 20       	and	r4, r4
    42d0:	31 f0       	breq	.+12     	; 0x42de <_ZN4LEDs11oneByOneLEDEbbb+0x19c>
    42d2:	88 20       	and	r8, r8
    42d4:	39 f0       	breq	.+14     	; 0x42e4 <_ZN4LEDs11oneByOneLEDEbbb+0x1a2>
    42d6:	c7 01       	movw	r24, r14
    42d8:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_ZN4LEDs10allLEDsOffEv>
    42dc:	2b c0       	rjmp	.+86     	; 0x4334 <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();
    42de:	81 10       	cpse	r8, r1
    42e0:	29 c0       	rjmp	.+82     	; 0x4334 <_ZN4LEDs11oneByOneLEDEbbb+0x1f2>
    42e2:	30 c0       	rjmp	.+96     	; 0x4344 <_ZN4LEDs11oneByOneLEDEbbb+0x202>
    42e4:	c7 01       	movw	r24, r14
    42e6:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_ZN4LEDs9allLEDsOnEv>
    42ea:	2c c0       	rjmp	.+88     	; 0x4344 <_ZN4LEDs11oneByOneLEDEbbb+0x202>
            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
            else    board.setLEDstate(ledNumber, colorOff, false);

            //make sure out-of-bound index isn't requested from ledArray
            if (passCounter < totalNumberOfLEDs-1)  {
    42ec:	0a 15       	cp	r16, r10
    42ee:	1b 05       	cpc	r17, r11
    42f0:	a4 f4       	brge	.+40     	; 0x431a <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //right-to-left direction
                if (!ledDirection)  ledNumber = _ledNumber[totalNumberOfLEDs - 2 - passCounter];
    42f2:	21 10       	cpse	r2, r1
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <_ZN4LEDs11oneByOneLEDEbbb+0x1ca>
    42f6:	f3 01       	movw	r30, r6
    42f8:	e0 1b       	sub	r30, r16
    42fa:	f1 0b       	sbc	r31, r17
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	4c 0f       	add	r20, r28
    4302:	5d 1f       	adc	r21, r29
    4304:	e4 0f       	add	r30, r20
    4306:	f5 1f       	adc	r31, r21
    4308:	30 80       	ld	r3, Z
    430a:	07 c0       	rjmp	.+14     	; 0x431a <_ZN4LEDs11oneByOneLEDEbbb+0x1d8>

                //left-to-right direction
                else    if (passCounter < totalNumberOfLEDs-1)  ledNumber = _ledNumber[passCounter+1];
    430c:	e2 e0       	ldi	r30, 0x02	; 2
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	ec 0f       	add	r30, r28
    4312:	fd 1f       	adc	r31, r29
    4314:	e0 0f       	add	r30, r16
    4316:	f1 1f       	adc	r31, r17
    4318:	30 80       	ld	r3, Z
            }

        }

        //always increment pass counter
        passCounter++;
    431a:	53 94       	inc	r5

        wait(startUpLEDswitchTime);
    431c:	69 a9       	ldd	r22, Y+49	; 0x31
    431e:	7a a9       	ldd	r23, Y+50	; 0x32
    4320:	8b a9       	ldd	r24, Y+51	; 0x33
    4322:	9c a9       	ldd	r25, Y+52	; 0x34
    4324:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z4waitm>

    }

    //on first function call, the while loop is called TOTAL_NUMBER_OF_LEDS+1 times
    //to get empty cycle after processing last LED
    while (passCounter < totalNumberOfLEDs+1)   {
    4328:	05 2d       	mov	r16, r5
    432a:	10 e0       	ldi	r17, 0x00	; 0
    432c:	0c 15       	cp	r16, r12
    432e:	1d 05       	cpc	r17, r13
    4330:	64 f2       	brlt	.-104    	; 0x42ca <_ZN4LEDs11oneByOneLEDEbbb+0x188>
    4332:	16 c0       	rjmp	.+44     	; 0x4360 <_ZN4LEDs11oneByOneLEDEbbb+0x21e>

            //if we're turning LEDs off one by one, turn all the other LEDs on
            else    if (!turnOn && singleLED)   allLEDsOn();

            //set LED state depending on turnOn parameter
            if (turnOn) board.setLEDstate(ledNumber, colorOnDefault, false);
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	48 e0       	ldi	r20, 0x08	; 8
    4338:	63 2d       	mov	r22, r3
    433a:	81 e4       	ldi	r24, 0x41	; 65
    433c:	92 e0       	ldi	r25, 0x02	; 2
    433e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
    4342:	d4 cf       	rjmp	.-88     	; 0x42ec <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
            else    board.setLEDstate(ledNumber, colorOff, false);
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	63 2d       	mov	r22, r3
    434a:	81 e4       	ldi	r24, 0x41	; 65
    434c:	92 e0       	ldi	r25, 0x02	; 2
    434e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
    4352:	cc cf       	rjmp	.-104    	; 0x42ec <_ZN4LEDs11oneByOneLEDEbbb+0x1aa>
        _ledNumber[i] = getLEDstartUpNumber(i);

    //if second and third argument of function are set to false or
    //if second argument is set to false and all the LEDs are turned off
    //light up all LEDs
    if ((!singleLED && !turnOn) || (checkLEDsOff() && !turnOn)) allLEDsOn();
    4354:	c7 01       	movw	r24, r14
    4356:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_ZN4LEDs12checkLEDsOffEv>
    435a:	81 11       	cpse	r24, r1
    435c:	48 cf       	rjmp	.-368    	; 0x41ee <_ZN4LEDs11oneByOneLEDEbbb+0xac>
    435e:	4e cf       	rjmp	.-356    	; 0x41fc <_ZN4LEDs11oneByOneLEDEbbb+0xba>

        wait(startUpLEDswitchTime);

    }

}
    4360:	e4 96       	adiw	r28, 0x34	; 52
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	df 91       	pop	r29
    436e:	cf 91       	pop	r28
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	ff 90       	pop	r15
    4376:	ef 90       	pop	r14
    4378:	df 90       	pop	r13
    437a:	cf 90       	pop	r12
    437c:	bf 90       	pop	r11
    437e:	af 90       	pop	r10
    4380:	9f 90       	pop	r9
    4382:	8f 90       	pop	r8
    4384:	7f 90       	pop	r7
    4386:	6f 90       	pop	r6
    4388:	5f 90       	pop	r5
    438a:	4f 90       	pop	r4
    438c:	3f 90       	pop	r3
    438e:	2f 90       	pop	r2
    4390:	08 95       	ret

00004392 <_ZN4LEDs16startUpAnimationEv>:
    //run LED animation on start-up
    startUpAnimation();

}

void LEDs::startUpAnimation() {
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29
    4396:	ec 01       	movw	r28, r24

    if (!getLEDHwParameter(ledHwParameterTotalLEDnumber) || !getLEDHwParameter(ledHwParameterStartUpSwitchTime))
    4398:	60 e0       	ldi	r22, 0x00	; 0
    439a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    439e:	88 23       	and	r24, r24
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <_ZN4LEDs16startUpAnimationEv+0x12>
    43a2:	79 c0       	rjmp	.+242    	; 0x4496 <_ZN4LEDs16startUpAnimationEv+0x104>
    43a4:	62 e0       	ldi	r22, 0x02	; 2
    43a6:	ce 01       	movw	r24, r28
    43a8:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    43ac:	88 23       	and	r24, r24
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <_ZN4LEDs16startUpAnimationEv+0x20>
    43b0:	72 c0       	rjmp	.+228    	; 0x4496 <_ZN4LEDs16startUpAnimationEv+0x104>
        return;

    //turn off all LEDs before starting animation
    allLEDsOff();
    43b2:	ce 01       	movw	r24, r28
    43b4:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_ZN4LEDs10allLEDsOffEv>

    switch (getLEDHwParameter(ledHwParameterStartUpRoutine))  {
    43b8:	63 e0       	ldi	r22, 0x03	; 3
    43ba:	ce 01       	movw	r24, r28
    43bc:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    43c0:	83 30       	cpi	r24, 0x03	; 3
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <_ZN4LEDs16startUpAnimationEv+0x34>
    43c4:	3f c0       	rjmp	.+126    	; 0x4444 <_ZN4LEDs16startUpAnimationEv+0xb2>
    43c6:	28 f4       	brcc	.+10     	; 0x43d2 <_ZN4LEDs16startUpAnimationEv+0x40>
    43c8:	81 30       	cpi	r24, 0x01	; 1
    43ca:	51 f0       	breq	.+20     	; 0x43e0 <_ZN4LEDs16startUpAnimationEv+0x4e>
    43cc:	82 30       	cpi	r24, 0x02	; 2
    43ce:	69 f1       	breq	.+90     	; 0x442a <_ZN4LEDs16startUpAnimationEv+0x98>
    43d0:	59 c0       	rjmp	.+178    	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>
    43d2:	84 30       	cpi	r24, 0x04	; 4
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <_ZN4LEDs16startUpAnimationEv+0x46>
    43d6:	43 c0       	rjmp	.+134    	; 0x445e <_ZN4LEDs16startUpAnimationEv+0xcc>
    43d8:	85 30       	cpi	r24, 0x05	; 5
    43da:	09 f4       	brne	.+2      	; 0x43de <_ZN4LEDs16startUpAnimationEv+0x4c>
    43dc:	4d c0       	rjmp	.+154    	; 0x4478 <_ZN4LEDs16startUpAnimationEv+0xe6>
    43de:	52 c0       	rjmp	.+164    	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 1:
        oneByOneLED(true, true, true);
    43e0:	21 e0       	ldi	r18, 0x01	; 1
    43e2:	41 e0       	ldi	r20, 0x01	; 1
    43e4:	61 e0       	ldi	r22, 0x01	; 1
    43e6:	ce 01       	movw	r24, r28
    43e8:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, true);
    43ec:	21 e0       	ldi	r18, 0x01	; 1
    43ee:	40 e0       	ldi	r20, 0x00	; 0
    43f0:	60 e0       	ldi	r22, 0x00	; 0
    43f2:	ce 01       	movw	r24, r28
    43f4:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	ce 01       	movw	r24, r28
    4400:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4404:	21 e0       	ldi	r18, 0x01	; 1
    4406:	41 e0       	ldi	r20, 0x01	; 1
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	ce 01       	movw	r24, r28
    440c:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, true);
    4410:	21 e0       	ldi	r18, 0x01	; 1
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	61 e0       	ldi	r22, 0x01	; 1
    4416:	ce 01       	movw	r24, r28
    4418:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	ce 01       	movw	r24, r28
    4424:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4428:	2d c0       	rjmp	.+90     	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 2:
        oneByOneLED(true, false, true);
    442a:	21 e0       	ldi	r18, 0x01	; 1
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	61 e0       	ldi	r22, 0x01	; 1
    4430:	ce 01       	movw	r24, r28
    4432:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, false, false);
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	60 e0       	ldi	r22, 0x00	; 0
    443c:	ce 01       	movw	r24, r28
    443e:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4442:	20 c0       	rjmp	.+64     	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 3:
        oneByOneLED(true, true, true);
    4444:	21 e0       	ldi	r18, 0x01	; 1
    4446:	41 e0       	ldi	r20, 0x01	; 1
    4448:	61 e0       	ldi	r22, 0x01	; 1
    444a:	ce 01       	movw	r24, r28
    444c:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(false, true, true);
    4450:	21 e0       	ldi	r18, 0x01	; 1
    4452:	41 e0       	ldi	r20, 0x01	; 1
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	ce 01       	movw	r24, r28
    4458:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    445c:	13 c0       	rjmp	.+38     	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 4:
        oneByOneLED(true, false, true);
    445e:	21 e0       	ldi	r18, 0x01	; 1
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	61 e0       	ldi	r22, 0x01	; 1
    4464:	ce 01       	movw	r24, r28
    4466:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        oneByOneLED(true, false, false);
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	61 e0       	ldi	r22, 0x01	; 1
    4470:	ce 01       	movw	r24, r28
    4472:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        break;
    4476:	06 c0       	rjmp	.+12     	; 0x4484 <_ZN4LEDs16startUpAnimationEv+0xf2>

        case 5:
        oneByOneLED(true, false, true);
    4478:	21 e0       	ldi	r18, 0x01	; 1
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	61 e0       	ldi	r22, 0x01	; 1
    447e:	ce 01       	movw	r24, r28
    4480:	0e 94 a1 20 	call	0x4142	; 0x4142 <_ZN4LEDs11oneByOneLEDEbbb>
        default:
        break;

    }

    allLEDsOff();
    4484:	ce 01       	movw	r24, r28
    4486:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_ZN4LEDs10allLEDsOffEv>
    wait(1000);
    448a:	68 ee       	ldi	r22, 0xE8	; 232
    448c:	73 e0       	ldi	r23, 0x03	; 3
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z4waitm>

}
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	08 95       	ret

0000449c <_ZN4LEDs4initEv>:

    //def const

}

void LEDs::init()   {
    449c:	af 92       	push	r10
    449e:	bf 92       	push	r11
    44a0:	cf 92       	push	r12
    44a2:	df 92       	push	r13
    44a4:	ef 92       	push	r14
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	69 97       	sbiw	r28, 0x19	; 25
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	5c 01       	movw	r10, r24

    const subtype ledHardwareParameterSubtype   = { LED_HARDWARE_PARAMETERS, IGNORE_NEW_VALUE, IGNORE_NEW_VALUE };
    44c0:	85 e0       	ldi	r24, 0x05	; 5
    44c2:	8f 8b       	std	Y+23, r24	; 0x17
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	88 8f       	std	Y+24, r24	; 0x18
    44c8:	89 8f       	std	Y+25, r24	; 0x19
    const subtype ledActivationNoteSubtype      = { MAX_NUMBER_OF_LEDS, 0, 127 };
    44ca:	80 e3       	ldi	r24, 0x30	; 48
    44cc:	8c 8b       	std	Y+20, r24	; 0x14
    44ce:	1d 8a       	std	Y+21, r1	; 0x15
    44d0:	9f e7       	ldi	r25, 0x7F	; 127
    44d2:	9e 8b       	std	Y+22, r25	; 0x16
    const subtype ledStartUpNumberSubtype       = { MAX_NUMBER_OF_LEDS, 0, MAX_NUMBER_OF_LEDS-1 };
    44d4:	89 8b       	std	Y+17, r24	; 0x11
    44d6:	1a 8a       	std	Y+18, r1	; 0x12
    44d8:	9f e2       	ldi	r25, 0x2F	; 47
    44da:	9b 8b       	std	Y+19, r25	; 0x13
    const subtype ledRGBenabledSubtype          = { MAX_NUMBER_OF_RGB_LEDS, 0, 1 };
    44dc:	90 e1       	ldi	r25, 0x10	; 16
    44de:	9e 87       	std	Y+14, r25	; 0x0e
    44e0:	1f 86       	std	Y+15, r1	; 0x0f
    44e2:	91 e0       	ldi	r25, 0x01	; 1
    44e4:	98 8b       	std	Y+16, r25	; 0x10
    const subtype ledsStateSubtype              = { MAX_NUMBER_OF_LEDS, 0, LED_STATES-1 };
    44e6:	8b 87       	std	Y+11, r24	; 0x0b
    44e8:	1c 86       	std	Y+12, r1	; 0x0c
    44ea:	8e e0       	ldi	r24, 0x0E	; 14
    44ec:	8d 87       	std	Y+13, r24	; 0x0d
        &ledActivationNoteSubtype,
        &ledStartUpNumberSubtype,
        &ledRGBenabledSubtype,
        &ledsStateSubtype

    };
    44ee:	ce 01       	movw	r24, r28
    44f0:	47 96       	adiw	r24, 0x17	; 23
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	03 97       	sbiw	r24, 0x03	; 3
    44f8:	9c 83       	std	Y+4, r25	; 0x04
    44fa:	8b 83       	std	Y+3, r24	; 0x03
    44fc:	03 97       	sbiw	r24, 0x03	; 3
    44fe:	9e 83       	std	Y+6, r25	; 0x06
    4500:	8d 83       	std	Y+5, r24	; 0x05
    4502:	03 97       	sbiw	r24, 0x03	; 3
    4504:	98 87       	std	Y+8, r25	; 0x08
    4506:	8f 83       	std	Y+7, r24	; 0x07
    4508:	03 97       	sbiw	r24, 0x03	; 3
    450a:	9a 87       	std	Y+10, r25	; 0x0a
    450c:	89 87       	std	Y+9, r24	; 0x09

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);
    450e:	45 e0       	ldi	r20, 0x05	; 5
    4510:	64 e0       	ldi	r22, 0x04	; 4
    4512:	8b e0       	ldi	r24, 0x0B	; 11
    4514:	97 e0       	ldi	r25, 0x07	; 7
    4516:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN5SysEx14addMessageTypeEhh>
    451a:	ce 01       	movw	r24, r28
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	6c 01       	movw	r12, r24
    4520:	10 e0       	ldi	r17, 0x00	; 0

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);
    4522:	d6 01       	movw	r26, r12
    4524:	ed 91       	ld	r30, X+
    4526:	fd 91       	ld	r31, X+
    4528:	6d 01       	movw	r12, r26
    452a:	e2 80       	ldd	r14, Z+2	; 0x02
    452c:	01 81       	ldd	r16, Z+1	; 0x01
    452e:	20 81       	ld	r18, Z
    4530:	41 2f       	mov	r20, r17
    4532:	64 e0       	ldi	r22, 0x04	; 4
    4534:	8b e0       	ldi	r24, 0x0B	; 11
    4536:	97 e0       	ldi	r25, 0x07	; 7
    4538:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    453c:	1f 5f       	subi	r17, 0xFF	; 255

    //define message for sysex configuration
    sysEx.addMessageType(CONF_LED_BLOCK, LED_SUBTYPES);

    //add subtypes
    for (int i=0; i<LED_SUBTYPES; i++)   {
    453e:	15 30       	cpi	r17, 0x05	; 5
    4540:	81 f7       	brne	.-32     	; 0x4522 <_ZN4LEDs4initEv+0x86>
        //define subtype messages
        sysEx.addMessageSubType(CONF_LED_BLOCK, i, ledsSubtypeArray[i]->parameters, ledsSubtypeArray[i]->lowValue, ledsSubtypeArray[i]->highValue);

    }

    board.setLEDblinkTime(getLEDHwParameter(ledHwParameterBlinkTime));
    4542:	61 e0       	ldi	r22, 0x01	; 1
    4544:	c5 01       	movw	r24, r10
    4546:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    454a:	68 2f       	mov	r22, r24
    454c:	70 e0       	ldi	r23, 0x00	; 0
    454e:	81 e4       	ldi	r24, 0x41	; 65
    4550:	92 e0       	ldi	r25, 0x02	; 2
    4552:	0e 94 99 0a 	call	0x1532	; 0x1532 <_ZN5Board15setLEDblinkTimeEj>
    board.setLEDTransitionSpeed(getLEDHwParameter(ledHwParameterFadeTime));
    4556:	64 e0       	ldi	r22, 0x04	; 4
    4558:	c5 01       	movw	r24, r10
    455a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    455e:	68 2f       	mov	r22, r24
    4560:	81 e4       	ldi	r24, 0x41	; 65
    4562:	92 e0       	ldi	r25, 0x02	; 2
    4564:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN5Board21setLEDTransitionSpeedEh>

    //run LED animation on start-up
    startUpAnimation();
    4568:	c5 01       	movw	r24, r10
    456a:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN4LEDs16startUpAnimationEv>

}
    456e:	69 96       	adiw	r28, 0x19	; 25
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	1f 91       	pop	r17
    4580:	0f 91       	pop	r16
    4582:	ef 90       	pop	r14
    4584:	df 90       	pop	r13
    4586:	cf 90       	pop	r12
    4588:	bf 90       	pop	r11
    458a:	af 90       	pop	r10
    458c:	08 95       	ret

0000458e <_ZN4LEDs13getRGBenabledEh>:

    return configuration.readParameter(CONF_LED_BLOCK, ledStartUpNumberSection, ledNumber);

}

bool LEDs::getRGBenabled(uint8_t ledNumber) {
    458e:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4590:	20 91 27 02 	lds	r18, 0x0227
    4594:	30 91 28 02 	lds	r19, 0x0228
    4598:	80 91 1f 02 	lds	r24, 0x021F
    459c:	90 91 20 02 	lds	r25, 0x0220
    45a0:	82 0f       	add	r24, r18
    45a2:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    45a4:	20 91 36 02 	lds	r18, 0x0236
    45a8:	22 23       	and	r18, r18
    45aa:	a9 f0       	breq	.+42     	; 0x45d6 <_ZN4LEDs13getRGBenabledEh+0x48>
    45ac:	21 30       	cpi	r18, 0x01	; 1
    45ae:	c9 f4       	brne	.+50     	; 0x45e2 <_ZN4LEDs13getRGBenabledEh+0x54>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    45b0:	26 2f       	mov	r18, r22
    45b2:	26 95       	lsr	r18
    45b4:	26 95       	lsr	r18
    45b6:	26 95       	lsr	r18
    45b8:	c6 2f       	mov	r28, r22
    45ba:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    45bc:	82 0f       	add	r24, r18
    45be:	91 1d       	adc	r25, r1
    45c0:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	02 c0       	rjmp	.+4      	; 0x45cc <_ZN4LEDs13getRGBenabledEh+0x3e>
    45c8:	95 95       	asr	r25
    45ca:	87 95       	ror	r24
    45cc:	ca 95       	dec	r28
    45ce:	e2 f7       	brpl	.-8      	; 0x45c8 <_ZN4LEDs13getRGBenabledEh+0x3a>
    45d0:	98 2f       	mov	r25, r24
    45d2:	91 70       	andi	r25, 0x01	; 1
    45d4:	07 c0       	rjmp	.+14     	; 0x45e4 <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    45d6:	86 0f       	add	r24, r22
    45d8:	91 1d       	adc	r25, r1
    45da:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    45de:	98 2f       	mov	r25, r24
    45e0:	01 c0       	rjmp	.+2      	; 0x45e4 <_ZN4LEDs13getRGBenabledEh+0x56>
            break;

        }   return 0;
    45e2:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber);
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	91 11       	cpse	r25, r1
    45e8:	01 c0       	rjmp	.+2      	; 0x45ec <_ZN4LEDs13getRGBenabledEh+0x5e>
    45ea:	80 e0       	ldi	r24, 0x00	; 0

}
    45ec:	cf 91       	pop	r28
    45ee:	08 95       	ret

000045f0 <_ZN4LEDs12getParameterEhh>:

uint8_t LEDs::getParameter(uint8_t messageType, uint8_t parameterID)   {

    switch(messageType) {
    45f0:	62 30       	cpi	r22, 0x02	; 2
    45f2:	a9 f0       	breq	.+42     	; 0x461e <_ZN4LEDs12getParameterEhh+0x2e>
    45f4:	28 f4       	brcc	.+10     	; 0x4600 <_ZN4LEDs12getParameterEhh+0x10>
    45f6:	66 23       	and	r22, r22
    45f8:	41 f0       	breq	.+16     	; 0x460a <_ZN4LEDs12getParameterEhh+0x1a>
    45fa:	61 30       	cpi	r22, 0x01	; 1
    45fc:	59 f0       	breq	.+22     	; 0x4614 <_ZN4LEDs12getParameterEhh+0x24>
    45fe:	23 c0       	rjmp	.+70     	; 0x4646 <_ZN4LEDs12getParameterEhh+0x56>
    4600:	63 30       	cpi	r22, 0x03	; 3
    4602:	91 f0       	breq	.+36     	; 0x4628 <_ZN4LEDs12getParameterEhh+0x38>
    4604:	64 30       	cpi	r22, 0x04	; 4
    4606:	a9 f0       	breq	.+42     	; 0x4632 <_ZN4LEDs12getParameterEhh+0x42>
    4608:	1e c0       	rjmp	.+60     	; 0x4646 <_ZN4LEDs12getParameterEhh+0x56>

        case ledHardwareParameterConf:
        return getLEDHwParameter(parameterID);
    460a:	64 2f       	mov	r22, r20
    460c:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN4LEDs17getLEDHwParameterEh>
    4610:	98 2f       	mov	r25, r24
    4612:	1a c0       	rjmp	.+52     	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledActivationNoteConf:
        return getLEDActivationNote(parameterID);
    4614:	64 2f       	mov	r22, r20
    4616:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN4LEDs20getLEDActivationNoteEh>
    461a:	98 2f       	mov	r25, r24
    461c:	15 c0       	rjmp	.+42     	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStartUpNumberConf:
        return getLEDstartUpNumber(parameterID);
    461e:	64 2f       	mov	r22, r20
    4620:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4LEDs19getLEDstartUpNumberEh>
    4624:	98 2f       	mov	r25, r24
    4626:	10 c0       	rjmp	.+32     	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledRGBenabledConf:
        return getRGBenabled(parameterID);
    4628:	64 2f       	mov	r22, r20
    462a:	0e 94 c7 22 	call	0x458e	; 0x458e <_ZN4LEDs13getRGBenabledEh>
    462e:	98 2f       	mov	r25, r24
    4630:	0b c0       	rjmp	.+22     	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
        break;

        case ledStateConf:
        return (bool)board.getLEDstate(parameterID);
    4632:	64 2f       	mov	r22, r20
    4634:	81 e4       	ldi	r24, 0x41	; 65
    4636:	92 e0       	ldi	r25, 0x02	; 2
    4638:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN5Board11getLEDstateEh>
    463c:	91 e0       	ldi	r25, 0x01	; 1
    463e:	81 11       	cpse	r24, r1
    4640:	03 c0       	rjmp	.+6      	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	01 c0       	rjmp	.+2      	; 0x4648 <_ZN4LEDs12getParameterEhh+0x58>
        break;

    }   return 0;
    4646:	90 e0       	ldi	r25, 0x00	; 0

}
    4648:	89 2f       	mov	r24, r25
    464a:	08 95       	ret

0000464c <_ZN4LEDs17setLEDHwParameterEhh>:


bool LEDs::setLEDHwParameter(uint8_t parameter, uint8_t newParameter) {
    464c:	0f 93       	push	r16
    464e:	cf 93       	push	r28
    4650:	c4 2f       	mov	r28, r20

    //some special considerations here
    switch(parameter)   {
    4652:	62 30       	cpi	r22, 0x02	; 2
    4654:	d9 f0       	breq	.+54     	; 0x468c <_ZN4LEDs17setLEDHwParameterEhh+0x40>
    4656:	18 f4       	brcc	.+6      	; 0x465e <_ZN4LEDs17setLEDHwParameterEhh+0x12>
    4658:	61 30       	cpi	r22, 0x01	; 1
    465a:	31 f0       	breq	.+12     	; 0x4668 <_ZN4LEDs17setLEDHwParameterEhh+0x1c>
    465c:	29 c0       	rjmp	.+82     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    465e:	63 30       	cpi	r22, 0x03	; 3
    4660:	f1 f0       	breq	.+60     	; 0x469e <_ZN4LEDs17setLEDHwParameterEhh+0x52>
    4662:	64 30       	cpi	r22, 0x04	; 4
    4664:	51 f0       	breq	.+20     	; 0x467a <_ZN4LEDs17setLEDHwParameterEhh+0x2e>
    4666:	24 c0       	rjmp	.+72     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>

        case ledHwParameterBlinkTime:
        if ((newParameter < BLINK_TIME_MIN) || (newParameter > BLINK_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    4668:	40 31       	cpi	r20, 0x10	; 16
    466a:	10 f1       	brcs	.+68     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    466c:	66 e0       	ldi	r22, 0x06	; 6
    466e:	8b e0       	ldi	r24, 0x0B	; 11
    4670:	97 e0       	ldi	r25, 0x07	; 7
    4672:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	3c c0       	rjmp	.+120    	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterFadeTime:
        if ((newParameter < FADE_TIME_MIN) || (newParameter > FADE_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    467a:	4b 30       	cpi	r20, 0x0B	; 11
    467c:	c8 f0       	brcs	.+50     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    467e:	66 e0       	ldi	r22, 0x06	; 6
    4680:	8b e0       	ldi	r24, 0x0B	; 11
    4682:	97 e0       	ldi	r25, 0x07	; 7
    4684:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	33 c0       	rjmp	.+102    	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpSwitchTime:
        if ((newParameter < START_UP_SWITCH_TIME_MIN) || (newParameter > START_UP_SWITCH_TIME_MAX)) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    468c:	49 37       	cpi	r20, 0x79	; 121
    468e:	80 f0       	brcs	.+32     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    4690:	66 e0       	ldi	r22, 0x06	; 6
    4692:	8b e0       	ldi	r24, 0x0B	; 11
    4694:	97 e0       	ldi	r25, 0x07	; 7
    4696:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	2a c0       	rjmp	.+84     	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        break;

        case ledHwParameterStartUpRoutine:
        if (newParameter > NUMBER_OF_START_UP_ANIMATIONS) { sysEx.sendError(ERROR_NEW_PARAMETER); return false; }
    469e:	46 30       	cpi	r20, 0x06	; 6
    46a0:	38 f0       	brcs	.+14     	; 0x46b0 <_ZN4LEDs17setLEDHwParameterEhh+0x64>
    46a2:	66 e0       	ldi	r22, 0x06	; 6
    46a4:	8b e0       	ldi	r24, 0x0B	; 11
    46a6:	97 e0       	ldi	r25, 0x07	; 7
    46a8:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	21 c0       	rjmp	.+66     	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>
        default:
        break;

    }

    bool returnValue = configuration.writeParameter(CONF_LED_BLOCK, ledHardwareParameterSection, parameter, newParameter);
    46b0:	0c 2f       	mov	r16, r28
    46b2:	26 2f       	mov	r18, r22
    46b4:	40 e0       	ldi	r20, 0x00	; 0
    46b6:	64 e0       	ldi	r22, 0x04	; 4
    46b8:	8a e9       	ldi	r24, 0x9A	; 154
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

    if (returnValue)    {
    46c0:	88 23       	and	r24, r24
    46c2:	a1 f0       	breq	.+40     	; 0x46ec <_ZN4LEDs17setLEDHwParameterEhh+0xa0>

        switch(newParameter)    {
    46c4:	c1 30       	cpi	r28, 0x01	; 1
    46c6:	19 f0       	breq	.+6      	; 0x46ce <_ZN4LEDs17setLEDHwParameterEhh+0x82>
    46c8:	c4 30       	cpi	r28, 0x04	; 4
    46ca:	49 f0       	breq	.+18     	; 0x46de <_ZN4LEDs17setLEDHwParameterEhh+0x92>
    46cc:	11 c0       	rjmp	.+34     	; 0x46f0 <_ZN4LEDs17setLEDHwParameterEhh+0xa4>

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
    46ce:	61 e0       	ldi	r22, 0x01	; 1
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	81 e4       	ldi	r24, 0x41	; 65
    46d4:	92 e0       	ldi	r25, 0x02	; 2
    46d6:	0e 94 99 0a 	call	0x1532	; 0x1532 <_ZN5Board15setLEDblinkTimeEj>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    46da:	81 e0       	ldi	r24, 0x01	; 1

        switch(newParameter)    {

            case ledHwParameterBlinkTime:
            board.setLEDblinkTime(newParameter);
            break;
    46dc:	0a c0       	rjmp	.+20     	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
    46de:	64 e0       	ldi	r22, 0x04	; 4
    46e0:	81 e4       	ldi	r24, 0x41	; 65
    46e2:	92 e0       	ldi	r25, 0x02	; 2
    46e4:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN5Board21setLEDTransitionSpeedEh>
            break;

        }   return true;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
            board.setLEDblinkTime(newParameter);
            break;

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;
    46ea:	03 c0       	rjmp	.+6      	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

        }   return true;

    }   return false;
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	01 c0       	rjmp	.+2      	; 0x46f2 <_ZN4LEDs17setLEDHwParameterEhh+0xa6>

            case ledHwParameterFadeTime:
            board.setLEDTransitionSpeed(newParameter);
            break;

        }   return true;
    46f0:	81 e0       	ldi	r24, 0x01	; 1

    }   return false;

}
    46f2:	cf 91       	pop	r28
    46f4:	0f 91       	pop	r16
    46f6:	08 95       	ret

000046f8 <_ZN4LEDs20setLEDActivationNoteEhh>:

bool LEDs::setLEDActivationNote(uint8_t ledNumber, uint8_t ledActNote) {
    46f8:	0f 93       	push	r16
    46fa:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledActivationNoteSection, ledNumber, ledActNote);
    46fc:	04 2f       	mov	r16, r20
    46fe:	41 e0       	ldi	r20, 0x01	; 1
    4700:	64 e0       	ldi	r22, 0x04	; 4
    4702:	8a e9       	ldi	r24, 0x9A	; 154
    4704:	91 e0       	ldi	r25, 0x01	; 1
    4706:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    470a:	0f 91       	pop	r16
    470c:	08 95       	ret

0000470e <_ZN4LEDs17setLEDstartNumberEhh>:

bool LEDs::setLEDstartNumber(uint8_t startNumber, uint8_t ledNumber) {
    470e:	0f 93       	push	r16
    4710:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledStartUpNumberSection, startNumber, ledNumber);
    4712:	04 2f       	mov	r16, r20
    4714:	42 e0       	ldi	r20, 0x02	; 2
    4716:	64 e0       	ldi	r22, 0x04	; 4
    4718:	8a e9       	ldi	r24, 0x9A	; 154
    471a:	91 e0       	ldi	r25, 0x01	; 1
    471c:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    4720:	0f 91       	pop	r16
    4722:	08 95       	ret

00004724 <_ZN4LEDs13setRGBenabledEhb>:

bool LEDs::setRGBenabled(uint8_t ledNumber, bool state) {
    4724:	0f 93       	push	r16
    4726:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_LED_BLOCK, ledRGBenabledSection, ledNumber, state);
    4728:	04 2f       	mov	r16, r20
    472a:	43 e0       	ldi	r20, 0x03	; 3
    472c:	64 e0       	ldi	r22, 0x04	; 4
    472e:	8a e9       	ldi	r24, 0x9A	; 154
    4730:	91 e0       	ldi	r25, 0x01	; 1
    4732:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    4736:	0f 91       	pop	r16
    4738:	08 95       	ret

0000473a <_ZN4LEDs12setParameterEhhh>:

bool LEDs::setParameter(uint8_t messageType, uint8_t parameter, uint8_t newParameter)   {
    473a:	34 2f       	mov	r19, r20

    switch(messageType) {
    473c:	62 30       	cpi	r22, 0x02	; 2
    473e:	a9 f0       	breq	.+42     	; 0x476a <_ZN4LEDs12setParameterEhhh+0x30>
    4740:	28 f4       	brcc	.+10     	; 0x474c <_ZN4LEDs12setParameterEhhh+0x12>
    4742:	66 23       	and	r22, r22
    4744:	41 f0       	breq	.+16     	; 0x4756 <_ZN4LEDs12setParameterEhhh+0x1c>
    4746:	61 30       	cpi	r22, 0x01	; 1
    4748:	59 f0       	breq	.+22     	; 0x4760 <_ZN4LEDs12setParameterEhhh+0x26>
    474a:	ae c0       	rjmp	.+348    	; 0x48a8 <_ZN4LEDs12setParameterEhhh+0x16e>
    474c:	63 30       	cpi	r22, 0x03	; 3
    474e:	91 f0       	breq	.+36     	; 0x4774 <_ZN4LEDs12setParameterEhhh+0x3a>
    4750:	64 30       	cpi	r22, 0x04	; 4
    4752:	c1 f0       	breq	.+48     	; 0x4784 <_ZN4LEDs12setParameterEhhh+0x4a>
    4754:	a9 c0       	rjmp	.+338    	; 0x48a8 <_ZN4LEDs12setParameterEhhh+0x16e>

        case ledHardwareParameterConf:
        return setLEDHwParameter(parameter, newParameter);
    4756:	42 2f       	mov	r20, r18
    4758:	63 2f       	mov	r22, r19
    475a:	0e 94 26 23 	call	0x464c	; 0x464c <_ZN4LEDs17setLEDHwParameterEhh>
    475e:	08 95       	ret
        break;

        case ledActivationNoteConf:
        return setLEDActivationNote(parameter, newParameter);
    4760:	42 2f       	mov	r20, r18
    4762:	63 2f       	mov	r22, r19
    4764:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_ZN4LEDs20setLEDActivationNoteEhh>
    4768:	08 95       	ret
        break;

        case ledStartUpNumberConf:
        return setLEDstartNumber(parameter, newParameter);
    476a:	42 2f       	mov	r20, r18
    476c:	63 2f       	mov	r22, r19
    476e:	0e 94 87 23 	call	0x470e	; 0x470e <_ZN4LEDs17setLEDstartNumberEhh>
    4772:	08 95       	ret
        break;

        case ledRGBenabledConf:
        return setRGBenabled(parameter, newParameter);
    4774:	41 e0       	ldi	r20, 0x01	; 1
    4776:	21 11       	cpse	r18, r1
    4778:	01 c0       	rjmp	.+2      	; 0x477c <_ZN4LEDs12setParameterEhhh+0x42>
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	63 2f       	mov	r22, r19
    477e:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN4LEDs13setRGBenabledEhb>
    4782:	08 95       	ret
        break;

        case ledStateConf:
        switch ((ledStatesHardwareParameter)newParameter)   {
    4784:	82 2f       	mov	r24, r18
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	8f 30       	cpi	r24, 0x0F	; 15
    478a:	91 05       	cpc	r25, r1
    478c:	08 f0       	brcs	.+2      	; 0x4790 <_ZN4LEDs12setParameterEhhh+0x56>
    478e:	8e c0       	rjmp	.+284    	; 0x48ac <_ZN4LEDs12setParameterEhhh+0x172>
    4790:	fc 01       	movw	r30, r24
    4792:	ea 51       	subi	r30, 0x1A	; 26
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__tablejump2__>

            case ledStateOff:
            board.setLEDstate(parameter, colorOff, false);
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	40 e0       	ldi	r20, 0x00	; 0
    479e:	63 2f       	mov	r22, r19
    47a0:	81 e4       	ldi	r24, 0x41	; 65
    47a2:	92 e0       	ldi	r25, 0x02	; 2
    47a4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	08 95       	ret
            break;

            case ledStateConstantWhite:
            board.setLEDstate(parameter, colorWhite, false);
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	63 2f       	mov	r22, r19
    47b2:	81 e4       	ldi	r24, 0x41	; 65
    47b4:	92 e0       	ldi	r25, 0x02	; 2
    47b6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	08 95       	ret
            break;

            case ledStateConstantCyan:
            board.setLEDstate(parameter, colorCyan, false);
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	42 e0       	ldi	r20, 0x02	; 2
    47c2:	63 2f       	mov	r22, r19
    47c4:	81 e4       	ldi	r24, 0x41	; 65
    47c6:	92 e0       	ldi	r25, 0x02	; 2
    47c8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	08 95       	ret
            break;

            case ledStateConstantMagenta:
            board.setLEDstate(parameter, colorMagenta, false);
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	43 e0       	ldi	r20, 0x03	; 3
    47d4:	63 2f       	mov	r22, r19
    47d6:	81 e4       	ldi	r24, 0x41	; 65
    47d8:	92 e0       	ldi	r25, 0x02	; 2
    47da:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	08 95       	ret
            break;

            case ledStateConstantRed:
            board.setLEDstate(parameter, colorRed, false);
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	44 e0       	ldi	r20, 0x04	; 4
    47e6:	63 2f       	mov	r22, r19
    47e8:	81 e4       	ldi	r24, 0x41	; 65
    47ea:	92 e0       	ldi	r25, 0x02	; 2
    47ec:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	08 95       	ret
            break;

            case ledStateConstantBlue:
            board.setLEDstate(parameter, colorBlue, false);
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	45 e0       	ldi	r20, 0x05	; 5
    47f8:	63 2f       	mov	r22, r19
    47fa:	81 e4       	ldi	r24, 0x41	; 65
    47fc:	92 e0       	ldi	r25, 0x02	; 2
    47fe:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	08 95       	ret
            break;

            case ledStateConstantYellow:
            board.setLEDstate(parameter, colorYellow, false);
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	46 e0       	ldi	r20, 0x06	; 6
    480a:	63 2f       	mov	r22, r19
    480c:	81 e4       	ldi	r24, 0x41	; 65
    480e:	92 e0       	ldi	r25, 0x02	; 2
    4810:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	08 95       	ret
            break;

            case ledStateConstantGreen:
            board.setLEDstate(parameter, colorGreen, false);
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	47 e0       	ldi	r20, 0x07	; 7
    481c:	63 2f       	mov	r22, r19
    481e:	81 e4       	ldi	r24, 0x41	; 65
    4820:	92 e0       	ldi	r25, 0x02	; 2
    4822:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	08 95       	ret
            break;

            case ledStateBlinkWhite:
            board.setLEDstate(parameter, colorWhite, true);
    482a:	21 e0       	ldi	r18, 0x01	; 1
    482c:	41 e0       	ldi	r20, 0x01	; 1
    482e:	63 2f       	mov	r22, r19
    4830:	81 e4       	ldi	r24, 0x41	; 65
    4832:	92 e0       	ldi	r25, 0x02	; 2
    4834:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	08 95       	ret
            break;

            case ledStateBlinkCyan:
            board.setLEDstate(parameter, colorCyan, true);
    483c:	21 e0       	ldi	r18, 0x01	; 1
    483e:	42 e0       	ldi	r20, 0x02	; 2
    4840:	63 2f       	mov	r22, r19
    4842:	81 e4       	ldi	r24, 0x41	; 65
    4844:	92 e0       	ldi	r25, 0x02	; 2
    4846:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	08 95       	ret
            break;

            case ledStateBlinkMagenta:
            board.setLEDstate(parameter, colorMagenta, true);
    484e:	21 e0       	ldi	r18, 0x01	; 1
    4850:	43 e0       	ldi	r20, 0x03	; 3
    4852:	63 2f       	mov	r22, r19
    4854:	81 e4       	ldi	r24, 0x41	; 65
    4856:	92 e0       	ldi	r25, 0x02	; 2
    4858:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	08 95       	ret
            break;

            case ledStateBlinkRed:
            board.setLEDstate(parameter, colorRed, true);
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	44 e0       	ldi	r20, 0x04	; 4
    4864:	63 2f       	mov	r22, r19
    4866:	81 e4       	ldi	r24, 0x41	; 65
    4868:	92 e0       	ldi	r25, 0x02	; 2
    486a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	08 95       	ret
            break;

            case ledStateBlinkBlue:
            board.setLEDstate(parameter, colorBlue, true);
    4872:	21 e0       	ldi	r18, 0x01	; 1
    4874:	45 e0       	ldi	r20, 0x05	; 5
    4876:	63 2f       	mov	r22, r19
    4878:	81 e4       	ldi	r24, 0x41	; 65
    487a:	92 e0       	ldi	r25, 0x02	; 2
    487c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4880:	81 e0       	ldi	r24, 0x01	; 1
    4882:	08 95       	ret
            break;

            case ledStateBlinkYellow:
            board.setLEDstate(parameter, colorYellow, true);
    4884:	21 e0       	ldi	r18, 0x01	; 1
    4886:	46 e0       	ldi	r20, 0x06	; 6
    4888:	63 2f       	mov	r22, r19
    488a:	81 e4       	ldi	r24, 0x41	; 65
    488c:	92 e0       	ldi	r25, 0x02	; 2
    488e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	08 95       	ret
            break;

            case ledStateBlinkGreen:
            board.setLEDstate(parameter, colorGreen, true);
    4896:	21 e0       	ldi	r18, 0x01	; 1
    4898:	47 e0       	ldi	r20, 0x07	; 7
    489a:	63 2f       	mov	r22, r19
    489c:	81 e4       	ldi	r24, 0x41	; 65
    489e:	92 e0       	ldi	r25, 0x02	; 2
    48a0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Board11setLEDstateEh8ledColorb>
            return true;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	08 95       	ret
            break;

        }
        break;

    }   return false;
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	08 95       	ret
            board.setLEDstate(parameter, colorGreen, true);
            return true;
            break;

            default:
            return false;
    48ac:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;

    }   return false;

}
    48ae:	08 95       	ret

000048b0 <_ZN4MIDI9sendSysExEPhh>:
    usbMIDI.sendControlChange(ccNumber, ccValue, channel);
    hwMIDI.sendControlChange(ccNumber, ccValue, channel);

}

void MIDI::sendSysEx(uint8_t *sysExArray, uint8_t arraySize)   {
    48b0:	34 2f       	mov	r19, r20

    switch (source) {
    48b2:	fc 01       	movw	r30, r24
    48b4:	84 81       	ldd	r24, Z+4	; 0x04
    48b6:	88 23       	and	r24, r24
    48b8:	19 f0       	breq	.+6      	; 0x48c0 <_ZN4MIDI9sendSysExEPhh+0x10>
    48ba:	81 30       	cpi	r24, 0x01	; 1
    48bc:	59 f0       	breq	.+22     	; 0x48d4 <_ZN4MIDI9sendSysExEPhh+0x24>
    48be:	08 95       	ret

        case midiSource:
        hwMIDI.sendSysEx(arraySize, sysExArray, false);
    48c0:	84 2f       	mov	r24, r20
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	ab 01       	movw	r20, r22
    48c8:	bc 01       	movw	r22, r24
    48ca:	81 ea       	ldi	r24, 0xA1	; 161
    48cc:	93 e0       	ldi	r25, 0x03	; 3
    48ce:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_ZN6HWmidi9sendSysExEjPKhb>
        break;
    48d2:	08 95       	ret

        case usbSource:
        usbMIDI.sendSysEx(arraySize, sysExArray, false);
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	ab 01       	movw	r20, r22
    48d8:	63 2f       	mov	r22, r19
    48da:	84 e0       	ldi	r24, 0x04	; 4
    48dc:	94 e0       	ldi	r25, 0x04	; 4
    48de:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN14usb_midi_class9sendSysExEhPKhb>
    48e2:	08 95       	ret

000048e4 <_ZN4MIDI10getFeatureEh>:
    }

}


bool MIDI::getFeature(uint8_t featureID)  {
    48e4:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    48e6:	ea e9       	ldi	r30, 0x9A	; 154
    48e8:	f1 e0       	ldi	r31, 0x01	; 1
    48ea:	23 81       	ldd	r18, Z+3	; 0x03
    48ec:	34 81       	ldd	r19, Z+4	; 0x04
    48ee:	81 81       	ldd	r24, Z+1	; 0x01
    48f0:	92 81       	ldd	r25, Z+2	; 0x02
    48f2:	82 0f       	add	r24, r18
    48f4:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    48f6:	25 89       	ldd	r18, Z+21	; 0x15
    48f8:	22 23       	and	r18, r18
    48fa:	a9 f0       	breq	.+42     	; 0x4926 <_ZN4MIDI10getFeatureEh+0x42>
    48fc:	21 30       	cpi	r18, 0x01	; 1
    48fe:	c9 f4       	brne	.+50     	; 0x4932 <_ZN4MIDI10getFeatureEh+0x4e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    4900:	26 2f       	mov	r18, r22
    4902:	26 95       	lsr	r18
    4904:	26 95       	lsr	r18
    4906:	26 95       	lsr	r18
    4908:	c6 2f       	mov	r28, r22
    490a:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    490c:	82 0f       	add	r24, r18
    490e:	91 1d       	adc	r25, r1
    4910:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	02 c0       	rjmp	.+4      	; 0x491c <_ZN4MIDI10getFeatureEh+0x38>
    4918:	95 95       	asr	r25
    491a:	87 95       	ror	r24
    491c:	ca 95       	dec	r28
    491e:	e2 f7       	brpl	.-8      	; 0x4918 <_ZN4MIDI10getFeatureEh+0x34>
    4920:	98 2f       	mov	r25, r24
    4922:	91 70       	andi	r25, 0x01	; 1
    4924:	07 c0       	rjmp	.+14     	; 0x4934 <_ZN4MIDI10getFeatureEh+0x50>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4926:	86 0f       	add	r24, r22
    4928:	91 1d       	adc	r25, r1
    492a:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    492e:	98 2f       	mov	r25, r24
    4930:	01 c0       	rjmp	.+2      	; 0x4934 <_ZN4MIDI10getFeatureEh+0x50>
            break;

        }   return 0;
    4932:	90 e0       	ldi	r25, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID);
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	91 11       	cpse	r25, r1
    4938:	01 c0       	rjmp	.+2      	; 0x493c <_ZN4MIDI10getFeatureEh+0x58>
    493a:	80 e0       	ldi	r24, 0x00	; 0

}
    493c:	cf 91       	pop	r28
    493e:	08 95       	ret

00004940 <_ZN4MIDI14getMIDIchannelEh>:

uint8_t MIDI::getMIDIchannel(uint8_t channel)  {
    4940:	cf 93       	push	r28
    } blockDescriptor;

    blockDescriptor blocks[NUMBER_OF_BLOCKS];
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].subsectionAddress[sectionID];
    4942:	ea e9       	ldi	r30, 0x9A	; 154
    4944:	f1 e0       	ldi	r31, 0x01	; 1
    4946:	25 81       	ldd	r18, Z+5	; 0x05
    4948:	36 81       	ldd	r19, Z+6	; 0x06
    494a:	81 81       	ldd	r24, Z+1	; 0x01
    494c:	92 81       	ldd	r25, Z+2	; 0x02
    494e:	82 0f       	add	r24, r18
    4950:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    4952:	26 89       	ldd	r18, Z+22	; 0x16
    4954:	22 23       	and	r18, r18
    4956:	a1 f0       	breq	.+40     	; 0x4980 <_ZN4MIDI14getMIDIchannelEh+0x40>
    4958:	21 30       	cpi	r18, 0x01	; 1
    495a:	b9 f4       	brne	.+46     	; 0x498a <_ZN4MIDI14getMIDIchannelEh+0x4a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    495c:	26 2f       	mov	r18, r22
    495e:	26 95       	lsr	r18
    4960:	26 95       	lsr	r18
    4962:	26 95       	lsr	r18
    4964:	c6 2f       	mov	r28, r22
    4966:	c7 70       	andi	r28, 0x07	; 7
            return bitRead(eeprom_read_byte((uint8_t*)startAddress+arrayIndex), parameterIndex);
    4968:	82 0f       	add	r24, r18
    496a:	91 1d       	adc	r25, r1
    496c:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <_ZN4MIDI14getMIDIchannelEh+0x38>
    4974:	95 95       	asr	r25
    4976:	87 95       	ror	r24
    4978:	ca 95       	dec	r28
    497a:	e2 f7       	brpl	.-8      	; 0x4974 <_ZN4MIDI14getMIDIchannelEh+0x34>
    497c:	81 70       	andi	r24, 0x01	; 1
    497e:	06 c0       	rjmp	.+12     	; 0x498c <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

            case BYTE_PARAMETER:
            return eeprom_read_byte((uint8_t*)startAddress+parameterID);
    4980:	86 0f       	add	r24, r22
    4982:	91 1d       	adc	r25, r1
    4984:	0e 94 89 2b 	call	0x5712	; 0x5712 <eeprom_read_byte>
    4988:	01 c0       	rjmp	.+2      	; 0x498c <_ZN4MIDI14getMIDIchannelEh+0x4c>
            break;

        }   return 0;
    498a:	80 e0       	ldi	r24, 0x00	; 0

    return configuration.readParameter(CONF_MIDI_BLOCK, midiChannelSection, channel);

}
    498c:	cf 91       	pop	r28
    498e:	08 95       	ret

00004990 <_ZN4MIDI4initEv>:

    //default constructor

}

void MIDI::init() {
    4990:	af 92       	push	r10
    4992:	bf 92       	push	r11
    4994:	cf 92       	push	r12
    4996:	df 92       	push	r13
    4998:	ef 92       	push	r14
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	2a 97       	sbiw	r28, 0x0a	; 10
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	5c 01       	movw	r10, r24

    const subtype midiFeatureSubtype = { MIDI_FEATURES, 0, 1 };
    49b4:	83 e0       	ldi	r24, 0x03	; 3
    49b6:	88 87       	std	Y+8, r24	; 0x08
    49b8:	19 86       	std	Y+9, r1	; 0x09
    49ba:	91 e0       	ldi	r25, 0x01	; 1
    49bc:	9a 87       	std	Y+10, r25	; 0x0a
    const subtype midiChannelSubtype = { MIDI_CHANNELS, 1, 16 };
    49be:	84 e0       	ldi	r24, 0x04	; 4
    49c0:	8d 83       	std	Y+5, r24	; 0x05
    49c2:	9e 83       	std	Y+6, r25	; 0x06
    49c4:	80 e1       	ldi	r24, 0x10	; 16
    49c6:	8f 83       	std	Y+7, r24	; 0x07
    const subtype *midiSubtypeArray[] = {

        &midiFeatureSubtype,
        &midiChannelSubtype

    };
    49c8:	ce 01       	movw	r24, r28
    49ca:	08 96       	adiw	r24, 0x08	; 8
    49cc:	9a 83       	std	Y+2, r25	; 0x02
    49ce:	89 83       	std	Y+1, r24	; 0x01
    49d0:	03 97       	sbiw	r24, 0x03	; 3
    49d2:	9c 83       	std	Y+4, r25	; 0x04
    49d4:	8b 83       	std	Y+3, r24	; 0x03

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);
    49d6:	42 e0       	ldi	r20, 0x02	; 2
    49d8:	60 e0       	ldi	r22, 0x00	; 0
    49da:	8b e0       	ldi	r24, 0x0B	; 11
    49dc:	97 e0       	ldi	r25, 0x07	; 7
    49de:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN5SysEx14addMessageTypeEhh>
    49e2:	ce 01       	movw	r24, r28
    49e4:	01 96       	adiw	r24, 0x01	; 1
    49e6:	6c 01       	movw	r12, r24
    49e8:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=0; i<MIDI_SUBTYPES; i++)   {

        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);
    49ea:	d6 01       	movw	r26, r12
    49ec:	ed 91       	ld	r30, X+
    49ee:	fd 91       	ld	r31, X+
    49f0:	6d 01       	movw	r12, r26
    49f2:	e2 80       	ldd	r14, Z+2	; 0x02
    49f4:	01 81       	ldd	r16, Z+1	; 0x01
    49f6:	20 81       	ld	r18, Z
    49f8:	41 2f       	mov	r20, r17
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	8b e0       	ldi	r24, 0x0B	; 11
    49fe:	97 e0       	ldi	r25, 0x07	; 7
    4a00:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>
    4a04:	1f 5f       	subi	r17, 0xFF	; 255

    };

    sysEx.addMessageType(CONF_MIDI_BLOCK, MIDI_SUBTYPES);

    for (int i=0; i<MIDI_SUBTYPES; i++)   {
    4a06:	12 30       	cpi	r17, 0x02	; 2
    4a08:	81 f7       	brne	.-32     	; 0x49ea <_ZN4MIDI4initEv+0x5a>
        //define subtype messages
        sysEx.addMessageSubType(CONF_MIDI_BLOCK, i, midiSubtypeArray[i]->parameters, midiSubtypeArray[i]->lowValue, midiSubtypeArray[i]->highValue);

    }

    uint8_t inChannel = getMIDIchannel(inputChannel);
    4a0a:	63 e0       	ldi	r22, 0x03	; 3
    4a0c:	c5 01       	movw	r24, r10
    4a0e:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4a12:	18 2f       	mov	r17, r24
    //read incoming MIDI messages on specified channel
    hwMIDI.init(inChannel);
    4a14:	21 e0       	ldi	r18, 0x01	; 1
    4a16:	41 e0       	ldi	r20, 0x01	; 1
    4a18:	68 2f       	mov	r22, r24
    4a1a:	81 ea       	ldi	r24, 0xA1	; 161
    4a1c:	93 e0       	ldi	r25, 0x03	; 3
    4a1e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN6HWmidi4initEhbb>
    usbMIDI.init(inChannel);
    4a22:	61 2f       	mov	r22, r17
    4a24:	84 e0       	ldi	r24, 0x04	; 4
    4a26:	94 e0       	ldi	r25, 0x04	; 4
    4a28:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <_ZN14usb_midi_class4initEh>

}
    4a2c:	2a 96       	adiw	r28, 0x0a	; 10
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	f8 94       	cli
    4a32:	de bf       	out	0x3e, r29	; 62
    4a34:	0f be       	out	0x3f, r0	; 63
    4a36:	cd bf       	out	0x3d, r28	; 61
    4a38:	df 91       	pop	r29
    4a3a:	cf 91       	pop	r28
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	ef 90       	pop	r14
    4a42:	df 90       	pop	r13
    4a44:	cf 90       	pop	r12
    4a46:	bf 90       	pop	r11
    4a48:	af 90       	pop	r10
    4a4a:	08 95       	ret

00004a4c <_ZN4MIDI10checkInputEv>:

void MIDI::checkInput()   {
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	ec 01       	movw	r28, r24

    if (usbMIDI.read())   {   //new message on usb
    4a58:	84 e0       	ldi	r24, 0x04	; 4
    4a5a:	94 e0       	ldi	r25, 0x04	; 4
    4a5c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN14usb_midi_class4readEv>
    4a60:	88 23       	and	r24, r24
    4a62:	11 f1       	breq	.+68     	; 0x4aa8 <_ZN4MIDI10checkInputEv+0x5c>
    void sendSysEx(uint8_t length, const uint8_t *data, bool ArrayContainsBoundaries);
    void send_now(void);
    bool read();

    inline uint8_t getType(void) {
        return msg_type;
    4a64:	80 91 06 04 	lds	r24, 0x0406

        uint8_t messageType = usbMIDI.getType();
        source = usbSource;
    4a68:	91 e0       	ldi	r25, 0x01	; 1
    4a6a:	9c 83       	std	Y+4, r25	; 0x04

        switch(messageType) {
    4a6c:	80 39       	cpi	r24, 0x90	; 144
    4a6e:	a1 f0       	breq	.+40     	; 0x4a98 <_ZN4MIDI10checkInputEv+0x4c>
    4a70:	80 3f       	cpi	r24, 0xF0	; 240
    4a72:	19 f0       	breq	.+6      	; 0x4a7a <_ZN4MIDI10checkInputEv+0x2e>
    4a74:	80 38       	cpi	r24, 0x80	; 128
    4a76:	c1 f4       	brne	.+48     	; 0x4aa8 <_ZN4MIDI10checkInputEv+0x5c>
    4a78:	0f c0       	rjmp	.+30     	; 0x4a98 <_ZN4MIDI10checkInputEv+0x4c>

            case midiMessageSystemExclusive:
            sysEx.handleSysEx(usbMIDI.getSysExArray(), usbMIDI.getData1());
    4a7a:	40 91 07 04 	lds	r20, 0x0407
    4a7e:	69 e0       	ldi	r22, 0x09	; 9
    4a80:	74 e0       	ldi	r23, 0x04	; 4
    4a82:	8b e0       	ldi	r24, 0x0B	; 11
    4a84:	97 e0       	ldi	r25, 0x07	; 7
    4a86:	0e 94 ae 2a 	call	0x555c	; 0x555c <_ZN5SysEx11handleSysExEPhh>
            lastSysExMessageTime = rTimeMillis();
    4a8a:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z11rTimeMillisv>
    4a8e:	68 83       	st	Y, r22
    4a90:	79 83       	std	Y+1, r23	; 0x01
    4a92:	8a 83       	std	Y+2, r24	; 0x02
    4a94:	9b 83       	std	Y+3, r25	; 0x03
            break;
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <_ZN4MIDI10checkInputEv+0x5c>
    inline uint8_t getData1(void) {
        return msg_data1;
    };

    inline uint8_t getData2(void) {
        return msg_data2;
    4a98:	e4 e0       	ldi	r30, 0x04	; 4
    4a9a:	f4 e0       	ldi	r31, 0x04	; 4

            case midiMessageNoteOff:
            case midiMessageNoteOn:
            //we're using received note data to control LEDs
            leds.noteToLEDstate(usbMIDI.getData1(), usbMIDI.getData2());
    4a9c:	44 81       	ldd	r20, Z+4	; 0x04
    4a9e:	63 81       	ldd	r22, Z+3	; 0x03
    4aa0:	85 e0       	ldi	r24, 0x05	; 5
    4aa2:	97 e0       	ldi	r25, 0x07	; 7
    4aa4:	0e 94 40 20 	call	0x4080	; 0x4080 <_ZN4LEDs14noteToLEDstateEhh>
        }

    }

    //check for incoming MIDI messages on USART
    if (hwMIDI.read())    {
    4aa8:	81 ea       	ldi	r24, 0xA1	; 161
    4aaa:	93 e0       	ldi	r25, 0x03	; 3
    4aac:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <_ZN6HWmidi4readEv>
    4ab0:	88 23       	and	r24, r24
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <_ZN4MIDI10checkInputEv+0x6a>
    4ab4:	7d c0       	rjmp	.+250    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

        uint8_t messageType = hwMIDI.getType();
    4ab6:	81 ea       	ldi	r24, 0xA1	; 161
    4ab8:	93 e0       	ldi	r25, 0x03	; 3
    4aba:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZNK6HWmidi7getTypeEv>
    4abe:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1();
    4ac0:	81 ea       	ldi	r24, 0xA1	; 161
    4ac2:	93 e0       	ldi	r25, 0x03	; 3
    4ac4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZNK6HWmidi8getData1Ev>
    4ac8:	08 2f       	mov	r16, r24
        uint8_t data2 = hwMIDI.getData2();
    4aca:	81 ea       	ldi	r24, 0xA1	; 161
    4acc:	93 e0       	ldi	r25, 0x03	; 3
    4ace:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZNK6HWmidi8getData2Ev>
    4ad2:	f8 2e       	mov	r15, r24

        source = midiSource;
    4ad4:	1c 82       	std	Y+4, r1	; 0x04

        if (!getFeature(midiFeatureUSBconvert))  {
    4ad6:	62 e0       	ldi	r22, 0x02	; 2
    4ad8:	ce 01       	movw	r24, r28
    4ada:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN4MIDI10getFeatureEh>
    4ade:	81 11       	cpse	r24, r1
    4ae0:	0c c0       	rjmp	.+24     	; 0x4afa <_ZN4MIDI10checkInputEv+0xae>

            switch(messageType) {
    4ae2:	10 38       	cpi	r17, 0x80	; 128
    4ae4:	19 f0       	breq	.+6      	; 0x4aec <_ZN4MIDI10checkInputEv+0xa0>
    4ae6:	10 39       	cpi	r17, 0x90	; 144
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <_ZN4MIDI10checkInputEv+0xa0>
    4aea:	62 c0       	rjmp	.+196    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                case midiMessageNoteOff:
                case midiMessageNoteOn:
                leds.noteToLEDstate(data1, data2);
    4aec:	4f 2d       	mov	r20, r15
    4aee:	60 2f       	mov	r22, r16
    4af0:	85 e0       	ldi	r24, 0x05	; 5
    4af2:	97 e0       	ldi	r25, 0x07	; 7
    4af4:	0e 94 40 20 	call	0x4080	; 0x4080 <_ZN4LEDs14noteToLEDstateEhh>
                break;
    4af8:	5b c0       	rjmp	.+182    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>
            }

        }   else {

                //dump everything from MIDI in to USB MIDI out
                switch(messageType) {
    4afa:	10 3b       	cpi	r17, 0xB0	; 176
    4afc:	39 f1       	breq	.+78     	; 0x4b4c <_ZN4MIDI10checkInputEv+0x100>
    4afe:	28 f4       	brcc	.+10     	; 0x4b0a <_ZN4MIDI10checkInputEv+0xbe>
    4b00:	10 38       	cpi	r17, 0x80	; 128
    4b02:	61 f0       	breq	.+24     	; 0x4b1c <_ZN4MIDI10checkInputEv+0xd0>
    4b04:	10 39       	cpi	r17, 0x90	; 144
    4b06:	b1 f0       	breq	.+44     	; 0x4b34 <_ZN4MIDI10checkInputEv+0xe8>
    4b08:	53 c0       	rjmp	.+166    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>
    4b0a:	10 3d       	cpi	r17, 0xD0	; 208
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <_ZN4MIDI10checkInputEv+0xc4>
    4b0e:	46 c0       	rjmp	.+140    	; 0x4b9c <_ZN4MIDI10checkInputEv+0x150>
    4b10:	10 3f       	cpi	r17, 0xF0	; 240
    4b12:	99 f1       	breq	.+102    	; 0x4b7a <_ZN4MIDI10checkInputEv+0x12e>
    4b14:	10 3c       	cpi	r17, 0xC0	; 192
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <_ZN4MIDI10checkInputEv+0xce>
    4b18:	4b c0       	rjmp	.+150    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>
    4b1a:	24 c0       	rjmp	.+72     	; 0x4b64 <_ZN4MIDI10checkInputEv+0x118>

                    case midiMessageNoteOff:
                    usbMIDI.sendNoteOff(data1, data2, getMIDIchannel(inputChannel));
    4b1c:	63 e0       	ldi	r22, 0x03	; 3
    4b1e:	ce 01       	movw	r24, r28
    4b20:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4b24:	28 2f       	mov	r18, r24
    4b26:	4f 2d       	mov	r20, r15
    4b28:	60 2f       	mov	r22, r16
    4b2a:	84 e0       	ldi	r24, 0x04	; 4
    4b2c:	94 e0       	ldi	r25, 0x04	; 4
    4b2e:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN14usb_midi_class11sendNoteOffEhhh>
                    break;
    4b32:	3e c0       	rjmp	.+124    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                    case midiMessageNoteOn:
                    usbMIDI.sendNoteOn(data1, data2, getMIDIchannel(inputChannel));
    4b34:	63 e0       	ldi	r22, 0x03	; 3
    4b36:	ce 01       	movw	r24, r28
    4b38:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4b3c:	28 2f       	mov	r18, r24
    4b3e:	4f 2d       	mov	r20, r15
    4b40:	60 2f       	mov	r22, r16
    4b42:	84 e0       	ldi	r24, 0x04	; 4
    4b44:	94 e0       	ldi	r25, 0x04	; 4
    4b46:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN14usb_midi_class10sendNoteOnEhhh>
                    break;
    4b4a:	32 c0       	rjmp	.+100    	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                    case midiMessageControlChange:
                    usbMIDI.sendControlChange(data1, data2, getMIDIchannel(inputChannel));
    4b4c:	63 e0       	ldi	r22, 0x03	; 3
    4b4e:	ce 01       	movw	r24, r28
    4b50:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4b54:	28 2f       	mov	r18, r24
    4b56:	4f 2d       	mov	r20, r15
    4b58:	60 2f       	mov	r22, r16
    4b5a:	84 e0       	ldi	r24, 0x04	; 4
    4b5c:	94 e0       	ldi	r25, 0x04	; 4
    4b5e:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN14usb_midi_class17sendControlChangeEhhh>
                    break;
    4b62:	26 c0       	rjmp	.+76     	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                    case midiMessageProgramChange:
                    usbMIDI.sendProgramChange(data1, getMIDIchannel(inputChannel));
    4b64:	63 e0       	ldi	r22, 0x03	; 3
    4b66:	ce 01       	movw	r24, r28
    4b68:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4b6c:	48 2f       	mov	r20, r24
    4b6e:	60 2f       	mov	r22, r16
    4b70:	84 e0       	ldi	r24, 0x04	; 4
    4b72:	94 e0       	ldi	r25, 0x04	; 4
    4b74:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN14usb_midi_class17sendProgramChangeEhh>
                    break;
    4b78:	1b c0       	rjmp	.+54     	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                    case midiMessageSystemExclusive:
                    usbMIDI.sendSysEx(hwMIDI.getSysExArrayLength(), hwMIDI.getSysExArray(), true);
    4b7a:	81 ea       	ldi	r24, 0xA1	; 161
    4b7c:	93 e0       	ldi	r25, 0x03	; 3
    4b7e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZNK6HWmidi13getSysExArrayEv>
    4b82:	8c 01       	movw	r16, r24
    4b84:	81 ea       	ldi	r24, 0xA1	; 161
    4b86:	93 e0       	ldi	r25, 0x03	; 3
    4b88:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZNK6HWmidi19getSysExArrayLengthEv>
    4b8c:	68 2f       	mov	r22, r24
    4b8e:	21 e0       	ldi	r18, 0x01	; 1
    4b90:	a8 01       	movw	r20, r16
    4b92:	84 e0       	ldi	r24, 0x04	; 4
    4b94:	94 e0       	ldi	r25, 0x04	; 4
    4b96:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN14usb_midi_class9sendSysExEhPKhb>
                    break;
    4b9a:	0a c0       	rjmp	.+20     	; 0x4bb0 <_ZN4MIDI10checkInputEv+0x164>

                    case midiMessageAfterTouchChannel:
                    usbMIDI.sendAfterTouch(data1, getMIDIchannel(inputChannel));
    4b9c:	63 e0       	ldi	r22, 0x03	; 3
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4ba4:	48 2f       	mov	r20, r24
    4ba6:	60 2f       	mov	r22, r16
    4ba8:	84 e0       	ldi	r24, 0x04	; 4
    4baa:	94 e0       	ldi	r25, 0x04	; 4
    4bac:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN14usb_midi_class14sendAfterTouchEhh>
        }

    }

    //disable sysex config after inactivity
    if (rTimeMillis() - lastSysExMessageTime > CONFIG_TIMEOUT)
    4bb0:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z11rTimeMillisv>
    4bb4:	08 81       	ld	r16, Y
    4bb6:	19 81       	ldd	r17, Y+1	; 0x01
    4bb8:	2a 81       	ldd	r18, Y+2	; 0x02
    4bba:	3b 81       	ldd	r19, Y+3	; 0x03
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	80 1b       	sub	r24, r16
    4bc2:	91 0b       	sbc	r25, r17
    4bc4:	a2 0b       	sbc	r26, r18
    4bc6:	b3 0b       	sbc	r27, r19
    4bc8:	81 36       	cpi	r24, 0x61	; 97
    4bca:	9a 4e       	sbci	r25, 0xEA	; 234
    4bcc:	a1 05       	cpc	r26, r1
    4bce:	b1 05       	cpc	r27, r1
    4bd0:	20 f0       	brcs	.+8      	; 0x4bda <_ZN4MIDI10checkInputEv+0x18e>
        sysEx.disableConf();
    4bd2:	8b e0       	ldi	r24, 0x0B	; 11
    4bd4:	97 e0       	ldi	r25, 0x07	; 7
    4bd6:	0e 94 d6 27 	call	0x4fac	; 0x4fac <_ZN5SysEx11disableConfEv>

}
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	08 95       	ret

00004be6 <_ZN4MIDI12sendMIDInoteEhbh>:

void MIDI::sendMIDInote(uint8_t note, bool state, uint8_t _velocity)  {
    4be6:	ef 92       	push	r14
    4be8:	ff 92       	push	r15
    4bea:	0f 93       	push	r16
    4bec:	1f 93       	push	r17
    4bee:	cf 93       	push	r28
    4bf0:	df 93       	push	r29
    4bf2:	7c 01       	movw	r14, r24
    4bf4:	c6 2f       	mov	r28, r22
    4bf6:	04 2f       	mov	r16, r20
    4bf8:	d2 2f       	mov	r29, r18

    uint8_t channel = getMIDIchannel(noteChannel);
    4bfa:	60 e0       	ldi	r22, 0x00	; 0
    4bfc:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4c00:	18 2f       	mov	r17, r24

    switch (state) {
    4c02:	01 30       	cpi	r16, 0x01	; 1
    4c04:	21 f1       	breq	.+72     	; 0x4c4e <_ZN4MIDI12sendMIDInoteEhbh+0x68>

        case false:
        //button released
        if (getFeature(midiFeatureStandardNoteOff))   {
    4c06:	60 e0       	ldi	r22, 0x00	; 0
    4c08:	c7 01       	movw	r24, r14
    4c0a:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN4MIDI10getFeatureEh>
    4c0e:	88 23       	and	r24, r24
    4c10:	79 f0       	breq	.+30     	; 0x4c30 <_ZN4MIDI12sendMIDInoteEhbh+0x4a>

            usbMIDI.sendNoteOff(note, _velocity, channel);
    4c12:	21 2f       	mov	r18, r17
    4c14:	4d 2f       	mov	r20, r29
    4c16:	6c 2f       	mov	r22, r28
    4c18:	84 e0       	ldi	r24, 0x04	; 4
    4c1a:	94 e0       	ldi	r25, 0x04	; 4
    4c1c:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN14usb_midi_class11sendNoteOffEhhh>
            hwMIDI.sendNoteOff(note, _velocity, channel);
    4c20:	21 2f       	mov	r18, r17
    4c22:	4d 2f       	mov	r20, r29
    4c24:	6c 2f       	mov	r22, r28
    4c26:	81 ea       	ldi	r24, 0xA1	; 161
    4c28:	93 e0       	ldi	r25, 0x03	; 3
    4c2a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN6HWmidi11sendNoteOffEhhh>
    4c2e:	1d c0       	rjmp	.+58     	; 0x4c6a <_ZN4MIDI12sendMIDInoteEhbh+0x84>

        } else {

            usbMIDI.sendNoteOn(note, _velocity, channel);
    4c30:	21 2f       	mov	r18, r17
    4c32:	4d 2f       	mov	r20, r29
    4c34:	6c 2f       	mov	r22, r28
    4c36:	84 e0       	ldi	r24, 0x04	; 4
    4c38:	94 e0       	ldi	r25, 0x04	; 4
    4c3a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN14usb_midi_class10sendNoteOnEhhh>
            hwMIDI.sendNoteOn(note, _velocity, channel);
    4c3e:	21 2f       	mov	r18, r17
    4c40:	4d 2f       	mov	r20, r29
    4c42:	6c 2f       	mov	r22, r28
    4c44:	81 ea       	ldi	r24, 0xA1	; 161
    4c46:	93 e0       	ldi	r25, 0x03	; 3
    4c48:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6HWmidi10sendNoteOnEhhh>
    4c4c:	0e c0       	rjmp	.+28     	; 0x4c6a <_ZN4MIDI12sendMIDInoteEhbh+0x84>
        }
        break;

        case true:
        //button pressed
        usbMIDI.sendNoteOn(note, _velocity, channel);
    4c4e:	28 2f       	mov	r18, r24
    4c50:	4d 2f       	mov	r20, r29
    4c52:	6c 2f       	mov	r22, r28
    4c54:	84 e0       	ldi	r24, 0x04	; 4
    4c56:	94 e0       	ldi	r25, 0x04	; 4
    4c58:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZN14usb_midi_class10sendNoteOnEhhh>
        hwMIDI.sendNoteOn(note, _velocity, channel);
    4c5c:	21 2f       	mov	r18, r17
    4c5e:	4d 2f       	mov	r20, r29
    4c60:	6c 2f       	mov	r22, r28
    4c62:	81 ea       	ldi	r24, 0xA1	; 161
    4c64:	93 e0       	ldi	r25, 0x03	; 3
    4c66:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6HWmidi10sendNoteOnEhhh>
        break;

    }

}
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	ff 90       	pop	r15
    4c74:	ef 90       	pop	r14
    4c76:	08 95       	ret

00004c78 <_ZN4MIDI17sendProgramChangeEh>:

void MIDI::sendProgramChange(uint8_t program)    {
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	c6 2f       	mov	r28, r22

    uint8_t channel = getMIDIchannel(programChangeChannel);
    4c7e:	61 e0       	ldi	r22, 0x01	; 1
    4c80:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4c84:	d8 2f       	mov	r29, r24
    usbMIDI.sendProgramChange(program, channel);
    4c86:	48 2f       	mov	r20, r24
    4c88:	6c 2f       	mov	r22, r28
    4c8a:	84 e0       	ldi	r24, 0x04	; 4
    4c8c:	94 e0       	ldi	r25, 0x04	; 4
    4c8e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN14usb_midi_class17sendProgramChangeEhh>
    hwMIDI.sendProgramChange(program, channel);
    4c92:	4d 2f       	mov	r20, r29
    4c94:	6c 2f       	mov	r22, r28
    4c96:	81 ea       	ldi	r24, 0xA1	; 161
    4c98:	93 e0       	ldi	r25, 0x03	; 3
    4c9a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN6HWmidi17sendProgramChangeEhh>

}
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	08 95       	ret

00004ca4 <_ZN4MIDI17sendControlChangeEhh>:

void MIDI::sendControlChange(uint8_t ccNumber, uint8_t ccValue) {
    4ca4:	1f 93       	push	r17
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	c6 2f       	mov	r28, r22
    4cac:	d4 2f       	mov	r29, r20

    uint8_t channel = getMIDIchannel(CCchannel);
    4cae:	62 e0       	ldi	r22, 0x02	; 2
    4cb0:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4cb4:	18 2f       	mov	r17, r24
    usbMIDI.sendControlChange(ccNumber, ccValue, channel);
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	4d 2f       	mov	r20, r29
    4cba:	6c 2f       	mov	r22, r28
    4cbc:	84 e0       	ldi	r24, 0x04	; 4
    4cbe:	94 e0       	ldi	r25, 0x04	; 4
    4cc0:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN14usb_midi_class17sendControlChangeEhhh>
    hwMIDI.sendControlChange(ccNumber, ccValue, channel);
    4cc4:	21 2f       	mov	r18, r17
    4cc6:	4d 2f       	mov	r20, r29
    4cc8:	6c 2f       	mov	r22, r28
    4cca:	81 ea       	ldi	r24, 0xA1	; 161
    4ccc:	93 e0       	ldi	r25, 0x03	; 3
    4cce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN6HWmidi17sendControlChangeEhhh>

}
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	08 95       	ret

00004cda <_ZN4MIDI12getParameterEhh>:

}

uint8_t MIDI::getParameter(uint8_t messageType, uint8_t parameterID)  {

    switch(messageType) {
    4cda:	66 23       	and	r22, r22
    4cdc:	19 f0       	breq	.+6      	; 0x4ce4 <_ZN4MIDI12getParameterEhh+0xa>
    4cde:	61 30       	cpi	r22, 0x01	; 1
    4ce0:	29 f0       	breq	.+10     	; 0x4cec <_ZN4MIDI12getParameterEhh+0x12>
    4ce2:	08 c0       	rjmp	.+16     	; 0x4cf4 <_ZN4MIDI12getParameterEhh+0x1a>

        case midiFeatureConf:
        return getFeature(parameterID);
    4ce4:	64 2f       	mov	r22, r20
    4ce6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN4MIDI10getFeatureEh>
    4cea:	08 95       	ret
        break;

        case midiChannelConf:
        return getMIDIchannel(parameterID);
    4cec:	64 2f       	mov	r22, r20
    4cee:	0e 94 a0 24 	call	0x4940	; 0x4940 <_ZN4MIDI14getMIDIchannelEh>
    4cf2:	08 95       	ret
        break;

    }   return 0;
    4cf4:	80 e0       	ldi	r24, 0x00	; 0

}
    4cf6:	08 95       	ret

00004cf8 <_ZN4MIDI14setMIDIchannelEhh>:


bool MIDI::setMIDIchannel(uint8_t channelID, uint8_t channelNumber)  {
    4cf8:	0f 93       	push	r16
    4cfa:	26 2f       	mov	r18, r22

    return configuration.writeParameter(CONF_MIDI_BLOCK, midiChannelSection, channelID, channelNumber);
    4cfc:	04 2f       	mov	r16, r20
    4cfe:	41 e0       	ldi	r20, 0x01	; 1
    4d00:	60 e0       	ldi	r22, 0x00	; 0
    4d02:	8a e9       	ldi	r24, 0x9A	; 154
    4d04:	91 e0       	ldi	r25, 0x01	; 1
    4d06:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>

}
    4d0a:	0f 91       	pop	r16
    4d0c:	08 95       	ret

00004d0e <_ZN4MIDI10setFeatureEhh>:

bool MIDI::setFeature(uint8_t featureID, uint8_t newValue)  {
    4d0e:	0f 93       	push	r16
    4d10:	1f 93       	push	r17
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	d6 2f       	mov	r29, r22
    4d18:	14 2f       	mov	r17, r20

    if (!configuration.writeParameter(CONF_MIDI_BLOCK, midiFeatureSection, featureID, newValue))
    4d1a:	04 2f       	mov	r16, r20
    4d1c:	26 2f       	mov	r18, r22
    4d1e:	40 e0       	ldi	r20, 0x00	; 0
    4d20:	60 e0       	ldi	r22, 0x00	; 0
    4d22:	8a e9       	ldi	r24, 0x9A	; 154
    4d24:	91 e0       	ldi	r25, 0x01	; 1
    4d26:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN13Configuration14writeParameterEhhhh>
    4d2a:	c8 2f       	mov	r28, r24
    4d2c:	88 23       	and	r24, r24
    4d2e:	69 f0       	breq	.+26     	; 0x4d4a <_ZN4MIDI10setFeatureEhh+0x3c>
        return false;

    if (featureID == midiFeatureRunningStatus)    {
    4d30:	d1 30       	cpi	r29, 0x01	; 1
    4d32:	59 f4       	brne	.+22     	; 0x4d4a <_ZN4MIDI10setFeatureEhh+0x3c>

        //tell hwMIDI object that we've changed this setting
        newValue ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();
    4d34:	11 23       	and	r17, r17
    4d36:	29 f0       	breq	.+10     	; 0x4d42 <_ZN4MIDI10setFeatureEhh+0x34>
    4d38:	81 ea       	ldi	r24, 0xA1	; 161
    4d3a:	93 e0       	ldi	r25, 0x03	; 3
    4d3c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN6HWmidi19enableRunningStatusEv>
    4d40:	04 c0       	rjmp	.+8      	; 0x4d4a <_ZN4MIDI10setFeatureEhh+0x3c>
    4d42:	81 ea       	ldi	r24, 0xA1	; 161
    4d44:	93 e0       	ldi	r25, 0x03	; 3
    4d46:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN6HWmidi20disableRunningStatusEv>

    }   return true;

}
    4d4a:	8c 2f       	mov	r24, r28
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	08 95       	ret

00004d56 <_ZN4MIDI12setParameterEhhh>:

bool MIDI::setParameter(uint8_t messageType, uint8_t parameterID, uint8_t newValue) {
    4d56:	34 2f       	mov	r19, r20

    switch(messageType) {
    4d58:	66 23       	and	r22, r22
    4d5a:	19 f0       	breq	.+6      	; 0x4d62 <_ZN4MIDI12setParameterEhhh+0xc>
    4d5c:	61 30       	cpi	r22, 0x01	; 1
    4d5e:	31 f0       	breq	.+12     	; 0x4d6c <_ZN4MIDI12setParameterEhhh+0x16>
    4d60:	0a c0       	rjmp	.+20     	; 0x4d76 <_ZN4MIDI12setParameterEhhh+0x20>

        case midiFeatureConf:
        return setFeature(parameterID, newValue);
    4d62:	42 2f       	mov	r20, r18
    4d64:	63 2f       	mov	r22, r19
    4d66:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <_ZN4MIDI10setFeatureEhh>
    4d6a:	08 95       	ret
        break;

        case midiChannelConf:
        return setMIDIchannel(parameterID, newValue);
    4d6c:	42 2f       	mov	r20, r18
    4d6e:	63 2f       	mov	r22, r19
    4d70:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <_ZN4MIDI14setMIDIchannelEhh>
    4d74:	08 95       	ret
        break;

    }   return false;
    4d76:	80 e0       	ldi	r24, 0x00	; 0

}
    4d78:	08 95       	ret

00004d7a <_Z5onGethhh>:

}

uint8_t onGet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    4d7a:	82 30       	cpi	r24, 0x02	; 2
    4d7c:	a9 f0       	breq	.+42     	; 0x4da8 <_Z5onGethhh+0x2e>
    4d7e:	28 f4       	brcc	.+10     	; 0x4d8a <_Z5onGethhh+0x10>
    4d80:	88 23       	and	r24, r24
    4d82:	41 f0       	breq	.+16     	; 0x4d94 <_Z5onGethhh+0x1a>
    4d84:	81 30       	cpi	r24, 0x01	; 1
    4d86:	59 f0       	breq	.+22     	; 0x4d9e <_Z5onGethhh+0x24>
    4d88:	1e c0       	rjmp	.+60     	; 0x4dc6 <_Z5onGethhh+0x4c>
    4d8a:	83 30       	cpi	r24, 0x03	; 3
    4d8c:	91 f0       	breq	.+36     	; 0x4db2 <_Z5onGethhh+0x38>
    4d8e:	84 30       	cpi	r24, 0x04	; 4
    4d90:	a9 f0       	breq	.+42     	; 0x4dbc <_Z5onGethhh+0x42>
    4d92:	19 c0       	rjmp	.+50     	; 0x4dc6 <_Z5onGethhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.getParameter(messageSubtype, parameter);
    4d94:	86 e0       	ldi	r24, 0x06	; 6
    4d96:	97 e0       	ldi	r25, 0x07	; 7
    4d98:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN4MIDI12getParameterEhh>
    4d9c:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.getParameter(messageSubtype, parameter);
    4d9e:	82 eb       	ldi	r24, 0xB2	; 178
    4da0:	96 e0       	ldi	r25, 0x06	; 6
    4da2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_ZN7Buttons12getParameterEhh>
    4da6:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.getParameter(messageSubtype, parameter);
    4da8:	84 e0       	ldi	r24, 0x04	; 4
    4daa:	97 e0       	ldi	r25, 0x07	; 7
    4dac:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <_ZN8Encoders12getParameterEhh>
    4db0:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.getParameter(messageSubtype, parameter);
    4db2:	8d e0       	ldi	r24, 0x0D	; 13
    4db4:	95 e0       	ldi	r25, 0x05	; 5
    4db6:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN6Analog12getParameterEhh>
    4dba:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.getParameter(messageSubtype, parameter);
    4dbc:	85 e0       	ldi	r24, 0x05	; 5
    4dbe:	97 e0       	ldi	r25, 0x07	; 7
    4dc0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_ZN4LEDs12getParameterEhh>
    4dc4:	08 95       	ret
        break;

    } return INVALID_VALUE;
    4dc6:	80 e8       	ldi	r24, 0x80	; 128

}
    4dc8:	08 95       	ret

00004dca <_Z5onSethhhh>:

bool onSet(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter, uint8_t newParameter)   {

    switch(messageType) {
    4dca:	82 30       	cpi	r24, 0x02	; 2
    4dcc:	a9 f0       	breq	.+42     	; 0x4df8 <_Z5onSethhhh+0x2e>
    4dce:	28 f4       	brcc	.+10     	; 0x4dda <_Z5onSethhhh+0x10>
    4dd0:	88 23       	and	r24, r24
    4dd2:	41 f0       	breq	.+16     	; 0x4de4 <_Z5onSethhhh+0x1a>
    4dd4:	81 30       	cpi	r24, 0x01	; 1
    4dd6:	59 f0       	breq	.+22     	; 0x4dee <_Z5onSethhhh+0x24>
    4dd8:	1e c0       	rjmp	.+60     	; 0x4e16 <_Z5onSethhhh+0x4c>
    4dda:	83 30       	cpi	r24, 0x03	; 3
    4ddc:	91 f0       	breq	.+36     	; 0x4e02 <_Z5onSethhhh+0x38>
    4dde:	84 30       	cpi	r24, 0x04	; 4
    4de0:	a9 f0       	breq	.+42     	; 0x4e0c <_Z5onSethhhh+0x42>
    4de2:	19 c0       	rjmp	.+50     	; 0x4e16 <_Z5onSethhhh+0x4c>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, newParameter);
    4de4:	86 e0       	ldi	r24, 0x06	; 6
    4de6:	97 e0       	ldi	r25, 0x07	; 7
    4de8:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_ZN4MIDI12setParameterEhhh>
    4dec:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, newParameter);
    4dee:	82 eb       	ldi	r24, 0xB2	; 178
    4df0:	96 e0       	ldi	r25, 0x06	; 6
    4df2:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <_ZN7Buttons12setParameterEhhh>
    4df6:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, newParameter);
    4df8:	84 e0       	ldi	r24, 0x04	; 4
    4dfa:	97 e0       	ldi	r25, 0x07	; 7
    4dfc:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_ZN8Encoders12setParameterEhhh>
    4e00:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return analog.setParameter(messageSubtype, parameter, newParameter);
    4e02:	8d e0       	ldi	r24, 0x0D	; 13
    4e04:	95 e0       	ldi	r25, 0x05	; 5
    4e06:	0e 94 51 19 	call	0x32a2	; 0x32a2 <_ZN6Analog12setParameterEhhh>
    4e0a:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, newParameter);
    4e0c:	85 e0       	ldi	r24, 0x05	; 5
    4e0e:	97 e0       	ldi	r25, 0x07	; 7
    4e10:	0e 94 9d 23 	call	0x473a	; 0x473a <_ZN4LEDs12setParameterEhhh>
    4e14:	08 95       	ret
        break;

    }   return false;
    4e16:	80 e0       	ldi	r24, 0x00	; 0

}
    4e18:	08 95       	ret

00004e1a <_Z7onResethhh>:

bool onReset(uint8_t messageType, uint8_t messageSubtype, uint8_t parameter) {

    switch(messageType) {
    4e1a:	82 30       	cpi	r24, 0x02	; 2
    4e1c:	b9 f0       	breq	.+46     	; 0x4e4c <_Z7onResethhh+0x32>
    4e1e:	28 f4       	brcc	.+10     	; 0x4e2a <_Z7onResethhh+0x10>
    4e20:	88 23       	and	r24, r24
    4e22:	41 f0       	breq	.+16     	; 0x4e34 <_Z7onResethhh+0x1a>
    4e24:	81 30       	cpi	r24, 0x01	; 1
    4e26:	61 f0       	breq	.+24     	; 0x4e40 <_Z7onResethhh+0x26>
    4e28:	23 c0       	rjmp	.+70     	; 0x4e70 <_Z7onResethhh+0x56>
    4e2a:	83 30       	cpi	r24, 0x03	; 3
    4e2c:	d9 f0       	breq	.+54     	; 0x4e64 <_Z7onResethhh+0x4a>
    4e2e:	84 30       	cpi	r24, 0x04	; 4
    4e30:	99 f0       	breq	.+38     	; 0x4e58 <_Z7onResethhh+0x3e>
    4e32:	1e c0       	rjmp	.+60     	; 0x4e70 <_Z7onResethhh+0x56>

        case CONF_MIDI_BLOCK:
        return midi.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    4e34:	20 e8       	ldi	r18, 0x80	; 128
    4e36:	86 e0       	ldi	r24, 0x06	; 6
    4e38:	97 e0       	ldi	r25, 0x07	; 7
    4e3a:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_ZN4MIDI12setParameterEhhh>
    4e3e:	08 95       	ret
        break;

        case CONF_BUTTON_BLOCK:
        return buttons.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    4e40:	20 e8       	ldi	r18, 0x80	; 128
    4e42:	82 eb       	ldi	r24, 0xB2	; 178
    4e44:	96 e0       	ldi	r25, 0x06	; 6
    4e46:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <_ZN7Buttons12setParameterEhhh>
    4e4a:	08 95       	ret
        break;

        case CONF_ENCODER_BLOCK:
        return analog.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    4e4c:	20 e8       	ldi	r18, 0x80	; 128
    4e4e:	8d e0       	ldi	r24, 0x0D	; 13
    4e50:	95 e0       	ldi	r25, 0x05	; 5
    4e52:	0e 94 51 19 	call	0x32a2	; 0x32a2 <_ZN6Analog12setParameterEhhh>
    4e56:	08 95       	ret
        break;

        case CONF_LED_BLOCK:
        return leds.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    4e58:	20 e8       	ldi	r18, 0x80	; 128
    4e5a:	85 e0       	ldi	r24, 0x05	; 5
    4e5c:	97 e0       	ldi	r25, 0x07	; 7
    4e5e:	0e 94 9d 23 	call	0x473a	; 0x473a <_ZN4LEDs12setParameterEhhh>
    4e62:	08 95       	ret
        break;

        case CONF_ANALOG_BLOCK:
        return encoders.setParameter(messageSubtype, parameter, DEFAULT_VALUE);
    4e64:	20 e8       	ldi	r18, 0x80	; 128
    4e66:	84 e0       	ldi	r24, 0x04	; 4
    4e68:	97 e0       	ldi	r25, 0x07	; 7
    4e6a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_ZN8Encoders12setParameterEhhh>
    4e6e:	08 95       	ret
        break;

    }   return false;
    4e70:	80 e0       	ldi	r24, 0x00	; 0

}
    4e72:	08 95       	ret

00004e74 <_Z12ledsOff_slowv>:
#include "hardware/reset/Reset.h"

void ledsOff_slow() {

    //turn off all leds slowly before reseting
    board.setLEDTransitionSpeed(1);
    4e74:	61 e0       	ldi	r22, 0x01	; 1
    4e76:	81 e4       	ldi	r24, 0x41	; 65
    4e78:	92 e0       	ldi	r25, 0x02	; 2
    4e7a:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN5Board21setLEDTransitionSpeedEh>
    leds.allLEDsOff();
    4e7e:	85 e0       	ldi	r24, 0x05	; 5
    4e80:	97 e0       	ldi	r25, 0x07	; 7
    4e82:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <_ZN4LEDs10allLEDsOffEv>
    //make sure all leds are off
    wait(1000);
    4e86:	68 ee       	ldi	r22, 0xE8	; 232
    4e88:	73 e0       	ldi	r23, 0x03	; 3
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z4waitm>
    4e92:	08 95       	ret

00004e94 <_Z8onRebootv>:

}

void onReboot()  {

    ledsOff_slow();
    4e94:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_Z12ledsOff_slowv>
    //this will reset the board into bootloader mode
    reboot(BTLDR_REBOOT);
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	0e 94 9d 13 	call	0x273a	; 0x273a <_Z6rebooth>
    4e9e:	08 95       	ret

00004ea0 <_Z14onFactoryResetv>:

}

void onFactoryReset()   {

    ledsOff_slow();
    4ea0:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_Z12ledsOff_slowv>
    configuration.factoryReset();
    4ea4:	8a e9       	ldi	r24, 0x9A	; 154
    4ea6:	91 e0       	ldi	r25, 0x01	; 1
    4ea8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN13Configuration12factoryResetEv>
    reboot(APP_REBOOT);
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	0e 94 9d 13 	call	0x273a	; 0x273a <_Z6rebooth>
    4eb2:	08 95       	ret

00004eb4 <_Z5setupv>:

}

void setup()    {

    configuration.init();
    4eb4:	8a e9       	ldi	r24, 0x9A	; 154
    4eb6:	91 e0       	ldi	r25, 0x01	; 1
    4eb8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN13Configuration4initEv>

    sysEx.setHandleReboot(onReboot);
    4ebc:	6a e4       	ldi	r22, 0x4A	; 74
    4ebe:	77 e2       	ldi	r23, 0x27	; 39
    4ec0:	8b e0       	ldi	r24, 0x0B	; 11
    4ec2:	97 e0       	ldi	r25, 0x07	; 7
    4ec4:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <_ZN5SysEx15setHandleRebootEPFvvE>
    sysEx.setHandleGet(onGet);
    4ec8:	6d eb       	ldi	r22, 0xBD	; 189
    4eca:	76 e2       	ldi	r23, 0x26	; 38
    4ecc:	8b e0       	ldi	r24, 0x0B	; 11
    4ece:	97 e0       	ldi	r25, 0x07	; 7
    4ed0:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <_ZN5SysEx12setHandleGetEPFhhhhE>
    sysEx.setHandleSet(onSet);
    4ed4:	65 ee       	ldi	r22, 0xE5	; 229
    4ed6:	76 e2       	ldi	r23, 0x26	; 38
    4ed8:	8b e0       	ldi	r24, 0x0B	; 11
    4eda:	97 e0       	ldi	r25, 0x07	; 7
    4edc:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <_ZN5SysEx12setHandleSetEPFbhhhhE>
    sysEx.setHandleReset(onReset);
    4ee0:	6d e0       	ldi	r22, 0x0D	; 13
    4ee2:	77 e2       	ldi	r23, 0x27	; 39
    4ee4:	8b e0       	ldi	r24, 0x0B	; 11
    4ee6:	97 e0       	ldi	r25, 0x07	; 7
    4ee8:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <_ZN5SysEx14setHandleResetEPFbhhhE>
    sysEx.setHandleFactoryReset(onFactoryReset);
    4eec:	60 e5       	ldi	r22, 0x50	; 80
    4eee:	77 e2       	ldi	r23, 0x27	; 39
    4ef0:	8b e0       	ldi	r24, 0x0B	; 11
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <_ZN5SysEx21setHandleFactoryResetEPFvvE>

    board.init();
    4ef8:	81 e4       	ldi	r24, 0x41	; 65
    4efa:	92 e0       	ldi	r25, 0x02	; 2
    4efc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN5Board4initEv>
    midi.init();
    4f00:	86 e0       	ldi	r24, 0x06	; 6
    4f02:	97 e0       	ldi	r25, 0x07	; 7
    4f04:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN4MIDI4initEv>
    buttons.init();
    4f08:	82 eb       	ldi	r24, 0xB2	; 178
    4f0a:	96 e0       	ldi	r25, 0x06	; 6
    4f0c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7Buttons4initEv>
    leds.init();
    4f10:	85 e0       	ldi	r24, 0x05	; 5
    4f12:	97 e0       	ldi	r25, 0x07	; 7
    4f14:	0e 94 4e 22 	call	0x449c	; 0x449c <_ZN4LEDs4initEv>
    analog.init();
    4f18:	8d e0       	ldi	r24, 0x0D	; 13
    4f1a:	95 e0       	ldi	r25, 0x05	; 5
    4f1c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN6Analog4initEv>
    encoders.init();
    4f20:	84 e0       	ldi	r24, 0x04	; 4
    4f22:	97 e0       	ldi	r25, 0x07	; 7
    4f24:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <_ZN8Encoders4initEv>
    4f28:	08 95       	ret

00004f2a <main>:

}

int main()  {

    setup();
    4f2a:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <_Z5setupv>
    while(1) { midi.checkInput(); buttons.update(); analog.update(); encoders.update(); }
    4f2e:	86 e0       	ldi	r24, 0x06	; 6
    4f30:	97 e0       	ldi	r25, 0x07	; 7
    4f32:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <_ZN4MIDI10checkInputEv>
    4f36:	82 eb       	ldi	r24, 0xB2	; 178
    4f38:	96 e0       	ldi	r25, 0x06	; 6
    4f3a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN7Buttons6updateEv>
    4f3e:	8d e0       	ldi	r24, 0x0D	; 13
    4f40:	95 e0       	ldi	r25, 0x05	; 5
    4f42:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_ZN6Analog6updateEv>
    4f46:	84 e0       	ldi	r24, 0x04	; 4
    4f48:	97 e0       	ldi	r25, 0x07	; 7
    4f4a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN8Encoders6updateEv>
    analog.init();
    encoders.init();

}

int main()  {
    4f4e:	ef cf       	rjmp	.-34     	; 0x4f2e <main+0x4>

00004f50 <_ZN5SysExC1Ev>:
#include <avr/eeprom.h>
#include "SysEx.h"
#include "../hardware/board/Board.h"

SysEx::SysEx()  {
    4f50:	fc 01       	movw	r30, r24

    sendRebootCallback          = NULL;
    4f52:	11 82       	std	Z+1, r1	; 0x01
    4f54:	10 82       	st	Z, r1
    sendFactoryResetCallback    = NULL;
    4f56:	13 82       	std	Z+3, r1	; 0x03
    4f58:	12 82       	std	Z+2, r1	; 0x02
    sendGetCallback             = NULL;
    4f5a:	15 82       	std	Z+5, r1	; 0x05
    4f5c:	14 82       	std	Z+4, r1	; 0x04
    sendSetCallback             = NULL;
    4f5e:	17 82       	std	Z+7, r1	; 0x07
    4f60:	16 82       	std	Z+6, r1	; 0x06
    sendResetCallback           = NULL;
    4f62:	11 86       	std	Z+9, r1	; 0x09
    4f64:	10 86       	std	Z+8, r1	; 0x08

    sysExEnabled = false;
    4f66:	12 86       	std	Z+10, r1	; 0x0a
    4f68:	ac 01       	movw	r20, r24
    4f6a:	4e 5e       	subi	r20, 0xEE	; 238
    4f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f6e:	bc 01       	movw	r22, r24
    4f70:	6c 51       	subi	r22, 0x1C	; 28
    4f72:	7f 4f       	sbci	r23, 0xFF	; 255

    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {

        messageInfo[i].messageTypeID = INVALID_VALUE;
    4f74:	80 e8       	ldi	r24, 0x80	; 128
    4f76:	fa 01       	movw	r30, r20
    4f78:	35 97       	sbiw	r30, 0x05	; 5
    4f7a:	80 83       	st	Z, r24
    4f7c:	31 96       	adiw	r30, 0x01	; 1
        messageInfo[i].numberOfSubtypes = INVALID_VALUE;
    4f7e:	80 83       	st	Z, r24
    4f80:	9a 01       	movw	r18, r20
    4f82:	24 5e       	subi	r18, 0xE4	; 228
    4f84:	3f 4f       	sbci	r19, 0xFF	; 255
    4f86:	fa 01       	movw	r30, r20
    4f88:	df 01       	movw	r26, r30
    4f8a:	13 97       	sbiw	r26, 0x03	; 3

        for (int j=0; j<MAX_NUMBER_OF_SUBTYPES; j++)    {

            for (int k=0; k<SUBTYPE_FIELDS; k++)
                messageInfo[i].subTypeInfo[j][k] = INVALID_VALUE;
    4f8c:	8c 93       	st	X, r24
    4f8e:	11 96       	adiw	r26, 0x01	; 1
    4f90:	8c 93       	st	X, r24
    4f92:	11 96       	adiw	r26, 0x01	; 1
    4f94:	8c 93       	st	X, r24
    4f96:	80 83       	st	Z, r24
    4f98:	34 96       	adiw	r30, 0x04	; 4
    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {

        messageInfo[i].messageTypeID = INVALID_VALUE;
        messageInfo[i].numberOfSubtypes = INVALID_VALUE;

        for (int j=0; j<MAX_NUMBER_OF_SUBTYPES; j++)    {
    4f9a:	e2 17       	cp	r30, r18
    4f9c:	f3 07       	cpc	r31, r19
    4f9e:	a1 f7       	brne	.-24     	; 0x4f88 <_ZN5SysExC1Ev+0x38>
    4fa0:	42 5e       	subi	r20, 0xE2	; 226
    4fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    sendSetCallback             = NULL;
    sendResetCallback           = NULL;

    sysExEnabled = false;

    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)    {
    4fa4:	46 17       	cp	r20, r22
    4fa6:	57 07       	cpc	r21, r23
    4fa8:	31 f7       	brne	.-52     	; 0x4f76 <_ZN5SysExC1Ev+0x26>

        }

    }

}
    4faa:	08 95       	ret

00004fac <_ZN5SysEx11disableConfEv>:

}

void SysEx::disableConf()   {

    sysExEnabled = false;
    4fac:	fc 01       	movw	r30, r24
    4fae:	12 86       	std	Z+10, r1	; 0x0a
    4fb0:	08 95       	ret

00004fb2 <_ZN5SysEx14addMessageTypeEhh>:

}

void SysEx::addMessageType(uint8_t messageID, uint8_t subTypes) {

    messageInfo[messageID].messageTypeID = messageID;
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	2e e1       	ldi	r18, 0x1E	; 30
    4fb6:	62 9f       	mul	r22, r18
    4fb8:	e0 0d       	add	r30, r0
    4fba:	f1 1d       	adc	r31, r1
    4fbc:	11 24       	eor	r1, r1
    4fbe:	65 87       	std	Z+13, r22	; 0x0d
    messageInfo[messageID].numberOfSubtypes = subTypes;
    4fc0:	46 87       	std	Z+14, r20	; 0x0e
    4fc2:	08 95       	ret

00004fc4 <_ZN5SysEx17addMessageSubTypeEhhhhh>:

}

void SysEx::addMessageSubType(uint8_t messageID, uint8_t subTypeId, uint8_t numberOfParameters, uint8_t minValue, uint8_t maxValue) {
    4fc4:	ef 92       	push	r14
    4fc6:	0f 93       	push	r16

    messageInfo[messageID].subTypeInfo[subTypeId][0] = numberOfParameters;
    4fc8:	e4 2f       	mov	r30, r20
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
    4fcc:	3e e1       	ldi	r19, 0x1E	; 30
    4fce:	63 9f       	mul	r22, r19
    4fd0:	b0 01       	movw	r22, r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	db 01       	movw	r26, r22
    4fd6:	34 e0       	ldi	r19, 0x04	; 4
    4fd8:	43 9f       	mul	r20, r19
    4fda:	a0 0d       	add	r26, r0
    4fdc:	b1 1d       	adc	r27, r1
    4fde:	11 24       	eor	r1, r1
    4fe0:	a8 0f       	add	r26, r24
    4fe2:	b9 1f       	adc	r27, r25
    4fe4:	1f 96       	adiw	r26, 0x0f	; 15
    4fe6:	2c 93       	st	X, r18
    4fe8:	1f 97       	sbiw	r26, 0x0f	; 15
    messageInfo[messageID].subTypeInfo[subTypeId][1] = minValue;
    4fea:	50 96       	adiw	r26, 0x10	; 16
    4fec:	0c 93       	st	X, r16
    messageInfo[messageID].subTypeInfo[subTypeId][2] = maxValue;
    4fee:	31 96       	adiw	r30, 0x01	; 1
    4ff0:	ee 0f       	add	r30, r30
    4ff2:	ff 1f       	adc	r31, r31
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	ff 1f       	adc	r31, r31
    4ff8:	6e 0f       	add	r22, r30
    4ffa:	7f 1f       	adc	r23, r31
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	e6 0f       	add	r30, r22
    5000:	f7 1f       	adc	r31, r23
    5002:	e5 86       	std	Z+13, r14	; 0x0d

}
    5004:	0f 91       	pop	r16
    5006:	ef 90       	pop	r14
    5008:	08 95       	ret

0000500a <_ZN5SysEx10checkBlockEh>:

bool SysEx::checkBlock(uint8_t messageType) {

    //check if message type is valid
    for (int i=0; i<MAX_NUMBER_OF_MESSAGES; i++)
        if (messageInfo[messageType].messageTypeID == messageType)
    500a:	fc 01       	movw	r30, r24
    500c:	2e e1       	ldi	r18, 0x1E	; 30
    500e:	62 9f       	mul	r22, r18
    5010:	e0 0d       	add	r30, r0
    5012:	f1 1d       	adc	r31, r1
    5014:	11 24       	eor	r1, r1
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	95 85       	ldd	r25, Z+13	; 0x0d
    501a:	69 13       	cpse	r22, r25
    501c:	80 e0       	ldi	r24, 0x00	; 0
            return true;

    return false;

}
    501e:	08 95       	ret

00005020 <_ZN5SysEx17checkNewParameterEhhhh>:
    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);

}

bool SysEx::checkNewParameter(uint8_t messageType, uint8_t messageSubType, uint8_t parameter, uint8_t newParameter) {
    5020:	0f 93       	push	r16

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    5022:	e4 2f       	mov	r30, r20
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	2e e1       	ldi	r18, 0x1E	; 30
    5028:	62 9f       	mul	r22, r18
    502a:	b0 01       	movw	r22, r0
    502c:	11 24       	eor	r1, r1
    502e:	db 01       	movw	r26, r22
    5030:	24 e0       	ldi	r18, 0x04	; 4
    5032:	42 9f       	mul	r20, r18
    5034:	a0 0d       	add	r26, r0
    5036:	b1 1d       	adc	r27, r1
    5038:	11 24       	eor	r1, r1
    503a:	a8 0f       	add	r26, r24
    503c:	b9 1f       	adc	r27, r25
    503e:	50 96       	adiw	r26, 0x10	; 16
    5040:	2c 91       	ld	r18, X
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];
    5042:	31 96       	adiw	r30, 0x01	; 1
    5044:	ee 0f       	add	r30, r30
    5046:	ff 1f       	adc	r31, r31
    5048:	ee 0f       	add	r30, r30
    504a:	ff 1f       	adc	r31, r31
    504c:	6e 0f       	add	r22, r30
    504e:	7f 1f       	adc	r23, r31
    5050:	fc 01       	movw	r30, r24
    5052:	e6 0f       	add	r30, r22
    5054:	f7 1f       	adc	r31, r23
    5056:	95 85       	ldd	r25, Z+13	; 0x0d

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    5058:	2f 3f       	cpi	r18, 0xFF	; 255
    505a:	71 f0       	breq	.+28     	; 0x5078 <_ZN5SysEx17checkNewParameterEhhhh+0x58>
    505c:	9f 3f       	cpi	r25, 0xFF	; 255
    505e:	39 f0       	breq	.+14     	; 0x506e <_ZN5SysEx17checkNewParameterEhhhh+0x4e>
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    5060:	02 17       	cp	r16, r18
    5062:	88 f0       	brcs	.+34     	; 0x5086 <_ZN5SysEx17checkNewParameterEhhhh+0x66>
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	90 17       	cp	r25, r16
    5068:	88 f4       	brcc	.+34     	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	0f c0       	rjmp	.+30     	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	02 17       	cp	r16, r18
    5072:	60 f4       	brcc	.+24     	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    5074:	80 e0       	ldi	r24, 0x00	; 0
    5076:	0a c0       	rjmp	.+20     	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
    5078:	9f 3f       	cpi	r25, 0xFF	; 255
    507a:	39 f0       	breq	.+14     	; 0x508a <_ZN5SysEx17checkNewParameterEhhhh+0x6a>
        return (newParameter <= maxValue);   //check only max value
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	90 17       	cp	r25, r16
    5080:	28 f4       	brcc	.+10     	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	03 c0       	rjmp	.+6      	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>

    uint8_t minValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MIN_BYTE];
    uint8_t maxValue = messageInfo[messageType].subTypeInfo[messageSubType][NEW_VALUE_MAX_BYTE];

    if ((minValue != IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return ((newParameter >= minValue) && (newParameter <= maxValue));
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	01 c0       	rjmp	.+2      	; 0x508c <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    else if ((minValue != IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return (newParameter >= minValue); //check only min value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue != IGNORE_NEW_VALUE))
        return (newParameter <= maxValue);   //check only max value
    else if ((minValue == IGNORE_NEW_VALUE) && (maxValue == IGNORE_NEW_VALUE))
        return true; //don't check new parameter
    508a:	81 e0       	ldi	r24, 0x01	; 1

    return false;

}
    508c:	0f 91       	pop	r16
    508e:	08 95       	ret

00005090 <_ZN5SysEx24generateMinMessageLenghtEhhhh>:


uint8_t SysEx::generateMinMessageLenght(uint8_t wish, uint8_t amount, uint8_t messageType, uint8_t messageSubType)    {
    5090:	0f 93       	push	r16

    //single parameter
    if (amount == AMOUNT_SINGLE)  {
    5092:	41 11       	cpse	r20, r1
    5094:	04 c0       	rjmp	.+8      	; 0x509e <_ZN5SysEx24generateMinMessageLenghtEhhhh+0xe>

        if ((wish == WISH_GET) ||
    5096:	6d 7f       	andi	r22, 0xFD	; 253
    5098:	b1 f0       	breq	.+44     	; 0x50c6 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x36>
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value
    509a:	8b e0       	ldi	r24, 0x0B	; 11
    509c:	19 c0       	rjmp	.+50     	; 0x50d0 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

        }   else if (amount == AMOUNT_ALL)   {
    509e:	41 30       	cpi	r20, 0x01	; 1
    50a0:	a1 f4       	brne	.+40     	; 0x50ca <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3a>

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
    50a2:	6d 7f       	andi	r22, 0xFD	; 253
    50a4:	a1 f0       	breq	.+40     	; 0x50ce <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3e>
            return ML_REQ_STANDARD;

        else    {                                                                   //set

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];
    50a6:	e0 2f       	mov	r30, r16
    50a8:	f0 e0       	ldi	r31, 0x00	; 0
    50aa:	ee 0f       	add	r30, r30
    50ac:	ff 1f       	adc	r31, r31
    50ae:	ee 0f       	add	r30, r30
    50b0:	ff 1f       	adc	r31, r31
    50b2:	3e e1       	ldi	r19, 0x1E	; 30
    50b4:	23 9f       	mul	r18, r19
    50b6:	e0 0d       	add	r30, r0
    50b8:	f1 1d       	adc	r31, r1
    50ba:	11 24       	eor	r1, r1
    50bc:	e8 0f       	add	r30, r24
    50be:	f9 1f       	adc	r31, r25
    50c0:	87 85       	ldd	r24, Z+15	; 0x0f
    50c2:	87 5f       	subi	r24, 0xF7	; 247
    50c4:	05 c0       	rjmp	.+10     	; 0x50d0 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

    //single parameter
    if (amount == AMOUNT_SINGLE)  {

        if ((wish == WISH_GET) ||
        (wish == WISH_RESTORE)) return ML_REQ_STANDARD + 1;  //get   //add 1 to length for parameter
    50c6:	8a e0       	ldi	r24, 0x0A	; 10
    50c8:	03 c0       	rjmp	.+6      	; 0x50d0 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>

            return ML_REQ_STANDARD + messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE];

        }

    }   else return 0;
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	01 c0       	rjmp	.+2      	; 0x50d0 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
        else                    return ML_REQ_STANDARD + 2;  //set   //add 2 to length for parameter and new value

        }   else if (amount == AMOUNT_ALL)   {

        if ((wish == WISH_GET) || (wish == WISH_RESTORE))             //get/restore
            return ML_REQ_STANDARD;
    50ce:	89 e0       	ldi	r24, 0x09	; 9

        }

    }   else return 0;

}
    50d0:	0f 91       	pop	r16
    50d2:	08 95       	ret

000050d4 <_ZN5SysEx9sendErrorE10sysExError>:

void SysEx::sendError(sysExError errorID)  {
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	00 d0       	rcall	.+0      	; 0x50de <_ZN5SysEx9sendErrorE10sysExError+0xa>
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <_ZN5SysEx9sendErrorE10sysExError+0xc>
    50e0:	1f 92       	push	r1
    50e2:	cd b7       	in	r28, 0x3d	; 61
    50e4:	de b7       	in	r29, 0x3e	; 62
    50e6:	8c 01       	movw	r16, r24
    //public function, interface objects can use this function directly
    //to override internal error checking

    uint8_t sysExResponse[5];

    sysExResponse[0] = SYS_EX_M_ID_0;
    50e8:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    50ea:	83 e5       	ldi	r24, 0x53	; 83
    50ec:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    50ee:	83 e4       	ldi	r24, 0x43	; 67
    50f0:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_NACK;
    50f2:	86 e4       	ldi	r24, 0x46	; 70
    50f4:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = errorID;
    50f6:	6d 83       	std	Y+5, r22	; 0x05

    midi.sendSysEx(sysExResponse, 5);
    50f8:	45 e0       	ldi	r20, 0x05	; 5
    50fa:	be 01       	movw	r22, r28
    50fc:	6f 5f       	subi	r22, 0xFF	; 255
    50fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5100:	86 e0       	ldi	r24, 0x06	; 6
    5102:	97 e0       	ldi	r25, 0x07	; 7
    5104:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN4MIDI9sendSysExEPhh>
    dataAvailable = false;
    5108:	f8 01       	movw	r30, r16
    510a:	14 86       	std	Z+12, r1	; 0x0c

}
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	1f 91       	pop	r17
    511c:	0f 91       	pop	r16
    511e:	08 95       	ret

00005120 <_ZN5SysEx20checkMessageValidityEPhh>:
    //data is processed
    dataAvailable = false;

}

bool SysEx::checkMessageValidity(uint8_t sysExArray[], uint8_t arrSize)  {
    5120:	7f 92       	push	r7
    5122:	8f 92       	push	r8
    5124:	9f 92       	push	r9
    5126:	af 92       	push	r10
    5128:	bf 92       	push	r11
    512a:	cf 92       	push	r12
    512c:	df 92       	push	r13
    512e:	ef 92       	push	r14
    5130:	ff 92       	push	r15
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	7c 01       	movw	r14, r24
    513c:	eb 01       	movw	r28, r22
    513e:	84 2e       	mov	r8, r20

    //check wish validity
    if (!checkWish(sysExArray[MS_WISH]))    {
    5140:	cc 80       	ldd	r12, Y+4	; 0x04
    5142:	82 e0       	ldi	r24, 0x02	; 2
    5144:	8c 15       	cp	r24, r12
    5146:	30 f4       	brcc	.+12     	; 0x5154 <_ZN5SysEx20checkMessageValidityEPhh+0x34>

        sendError(ERROR_WISH);
    5148:	61 e0       	ldi	r22, 0x01	; 1
    514a:	c7 01       	movw	r24, r14
    514c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5150:	10 e0       	ldi	r17, 0x00	; 0
    5152:	84 c0       	rjmp	.+264    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted amount is correct
    if (!checkAmount(sysExArray[MS_AMOUNT]))    {
    5154:	bd 80       	ldd	r11, Y+5	; 0x05
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	8b 15       	cp	r24, r11
    515a:	30 f4       	brcc	.+12     	; 0x5168 <_ZN5SysEx20checkMessageValidityEPhh+0x48>

        sendError(ERROR_AMOUNT);
    515c:	62 e0       	ldi	r22, 0x02	; 2
    515e:	c7 01       	movw	r24, r14
    5160:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5164:	10 e0       	ldi	r17, 0x00	; 0
    5166:	7a c0       	rjmp	.+244    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if message type is correct
    if (!checkBlock(sysExArray[MS_BLOCK]))    {
    5168:	de 80       	ldd	r13, Y+6	; 0x06
    516a:	6d 2d       	mov	r22, r13
    516c:	c7 01       	movw	r24, r14
    516e:	0e 94 05 28 	call	0x500a	; 0x500a <_ZN5SysEx10checkBlockEh>
    5172:	18 2f       	mov	r17, r24
    5174:	81 11       	cpse	r24, r1
    5176:	05 c0       	rjmp	.+10     	; 0x5182 <_ZN5SysEx20checkMessageValidityEPhh+0x62>

        sendError(ERROR_BLOCK);
    5178:	63 e0       	ldi	r22, 0x03	; 3
    517a:	c7 01       	movw	r24, r14
    517c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    5180:	6d c0       	rjmp	.+218    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    } else {

        //determine minimum message length based on asked parameters
        if (arrSize < generateMinMessageLenght(sysExArray[MS_WISH], sysExArray[MS_AMOUNT],sysExArray[MS_BLOCK], sysExArray[MS_SECTION]))    {
    5182:	7f 80       	ldd	r7, Y+7	; 0x07
    5184:	07 2d       	mov	r16, r7
    5186:	2d 2d       	mov	r18, r13
    5188:	4b 2d       	mov	r20, r11
    518a:	6c 2d       	mov	r22, r12
    518c:	c7 01       	movw	r24, r14
    518e:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN5SysEx24generateMinMessageLenghtEhhhh>
    5192:	88 16       	cp	r8, r24
    5194:	30 f4       	brcc	.+12     	; 0x51a2 <_ZN5SysEx20checkMessageValidityEPhh+0x82>

            sendError(ERROR_MESSAGE_LENGTH);
    5196:	67 e0       	ldi	r22, 0x07	; 7
    5198:	c7 01       	movw	r24, r14
    519a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    519e:	10 e0       	ldi	r17, 0x00	; 0
    51a0:	5d c0       	rjmp	.+186    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

}

bool SysEx::checkSection(uint8_t messageType, uint8_t messageSubType)    {

    return (messageSubType < messageInfo[messageType].numberOfSubtypes);
    51a2:	4d 2d       	mov	r20, r13
    51a4:	50 e0       	ldi	r21, 0x00	; 0
    51a6:	f7 01       	movw	r30, r14
    51a8:	8e e1       	ldi	r24, 0x1E	; 30
    51aa:	d8 9e       	mul	r13, r24
    51ac:	e0 0d       	add	r30, r0
    51ae:	f1 1d       	adc	r31, r1
    51b0:	11 24       	eor	r1, r1
        }

    }

    //check if subtype is correct
    if (!checkSection(sysExArray[MS_BLOCK], sysExArray[MS_SECTION])) {
    51b2:	86 85       	ldd	r24, Z+14	; 0x0e
    51b4:	78 16       	cp	r7, r24
    51b6:	30 f0       	brcs	.+12     	; 0x51c4 <_ZN5SysEx20checkMessageValidityEPhh+0xa4>

        sendError(ERROR_SECTION);
    51b8:	64 e0       	ldi	r22, 0x04	; 4
    51ba:	c7 01       	movw	r24, r14
    51bc:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
        return false;
    51c0:	10 e0       	ldi	r17, 0x00	; 0
    51c2:	4c c0       	rjmp	.+152    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {
    51c4:	b1 10       	cpse	r11, r1
    51c6:	28 c0       	rjmp	.+80     	; 0x5218 <_ZN5SysEx20checkMessageValidityEPhh+0xf8>

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    51c8:	28 85       	ldd	r18, Y+8	; 0x08
}

bool SysEx::checkParameterID(uint8_t messageType, uint8_t messageSubType, uint8_t parameter)   {

    //message type and subtype passed validation, check parameter ID
    return (parameter < messageInfo[messageType].subTypeInfo[messageSubType][PARAMETERS_BYTE]);
    51ca:	8e e1       	ldi	r24, 0x1E	; 30
    51cc:	84 9f       	mul	r24, r20
    51ce:	f0 01       	movw	r30, r0
    51d0:	85 9f       	mul	r24, r21
    51d2:	f0 0d       	add	r31, r0
    51d4:	11 24       	eor	r1, r1
    51d6:	84 e0       	ldi	r24, 0x04	; 4
    51d8:	78 9e       	mul	r7, r24
    51da:	e0 0d       	add	r30, r0
    51dc:	f1 1d       	adc	r31, r1
    51de:	11 24       	eor	r1, r1
    51e0:	ee 0d       	add	r30, r14
    51e2:	ff 1d       	adc	r31, r15
    }

    //check if wanted parameter is valid only if single parameter is specified
    if (sysExArray[MS_AMOUNT] == AMOUNT_SINGLE)   {

        if (!checkParameterID(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID]))  {
    51e4:	87 85       	ldd	r24, Z+15	; 0x0f
    51e6:	28 17       	cp	r18, r24
    51e8:	30 f0       	brcs	.+12     	; 0x51f6 <_ZN5SysEx20checkMessageValidityEPhh+0xd6>

            sendError(ERROR_PARAMETER);
    51ea:	65 e0       	ldi	r22, 0x05	; 5
    51ec:	c7 01       	movw	r24, r14
    51ee:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
            return false;
    51f2:	10 e0       	ldi	r17, 0x00	; 0
    51f4:	33 c0       	rjmp	.+102    	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

        }

        //if message wish is set, check new parameter
        if (sysExArray[MS_WISH] == WISH_SET) {
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	c8 12       	cpse	r12, r24
    51fa:	30 c0       	rjmp	.+96     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], sysExArray[MS_PARAMETER_ID], sysExArray[MS_NEW_PARAMETER_ID_SINGLE]))  {
    51fc:	09 85       	ldd	r16, Y+9	; 0x09
    51fe:	47 2d       	mov	r20, r7
    5200:	6d 2d       	mov	r22, r13
    5202:	c7 01       	movw	r24, r14
    5204:	0e 94 10 28 	call	0x5020	; 0x5020 <_ZN5SysEx17checkNewParameterEhhhh>
    5208:	18 2f       	mov	r17, r24
    520a:	81 11       	cpse	r24, r1
    520c:	27 c0       	rjmp	.+78     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

                sendError(ERROR_NEW_PARAMETER);
    520e:	66 e0       	ldi	r22, 0x06	; 6
    5210:	c7 01       	movw	r24, r14
    5212:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    5216:	22 c0       	rjmp	.+68     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    } else {

        //all parameters

        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	c8 12       	cpse	r12, r24
    521c:	1f c0       	rjmp	.+62     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    521e:	91 2c       	mov	r9, r1
    5220:	89 e0       	ldi	r24, 0x09	; 9
    5222:	88 1a       	sub	r8, r24
    5224:	91 08       	sbc	r9, r1
    5226:	18 14       	cp	r1, r8
    5228:	19 04       	cpc	r1, r9
    522a:	c4 f4       	brge	.+48     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
    522c:	28 96       	adiw	r28, 0x08	; 8
    522e:	a1 2c       	mov	r10, r1
    5230:	b1 2c       	mov	r11, r1

            if (!checkNewParameter(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], i, sysExArray[arrayIndex+i]))   {
    5232:	09 91       	ld	r16, Y+
    5234:	2a 2d       	mov	r18, r10
    5236:	47 2d       	mov	r20, r7
    5238:	6d 2d       	mov	r22, r13
    523a:	c7 01       	movw	r24, r14
    523c:	0e 94 10 28 	call	0x5020	; 0x5020 <_ZN5SysEx17checkNewParameterEhhhh>
    5240:	18 2f       	mov	r17, r24
    5242:	81 11       	cpse	r24, r1
    5244:	05 c0       	rjmp	.+10     	; 0x5250 <_ZN5SysEx20checkMessageValidityEPhh+0x130>

                sendError(ERROR_NEW_PARAMETER);
    5246:	66 e0       	ldi	r22, 0x06	; 6
    5248:	c7 01       	movw	r24, r14
    524a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
                return false;
    524e:	06 c0       	rjmp	.+12     	; 0x525c <_ZN5SysEx20checkMessageValidityEPhh+0x13c>
        //check each new parameter for set command
        if (sysExArray[MS_WISH] == WISH_SET) {

            uint8_t arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            for (int i=0; i<(arrSize - arrayIndex)-1; i++)
    5250:	8f ef       	ldi	r24, 0xFF	; 255
    5252:	a8 1a       	sub	r10, r24
    5254:	b8 0a       	sbc	r11, r24
    5256:	a8 14       	cp	r10, r8
    5258:	b9 04       	cpc	r11, r9
    525a:	5c f3       	brlt	.-42     	; 0x5232 <_ZN5SysEx20checkMessageValidityEPhh+0x112>

    }

    return true;

}
    525c:	81 2f       	mov	r24, r17
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	ff 90       	pop	r15
    5268:	ef 90       	pop	r14
    526a:	df 90       	pop	r13
    526c:	cf 90       	pop	r12
    526e:	bf 90       	pop	r11
    5270:	af 90       	pop	r10
    5272:	9f 90       	pop	r9
    5274:	8f 90       	pop	r8
    5276:	7f 90       	pop	r7
    5278:	08 95       	ret

0000527a <_ZN5SysEx17sendHelloResponseEv>:
    midi.sendSysEx(sysExResponse, 5);
    dataAvailable = false;

}

void SysEx::sendHelloResponse()   {
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    5282:	27 97       	sbiw	r28, 0x07	; 7
    5284:	0f b6       	in	r0, 0x3f	; 63
    5286:	f8 94       	cli
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	cd bf       	out	0x3d, r28	; 61

    uint8_t sysExAckResponse[7];

    sysExAckResponse[0] = SYS_EX_M_ID_0;
    528e:	19 82       	std	Y+1, r1	; 0x01
    sysExAckResponse[1] = SYS_EX_M_ID_1;
    5290:	23 e5       	ldi	r18, 0x53	; 83
    5292:	2a 83       	std	Y+2, r18	; 0x02
    sysExAckResponse[2] = SYS_EX_M_ID_2;
    5294:	23 e4       	ldi	r18, 0x43	; 67
    5296:	2b 83       	std	Y+3, r18	; 0x03
    sysExAckResponse[3] = RESPONSE_ACK;
    5298:	21 e4       	ldi	r18, 0x41	; 65
    529a:	2c 83       	std	Y+4, r18	; 0x04
    sysExAckResponse[4] = VERSION_BYTE_0;
    529c:	21 e0       	ldi	r18, 0x01	; 1
    529e:	2d 83       	std	Y+5, r18	; 0x05
    sysExAckResponse[5] = VERSION_BYTE_1;
    52a0:	1e 82       	std	Y+6, r1	; 0x06
    sysExAckResponse[6] = VERSION_BYTE_2;
    52a2:	1f 82       	std	Y+7, r1	; 0x07

    sysExEnabled = true;
    52a4:	fc 01       	movw	r30, r24
    52a6:	22 87       	std	Z+10, r18	; 0x0a

    midi.sendSysEx(sysExAckResponse, 7);
    52a8:	47 e0       	ldi	r20, 0x07	; 7
    52aa:	be 01       	movw	r22, r28
    52ac:	6f 5f       	subi	r22, 0xFF	; 255
    52ae:	7f 4f       	sbci	r23, 0xFF	; 255
    52b0:	86 e0       	ldi	r24, 0x06	; 6
    52b2:	97 e0       	ldi	r25, 0x07	; 7
    52b4:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN4MIDI9sendSysExEPhh>

}
    52b8:	27 96       	adiw	r28, 0x07	; 7
    52ba:	0f b6       	in	r0, 0x3f	; 63
    52bc:	f8 94       	cli
    52be:	de bf       	out	0x3e, r29	; 62
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	cd bf       	out	0x3d, r28	; 61
    52c4:	df 91       	pop	r29
    52c6:	cf 91       	pop	r28
    52c8:	08 95       	ret

000052ca <_ZN5SysEx12checkSpecialEPhh>:
    messageInfo[messageID].subTypeInfo[subTypeId][1] = minValue;
    messageInfo[messageID].subTypeInfo[subTypeId][2] = maxValue;

}

bool SysEx::checkSpecial(uint8_t *array, uint8_t size) {
    52ca:	cf 93       	push	r28

    if (size == ML_SPECIAL)   {
    52cc:	46 30       	cpi	r20, 0x06	; 6
    52ce:	09 f5       	brne	.+66     	; 0x5312 <_ZN5SysEx12checkSpecialEPhh+0x48>
    52d0:	db 01       	movw	r26, r22
    52d2:	fc 01       	movw	r30, r24

        if (array[size-2] == REBOOT_STRING)  {   //reset message
    52d4:	14 96       	adiw	r26, 0x04	; 4
    52d6:	2c 91       	ld	r18, X
    52d8:	2f 37       	cpi	r18, 0x7F	; 127
    52da:	69 f4       	brne	.+26     	; 0x52f6 <_ZN5SysEx12checkSpecialEPhh+0x2c>

            if (sysExEnabled)
    52dc:	c2 85       	ldd	r28, Z+10	; 0x0a
    52de:	cc 23       	and	r28, r28
    52e0:	29 f0       	breq	.+10     	; 0x52ec <_ZN5SysEx12checkSpecialEPhh+0x22>
                sendRebootCallback();
    52e2:	01 90       	ld	r0, Z+
    52e4:	f0 81       	ld	r31, Z
    52e6:	e0 2d       	mov	r30, r0
    52e8:	09 95       	icall
    52ea:	16 c0       	rjmp	.+44     	; 0x5318 <_ZN5SysEx12checkSpecialEPhh+0x4e>
            else sendError(ERROR_HANDSHAKE);
    52ec:	60 e0       	ldi	r22, 0x00	; 0
    52ee:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
            return true;
    52f2:	c1 e0       	ldi	r28, 0x01	; 1
    52f4:	11 c0       	rjmp	.+34     	; 0x5318 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == HELLO_STRING)   {
    52f6:	28 34       	cpi	r18, 0x48	; 72
    52f8:	21 f4       	brne	.+8      	; 0x5302 <_ZN5SysEx12checkSpecialEPhh+0x38>

            //hello message, necessary for allowing configuration
            sendHelloResponse();
    52fa:	0e 94 3d 29 	call	0x527a	; 0x527a <_ZN5SysEx17sendHelloResponseEv>
            return true;
    52fe:	c1 e0       	ldi	r28, 0x01	; 1
    5300:	0b c0       	rjmp	.+22     	; 0x5318 <_ZN5SysEx12checkSpecialEPhh+0x4e>

        }   else if (array[size-2] == FACTORY_RESET_STRING) {
    5302:	24 34       	cpi	r18, 0x44	; 68
    5304:	41 f4       	brne	.+16     	; 0x5316 <_ZN5SysEx12checkSpecialEPhh+0x4c>

            sendFactoryResetCallback();
    5306:	02 80       	ldd	r0, Z+2	; 0x02
    5308:	f3 81       	ldd	r31, Z+3	; 0x03
    530a:	e0 2d       	mov	r30, r0
    530c:	09 95       	icall

        }

    }   return false;
    530e:	c0 e0       	ldi	r28, 0x00	; 0
    5310:	03 c0       	rjmp	.+6      	; 0x5318 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5312:	c0 e0       	ldi	r28, 0x00	; 0
    5314:	01 c0       	rjmp	.+2      	; 0x5318 <_ZN5SysEx12checkSpecialEPhh+0x4e>
    5316:	c0 e0       	ldi	r28, 0x00	; 0

}
    5318:	8c 2f       	mov	r24, r28
    531a:	cf 91       	pop	r28
    531c:	08 95       	ret

0000531e <_ZN5SysEx15sendComponentIDEhh>:

    midi.sendSysEx(sysExAckResponse, 7);

}

void SysEx::sendComponentID(uint8_t blockID, uint8_t componentID)   {
    531e:	cf 93       	push	r28
    5320:	df 93       	push	r29
    5322:	00 d0       	rcall	.+0      	; 0x5324 <_ZN5SysEx15sendComponentIDEhh+0x6>
    5324:	00 d0       	rcall	.+0      	; 0x5326 <_ZN5SysEx15sendComponentIDEhh+0x8>
    5326:	00 d0       	rcall	.+0      	; 0x5328 <_ZN5SysEx15sendComponentIDEhh+0xa>
    5328:	cd b7       	in	r28, 0x3d	; 61
    532a:	de b7       	in	r29, 0x3e	; 62

    uint8_t sysExResponse[6];

    sysExResponse[0] = SYS_EX_M_ID_0;
    532c:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    532e:	83 e5       	ldi	r24, 0x53	; 83
    5330:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5332:	83 e4       	ldi	r24, 0x43	; 67
    5334:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = COMPONENT_INFO_STRING;
    5336:	89 e4       	ldi	r24, 0x49	; 73
    5338:	8c 83       	std	Y+4, r24	; 0x04
    sysExResponse[4] = blockID;
    533a:	6d 83       	std	Y+5, r22	; 0x05
    sysExResponse[5] = componentID;
    533c:	4e 83       	std	Y+6, r20	; 0x06

    midi.sendSysEx(sysExResponse, 6);
    533e:	46 e0       	ldi	r20, 0x06	; 6
    5340:	be 01       	movw	r22, r28
    5342:	6f 5f       	subi	r22, 0xFF	; 255
    5344:	7f 4f       	sbci	r23, 0xFF	; 255
    5346:	86 e0       	ldi	r24, 0x06	; 6
    5348:	97 e0       	ldi	r25, 0x07	; 7
    534a:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN4MIDI9sendSysExEPhh>

}
    534e:	26 96       	adiw	r28, 0x06	; 6
    5350:	0f b6       	in	r0, 0x3f	; 63
    5352:	f8 94       	cli
    5354:	de bf       	out	0x3e, r29	; 62
    5356:	0f be       	out	0x3f, r0	; 63
    5358:	cd bf       	out	0x3d, r28	; 61
    535a:	df 91       	pop	r29
    535c:	cf 91       	pop	r28
    535e:	08 95       	ret

00005360 <_ZN5SysEx12sendResponseEPhh>:

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {
    5360:	8f 92       	push	r8
    5362:	9f 92       	push	r9
    5364:	af 92       	push	r10
    5366:	bf 92       	push	r11
    5368:	cf 92       	push	r12
    536a:	df 92       	push	r13
    536c:	ef 92       	push	r14
    536e:	ff 92       	push	r15
    5370:	0f 93       	push	r16
    5372:	1f 93       	push	r17
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
    537c:	c8 54       	subi	r28, 0x48	; 72
    537e:	d1 09       	sbc	r29, r1
    5380:	0f b6       	in	r0, 0x3f	; 63
    5382:	f8 94       	cli
    5384:	de bf       	out	0x3e, r29	; 62
    5386:	0f be       	out	0x3f, r0	; 63
    5388:	cd bf       	out	0x3d, r28	; 61
    538a:	4c 01       	movw	r8, r24
    538c:	6b 01       	movw	r12, r22
    uint8_t sysExResponse[64+ML_RES_BASIC];
    uint8_t arrayLength = 0;
    uint8_t arrayIndex = 0;
    bool eepromError = false;

    sysExResponse[0] = SYS_EX_M_ID_0;
    538e:	19 82       	std	Y+1, r1	; 0x01
    sysExResponse[1] = SYS_EX_M_ID_1;
    5390:	83 e5       	ldi	r24, 0x53	; 83
    5392:	8a 83       	std	Y+2, r24	; 0x02
    sysExResponse[2] = SYS_EX_M_ID_2;
    5394:	83 e4       	ldi	r24, 0x43	; 67
    5396:	8b 83       	std	Y+3, r24	; 0x03
    sysExResponse[3] = RESPONSE_ACK;
    5398:	81 e4       	ldi	r24, 0x41	; 65
    539a:	8c 83       	std	Y+4, r24	; 0x04

    if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    539c:	db 01       	movw	r26, r22
    539e:	15 96       	adiw	r26, 0x05	; 5
    53a0:	8c 91       	ld	r24, X
    53a2:	15 97       	sbiw	r26, 0x05	; 5
    53a4:	81 30       	cpi	r24, 0x01	; 1
    53a6:	09 f0       	breq	.+2      	; 0x53aa <_ZN5SysEx12sendResponseEPhh+0x4a>
    53a8:	ac c0       	rjmp	.+344    	; 0x5502 <_ZN5SysEx12sendResponseEPhh+0x1a2>

        uint8_t messageType = sysExArray[MS_BLOCK];
        uint8_t messageSubtype = sysExArray[MS_SECTION];
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];
    53aa:	17 96       	adiw	r26, 0x07	; 7
    53ac:	ec 91       	ld	r30, X
    53ae:	17 97       	sbiw	r26, 0x07	; 7
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	16 96       	adiw	r26, 0x06	; 6
    53b4:	9c 91       	ld	r25, X
    53b6:	ee 0f       	add	r30, r30
    53b8:	ff 1f       	adc	r31, r31
    53ba:	ee 0f       	add	r30, r30
    53bc:	ff 1f       	adc	r31, r31
    53be:	be e1       	ldi	r27, 0x1E	; 30
    53c0:	9b 9f       	mul	r25, r27
    53c2:	e0 0d       	add	r30, r0
    53c4:	f1 1d       	adc	r31, r1
    53c6:	11 24       	eor	r1, r1
    53c8:	e8 0d       	add	r30, r8
    53ca:	f9 1d       	adc	r31, r9
    53cc:	e7 84       	ldd	r14, Z+15	; 0x0f

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    53ce:	fb 01       	movw	r30, r22
    53d0:	94 81       	ldd	r25, Z+4	; 0x04
    53d2:	91 30       	cpi	r25, 0x01	; 1
    53d4:	81 f1       	breq	.+96     	; 0x5436 <_ZN5SysEx12sendResponseEPhh+0xd6>
    53d6:	50 f0       	brcs	.+20     	; 0x53ec <_ZN5SysEx12sendResponseEPhh+0x8c>
    53d8:	92 30       	cpi	r25, 0x02	; 2
    53da:	09 f4       	brne	.+2      	; 0x53de <_ZN5SysEx12sendResponseEPhh+0x7e>
    53dc:	5c c0       	rjmp	.+184    	; 0x5496 <_ZN5SysEx12sendResponseEPhh+0x136>
    53de:	7f c0       	rjmp	.+254    	; 0x54de <_ZN5SysEx12sendResponseEPhh+0x17e>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];
    53e0:	d6 01       	movw	r26, r12
    53e2:	18 96       	adiw	r26, 0x08	; 8
    53e4:	fc 90       	ld	r15, X

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    53e6:	ee 24       	eor	r14, r14
    53e8:	e3 94       	inc	r14
    53ea:	03 c0       	rjmp	.+6      	; 0x53f2 <_ZN5SysEx12sendResponseEPhh+0x92>

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    53ec:	ee 20       	and	r14, r14
    53ee:	f1 f0       	breq	.+60     	; 0x542c <_ZN5SysEx12sendResponseEPhh+0xcc>

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
    53f0:	f1 2c       	mov	r15, r1
    53f2:	8e 01       	movw	r16, r28
    53f4:	0b 5f       	subi	r16, 0xFB	; 251
    53f6:	1f 4f       	sbci	r17, 0xFF	; 255
    53f8:	ce 01       	movw	r24, r28
    53fa:	8e 0d       	add	r24, r14
    53fc:	91 1d       	adc	r25, r1
    53fe:	fc 01       	movw	r30, r24
    5400:	35 96       	adiw	r30, 0x05	; 5
    5402:	5f 01       	movw	r10, r30
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
    5404:	d4 01       	movw	r26, r8
    5406:	14 96       	adiw	r26, 0x04	; 4
    5408:	ed 91       	ld	r30, X+
    540a:	fc 91       	ld	r31, X
    540c:	15 97       	sbiw	r26, 0x05	; 5
    540e:	4f 2d       	mov	r20, r15
    5410:	d6 01       	movw	r26, r12
    5412:	17 96       	adiw	r26, 0x07	; 7
    5414:	6c 91       	ld	r22, X
    5416:	17 97       	sbiw	r26, 0x07	; 7
    5418:	16 96       	adiw	r26, 0x06	; 6
    541a:	8c 91       	ld	r24, X
    541c:	09 95       	icall
    541e:	f8 01       	movw	r30, r16
    5420:	81 93       	st	Z+, r24
    5422:	8f 01       	movw	r16, r30
            _parameter++;
    5424:	f3 94       	inc	r15

        case WISH_GET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)    _parameter = 0;
        else                                        _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++) {
    5426:	ea 15       	cp	r30, r10
    5428:	fb 05       	cpc	r31, r11
    542a:	61 f7       	brne	.-40     	; 0x5404 <_ZN5SysEx12sendResponseEPhh+0xa4>

            sysExResponse[i+ML_SET_RESTORE] = sendGetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter);
            _parameter++;

        }   arrayLength = ML_SET_RESTORE+componentNr;
    542c:	44 e0       	ldi	r20, 0x04	; 4
    542e:	4e 0d       	add	r20, r14
        break;
    5430:	77 c0       	rjmp	.+238    	; 0x5520 <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5432:	ee 24       	eor	r14, r14
    5434:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE+componentNr;
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {
    5436:	81 30       	cpi	r24, 0x01	; 1
    5438:	29 f0       	breq	.+10     	; 0x5444 <_ZN5SysEx12sendResponseEPhh+0xe4>
            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;

            }   else    {

            _parameter = sysExArray[MS_PARAMETER_ID];
    543a:	d6 01       	movw	r26, r12
    543c:	18 96       	adiw	r26, 0x08	; 8
    543e:	fc 90       	ld	r15, X
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;
    5440:	89 e0       	ldi	r24, 0x09	; 9
    5442:	02 c0       	rjmp	.+4      	; 0x5448 <_ZN5SysEx12sendResponseEPhh+0xe8>

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
            arrayIndex = MS_NEW_PARAMETER_ID_ALL;
    5444:	88 e0       	ldi	r24, 0x08	; 8
        break;

        case WISH_SET:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL) {

            _parameter = 0;
    5446:	f1 2c       	mov	r15, r1
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5448:	ee 20       	and	r14, r14
    544a:	09 f4       	brne	.+2      	; 0x544e <_ZN5SysEx12sendResponseEPhh+0xee>
    544c:	66 c0       	rjmp	.+204    	; 0x551a <_ZN5SysEx12sendResponseEPhh+0x1ba>
    544e:	a8 2e       	mov	r10, r24
    5450:	b1 2c       	mov	r11, r1
    5452:	86 01       	movw	r16, r12
    5454:	0a 0d       	add	r16, r10
    5456:	1b 1d       	adc	r17, r11
    5458:	ae 0c       	add	r10, r14
    545a:	b1 1c       	adc	r11, r1
    545c:	ac 0c       	add	r10, r12
    545e:	bd 1c       	adc	r11, r13

            if (!sendSetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter, sysExArray[arrayIndex+i]))  {
    5460:	f8 01       	movw	r30, r16
    5462:	21 91       	ld	r18, Z+
    5464:	8f 01       	movw	r16, r30
    5466:	d4 01       	movw	r26, r8
    5468:	16 96       	adiw	r26, 0x06	; 6
    546a:	ed 91       	ld	r30, X+
    546c:	fc 91       	ld	r31, X
    546e:	17 97       	sbiw	r26, 0x07	; 7
    5470:	4f 2d       	mov	r20, r15
    5472:	d6 01       	movw	r26, r12
    5474:	17 96       	adiw	r26, 0x07	; 7
    5476:	6c 91       	ld	r22, X
    5478:	17 97       	sbiw	r26, 0x07	; 7
    547a:	16 96       	adiw	r26, 0x06	; 6
    547c:	8c 91       	ld	r24, X
    547e:	09 95       	icall
    5480:	88 23       	and	r24, r24
    5482:	09 f4       	brne	.+2      	; 0x5486 <_ZN5SysEx12sendResponseEPhh+0x126>
    5484:	52 c0       	rjmp	.+164    	; 0x552a <_ZN5SysEx12sendResponseEPhh+0x1ca>
                eepromError = true;
                break;

            }

            _parameter++;
    5486:	f3 94       	inc	r15
            _parameter = sysExArray[MS_PARAMETER_ID];
            arrayIndex = MS_NEW_PARAMETER_ID_SINGLE;

        }

        for (int i=0; i<componentNr; i++)   {
    5488:	0a 15       	cp	r16, r10
    548a:	1b 05       	cpc	r17, r11
    548c:	49 f7       	brne	.-46     	; 0x5460 <_ZN5SysEx12sendResponseEPhh+0x100>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    548e:	44 e0       	ldi	r20, 0x04	; 4
    5490:	47 c0       	rjmp	.+142    	; 0x5520 <_ZN5SysEx12sendResponseEPhh+0x1c0>

}

void SysEx::sendResponse(uint8_t sysExArray[], uint8_t arraySize)  {

    uint8_t componentNr     = 1,
    5492:	ee 24       	eor	r14, r14
    5494:	e3 94       	inc	r14

        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
    5496:	81 30       	cpi	r24, 0x01	; 1
    5498:	19 f0       	breq	.+6      	; 0x54a0 <_ZN5SysEx12sendResponseEPhh+0x140>
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];
    549a:	f6 01       	movw	r30, r12
    549c:	f0 84       	ldd	r15, Z+8	; 0x08
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <_ZN5SysEx12sendResponseEPhh+0x142>
        }   arrayLength = ML_SET_RESTORE;
        break;

        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
    54a0:	f1 2c       	mov	r15, r1
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    54a2:	ae 2c       	mov	r10, r14
    54a4:	b1 2c       	mov	r11, r1
    54a6:	1a 14       	cp	r1, r10
    54a8:	1b 04       	cpc	r1, r11
    54aa:	cc f5       	brge	.+114    	; 0x551e <_ZN5SysEx12sendResponseEPhh+0x1be>
    54ac:	00 e0       	ldi	r16, 0x00	; 0
    54ae:	10 e0       	ldi	r17, 0x00	; 0

            if (!sendResetCallback(sysExArray[MS_BLOCK], sysExArray[MS_SECTION], _parameter))  {
    54b0:	d4 01       	movw	r26, r8
    54b2:	18 96       	adiw	r26, 0x08	; 8
    54b4:	ed 91       	ld	r30, X+
    54b6:	fc 91       	ld	r31, X
    54b8:	19 97       	sbiw	r26, 0x09	; 9
    54ba:	4f 2d       	mov	r20, r15
    54bc:	40 0f       	add	r20, r16
    54be:	d6 01       	movw	r26, r12
    54c0:	17 96       	adiw	r26, 0x07	; 7
    54c2:	6c 91       	ld	r22, X
    54c4:	17 97       	sbiw	r26, 0x07	; 7
    54c6:	16 96       	adiw	r26, 0x06	; 6
    54c8:	8c 91       	ld	r24, X
    54ca:	09 95       	icall
    54cc:	88 23       	and	r24, r24
    54ce:	69 f1       	breq	.+90     	; 0x552a <_ZN5SysEx12sendResponseEPhh+0x1ca>
        case WISH_RESTORE:
        if (sysExArray[MS_AMOUNT] == AMOUNT_ALL)
        _parameter = 0;
        else _parameter = sysExArray[MS_PARAMETER_ID];

        for (int i=0; i<componentNr; i++)   {
    54d0:	0f 5f       	subi	r16, 0xFF	; 255
    54d2:	1f 4f       	sbci	r17, 0xFF	; 255
    54d4:	0a 15       	cp	r16, r10
    54d6:	1b 05       	cpc	r17, r11
    54d8:	59 f7       	brne	.-42     	; 0x54b0 <_ZN5SysEx12sendResponseEPhh+0x150>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    54da:	44 e0       	ldi	r20, 0x04	; 4
    54dc:	21 c0       	rjmp	.+66     	; 0x5520 <_ZN5SysEx12sendResponseEPhh+0x1c0>
        break;

    }

    if (dataAvailable)  {
    54de:	f4 01       	movw	r30, r8
    54e0:	84 85       	ldd	r24, Z+12	; 0x0c
    54e2:	88 23       	and	r24, r24
    54e4:	39 f1       	breq	.+78     	; 0x5534 <_ZN5SysEx12sendResponseEPhh+0x1d4>
    54e6:	40 e0       	ldi	r20, 0x00	; 0

        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
    54e8:	be 01       	movw	r22, r28
    54ea:	6f 5f       	subi	r22, 0xFF	; 255
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	86 e0       	ldi	r24, 0x06	; 6
    54f0:	97 e0       	ldi	r25, 0x07	; 7
    54f2:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN4MIDI9sendSysExEPhh>
    54f6:	1e c0       	rjmp	.+60     	; 0x5534 <_ZN5SysEx12sendResponseEPhh+0x1d4>
        else                sendError(ERROR_EEPROM);
    54f8:	68 e0       	ldi	r22, 0x08	; 8
    54fa:	c4 01       	movw	r24, r8
    54fc:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
    5500:	19 c0       	rjmp	.+50     	; 0x5534 <_ZN5SysEx12sendResponseEPhh+0x1d4>
        componentNr = messageInfo[messageType].subTypeInfo[messageSubtype][PARAMETERS_BYTE];

    }

    //create response based on wanted message type
    switch(sysExArray[MS_WISH]) {
    5502:	db 01       	movw	r26, r22
    5504:	14 96       	adiw	r26, 0x04	; 4
    5506:	9c 91       	ld	r25, X
    5508:	91 30       	cpi	r25, 0x01	; 1
    550a:	09 f4       	brne	.+2      	; 0x550e <_ZN5SysEx12sendResponseEPhh+0x1ae>
    550c:	92 cf       	rjmp	.-220    	; 0x5432 <_ZN5SysEx12sendResponseEPhh+0xd2>
    550e:	08 f4       	brcc	.+2      	; 0x5512 <_ZN5SysEx12sendResponseEPhh+0x1b2>
    5510:	67 cf       	rjmp	.-306    	; 0x53e0 <_ZN5SysEx12sendResponseEPhh+0x80>
    5512:	92 30       	cpi	r25, 0x02	; 2
    5514:	09 f4       	brne	.+2      	; 0x5518 <_ZN5SysEx12sendResponseEPhh+0x1b8>
    5516:	bd cf       	rjmp	.-134    	; 0x5492 <_ZN5SysEx12sendResponseEPhh+0x132>
    5518:	e2 cf       	rjmp	.-60     	; 0x54de <_ZN5SysEx12sendResponseEPhh+0x17e>

            }

            _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    551a:	44 e0       	ldi	r20, 0x04	; 4
    551c:	01 c0       	rjmp	.+2      	; 0x5520 <_ZN5SysEx12sendResponseEPhh+0x1c0>
                eepromError = true;
                break;

            }   _parameter++;

        }   arrayLength = ML_SET_RESTORE;
    551e:	44 e0       	ldi	r20, 0x04	; 4
        break;

    }

    if (dataAvailable)  {
    5520:	f4 01       	movw	r30, r8
    5522:	84 85       	ldd	r24, Z+12	; 0x0c
    5524:	81 11       	cpse	r24, r1
    5526:	e0 cf       	rjmp	.-64     	; 0x54e8 <_ZN5SysEx12sendResponseEPhh+0x188>
    5528:	05 c0       	rjmp	.+10     	; 0x5534 <_ZN5SysEx12sendResponseEPhh+0x1d4>
    552a:	d4 01       	movw	r26, r8
    552c:	1c 96       	adiw	r26, 0x0c	; 12
    552e:	8c 91       	ld	r24, X
    5530:	81 11       	cpse	r24, r1
    5532:	e2 cf       	rjmp	.-60     	; 0x54f8 <_ZN5SysEx12sendResponseEPhh+0x198>
        if (!eepromError)   midi.sendSysEx(sysExResponse, arrayLength);
        else                sendError(ERROR_EEPROM);

    }

}
    5534:	c8 5b       	subi	r28, 0xB8	; 184
    5536:	df 4f       	sbci	r29, 0xFF	; 255
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	de bf       	out	0x3e, r29	; 62
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	cd bf       	out	0x3d, r28	; 61
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ff 90       	pop	r15
    554c:	ef 90       	pop	r14
    554e:	df 90       	pop	r13
    5550:	cf 90       	pop	r12
    5552:	bf 90       	pop	r11
    5554:	af 90       	pop	r10
    5556:	9f 90       	pop	r9
    5558:	8f 90       	pop	r8
    555a:	08 95       	ret

0000555c <_ZN5SysEx11handleSysExEPhh>:

    }   return false;

}

void SysEx::handleSysEx(uint8_t *sysExArray, uint8_t size)    {
    555c:	ff 92       	push	r15
    555e:	0f 93       	push	r16
    5560:	1f 93       	push	r17
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29

    //we have new data
    dataAvailable = true;
    5566:	21 e0       	ldi	r18, 0x01	; 1
    5568:	fc 01       	movw	r30, r24
    556a:	24 87       	std	Z+12, r18	; 0x0c

    //ignore messages shorter than absolute minimum
    if (size < ML_SPECIAL) return;
    556c:	46 30       	cpi	r20, 0x06	; 6
    556e:	40 f1       	brcs	.+80     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>
    //don't respond to sysex message if device ID is wrong
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;
    5570:	fb 01       	movw	r30, r22
    5572:	53 81       	ldd	r21, Z+3	; 0x03
    5574:	32 81       	ldd	r19, Z+2	; 0x02
bool SysEx::checkID(uint8_t firstByte, uint8_t secondByte, uint8_t thirdByte)   {

    return  (

    (firstByte  == SYS_EX_M_ID_0)   &&
    (secondByte == SYS_EX_M_ID_1)   &&
    5576:	21 81       	ldd	r18, Z+1	; 0x01
    5578:	21 11       	cpse	r18, r1
    557a:	22 c0       	rjmp	.+68     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>

bool SysEx::checkID(uint8_t firstByte, uint8_t secondByte, uint8_t thirdByte)   {

    return  (

    (firstByte  == SYS_EX_M_ID_0)   &&
    557c:	33 35       	cpi	r19, 0x53	; 83
    557e:	01 f5       	brne	.+64     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>
    (secondByte == SYS_EX_M_ID_1)   &&
    5580:	53 34       	cpi	r21, 0x43	; 67
    5582:	f1 f4       	brne	.+60     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>
    5584:	16 c0       	rjmp	.+44     	; 0x55b2 <_ZN5SysEx11handleSysExEPhh+0x56>
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;

    if (checkSpecial(sysExArray, size)) return;
    //message appears to be fine for now
    //check if hello message has been received by now
    if (!sysExEnabled) {
    5586:	8a 85       	ldd	r24, Y+10	; 0x0a
    5588:	81 11       	cpse	r24, r1
    558a:	05 c0       	rjmp	.+10     	; 0x5596 <_ZN5SysEx11handleSysExEPhh+0x3a>

        //message is fine, but handshake hasn't been received
        sendError(ERROR_HANDSHAKE);
    558c:	60 e0       	ldi	r22, 0x00	; 0
    558e:	ce 01       	movw	r24, r28
    5590:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <_ZN5SysEx9sendErrorE10sysExError>
        return;
    5594:	15 c0       	rjmp	.+42     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>

    }

    if (!checkMessageValidity(sysExArray, size)) return; //message not valid
    5596:	4f 2d       	mov	r20, r15
    5598:	b8 01       	movw	r22, r16
    559a:	ce 01       	movw	r24, r28
    559c:	0e 94 90 28 	call	0x5120	; 0x5120 <_ZN5SysEx20checkMessageValidityEPhh>
    55a0:	88 23       	and	r24, r24
    55a2:	71 f0       	breq	.+28     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>
        sendResponse(sysExArray, size);
    55a4:	4f 2d       	mov	r20, r15
    55a6:	b8 01       	movw	r22, r16
    55a8:	ce 01       	movw	r24, r28
    55aa:	0e 94 b0 29 	call	0x5360	; 0x5360 <_ZN5SysEx12sendResponseEPhh>

    //data is processed
    dataAvailable = false;
    55ae:	1c 86       	std	Y+12, r1	; 0x0c
    55b0:	07 c0       	rjmp	.+14     	; 0x55c0 <_ZN5SysEx11handleSysExEPhh+0x64>
    55b2:	f4 2e       	mov	r15, r20
    55b4:	8b 01       	movw	r16, r22
    55b6:	ec 01       	movw	r28, r24
    //ignore messages shorter than absolute minimum
    if (size < ML_SPECIAL) return;
    //don't respond to sysex message if device ID is wrong
    if (!checkID(sysExArray[MS_M_ID_0], sysExArray[MS_M_ID_1], sysExArray[MS_M_ID_2])) return;

    if (checkSpecial(sysExArray, size)) return;
    55b8:	0e 94 65 29 	call	0x52ca	; 0x52ca <_ZN5SysEx12checkSpecialEPhh>
    55bc:	88 23       	and	r24, r24
    55be:	19 f3       	breq	.-58     	; 0x5586 <_ZN5SysEx11handleSysExEPhh+0x2a>
        sendResponse(sysExArray, size);

    //data is processed
    dataAvailable = false;

}
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	1f 91       	pop	r17
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	08 95       	ret

000055cc <_ZN5SysEx15setHandleRebootEPFvvE>:

//callbacks

void SysEx::setHandleReboot(void (*fptr)(void)) {

    sendRebootCallback = fptr;
    55cc:	fc 01       	movw	r30, r24
    55ce:	71 83       	std	Z+1, r23	; 0x01
    55d0:	60 83       	st	Z, r22
    55d2:	08 95       	ret

000055d4 <_ZN5SysEx21setHandleFactoryResetEPFvvE>:

}

void SysEx::setHandleFactoryReset(void (*fptr)(void))   {

    sendFactoryResetCallback = fptr;
    55d4:	fc 01       	movw	r30, r24
    55d6:	73 83       	std	Z+3, r23	; 0x03
    55d8:	62 83       	std	Z+2, r22	; 0x02
    55da:	08 95       	ret

000055dc <_ZN5SysEx12setHandleGetEPFhhhhE>:

}

void SysEx::setHandleGet(uint8_t(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendGetCallback = fptr;
    55dc:	fc 01       	movw	r30, r24
    55de:	75 83       	std	Z+5, r23	; 0x05
    55e0:	64 83       	std	Z+4, r22	; 0x04
    55e2:	08 95       	ret

000055e4 <_ZN5SysEx12setHandleSetEPFbhhhhE>:

}

void SysEx::setHandleSet(bool(*fptr)(uint8_t messageType, uint8_t messageSubType, uint8_t parameterID, uint8_t newParameterID))    {

    sendSetCallback = fptr;
    55e4:	fc 01       	movw	r30, r24
    55e6:	77 83       	std	Z+7, r23	; 0x07
    55e8:	66 83       	std	Z+6, r22	; 0x06
    55ea:	08 95       	ret

000055ec <_ZN5SysEx14setHandleResetEPFbhhhE>:

}

void SysEx::setHandleReset(bool(*fptr)(uint8_t messageID, uint8_t messageSubtype, uint8_t parameter))    {

    sendResetCallback = fptr;
    55ec:	fc 01       	movw	r30, r24
    55ee:	71 87       	std	Z+9, r23	; 0x09
    55f0:	60 87       	std	Z+8, r22	; 0x08
    55f2:	08 95       	ret

000055f4 <_ZN5SysEx20configurationEnabledEv>:

bool SysEx::configurationEnabled()  {

    return sysExEnabled;

}
    55f4:	fc 01       	movw	r30, r24
    55f6:	82 85       	ldd	r24, Z+10	; 0x0a
    55f8:	08 95       	ret

000055fa <_GLOBAL__sub_I__ZN5SysExC2Ev>:

SysEx sysEx;
    55fa:	8b e0       	ldi	r24, 0x0B	; 11
    55fc:	97 e0       	ldi	r25, 0x07	; 7
    55fe:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <_ZN5SysExC1Ev>
    5602:	08 95       	ret

00005604 <__divmodhi4>:
    5604:	97 fb       	bst	r25, 7
    5606:	07 2e       	mov	r0, r23
    5608:	16 f4       	brtc	.+4      	; 0x560e <__divmodhi4+0xa>
    560a:	00 94       	com	r0
    560c:	07 d0       	rcall	.+14     	; 0x561c <__divmodhi4_neg1>
    560e:	77 fd       	sbrc	r23, 7
    5610:	09 d0       	rcall	.+18     	; 0x5624 <__divmodhi4_neg2>
    5612:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__udivmodhi4>
    5616:	07 fc       	sbrc	r0, 7
    5618:	05 d0       	rcall	.+10     	; 0x5624 <__divmodhi4_neg2>
    561a:	3e f4       	brtc	.+14     	; 0x562a <__divmodhi4_exit>

0000561c <__divmodhi4_neg1>:
    561c:	90 95       	com	r25
    561e:	81 95       	neg	r24
    5620:	9f 4f       	sbci	r25, 0xFF	; 255
    5622:	08 95       	ret

00005624 <__divmodhi4_neg2>:
    5624:	70 95       	com	r23
    5626:	61 95       	neg	r22
    5628:	7f 4f       	sbci	r23, 0xFF	; 255

0000562a <__divmodhi4_exit>:
    562a:	08 95       	ret

0000562c <__udivmodsi4>:
    562c:	a1 e2       	ldi	r26, 0x21	; 33
    562e:	1a 2e       	mov	r1, r26
    5630:	aa 1b       	sub	r26, r26
    5632:	bb 1b       	sub	r27, r27
    5634:	fd 01       	movw	r30, r26
    5636:	0d c0       	rjmp	.+26     	; 0x5652 <__udivmodsi4_ep>

00005638 <__udivmodsi4_loop>:
    5638:	aa 1f       	adc	r26, r26
    563a:	bb 1f       	adc	r27, r27
    563c:	ee 1f       	adc	r30, r30
    563e:	ff 1f       	adc	r31, r31
    5640:	a2 17       	cp	r26, r18
    5642:	b3 07       	cpc	r27, r19
    5644:	e4 07       	cpc	r30, r20
    5646:	f5 07       	cpc	r31, r21
    5648:	20 f0       	brcs	.+8      	; 0x5652 <__udivmodsi4_ep>
    564a:	a2 1b       	sub	r26, r18
    564c:	b3 0b       	sbc	r27, r19
    564e:	e4 0b       	sbc	r30, r20
    5650:	f5 0b       	sbc	r31, r21

00005652 <__udivmodsi4_ep>:
    5652:	66 1f       	adc	r22, r22
    5654:	77 1f       	adc	r23, r23
    5656:	88 1f       	adc	r24, r24
    5658:	99 1f       	adc	r25, r25
    565a:	1a 94       	dec	r1
    565c:	69 f7       	brne	.-38     	; 0x5638 <__udivmodsi4_loop>
    565e:	60 95       	com	r22
    5660:	70 95       	com	r23
    5662:	80 95       	com	r24
    5664:	90 95       	com	r25
    5666:	9b 01       	movw	r18, r22
    5668:	ac 01       	movw	r20, r24
    566a:	bd 01       	movw	r22, r26
    566c:	cf 01       	movw	r24, r30
    566e:	08 95       	ret

00005670 <__tablejump2__>:
    5670:	ee 0f       	add	r30, r30
    5672:	ff 1f       	adc	r31, r31
    5674:	05 90       	lpm	r0, Z+
    5676:	f4 91       	lpm	r31, Z
    5678:	e0 2d       	mov	r30, r0
    567a:	09 94       	ijmp

0000567c <__ashldi3>:
    567c:	0f 93       	push	r16
    567e:	08 30       	cpi	r16, 0x08	; 8
    5680:	90 f0       	brcs	.+36     	; 0x56a6 <__ashldi3+0x2a>
    5682:	98 2f       	mov	r25, r24
    5684:	87 2f       	mov	r24, r23
    5686:	76 2f       	mov	r23, r22
    5688:	65 2f       	mov	r22, r21
    568a:	54 2f       	mov	r21, r20
    568c:	43 2f       	mov	r20, r19
    568e:	32 2f       	mov	r19, r18
    5690:	22 27       	eor	r18, r18
    5692:	08 50       	subi	r16, 0x08	; 8
    5694:	f4 cf       	rjmp	.-24     	; 0x567e <__ashldi3+0x2>
    5696:	22 0f       	add	r18, r18
    5698:	33 1f       	adc	r19, r19
    569a:	44 1f       	adc	r20, r20
    569c:	55 1f       	adc	r21, r21
    569e:	66 1f       	adc	r22, r22
    56a0:	77 1f       	adc	r23, r23
    56a2:	88 1f       	adc	r24, r24
    56a4:	99 1f       	adc	r25, r25
    56a6:	0a 95       	dec	r16
    56a8:	b2 f7       	brpl	.-20     	; 0x5696 <__ashldi3+0x1a>
    56aa:	0f 91       	pop	r16
    56ac:	08 95       	ret

000056ae <__ashrdi3>:
    56ae:	97 fb       	bst	r25, 7
    56b0:	10 f8       	bld	r1, 0

000056b2 <__lshrdi3>:
    56b2:	16 94       	lsr	r1
    56b4:	00 08       	sbc	r0, r0
    56b6:	0f 93       	push	r16
    56b8:	08 30       	cpi	r16, 0x08	; 8
    56ba:	98 f0       	brcs	.+38     	; 0x56e2 <__lshrdi3+0x30>
    56bc:	08 50       	subi	r16, 0x08	; 8
    56be:	23 2f       	mov	r18, r19
    56c0:	34 2f       	mov	r19, r20
    56c2:	45 2f       	mov	r20, r21
    56c4:	56 2f       	mov	r21, r22
    56c6:	67 2f       	mov	r22, r23
    56c8:	78 2f       	mov	r23, r24
    56ca:	89 2f       	mov	r24, r25
    56cc:	90 2d       	mov	r25, r0
    56ce:	f4 cf       	rjmp	.-24     	; 0x56b8 <__lshrdi3+0x6>
    56d0:	05 94       	asr	r0
    56d2:	97 95       	ror	r25
    56d4:	87 95       	ror	r24
    56d6:	77 95       	ror	r23
    56d8:	67 95       	ror	r22
    56da:	57 95       	ror	r21
    56dc:	47 95       	ror	r20
    56de:	37 95       	ror	r19
    56e0:	27 95       	ror	r18
    56e2:	0a 95       	dec	r16
    56e4:	aa f7       	brpl	.-22     	; 0x56d0 <__lshrdi3+0x1e>
    56e6:	0f 91       	pop	r16
    56e8:	08 95       	ret

000056ea <__udivmodhi4>:
    56ea:	aa 1b       	sub	r26, r26
    56ec:	bb 1b       	sub	r27, r27
    56ee:	51 e1       	ldi	r21, 0x11	; 17
    56f0:	07 c0       	rjmp	.+14     	; 0x5700 <__udivmodhi4_ep>

000056f2 <__udivmodhi4_loop>:
    56f2:	aa 1f       	adc	r26, r26
    56f4:	bb 1f       	adc	r27, r27
    56f6:	a6 17       	cp	r26, r22
    56f8:	b7 07       	cpc	r27, r23
    56fa:	10 f0       	brcs	.+4      	; 0x5700 <__udivmodhi4_ep>
    56fc:	a6 1b       	sub	r26, r22
    56fe:	b7 0b       	sbc	r27, r23

00005700 <__udivmodhi4_ep>:
    5700:	88 1f       	adc	r24, r24
    5702:	99 1f       	adc	r25, r25
    5704:	5a 95       	dec	r21
    5706:	a9 f7       	brne	.-22     	; 0x56f2 <__udivmodhi4_loop>
    5708:	80 95       	com	r24
    570a:	90 95       	com	r25
    570c:	bc 01       	movw	r22, r24
    570e:	cd 01       	movw	r24, r26
    5710:	08 95       	ret

00005712 <eeprom_read_byte>:
    5712:	f9 99       	sbic	0x1f, 1	; 31
    5714:	fe cf       	rjmp	.-4      	; 0x5712 <eeprom_read_byte>
    5716:	92 bd       	out	0x22, r25	; 34
    5718:	81 bd       	out	0x21, r24	; 33
    571a:	f8 9a       	sbi	0x1f, 0	; 31
    571c:	99 27       	eor	r25, r25
    571e:	80 b5       	in	r24, 0x20	; 32
    5720:	08 95       	ret

00005722 <eeprom_update_byte>:
    5722:	26 2f       	mov	r18, r22

00005724 <eeprom_update_r18>:
    5724:	f9 99       	sbic	0x1f, 1	; 31
    5726:	fe cf       	rjmp	.-4      	; 0x5724 <eeprom_update_r18>
    5728:	92 bd       	out	0x22, r25	; 34
    572a:	81 bd       	out	0x21, r24	; 33
    572c:	f8 9a       	sbi	0x1f, 0	; 31
    572e:	01 97       	sbiw	r24, 0x01	; 1
    5730:	00 b4       	in	r0, 0x20	; 32
    5732:	02 16       	cp	r0, r18
    5734:	39 f0       	breq	.+14     	; 0x5744 <eeprom_update_r18+0x20>
    5736:	1f ba       	out	0x1f, r1	; 31
    5738:	20 bd       	out	0x20, r18	; 32
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	fa 9a       	sbi	0x1f, 2	; 31
    5740:	f9 9a       	sbi	0x1f, 1	; 31
    5742:	0f be       	out	0x3f, r0	; 63
    5744:	08 95       	ret

00005746 <_exit>:
    5746:	f8 94       	cli

00005748 <__stop_program>:
    5748:	ff cf       	rjmp	.-2      	; 0x5748 <__stop_program>
